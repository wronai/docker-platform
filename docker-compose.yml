# docker-compose.yml - Media Vault Main Stack
version: '3.8'

services:
  # Keycloak Database
  keycloak-db:
    image: postgres:15
    container_name: keycloak-db
    env_file:
      - ./keycloak/.env
    volumes:
      - keycloak_db_data:/var/lib/postgresql/data
      - ./scripts/backup:/backup-scripts
    restart: unless-stopped
    networks:
      - media-vault-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Keycloak Identity Provider using Bitnami image
  keycloak:
    image: bitnami/keycloak:26.2.5
    container_name: keycloak
    env_file:
      - ./keycloak/.env
      
    ports:
      - "${KEYCLOAK_HTTP_PORT:-8082}:8080"
      - "${KEYCLOAK_HTTPS_PORT:-8445}:8443"
    depends_on:
      keycloak-db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - media-vault-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    volumes:
      - ./keycloak/themes:/opt/bitnami/keycloak/themes
      - ./keycloak/import:/opt/bitnami/keycloak/data/import
      - keycloak_data:/bitnami/keycloak

  # Media Vault API Backend
  media-vault-api:
    build:
      context: ./media-vault-backend
      dockerfile: Dockerfile
    container_name: media-vault-api
    ports:
      - "${API_PORT:-8080}:8080"
    volumes:
      - ./data:/data
      - ./uploads:/uploads
      - ./processing:/processing
    env_file:
      - ./media-vault-backend/.env
    depends_on:
      keycloak:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - media-vault-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      timeout: 5s
      retries: 5
      start_period: 10s

  # Media Vault Analyzer (AI Processing)
  media-vault-analyzer:
    build:
      context: ./media-vault-analyzer
      dockerfile: Dockerfile
    container_name: media-vault-analyzer
    env_file:
      - ./media-vault-analyzer/.env
    volumes:
      - ./uploads:/uploads
      - ./processing:/processing
      - ./models:/models
    depends_on:
      - media-vault-api
      - keycloak
    restart: unless-stopped
    networks:
      - media-vault-network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # NSFW Content Detection Service
  nsfw-analyzer:
    build:
      context: ./nsfw-analyzer
      dockerfile: Dockerfile
    container_name: nsfw-analyzer
    ports:
      - "${NSFW_PORT:-8501}:8501"
    env_file:
      - ./nsfw-analyzer/.env
    volumes:
      - ./models:/models
      - ./uploads:/uploads:ro
    depends_on:
      - media-vault-api
      - keycloak
    restart: unless-stopped
    networks:
      - media-vault-network
    deploy:
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 2G
    profiles:
      - full

  # Flutter Web Frontend
  flutter-web:
    build:
      context: ./flutter_frontend
      dockerfile: Dockerfile.web
    container_name: flutter-web
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    env_file:
      - ./flutter_frontend/.env
    depends_on:
      - media-vault-api
      - keycloak
    restart: unless-stopped
    networks:
      - media-vault-network

  # Admin Panel (Traditional Web Interface)
  media-vault-admin:
    build:
      context: ./media-vault-admin
      dockerfile: Dockerfile
    container_name: media-vault-admin
    env_file:
      - ./media-vault-admin/.env
    ports:
      - "${ADMIN_PORT:-3001}:80"
    depends_on:
      - media-vault-api
      - keycloak
    restart: unless-stopped
    networks:
      - media-vault-network

  # Caddy Reverse Proxy
  caddy:
    image: caddy:2-alpine
    container_name: caddy-proxy
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    env_file:
      - ./caddy/.env
    depends_on:
      - media-vault-api
      - flutter-web
      - media-vault-admin
      - keycloak
    restart: unless-stopped
    networks:
      - media-vault-network

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - media-vault-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  caddy_data:
    driver: local
  caddy_config:
    driver: local
  keycloak_data:
    driver: local
  keycloak_db_data:
    driver: local
  redis_data:
    driver: local

networks:
  media-vault-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

