# docker-compose.yml - Media Vault Main Stack
version: '3.8'

services:
  # Keycloak Database
  keycloak-db:
    image: postgres:15
    container_name: keycloak-db
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD:-keycloak_password}
    volumes:
      - keycloak_db_data:/var/lib/postgresql/data
      - ./scripts/backup:/backup-scripts
    restart: unless-stopped
    networks:
      - media-vault-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Keycloak Identity Provider
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: keycloak
    environment:
      # Database
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD:-keycloak_password}

      # Admin user
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USER:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin123}

      # Production settings
      KC_HOSTNAME: ${KC_HOSTNAME:-localhost}
      KC_HOSTNAME_PORT: ${KC_HOSTNAME_PORT:-8443}
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT: false

      # Performance
      KC_DB_POOL_INITIAL_SIZE: 5
      KC_DB_POOL_MAX_SIZE: 20

      # Metrics
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
    ports:
      - "${KEYCLOAK_PORT:-8443}:8080"
    depends_on:
      keycloak-db:
        condition: service_healthy
    command: ["start-dev"]
    restart: unless-stopped
    networks:
      - media-vault-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - ./keycloak/themes:/opt/keycloak/themes

  # Media Vault API Backend
  media-vault-api:
    build:
      context: ./media-vault-backend
      dockerfile: Dockerfile
    container_name: media-vault-api
    ports:
      - "${API_PORT:-8080}:8080"
    volumes:
      - ./data:/data
      - ./uploads:/uploads
      - ./processing:/processing
    environment:
      # Database
      - DATABASE_PATH=/data/media.db
      - UPLOAD_PATH=/uploads
      - PROCESSING_PATH=/processing
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-100MB}
      - ALLOWED_TYPES=jpg,jpeg,png,gif,mp4,mov,avi,pdf,webp,heic

      # CORS
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:8000,http://localhost}

      # Vault Configuration
      - VAULT_NAME=${VAULT_NAME:-MediaVault}
      - VAULT_VERSION=1.0.0
      - VAULT_DESCRIPTION="Secure Media Storage with AI Analysis"

      # Keycloak OAuth2 Settings
      - KEYCLOAK_URL=http://keycloak:8080
      - KEYCLOAK_REALM=${KEYCLOAK_REALM:-media-vault}
      - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID:-media-vault-api}
      - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET:-vault-api-secret-123}
      - JWT_ISSUER=http://localhost:8443/realms/${KEYCLOAK_REALM:-media-vault}
      - JWT_AUDIENCE=media-vault-api
      - OAUTH2_ENABLED=${OAUTH2_ENABLED:-true}

      # AI Services
      - AI_DESCRIPTION_ENABLED=${AI_DESCRIPTION_ENABLED:-true}
      - NSFW_DETECTION_ENABLED=${NSFW_DETECTION_ENABLED:-true}
      - NSFW_SERVICE_URL=http://nsfw-analyzer:8501

      # Performance
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - DEBUG=${DEBUG:-false}

      # Metrics
      - METRICS_ENABLED=true
      - PROMETHEUS_PORT=9090
    depends_on:
      keycloak:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - media-vault-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      timeout: 5s
      retries: 5
      start_period: 10s

  # Media Vault Analyzer (AI Processing)
  media-vault-analyzer:
    build:
      context: ./media-vault-analyzer
      dockerfile: Dockerfile
    container_name: media-vault-analyzer
    environment:
      - API_URL=http://media-vault-api:8080
      - PROCESSING_PATH=/processing
      - OUTPUT_PATH=/uploads
      - KEYCLOAK_URL=http://keycloak:8080
      - KEYCLOAK_REALM=${KEYCLOAK_REALM:-media-vault}
      - SERVICE_ACCOUNT_CLIENT_ID=analyzer-service
      - SERVICE_ACCOUNT_SECRET=${ANALYZER_SERVICE_SECRET:-analyzer-secret-123}
      - AI_MODEL_PATH=/models
      - BATCH_SIZE=${AI_BATCH_SIZE:-10}
      - DESCRIPTION_LANGUAGE=${DESCRIPTION_LANGUAGE:-en}
    volumes:
      - ./uploads:/uploads
      - ./processing:/processing
      - ./models:/models
    depends_on:
      - media-vault-api
      - keycloak
    restart: unless-stopped
    networks:
      - media-vault-network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # NSFW Content Detection Service
  nsfw-analyzer:
    build:
      context: ./nsfw-analyzer
      dockerfile: Dockerfile
    container_name: nsfw-analyzer
    ports:
      - "${NSFW_PORT:-8501}:8501"
    environment:
      - MODEL_PATH=/models
      - API_URL=http://media-vault-api:8080
      - KEYCLOAK_URL=http://keycloak:8080
      - KEYCLOAK_REALM=${KEYCLOAK_REALM:-media-vault}
      - SERVICE_ACCOUNT_CLIENT_ID=nsfw-service
      - SERVICE_ACCOUNT_SECRET=${NSFW_SERVICE_SECRET:-nsfw-secret-123}
      - CONFIDENCE_THRESHOLD=${NSFW_THRESHOLD:-0.8}
    volumes:
      - ./models:/models
      - ./uploads:/uploads:ro
    depends_on:
      - media-vault-api
      - keycloak
    restart: unless-stopped
    networks:
      - media-vault-network
    deploy:
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 2G
    profiles:
      - full

  # Flutter Web Frontend
  flutter-web:
    build:
      context: ./flutter_frontend
      dockerfile: Dockerfile.web
    container_name: flutter-web
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    environment:
      - API_BASE_URL=http://localhost:${API_PORT:-8080}
      - KEYCLOAK_URL=http://localhost:${KEYCLOAK_PORT:-8443}
      - KEYCLOAK_REALM=${KEYCLOAK_REALM:-media-vault}
      - KEYCLOAK_CLIENT_ID=media-vault-frontend
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - FEATURE_AI_DESCRIPTIONS=${AI_DESCRIPTION_ENABLED:-true}
      - FEATURE_BULK_UPLOAD=${BULK_UPLOAD_ENABLED:-true}
      - FEATURE_PHOTO_SHARING=${PHOTO_SHARING_ENABLED:-true}
    depends_on:
      - media-vault-api
      - keycloak
    restart: unless-stopped
    networks:
      - media-vault-network

  # Admin Panel (Traditional Web Interface)
  media-vault-admin:
    build:
      context: ./media-vault-admin
      dockerfile: Dockerfile
    container_name: media-vault-admin
    ports:
      - "${ADMIN_PORT:-3001}:80"
    environment:
      - API_URL=http://media-vault-api:8080
      - VAULT_TITLE=Media Vault Administration
      - KEYCLOAK_URL=http://localhost:${KEYCLOAK_PORT:-8443}
      - KEYCLOAK_REALM=${KEYCLOAK_REALM:-media-vault}
      - KEYCLOAK_CLIENT_ID=media-vault-admin
      - ADMIN_ROLE=vault-admin
      - MONITORING_GRAFANA_URL=http://localhost:3333
      - MONITORING_PROMETHEUS_URL=http://localhost:9090
    depends_on:
      - media-vault-api
      - keycloak
    restart: unless-stopped
    networks:
      - media-vault-network

  # Caddy Reverse Proxy
  caddy:
    image: caddy:2-alpine
    container_name: caddy-proxy
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    environment:
      - DOMAIN=${DOMAIN:-localhost}
      - API_SERVICE=media-vault-api:8080
      - FRONTEND_SERVICE=flutter-web:80
      - ADMIN_SERVICE=media-vault-admin:80
      - KEYCLOAK_SERVICE=keycloak:8080
    depends_on:
      - media-vault-api
      - flutter-web
      - media-vault-admin
      - keycloak
    restart: unless-stopped
    networks:
      - media-vault-network

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - media-vault-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  caddy_data:
    driver: local
  caddy_config:
    driver: local
  keycloak_db_data:
    driver: local
  redis_data:
    driver: local

networks:
  media-vault-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

---
