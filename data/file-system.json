{
  "name": "docker-platform",
  "type": "directory",
  "path": ".",
  "children": [
    {
      "name": "ansible",
      "type": "directory",
      "path": "ansible",
      "children": [
        {
          "name": "group_vars",
          "type": "directory",
          "path": "ansible/group_vars",
          "children": [
            {
              "name": "all.yml",
              "type": "file",
              "path": "ansible/group_vars/all.yml",
              "size": 2559,
              "content": "---\n# Docker Compose project settings\ndocker_compose_project_name: media-vault\ndocker_compose_file: ../docker-compose.yml\n\n# Service ports\nservice_ports:\n  keycloak: 8443\n  media_vault_api: 8080\n  nsfw_analyzer: 8501\n  flutter_web: 3000\n  admin_panel: 3001\n  caddy: 80\n\n# Expected service statuses\nexpected_services:\n  - name: keycloak-db\n    image: postgres:15\n    state: running\n    ports: []\n    healthcheck: true\n    depends_on: []\n\n  - name: keycloak\n    image: quay.io/keycloak/keycloak:23.0\n    state: running\n    ports:\n      - \"{{ service_ports.keycloak }}:8080\"\n    healthcheck: true\n    depends_on:\n      - keycloak-db\n\n  - name: media-vault-api\n    image: media-vault-api:latest\n    state: running\n    ports:\n      - \"{{ service_ports.media_vault_api }}:8080\"\n    healthcheck: true\n    depends_on:\n      - keycloak\n\n  - name: media-vault-analyzer\n    image: media-vault-analyzer:latest\n    state: running\n    ports: []\n    healthcheck: false\n    depends_on:\n      - media-vault-api\n      - keycloak\n\n  - name: nsfw-analyzer\n    image: nsfw-analyzer:latest\n    state: running\n    ports:\n      - \"{{ service_ports.nsfw_analyzer }}:8501\"\n    healthcheck: false\n    depends_on:\n      - media-vault-api\n      - keycloak\n    profiles:\n      - full\n\n  - name: flutter-web\n    image: flutter-web:latest\n    state: running\n    ports:\n      - \"{{ service_ports.flutter_web }}:80\"\n    healthcheck: false\n    depends_on:\n      - media-vault-api\n      - keycloak\n\n  - name: media-vault-admin\n    image: media-vault-admin:latest\n    state: running\n    ports:\n      - \"{{ service_ports.admin_panel }}:80\"\n    healthcheck: false\n    depends_on:\n      - media-vault-api\n      - keycloak\n\n  - name: caddy-proxy\n    image: caddy:2-alpine\n    state: running\n    ports:\n      - \"{{ service_ports.caddy }}:80\"\n      - \"443:443\"\n    healthcheck: false\n    depends_on:\n      - media-vault-api\n      - flutter-web\n      - media-vault-admin\n\n# Health check endpoints\nhealth_checks:\n  keycloak:\n    url: \"https://localhost:{{ service_ports.keycloak }}/realms/master/.well-known/openid-configuration\"\n    validate_certs: no\n    status_code: 200\n    \n  media_vault_api:\n    url: \"http://localhost:{{ service_ports.media_vault_api }}/health\"\n    status_code: 200\n    \n  nsfw_analyzer:\n    url: \"http://localhost:{{ service_ports.nsfw_analyzer }}/health\"\n    status_code: 200\n    \n  flutter_web:\n    url: \"http://localhost:{{ service_ports.flutter_web }}\"\n    status_code: 200\n    \n  admin_panel:\n    url: \"http://localhost:{{ service_ports.admin_panel }}\"\n    status_code: 200\n"
            }
          ]
        },
        {
          "name": "roles",
          "type": "directory",
          "path": "ansible/roles",
          "children": [
            {
              "name": "docker_services",
              "type": "directory",
              "path": "ansible/roles/docker_services",
              "children": [
                {
                  "name": "tasks",
                  "type": "directory",
                  "path": "ansible/roles/docker_services/tasks",
                  "children": [
                    {
                      "name": "main.yml",
                      "type": "file",
                      "path": "ansible/roles/docker_services/tasks/main.yml",
                      "size": 1406,
                      "content": "---\n- name: Install required Python packages\n  ansible.builtin.pip:\n    name:\n      - docker\n      - docker-compose\n    state: present\n\n- name: Ensure Docker Compose is running\n  ansible.builtin.service:\n    name: docker\n    state: started\n    enabled: yes\n\n- name: Check if Docker Compose is installed\n  ansible.builtin.command: docker-compose --version\n  register: docker_compose_version\n  changed_when: false\n  check_mode: no\n  tags: docker_compose\n\n- name: Fail if Docker Compose is not installed\n  ansible.builtin.fail:\n    msg: \"Docker Compose is required but not installed\"\n  when: docker_compose_version.rc != 0\n\n- name: Verify Docker Compose file exists\n  ansible.builtin.stat:\n    path: \"{{ docker_compose_file }}\"\n  register: compose_file_stat\n  tags: docker_compose\n\n- name: Fail if Docker Compose file doesn't exist\n  ansible.builtin.fail:\n    msg: \"Docker Compose file not found at {{ docker_compose_file }}\"\n  when: not compose_file_stat.stat.exists\n\n- name: Parse Docker Compose file\n  ansible.builtin.include_tasks: parse_compose.yml\n  tags: docker_compose\n\n- name: Verify services are running\n  ansible.builtin.include_tasks: verify_services.yml\n  tags: services\n\n- name: Test service health checks\n  ansible.builtin.include_tasks: test_health_checks.yml\n  tags: health_checks\n\n- name: Test service connectivity\n  ansible.builtin.include_tasks: test_connectivity.yml\n  tags: connectivity\n"
                    },
                    {
                      "name": "parse_compose.yml",
                      "type": "file",
                      "path": "ansible/roles/docker_services/tasks/parse_compose.yml",
                      "size": 577,
                      "content": "---\n- name: Parse Docker Compose file\n  community.docker.docker_compose:\n    project_src: \"{{ docker_compose_file | dirname }}\"\n    project_name: \"{{ docker_compose_project_name }}\"\n    state: present\n  register: docker_compose_info\n  tags: docker_compose\n\n- name: Set fact for running services\n  ansible.builtin.set_fact:\n    running_services: \"{% raw %}{{ docker_compose_info.services | default([]) }}{% endraw %}\"\n  tags: docker_compose\n\n- name: Debug running services\n  ansible.builtin.debug:\n    var: running_services\n  when: debug | default(false)\n  tags: docker_compose\n"
                    },
                    {
                      "name": "test_connectivity.yml",
                      "type": "file",
                      "path": "ansible/roles/docker_services/tasks/test_connectivity.yml",
                      "size": 680,
                      "content": "---\n- name: Test service connectivity\n  ansible.builtin.shell: |\n    # Test basic TCP connectivity to service ports\n    for port in {% raw %}{{ service_ports | dict2items | map(attribute='value') | list | join(' ') }}{% endraw %}; do\n      echo -n \"Testing port $port... \"\n      if nc -z -w 2 localhost $port; then\n        echo \"✅ OPEN\"\n      else\n        echo \"❌ CLOSED\"\n        exit 1\n      fi\n    done\n  args:\n    executable: /bin/bash\n  register: port_check\n  ignore_errors: yes\n  changed_when: false\n  tags: connectivity\n\n- name: Show port check results\n  ansible.builtin.debug:\n    msg: \"{{ port_check.stdout_lines }}\"\n  when: port_check is defined\n  tags: connectivity\n"
                    },
                    {
                      "name": "test_health_checks.yml",
                      "type": "file",
                      "path": "ansible/roles/docker_services/tasks/test_health_checks.yml",
                      "size": 946,
                      "content": "---\n- name: Test health check endpoints\n  ansible.builtin.uri:\n    url: \"{{ item.value.url }}\"\n    method: GET\n    validate_certs: \"{{ item.value.validate_certs | default(omit) }}\"\n    status_code: \"{{ item.value.status_code | default(200) }}\n    return_content: yes\n    timeout: 10\n  register: health_check_result\n  loop: \"{{ health_checks | dict2items }}\n  loop_control:\n    label: \"{{ item.key }}\"\n  ignore_errors: yes\n  changed_when: false\n  tags: health_checks\n\n- name: Show health check results\n  ansible.builtin.debug:\n    msg: |\n      Service: {{ item.item.key }}\n      URL: {{ item.item.value.url }}\n      Status: {{ '✅ PASSED' if item.status == 200 else '❌ FAILED' }}\n      Response Code: {{ item.status | default('N/A') }}\n      Response: {{ item.content | default('N/A') | regex_replace('\\n', '') | truncate(100) }}\n  loop: \"{{ health_check_result.results }}\n  loop_control:\n    label: \"{{ item.item.key }}\"\n  tags: health_checks\n"
                    },
                    {
                      "name": "verify_dependencies.yml",
                      "type": "file",
                      "path": "ansible/roles/docker_services/tasks/verify_dependencies.yml",
                      "size": 709,
                      "content": "---\n- name: Check dependencies for {{ service.name }}\n  ansible.builtin.assert:\n    that:\n      - dependency in running_services\n      - running_services[dependency].state == 'running'\n      - running_services[dependency].health is defined\n      - running_services[dependency].health is not match('unhealthy')\n    success_msg: \"✅ {{ service.name }} dependency {{ dependency }} is running and healthy\"\n    fail_msg: |\n      ❌ {{ service.name }} dependency {{ dependency }} is not running or healthy.\n      Status: {{ running_services[dependency] | default('Dependency not found') }}\n  loop: \"{{ service.depends_on }}\"\n  loop_control:\n    loop_var: dependency\n    label: \"{{ dependency }}\"\n  tags: services\n"
                    },
                    {
                      "name": "verify_service.yml",
                      "type": "file",
                      "path": "ansible/roles/docker_services/tasks/verify_service.yml",
                      "size": 618,
                      "content": "---\n- name: Check if {{ service.name }} is running\n  ansible.builtin.assert:\n    that:\n      - service.name in running_services\n      - running_services[service.name].state == service.state | default('running')\n      - running_services[service.name].image == service.image\n    success_msg: \"✅ {{ service.name }} is running with image {{ service.image }}\"\n    fail_msg: |\n      ❌ {{ service.name }} is not running as expected.\n      Expected: image={{ service.image }}, state={{ service.state | default('running') }}\n      Found: {{ running_services[service.name] | default('Service not found') }}\n  tags: services\n"
                    },
                    {
                      "name": "verify_services.yml",
                      "type": "file",
                      "path": "ansible/roles/docker_services/tasks/verify_services.yml",
                      "size": 429,
                      "content": "---\n- name: Check if expected services are running\n  ansible.builtin.include_tasks: verify_service.yml\n  loop: \"{{ expected_services }}\"\n  loop_control:\n    loop_var: service\n  tags: services\n\n- name: Verify service dependencies\n  ansible.builtin.include_tasks: verify_dependencies.yml\n  loop: \"{{ expected_services }}\"\n  loop_control:\n    loop_var: service\n  when: service.depends_on | default([]) | length > 0\n  tags: services\n"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "playbook.yml",
          "type": "file",
          "path": "ansible/playbook.yml",
          "size": 228,
          "content": "---\n- name: Test Docker Compose Services\n  hosts: localhost\n  connection: local\n  gather_facts: yes\n  become: yes\n  vars_files:\n    - group_vars/all.yml\n\n  roles:\n    - role: docker_services\n      tags: [docker, services, test]\n"
        },
        {
          "name": "README.md",
          "type": "file",
          "path": "ansible/README.md",
          "size": 2660,
          "content": "# Docker Compose Service Tests with Ansible\n\nThis directory contains Ansible playbooks and roles to test the Docker Compose services defined in the root `docker-compose.yml` file.\n\n## Prerequisites\n\n- Ansible 2.9+\n- Python 3.6+\n- Docker and Docker Compose installed on the host\n- Required Python packages: `docker`, `docker-compose`\n\n## Directory Structure\n\n```\nansible/\n├── group_vars/\n│   └── all.yml           # Global variables and service configurations\n├── roles/\n│   └── docker_services/\n│       ├── tasks/\n│       │   ├── main.yml              # Main tasks\n│       │   ├── parse_compose.yml      # Parse Docker Compose file\n│       │   ├── verify_services.yml    # Verify services are running\n│       │   ├── verify_service.yml     # Verify individual service\n│       │   ├── verify_dependencies.yml # Check service dependencies\n│       │   ├── test_health_checks.yml # Test service health endpoints\n│       │   └── test_connectivity.yml  # Test network connectivity\n├── playbook.yml          # Main playbook\n└── README.md             # This file\n```\n\n## Usage\n\n1. Install required Python packages:\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n2. Run all tests:\n   ```bash\n   ansible-playbook playbook.yml -i localhost,\n   ```\n\n3. Run specific test tags:\n   ```bash\n   # Test only Docker Compose setup\n   ansible-playbook playbook.yml -i localhost, --tags docker_compose\n   \n   # Test service status\n   ansible-playbook playbook.yml -i localhost, --tags services\n   \n   # Test health checks\n   ansible-playbook playbook.yml -i localhost, --tags health_checks\n   \n   # Test network connectivity\n   ansible-playbook playbook.yml -i localhost, --tags connectivity\n   ```\n\n## Customization\n\nYou can customize the test configuration by modifying the following files:\n\n- `group_vars/all.yml`: Modify service ports, expected services, and health check endpoints\n- `roles/docker_services/tasks/*.yml`: Customize test cases and validations\n\n## Adding New Services\n\nTo add a new service to the test suite:\n\n1. Add the service configuration to `group_vars/all.yml` under `expected_services`\n2. Add health check endpoints under `health_checks` if applicable\n3. Update any dependencies in the service configuration\n\n## Troubleshooting\n\n- If you encounter connection issues, ensure Docker is running and the services are up\n- Check the Ansible output for detailed error messages\n- Run with `-v` or `-vvv` for more verbose output\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](../LICENSE) file for details.\n"
        },
        {
          "name": "requirements.txt",
          "type": "file",
          "path": "ansible/requirements.txt",
          "size": 81,
          "content": "ansible>=2.9\ndocker>=5.0.0,<6.0.0\ndocker-compose>=1.29.0,<2.0.0\nrequests>=2.25.1\n"
        },
        {
          "name": "TODO.md",
          "type": "file",
          "path": "ansible/TODO.md",
          "size": 366,
          "content": "# Ansible - TODO\n\n## High Priority\n- [ ] Document all playbooks and roles\n- [ ] Implement proper variable handling for different environments\n- [ ] Add input validation for all tasks\n\n## Medium Priority\n- [ ] Create tests for all roles\n- [ ] Implement proper error handling\n- [ ] Add role documentation with examples\n\n## Completed\n- [x] Initial role structure setup\n"
        }
      ]
    },
    {
      "name": "assets",
      "type": "directory",
      "path": "assets",
      "children": []
    },
    {
      "name": "caddy",
      "type": "directory",
      "path": "caddy",
      "children": [
        {
          "name": "Caddyfile",
          "type": "file",
          "path": "caddy/Caddyfile",
          "size": 1141,
          "content": "{\n    # Global options\n    auto_https off  # For local development\n    admin off\n}\n\nlocalhost {\n    # Flutter Web App (main interface)\n    handle /* {\n        reverse_proxy flutter-web:80\n    }\n\n    # Media Vault API\n    handle /api/* {\n        reverse_proxy media-vault-api:8080\n    }\n\n    # Admin Panel\n    handle /admin/* {\n        reverse_proxy media-vault-admin:80\n    }\n\n    # Keycloak Identity Provider\n    handle /auth/* {\n        reverse_proxy keycloak:8080\n    }\n\n    # File uploads - increased limit\n    request_body {\n        max_size 100MB\n    }\n\n    # CORS headers\n    header {\n        Access-Control-Allow-Origin \"*\"\n        Access-Control-Allow-Methods \"GET, POST, PUT, DELETE, OPTIONS\"\n        Access-Control-Allow-Headers \"Content-Type, Authorization, X-Requested-With\"\n        Access-Control-Allow-Credentials \"true\"\n    }\n\n    # Security headers\n    header {\n        X-Frame-Options \"SAMEORIGIN\"\n        X-Content-Type-Options \"nosniff\"\n        Referrer-Policy \"strict-origin-when-cross-origin\"\n        X-XSS-Protection \"1; mode=block\"\n    }\n\n    # Logging\n    log {\n        output stdout\n        format console\n    }\n}\n\n"
        },
        {
          "name": "Caddyfile.prod",
          "type": "file",
          "path": "caddy/Caddyfile.prod",
          "size": 0,
          "content": ""
        },
        {
          "name": "TODO.md",
          "type": "file",
          "path": "caddy/TODO.md",
          "size": 334,
          "content": "# Caddy - TODO\n\n## High Priority\n- [ ] Configure HTTPS with Let's Encrypt\n- [ ] Set up reverse proxy for all services\n- [ ] Implement rate limiting\n\n## Medium Priority\n- [ ] Add request/response logging\n- [ ] Configure CORS policies\n- [ ] Set up basic authentication for admin routes\n\n## Completed\n- [x] Basic Caddyfile configuration\n"
        }
      ]
    },
    {
      "name": "css",
      "type": "directory",
      "path": "css",
      "children": [
        {
          "name": "styles.css",
          "type": "file",
          "path": "css/styles.css",
          "size": 7548,
          "content": "/* Main Styles */\nbody {\n    padding: 20px;\n    background-color: #f8f9fa;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n    line-height: 1.6;\n    color: #212529;\n}\n\n/* Layout */\n.container-fluid {\n    max-width: 1400px;\n    margin: 0 auto;\n    padding: 0 15px;\n}\n\n/* File Explorer */\n#file-explorer {\n    max-height: 80vh;\n    overflow-y: auto;\n    border: 1px solid #dee2e6;\n    border-radius: 0.375rem;\n    background-color: white;\n}\n\n#file-content {\n    padding: 20px;\n    background: white;\n    border-radius: 0.375rem;\n    border: 1px solid #dee2e6;\n    height: 100%;\n    overflow-y: auto;\n}\n\n/* File List Items */\n.file-item {\n    cursor: pointer;\n    padding: 10px 15px;\n    border-left: 3px solid transparent;\n    border-bottom: 1px solid #f1f3f5;\n    display: flex;\n    align-items: center;\n    transition: all 0.2s ease;\n    text-decoration: none;\n    color: inherit;\n}\n\n.file-item:last-child {\n    border-bottom: none;\n}\n\n.file-item:hover {\n    background-color: #f8f9fa;\n    border-left-color: #0d6efd;\n    text-decoration: none;\n    color: inherit;\n}\n\n.file-item.active {\n    background-color: #e7f1ff;\n    border-left-color: #0d6efd;\n    font-weight: 500;\n}\n\n.dir-item {\n    font-weight: 600;\n}\n\n.file-size {\n    color: #6c757d;\n    font-size: 0.8em;\n    margin-left: auto;\n    padding-left: 10px;\n    white-space: nowrap;\n}\n\n/* Icons */\n.bi {\n    margin-right: 10px;\n    width: 20px;\n    text-align: center;\n    color: #6c757d;\n}\n\n.dir-item .bi {\n    color: #0d6efd;\n}\n\n/* Breadcrumb */\n.breadcrumb {\n    background-color: transparent;\n    padding: 0.75rem 0;\n    margin-bottom: 1rem;\n    font-size: 0.9rem;\n}\n\n.breadcrumb-item + .breadcrumb-item::before {\n    content: \"/\";\n    padding: 0 0.5rem;\n    color: #6c757d;\n}\n\n.breadcrumb-item a {\n    color: #0d6efd;\n    text-decoration: none;\n}\n\n.breadcrumb-item a:hover {\n    text-decoration: underline;\n}\n\n.breadcrumb-item.active {\n    color: #6c757d;\n}\n\n/* Loading State */\n.loading-state {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    padding: 2rem;\n    color: #6c757d;\n}\n\n.loading-spinner {\n    width: 2.5rem;\n    height: 2.5rem;\n    border: 0.25rem solid rgba(13, 110, 253, 0.2);\n    border-top-color: #0d6efd;\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n    margin-bottom: 1rem;\n}\n\n@keyframes spin {\n    to { transform: rotate(360deg); }\n}\n\n/* Empty State */\n.empty-state {\n    text-align: center;\n    padding: 3rem 1rem;\n    color: #6c757d;\n}\n\n.empty-state i {\n    font-size: 3rem;\n    opacity: 0.5;\n    margin-bottom: 1rem;\n    display: block;\n}\n\n/* Card Styles */\n.card {\n    border: 1px solid rgba(0, 0, 0, 0.125);\n    border-radius: 0.5rem;\n    overflow: hidden;\n    margin-bottom: 1.5rem;\n    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\n}\n\n.card-header {\n    background-color: #f8f9fa;\n    border-bottom: 1px solid rgba(0, 0, 0, 0.125);\n    padding: 0.75rem 1.25rem;\n}\n\n.card-header h5 {\n    margin: 0;\n    font-size: 1.1rem;\n    font-weight: 600;\n}\n\n.card-body {\n    padding: 0;\n}\n\n/* Buttons */\n.btn {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    padding: 0.375rem 0.75rem;\n    font-size: 0.875rem;\n    font-weight: 500;\n    line-height: 1.5;\n    border-radius: 0.25rem;\n    transition: all 0.2s ease-in-out;\n    cursor: pointer;\n}\n\n.btn-outline-secondary {\n    color: #6c757d;\n    border: 1px solid #dee2e6;\n    background-color: transparent;\n}\n\n.btn-outline-secondary:hover {\n    background-color: #f8f9fa;\n    border-color: #adb5bd;\n}\n\n.btn-sm {\n    padding: 0.25rem 0.5rem;\n    font-size: 0.75rem;\n    line-height: 1.5;\n    border-radius: 0.2rem;\n}\n\n/* Responsive Adjustments */\n@media (max-width: 991.98px) {\n    .row > .col-md-4,\n    .row > .col-md-8 {\n        flex: 0 0 100%;\n        max-width: 100%;\n    }\n    \n    #file-explorer {\n        max-height: 50vh;\n        margin-bottom: 1.5rem;\n    }\n}\n\n/* Code Blocks */\npre {\n    background-color: #f8f9fa;\n    padding: 1rem;\n    border-radius: 0.375rem;\n    overflow-x: auto;\n    margin: 1rem 0;\n}\n\ncode {\n    font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;\n    font-size: 0.9em;\n}\n\n/* Markdown Content */\n.markdown-body {\n    max-width: 100%;\n    margin: 0;\n    padding: 20px;\n    color: #24292e;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif;\n    font-size: 16px;\n    line-height: 1.6;\n    word-wrap: break-word;\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n    margin-top: 1.5em;\n    margin-bottom: 0.5em;\n    font-weight: 600;\n    line-height: 1.25;\n}\n\n.markdown-body h1 {\n    padding-bottom: 0.3em;\n    font-size: 2em;\n    border-bottom: 1px solid #eaecef;\n}\n\n.markdown-body h2 {\n    padding-bottom: 0.3em;\n    font-size: 1.5em;\n    border-bottom: 1px solid #eaecef;\n}\n\n.markdown-body h3 {\n    font-size: 1.25em;\n}\n\n.markdown-body p {\n    margin-top: 0;\n    margin-bottom: 1em;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n    padding-left: 2em;\n    margin-top: 0;\n    margin-bottom: 1em;\n}\n\n.markdown-body code {\n    padding: 0.2em 0.4em;\n    margin: 0;\n    font-size: 85%;\n    background-color: rgba(27, 31, 35, 0.05);\n    border-radius: 3px;\n}\n\n.markdown-body pre {\n    background-color: #f6f8fa;\n    border-radius: 6px;\n    padding: 16px;\n    overflow: auto;\n    line-height: 1.45;\n    margin: 1em 0;\n}\n\n.markdown-body pre code {\n    background-color: transparent;\n    padding: 0;\n    margin: 0;\n    font-size: 100%;\n    word-break: normal;\n    white-space: pre;\n    overflow: visible;\n}\n\n/* Utility Classes */\n.text-muted {\n    color: #6c757d !important;\n}\n\n.mb-0 {\n    margin-bottom: 0 !important;\n}\n\n.mt-3 {\n    margin-top: 1rem !important;\n}\n\n.mb-3 {\n    margin-bottom: 1rem !important;\n}\n\n.mr-2 {\n    margin-right: 0.5rem !important;\n}\n\n.d-flex {\n    display: flex !important;\n}\n\n.justify-content-between {\n    justify-content: space-between !important;\n}\n\n.align-items-center {\n    align-items: center !important;\n}\n\n/* Animation for file operations */\n@keyframes fadeIn {\n    from { opacity: 0; transform: translateY(10px); }\n    to { opacity: 1; transform: translateY(0); }\n}\n\n.file-item {\n    animation: fadeIn 0.2s ease-out forwards;\n}\n\n/* Scrollbar Styling */\n::-webkit-scrollbar {\n    width: 8px;\n    height: 8px;\n}\n\n::-webkit-scrollbar-track {\n    background: #f1f1f1;\n    border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb {\n    background: #c1c1c1;\n    border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n    background: #a8a8a8;\n}\n\n/* Code Blocks */\npre {\n    background-color: #f8f9fa;\n    padding: 1rem;\n    border-radius: 0.5rem;\n    overflow-x: auto;\n}\n\ncode {\n    font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;\n    font-size: 0.9em;\n}\n\n/* File Header */\n.file-header {\n    border-bottom: 1px solid #dee2e6;\n    padding-bottom: 10px;\n    margin-bottom: 15px;\n}\n\n/* Loading Spinner */\n.loading-spinner {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 200px;\n}\n\n/* Empty State */\n.empty-state {\n    text-align: center;\n    color: #6c757d;\n    padding: 40px 0;\n}\n\n.empty-state i {\n    font-size: 3rem;\n    opacity: 0.5;\n    margin-bottom: 1rem;\n}\n\n/* Responsive Adjustments */\n@media (max-width: 768px) {\n    .container-fluid {\n        padding-left: 10px;\n        padding-right: 10px;\n    }\n    \n    #file-explorer {\n        max-height: 50vh;\n        margin-bottom: 1rem;\n    }\n}\n"
        }
      ]
    },
    {
      "name": "data",
      "type": "directory",
      "path": "data",
      "children": [
        {
          "name": "file-system.json",
          "type": "file",
          "path": "data/file-system.json",
          "size": 771251,
          "content": "{\n  \"name\": \"docker-platform\",\n  \"type\": \"directory\",\n  \"path\": \".\",\n  \"children\": [\n    {\n      \"name\": \"ansible\",\n      \"type\": \"directory\",\n      \"path\": \"ansible\",\n      \"children\": [\n        {\n          \"name\": \"group_vars\",\n          \"type\": \"directory\",\n          \"path\": \"ansible/group_vars\",\n          \"children\": [\n            {\n              \"name\": \"all.yml\",\n              \"type\": \"file\",\n              \"path\": \"ansible/group_vars/all.yml\",\n              \"size\": 2559,\n              \"content\": \"---\\n# Docker Compose project settings\\ndocker_compose_project_name: media-vault\\ndocker_compose_file: ../docker-compose.yml\\n\\n# Service ports\\nservice_ports:\\n  keycloak: 8443\\n  media_vault_api: 8080\\n  nsfw_analyzer: 8501\\n  flutter_web: 3000\\n  admin_panel: 3001\\n  caddy: 80\\n\\n# Expected service statuses\\nexpected_services:\\n  - name: keycloak-db\\n    image: postgres:15\\n    state: running\\n    ports: []\\n    healthcheck: true\\n    depends_on: []\\n\\n  - name: keycloak\\n    image: quay.io/keycloak/keycloak:23.0\\n    state: running\\n    ports:\\n      - \\\"{{ service_ports.keycloak }}:8080\\\"\\n    healthcheck: true\\n    depends_on:\\n      - keycloak-db\\n\\n  - name: media-vault-api\\n    image: media-vault-api:latest\\n    state: running\\n    ports:\\n      - \\\"{{ service_ports.media_vault_api }}:8080\\\"\\n    healthcheck: true\\n    depends_on:\\n      - keycloak\\n\\n  - name: media-vault-analyzer\\n    image: media-vault-analyzer:latest\\n    state: running\\n    ports: []\\n    healthcheck: false\\n    depends_on:\\n      - media-vault-api\\n      - keycloak\\n\\n  - name: nsfw-analyzer\\n    image: nsfw-analyzer:latest\\n    state: running\\n    ports:\\n      - \\\"{{ service_ports.nsfw_analyzer }}:8501\\\"\\n    healthcheck: false\\n    depends_on:\\n      - media-vault-api\\n      - keycloak\\n    profiles:\\n      - full\\n\\n  - name: flutter-web\\n    image: flutter-web:latest\\n    state: running\\n    ports:\\n      - \\\"{{ service_ports.flutter_web }}:80\\\"\\n    healthcheck: false\\n    depends_on:\\n      - media-vault-api\\n      - keycloak\\n\\n  - name: media-vault-admin\\n    image: media-vault-admin:latest\\n    state: running\\n    ports:\\n      - \\\"{{ service_ports.admin_panel }}:80\\\"\\n    healthcheck: false\\n    depends_on:\\n      - media-vault-api\\n      - keycloak\\n\\n  - name: caddy-proxy\\n    image: caddy:2-alpine\\n    state: running\\n    ports:\\n      - \\\"{{ service_ports.caddy }}:80\\\"\\n      - \\\"443:443\\\"\\n    healthcheck: false\\n    depends_on:\\n      - media-vault-api\\n      - flutter-web\\n      - media-vault-admin\\n\\n# Health check endpoints\\nhealth_checks:\\n  keycloak:\\n    url: \\\"https://localhost:{{ service_ports.keycloak }}/realms/master/.well-known/openid-configuration\\\"\\n    validate_certs: no\\n    status_code: 200\\n    \\n  media_vault_api:\\n    url: \\\"http://localhost:{{ service_ports.media_vault_api }}/health\\\"\\n    status_code: 200\\n    \\n  nsfw_analyzer:\\n    url: \\\"http://localhost:{{ service_ports.nsfw_analyzer }}/health\\\"\\n    status_code: 200\\n    \\n  flutter_web:\\n    url: \\\"http://localhost:{{ service_ports.flutter_web }}\\\"\\n    status_code: 200\\n    \\n  admin_panel:\\n    url: \\\"http://localhost:{{ service_ports.admin_panel }}\\\"\\n    status_code: 200\\n\"\n            }\n          ]\n        },\n        {\n          \"name\": \"roles\",\n          \"type\": \"directory\",\n          \"path\": \"ansible/roles\",\n          \"children\": [\n            {\n              \"name\": \"docker_services\",\n              \"type\": \"directory\",\n              \"path\": \"ansible/roles/docker_services\",\n              \"children\": [\n                {\n                  \"name\": \"tasks\",\n                  \"type\": \"directory\",\n                  \"path\": \"ansible/roles/docker_services/tasks\",\n                  \"children\": [\n                    {\n                      \"name\": \"main.yml\",\n                      \"type\": \"file\",\n                      \"path\": \"ansible/roles/docker_services/tasks/main.yml\",\n                      \"size\": 1406,\n                      \"content\": \"---\\n- name: Install required Python packages\\n  ansible.builtin.pip:\\n    name:\\n      - docker\\n      - docker-compose\\n    state: present\\n\\n- name: Ensure Docker Compose is running\\n  ansible.builtin.service:\\n    name: docker\\n    state: started\\n    enabled: yes\\n\\n- name: Check if Docker Compose is installed\\n  ansible.builtin.command: docker-compose --version\\n  register: docker_compose_version\\n  changed_when: false\\n  check_mode: no\\n  tags: docker_compose\\n\\n- name: Fail if Docker Compose is not installed\\n  ansible.builtin.fail:\\n    msg: \\\"Docker Compose is required but not installed\\\"\\n  when: docker_compose_version.rc != 0\\n\\n- name: Verify Docker Compose file exists\\n  ansible.builtin.stat:\\n    path: \\\"{{ docker_compose_file }}\\\"\\n  register: compose_file_stat\\n  tags: docker_compose\\n\\n- name: Fail if Docker Compose file doesn't exist\\n  ansible.builtin.fail:\\n    msg: \\\"Docker Compose file not found at {{ docker_compose_file }}\\\"\\n  when: not compose_file_stat.stat.exists\\n\\n- name: Parse Docker Compose file\\n  ansible.builtin.include_tasks: parse_compose.yml\\n  tags: docker_compose\\n\\n- name: Verify services are running\\n  ansible.builtin.include_tasks: verify_services.yml\\n  tags: services\\n\\n- name: Test service health checks\\n  ansible.builtin.include_tasks: test_health_checks.yml\\n  tags: health_checks\\n\\n- name: Test service connectivity\\n  ansible.builtin.include_tasks: test_connectivity.yml\\n  tags: connectivity\\n\"\n                    },\n                    {\n                      \"name\": \"parse_compose.yml\",\n                      \"type\": \"file\",\n                      \"path\": \"ansible/roles/docker_services/tasks/parse_compose.yml\",\n                      \"size\": 577,\n                      \"content\": \"---\\n- name: Parse Docker Compose file\\n  community.docker.docker_compose:\\n    project_src: \\\"{{ docker_compose_file | dirname }}\\\"\\n    project_name: \\\"{{ docker_compose_project_name }}\\\"\\n    state: present\\n  register: docker_compose_info\\n  tags: docker_compose\\n\\n- name: Set fact for running services\\n  ansible.builtin.set_fact:\\n    running_services: \\\"{% raw %}{{ docker_compose_info.services | default([]) }}{% endraw %}\\\"\\n  tags: docker_compose\\n\\n- name: Debug running services\\n  ansible.builtin.debug:\\n    var: running_services\\n  when: debug | default(false)\\n  tags: docker_compose\\n\"\n                    },\n                    {\n                      \"name\": \"test_connectivity.yml\",\n                      \"type\": \"file\",\n                      \"path\": \"ansible/roles/docker_services/tasks/test_connectivity.yml\",\n                      \"size\": 680,\n                      \"content\": \"---\\n- name: Test service connectivity\\n  ansible.builtin.shell: |\\n    # Test basic TCP connectivity to service ports\\n    for port in {% raw %}{{ service_ports | dict2items | map(attribute='value') | list | join(' ') }}{% endraw %}; do\\n      echo -n \\\"Testing port $port... \\\"\\n      if nc -z -w 2 localhost $port; then\\n        echo \\\"✅ OPEN\\\"\\n      else\\n        echo \\\"❌ CLOSED\\\"\\n        exit 1\\n      fi\\n    done\\n  args:\\n    executable: /bin/bash\\n  register: port_check\\n  ignore_errors: yes\\n  changed_when: false\\n  tags: connectivity\\n\\n- name: Show port check results\\n  ansible.builtin.debug:\\n    msg: \\\"{{ port_check.stdout_lines }}\\\"\\n  when: port_check is defined\\n  tags: connectivity\\n\"\n                    },\n                    {\n                      \"name\": \"test_health_checks.yml\",\n                      \"type\": \"file\",\n                      \"path\": \"ansible/roles/docker_services/tasks/test_health_checks.yml\",\n                      \"size\": 946,\n                      \"content\": \"---\\n- name: Test health check endpoints\\n  ansible.builtin.uri:\\n    url: \\\"{{ item.value.url }}\\\"\\n    method: GET\\n    validate_certs: \\\"{{ item.value.validate_certs | default(omit) }}\\\"\\n    status_code: \\\"{{ item.value.status_code | default(200) }}\\n    return_content: yes\\n    timeout: 10\\n  register: health_check_result\\n  loop: \\\"{{ health_checks | dict2items }}\\n  loop_control:\\n    label: \\\"{{ item.key }}\\\"\\n  ignore_errors: yes\\n  changed_when: false\\n  tags: health_checks\\n\\n- name: Show health check results\\n  ansible.builtin.debug:\\n    msg: |\\n      Service: {{ item.item.key }}\\n      URL: {{ item.item.value.url }}\\n      Status: {{ '✅ PASSED' if item.status == 200 else '❌ FAILED' }}\\n      Response Code: {{ item.status | default('N/A') }}\\n      Response: {{ item.content | default('N/A') | regex_replace('\\\\n', '') | truncate(100) }}\\n  loop: \\\"{{ health_check_result.results }}\\n  loop_control:\\n    label: \\\"{{ item.item.key }}\\\"\\n  tags: health_checks\\n\"\n                    },\n                    {\n                      \"name\": \"verify_dependencies.yml\",\n                      \"type\": \"file\",\n                      \"path\": \"ansible/roles/docker_services/tasks/verify_dependencies.yml\",\n                      \"size\": 709,\n                      \"content\": \"---\\n- name: Check dependencies for {{ service.name }}\\n  ansible.builtin.assert:\\n    that:\\n      - dependency in running_services\\n      - running_services[dependency].state == 'running'\\n      - running_services[dependency].health is defined\\n      - running_services[dependency].health is not match('unhealthy')\\n    success_msg: \\\"✅ {{ service.name }} dependency {{ dependency }} is running and healthy\\\"\\n    fail_msg: |\\n      ❌ {{ service.name }} dependency {{ dependency }} is not running or healthy.\\n      Status: {{ running_services[dependency] | default('Dependency not found') }}\\n  loop: \\\"{{ service.depends_on }}\\\"\\n  loop_control:\\n    loop_var: dependency\\n    label: \\\"{{ dependency }}\\\"\\n  tags: services\\n\"\n                    },\n                    {\n                      \"name\": \"verify_service.yml\",\n                      \"type\": \"file\",\n                      \"path\": \"ansible/roles/docker_services/tasks/verify_service.yml\",\n                      \"size\": 618,\n                      \"content\": \"---\\n- name: Check if {{ service.name }} is running\\n  ansible.builtin.assert:\\n    that:\\n      - service.name in running_services\\n      - running_services[service.name].state == service.state | default('running')\\n      - running_services[service.name].image == service.image\\n    success_msg: \\\"✅ {{ service.name }} is running with image {{ service.image }}\\\"\\n    fail_msg: |\\n      ❌ {{ service.name }} is not running as expected.\\n      Expected: image={{ service.image }}, state={{ service.state | default('running') }}\\n      Found: {{ running_services[service.name] | default('Service not found') }}\\n  tags: services\\n\"\n                    },\n                    {\n                      \"name\": \"verify_services.yml\",\n                      \"type\": \"file\",\n                      \"path\": \"ansible/roles/docker_services/tasks/verify_services.yml\",\n                      \"size\": 429,\n                      \"content\": \"---\\n- name: Check if expected services are running\\n  ansible.builtin.include_tasks: verify_service.yml\\n  loop: \\\"{{ expected_services }}\\\"\\n  loop_control:\\n    loop_var: service\\n  tags: services\\n\\n- name: Verify service dependencies\\n  ansible.builtin.include_tasks: verify_dependencies.yml\\n  loop: \\\"{{ expected_services }}\\\"\\n  loop_control:\\n    loop_var: service\\n  when: service.depends_on | default([]) | length > 0\\n  tags: services\\n\"\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"name\": \"playbook.yml\",\n          \"type\": \"file\",\n          \"path\": \"ansible/playbook.yml\",\n          \"size\": 228,\n          \"content\": \"---\\n- name: Test Docker Compose Services\\n  hosts: localhost\\n  connection: local\\n  gather_facts: yes\\n  become: yes\\n  vars_files:\\n    - group_vars/all.yml\\n\\n  roles:\\n    - role: docker_services\\n      tags: [docker, services, test]\\n\"\n        },\n        {\n          \"name\": \"README.md\",\n          \"type\": \"file\",\n          \"path\": \"ansible/README.md\",\n          \"size\": 2660,\n          \"content\": \"# Docker Compose Service Tests with Ansible\\n\\nThis directory contains Ansible playbooks and roles to test the Docker Compose services defined in the root `docker-compose.yml` file.\\n\\n## Prerequisites\\n\\n- Ansible 2.9+\\n- Python 3.6+\\n- Docker and Docker Compose installed on the host\\n- Required Python packages: `docker`, `docker-compose`\\n\\n## Directory Structure\\n\\n```\\nansible/\\n├── group_vars/\\n│   └── all.yml           # Global variables and service configurations\\n├── roles/\\n│   └── docker_services/\\n│       ├── tasks/\\n│       │   ├── main.yml              # Main tasks\\n│       │   ├── parse_compose.yml      # Parse Docker Compose file\\n│       │   ├── verify_services.yml    # Verify services are running\\n│       │   ├── verify_service.yml     # Verify individual service\\n│       │   ├── verify_dependencies.yml # Check service dependencies\\n│       │   ├── test_health_checks.yml # Test service health endpoints\\n│       │   └── test_connectivity.yml  # Test network connectivity\\n├── playbook.yml          # Main playbook\\n└── README.md             # This file\\n```\\n\\n## Usage\\n\\n1. Install required Python packages:\\n   ```bash\\n   pip install -r requirements.txt\\n   ```\\n\\n2. Run all tests:\\n   ```bash\\n   ansible-playbook playbook.yml -i localhost,\\n   ```\\n\\n3. Run specific test tags:\\n   ```bash\\n   # Test only Docker Compose setup\\n   ansible-playbook playbook.yml -i localhost, --tags docker_compose\\n   \\n   # Test service status\\n   ansible-playbook playbook.yml -i localhost, --tags services\\n   \\n   # Test health checks\\n   ansible-playbook playbook.yml -i localhost, --tags health_checks\\n   \\n   # Test network connectivity\\n   ansible-playbook playbook.yml -i localhost, --tags connectivity\\n   ```\\n\\n## Customization\\n\\nYou can customize the test configuration by modifying the following files:\\n\\n- `group_vars/all.yml`: Modify service ports, expected services, and health check endpoints\\n- `roles/docker_services/tasks/*.yml`: Customize test cases and validations\\n\\n## Adding New Services\\n\\nTo add a new service to the test suite:\\n\\n1. Add the service configuration to `group_vars/all.yml` under `expected_services`\\n2. Add health check endpoints under `health_checks` if applicable\\n3. Update any dependencies in the service configuration\\n\\n## Troubleshooting\\n\\n- If you encounter connection issues, ensure Docker is running and the services are up\\n- Check the Ansible output for detailed error messages\\n- Run with `-v` or `-vvv` for more verbose output\\n\\n## License\\n\\nThis project is licensed under the MIT License - see the [LICENSE](../LICENSE) file for details.\\n\"\n        },\n        {\n          \"name\": \"requirements.txt\",\n          \"type\": \"file\",\n          \"path\": \"ansible/requirements.txt\",\n          \"size\": 81,\n          \"content\": \"ansible>=2.9\\ndocker>=5.0.0,<6.0.0\\ndocker-compose>=1.29.0,<2.0.0\\nrequests>=2.25.1\\n\"\n        },\n        {\n          \"name\": \"TODO.md\",\n          \"type\": \"file\",\n          \"path\": \"ansible/TODO.md\",\n          \"size\": 366,\n          \"content\": \"# Ansible - TODO\\n\\n## High Priority\\n- [ ] Document all playbooks and roles\\n- [ ] Implement proper variable handling for different environments\\n- [ ] Add input validation for all tasks\\n\\n## Medium Priority\\n- [ ] Create tests for all roles\\n- [ ] Implement proper error handling\\n- [ ] Add role documentation with examples\\n\\n## Completed\\n- [x] Initial role structure setup\\n\"\n        }\n      ]\n    },\n    {\n      \"name\": \"assets\",\n      \"type\": \"directory\",\n      \"path\": \"assets\",\n      \"children\": []\n    },\n    {\n      \"name\": \"caddy\",\n      \"type\": \"directory\",\n      \"path\": \"caddy\",\n      \"children\": [\n        {\n          \"name\": \"Caddyfile\",\n          \"type\": \"file\",\n          \"path\": \"caddy/Caddyfile\",\n          \"size\": 1141,\n          \"content\": \"{\\n    # Global options\\n    auto_https off  # For local development\\n    admin off\\n}\\n\\nlocalhost {\\n    # Flutter Web App (main interface)\\n    handle /* {\\n        reverse_proxy flutter-web:80\\n    }\\n\\n    # Media Vault API\\n    handle /api/* {\\n        reverse_proxy media-vault-api:8080\\n    }\\n\\n    # Admin Panel\\n    handle /admin/* {\\n        reverse_proxy media-vault-admin:80\\n    }\\n\\n    # Keycloak Identity Provider\\n    handle /auth/* {\\n        reverse_proxy keycloak:8080\\n    }\\n\\n    # File uploads - increased limit\\n    request_body {\\n        max_size 100MB\\n    }\\n\\n    # CORS headers\\n    header {\\n        Access-Control-Allow-Origin \\\"*\\\"\\n        Access-Control-Allow-Methods \\\"GET, POST, PUT, DELETE, OPTIONS\\\"\\n        Access-Control-Allow-Headers \\\"Content-Type, Authorization, X-Requested-With\\\"\\n        Access-Control-Allow-Credentials \\\"true\\\"\\n    }\\n\\n    # Security headers\\n    header {\\n        X-Frame-Options \\\"SAMEORIGIN\\\"\\n        X-Content-Type-Options \\\"nosniff\\\"\\n        Referrer-Policy \\\"strict-origin-when-cross-origin\\\"\\n        X-XSS-Protection \\\"1; mode=block\\\"\\n    }\\n\\n    # Logging\\n    log {\\n        output stdout\\n        format console\\n    }\\n}\\n\\n\"\n        },\n        {\n          \"name\": \"Caddyfile.prod\",\n          \"type\": \"file\",\n          \"path\": \"caddy/Caddyfile.prod\",\n          \"size\": 0,\n          \"content\": \"\"\n        },\n        {\n          \"name\": \"TODO.md\",\n          \"type\": \"file\",\n          \"path\": \"caddy/TODO.md\",\n          \"size\": 334,\n          \"content\": \"# Caddy - TODO\\n\\n## High Priority\\n- [ ] Configure HTTPS with Let's Encrypt\\n- [ ] Set up reverse proxy for all services\\n- [ ] Implement rate limiting\\n\\n## Medium Priority\\n- [ ] Add request/response logging\\n- [ ] Configure CORS policies\\n- [ ] Set up basic authentication for admin routes\\n\\n## Completed\\n- [x] Basic Caddyfile configuration\\n\"\n        }\n      ]\n    },\n    {\n      \"name\": \"css\",\n      \"type\": \"directory\",\n      \"path\": \"css\",\n      \"children\": [\n        {\n          \"name\": \"styles.css\",\n          \"type\": \"file\",\n          \"path\": \"css/styles.css\",\n          \"size\": 7548,\n          \"content\": \"/* Main Styles */\\nbody {\\n    padding: 20px;\\n    background-color: #f8f9fa;\\n    font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n    line-height: 1.6;\\n    color: #212529;\\n}\\n\\n/* Layout */\\n.container-fluid {\\n    max-width: 1400px;\\n    margin: 0 auto;\\n    padding: 0 15px;\\n}\\n\\n/* File Explorer */\\n#file-explorer {\\n    max-height: 80vh;\\n    overflow-y: auto;\\n    border: 1px solid #dee2e6;\\n    border-radius: 0.375rem;\\n    background-color: white;\\n}\\n\\n#file-content {\\n    padding: 20px;\\n    background: white;\\n    border-radius: 0.375rem;\\n    border: 1px solid #dee2e6;\\n    height: 100%;\\n    overflow-y: auto;\\n}\\n\\n/* File List Items */\\n.file-item {\\n    cursor: pointer;\\n    padding: 10px 15px;\\n    border-left: 3px solid transparent;\\n    border-bottom: 1px solid #f1f3f5;\\n    display: flex;\\n    align-items: center;\\n    transition: all 0.2s ease;\\n    text-decoration: none;\\n    color: inherit;\\n}\\n\\n.file-item:last-child {\\n    border-bottom: none;\\n}\\n\\n.file-item:hover {\\n    background-color: #f8f9fa;\\n    border-left-color: #0d6efd;\\n    text-decoration: none;\\n    color: inherit;\\n}\\n\\n.file-item.active {\\n    background-color: #e7f1ff;\\n    border-left-color: #0d6efd;\\n    font-weight: 500;\\n}\\n\\n.dir-item {\\n    font-weight: 600;\\n}\\n\\n.file-size {\\n    color: #6c757d;\\n    font-size: 0.8em;\\n    margin-left: auto;\\n    padding-left: 10px;\\n    white-space: nowrap;\\n}\\n\\n/* Icons */\\n.bi {\\n    margin-right: 10px;\\n    width: 20px;\\n    text-align: center;\\n    color: #6c757d;\\n}\\n\\n.dir-item .bi {\\n    color: #0d6efd;\\n}\\n\\n/* Breadcrumb */\\n.breadcrumb {\\n    background-color: transparent;\\n    padding: 0.75rem 0;\\n    margin-bottom: 1rem;\\n    font-size: 0.9rem;\\n}\\n\\n.breadcrumb-item + .breadcrumb-item::before {\\n    content: \\\"/\\\";\\n    padding: 0 0.5rem;\\n    color: #6c757d;\\n}\\n\\n.breadcrumb-item a {\\n    color: #0d6efd;\\n    text-decoration: none;\\n}\\n\\n.breadcrumb-item a:hover {\\n    text-decoration: underline;\\n}\\n\\n.breadcrumb-item.active {\\n    color: #6c757d;\\n}\\n\\n/* Loading State */\\n.loading-state {\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    justify-content: center;\\n    padding: 2rem;\\n    color: #6c757d;\\n}\\n\\n.loading-spinner {\\n    width: 2.5rem;\\n    height: 2.5rem;\\n    border: 0.25rem solid rgba(13, 110, 253, 0.2);\\n    border-top-color: #0d6efd;\\n    border-radius: 50%;\\n    animation: spin 1s linear infinite;\\n    margin-bottom: 1rem;\\n}\\n\\n@keyframes spin {\\n    to { transform: rotate(360deg); }\\n}\\n\\n/* Empty State */\\n.empty-state {\\n    text-align: center;\\n    padding: 3rem 1rem;\\n    color: #6c757d;\\n}\\n\\n.empty-state i {\\n    font-size: 3rem;\\n    opacity: 0.5;\\n    margin-bottom: 1rem;\\n    display: block;\\n}\\n\\n/* Card Styles */\\n.card {\\n    border: 1px solid rgba(0, 0, 0, 0.125);\\n    border-radius: 0.5rem;\\n    overflow: hidden;\\n    margin-bottom: 1.5rem;\\n    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\\n}\\n\\n.card-header {\\n    background-color: #f8f9fa;\\n    border-bottom: 1px solid rgba(0, 0, 0, 0.125);\\n    padding: 0.75rem 1.25rem;\\n}\\n\\n.card-header h5 {\\n    margin: 0;\\n    font-size: 1.1rem;\\n    font-weight: 600;\\n}\\n\\n.card-body {\\n    padding: 0;\\n}\\n\\n/* Buttons */\\n.btn {\\n    display: inline-flex;\\n    align-items: center;\\n    justify-content: center;\\n    padding: 0.375rem 0.75rem;\\n    font-size: 0.875rem;\\n    font-weight: 500;\\n    line-height: 1.5;\\n    border-radius: 0.25rem;\\n    transition: all 0.2s ease-in-out;\\n    cursor: pointer;\\n}\\n\\n.btn-outline-secondary {\\n    color: #6c757d;\\n    border: 1px solid #dee2e6;\\n    background-color: transparent;\\n}\\n\\n.btn-outline-secondary:hover {\\n    background-color: #f8f9fa;\\n    border-color: #adb5bd;\\n}\\n\\n.btn-sm {\\n    padding: 0.25rem 0.5rem;\\n    font-size: 0.75rem;\\n    line-height: 1.5;\\n    border-radius: 0.2rem;\\n}\\n\\n/* Responsive Adjustments */\\n@media (max-width: 991.98px) {\\n    .row > .col-md-4,\\n    .row > .col-md-8 {\\n        flex: 0 0 100%;\\n        max-width: 100%;\\n    }\\n    \\n    #file-explorer {\\n        max-height: 50vh;\\n        margin-bottom: 1.5rem;\\n    }\\n}\\n\\n/* Code Blocks */\\npre {\\n    background-color: #f8f9fa;\\n    padding: 1rem;\\n    border-radius: 0.375rem;\\n    overflow-x: auto;\\n    margin: 1rem 0;\\n}\\n\\ncode {\\n    font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;\\n    font-size: 0.9em;\\n}\\n\\n/* Markdown Content */\\n.markdown-body {\\n    max-width: 100%;\\n    margin: 0;\\n    padding: 20px;\\n    color: #24292e;\\n    font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Helvetica, Arial, sans-serif;\\n    font-size: 16px;\\n    line-height: 1.6;\\n    word-wrap: break-word;\\n}\\n\\n.markdown-body h1,\\n.markdown-body h2,\\n.markdown-body h3,\\n.markdown-body h4,\\n.markdown-body h5,\\n.markdown-body h6 {\\n    margin-top: 1.5em;\\n    margin-bottom: 0.5em;\\n    font-weight: 600;\\n    line-height: 1.25;\\n}\\n\\n.markdown-body h1 {\\n    padding-bottom: 0.3em;\\n    font-size: 2em;\\n    border-bottom: 1px solid #eaecef;\\n}\\n\\n.markdown-body h2 {\\n    padding-bottom: 0.3em;\\n    font-size: 1.5em;\\n    border-bottom: 1px solid #eaecef;\\n}\\n\\n.markdown-body h3 {\\n    font-size: 1.25em;\\n}\\n\\n.markdown-body p {\\n    margin-top: 0;\\n    margin-bottom: 1em;\\n}\\n\\n.markdown-body ul,\\n.markdown-body ol {\\n    padding-left: 2em;\\n    margin-top: 0;\\n    margin-bottom: 1em;\\n}\\n\\n.markdown-body code {\\n    padding: 0.2em 0.4em;\\n    margin: 0;\\n    font-size: 85%;\\n    background-color: rgba(27, 31, 35, 0.05);\\n    border-radius: 3px;\\n}\\n\\n.markdown-body pre {\\n    background-color: #f6f8fa;\\n    border-radius: 6px;\\n    padding: 16px;\\n    overflow: auto;\\n    line-height: 1.45;\\n    margin: 1em 0;\\n}\\n\\n.markdown-body pre code {\\n    background-color: transparent;\\n    padding: 0;\\n    margin: 0;\\n    font-size: 100%;\\n    word-break: normal;\\n    white-space: pre;\\n    overflow: visible;\\n}\\n\\n/* Utility Classes */\\n.text-muted {\\n    color: #6c757d !important;\\n}\\n\\n.mb-0 {\\n    margin-bottom: 0 !important;\\n}\\n\\n.mt-3 {\\n    margin-top: 1rem !important;\\n}\\n\\n.mb-3 {\\n    margin-bottom: 1rem !important;\\n}\\n\\n.mr-2 {\\n    margin-right: 0.5rem !important;\\n}\\n\\n.d-flex {\\n    display: flex !important;\\n}\\n\\n.justify-content-between {\\n    justify-content: space-between !important;\\n}\\n\\n.align-items-center {\\n    align-items: center !important;\\n}\\n\\n/* Animation for file operations */\\n@keyframes fadeIn {\\n    from { opacity: 0; transform: translateY(10px); }\\n    to { opacity: 1; transform: translateY(0); }\\n}\\n\\n.file-item {\\n    animation: fadeIn 0.2s ease-out forwards;\\n}\\n\\n/* Scrollbar Styling */\\n::-webkit-scrollbar {\\n    width: 8px;\\n    height: 8px;\\n}\\n\\n::-webkit-scrollbar-track {\\n    background: #f1f1f1;\\n    border-radius: 4px;\\n}\\n\\n::-webkit-scrollbar-thumb {\\n    background: #c1c1c1;\\n    border-radius: 4px;\\n}\\n\\n::-webkit-scrollbar-thumb:hover {\\n    background: #a8a8a8;\\n}\\n\\n/* Code Blocks */\\npre {\\n    background-color: #f8f9fa;\\n    padding: 1rem;\\n    border-radius: 0.5rem;\\n    overflow-x: auto;\\n}\\n\\ncode {\\n    font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;\\n    font-size: 0.9em;\\n}\\n\\n/* File Header */\\n.file-header {\\n    border-bottom: 1px solid #dee2e6;\\n    padding-bottom: 10px;\\n    margin-bottom: 15px;\\n}\\n\\n/* Loading Spinner */\\n.loading-spinner {\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    height: 200px;\\n}\\n\\n/* Empty State */\\n.empty-state {\\n    text-align: center;\\n    color: #6c757d;\\n    padding: 40px 0;\\n}\\n\\n.empty-state i {\\n    font-size: 3rem;\\n    opacity: 0.5;\\n    margin-bottom: 1rem;\\n}\\n\\n/* Responsive Adjustments */\\n@media (max-width: 768px) {\\n    .container-fluid {\\n        padding-left: 10px;\\n        padding-right: 10px;\\n    }\\n    \\n    #file-explorer {\\n        max-height: 50vh;\\n        margin-bottom: 1rem;\\n    }\\n}\\n\"\n        }\n      ]\n    },\n    {\n      \"name\": \"data\",\n      \"type\": \"directory\",\n      \"path\": \"data\",\n      \"children\": [\n        {\n          \"name\": \"file-system.json\",\n          \"type\": \"file\",\n          \"path\": \"data/file-system.json\",\n          \"size\": 4323129,\n          \"content\": \"\"\n        },\n        {\n          \"name\": \"media.db\",\n          \"type\": \"file\",\n          \"path\": \"data/media.db\",\n          \"size\": 0,\n          \"content\": \"\"\n        }\n      ]\n    },\n    {\n      \"name\": \"deployment\",\n      \"type\": \"directory\",\n      \"path\": \"deployment\",\n      \"children\": [\n        {\n          \"name\": \"helm\",\n          \"type\": \"directory\",\n          \"path\": \"deployment/helm\",\n          \"children\": [\n            {\n              \"name\": \"Chart.yaml\",\n              \"type\": \"file\",\n              \"path\": \"deployment/helm/Chart.yaml\",\n              \"size\": 0,\n              \"content\": \"\"\n            },\n            {\n              \"name\": \"values-prod.yaml\",\n              \"type\": \"file\",\n              \"path\": \"deployment/helm/values-prod.yaml\",\n              \"size\": 0,\n              \"content\": \"\"\n            },\n            {\n              \"name\": \"values.yaml\",\n              \"type\": \"file\",\n              \"path\": \"deployment/helm/values.yaml\",\n              \"size\": 0,\n              \"content\": \"\"\n            }\n          ]\n        },\n        {\n          \"name\": \"kubernetes\",\n          \"type\": \"directory\",\n          \"path\": \"deployment/kubernetes\",\n          \"children\": [\n            {\n              \"name\": \"configmap.yaml\",\n              \"type\": \"file\",\n              \"path\": \"deployment/kubernetes/configmap.yaml\",\n              \"size\": 0,\n              \"content\": \"\"\n            },\n            {\n              \"name\": \"deployments.yaml\",\n              \"type\": \"file\",\n              \"path\": \"deployment/kubernetes/deployments.yaml\",\n              \"size\": 0,\n              \"content\": \"\"\n            },\n            {\n              \"name\": \"ingress.yaml\",\n              \"type\": \"file\",\n              \"path\": \"deployment/kubernetes/ingress.yaml\",\n              \"size\": 0,\n              \"content\": \"\"\n            },\n            {\n              \"name\": \"monitoring.yaml\",\n              \"type\": \"file\",\n              \"path\": \"deployment/kubernetes/monitoring.yaml\",\n              \"size\": 0,\n              \"content\": \"\"\n            },\n            {\n              \"name\": \"namespace.yaml\",\n              \"type\": \"file\",\n              \"path\": \"deployment/kubernetes/namespace.yaml\",\n              \"size\": 0,\n              \"content\": \"\"\n            },\n            {\n              \"name\": \"secrets.yaml\",\n              \"type\": \"file\",\n              \"path\": \"deployment/kubernetes/secrets.yaml\",\n              \"size\": 0,\n              \"content\": \"\"\n            },\n            {\n              \"name\": \"services.yaml\",\n              \"type\": \"file\",\n              \"path\": \"deployment/kubernetes/services.yaml\",\n              \"size\": 0,\n              \"content\": \"\"\n            }\n          ]\n        },\n        {\n          \"name\": \"terraform\",\n          \"type\": \"directory\",\n          \"path\": \"deployment/terraform\",\n          \"children\": [\n            {\n              \"name\": \"main.tf\",\n              \"type\": \"file\",\n              \"path\": \"deployment/terraform/main.tf\",\n              \"size\": 0,\n              \"content\": \"\"\n            },\n            {\n              \"name\": \"outputs.tf\",\n              \"type\": \"file\",\n              \"path\": \"deployment/terraform/outputs.tf\",\n              \"size\": 0,\n              \"content\": \"\"\n            },\n            {\n              \"name\": \"variables.tf\",\n              \"type\": \"file\",\n              \"path\": \"deployment/terraform/variables.tf\",\n              \"size\": 0,\n              \"content\": \"\"\n            }\n          ]\n        },\n        {\n          \"name\": \"TODO.md\",\n          \"type\": \"file\",\n          \"path\": \"deployment/TODO.md\",\n          \"size\": 321,\n          \"content\": \"# Deployment - TODO\\n\\n## High Priority\\n- [ ] Document deployment process\\n- [ ] Create staging environment configuration\\n- [ ] Set up CI/CD pipelines\\n\\n## Medium Priority\\n- [ ] Add rollback procedures\\n- [ ] Document environment variables\\n- [ ] Create backup/restore procedures\\n\\n## Completed\\n- [x] Initial deployment scripts\\n\"\n        }\n      ]\n    },\n    {\n      \"name\": \"docs\",\n      \"type\": \"directory\",\n      \"path\": \"docs\",\n      \"children\": [\n        {\n          \"name\": \"API.md\",\n          \"type\": \"file\",\n          \"path\": \"docs/API.md\",\n          \"size\": 5818,\n          \"content\": \"# 📡 Media Vault API Documentation\\n\\nThis document provides comprehensive documentation for the Media Vault REST API, including endpoints, request/response formats, authentication, and usage examples.\\n\\n## 🔄 API Version\\nCurrent version: `v1`\\n\\n## 🛠️ Getting Started\\n\\n### Base URL\\nAll API endpoints are relative to the base URL:\\n```\\nhttps://api.yourdomain.com/v1\\n```\\n\\nFor local development:\\n```\\nhttp://localhost:8080/api/v1\\n```\\n\\n### Authentication\\nAll API requests require authentication using JWT (JSON Web Tokens). Include the token in the `Authorization` header:\\n\\n```http\\nAuthorization: Bearer your-jwt-token\\n```\\n\\n### Request Headers\\nInclude these headers with all requests:\\n- `Content-Type: application/json`\\n- `Accept: application/json`\\n- `Authorization: Bearer <token>`\\n\\n## Table of Contents\\n- [Authentication](#-authentication)\\n- [Base URL](#-base-url)\\n- [Response Format](#-response-format)\\n- [Error Handling](#-error-handling)\\n- [Endpoints](#-endpoints)\\n  - [Authentication](#authentication-1)\\n  - [Users](#users)\\n  - [Media](#media)\\n  - [Collections](#collections)\\n  - [Sharing](#sharing)\\n  - [Search](#search)\\n- [Webhooks](#-webhooks)\\n- [Rate Limiting](#-rate-limiting)\\n- [Pagination](#-pagination)\\n- [WebSocket API](#-websocket-api)\\n\\n## 🔑 Authentication\\n\\nAll API endpoints require authentication using JWT (JSON Web Tokens).\\n\\n### Obtaining a Token\\n\\n```http\\nPOST /api/v1/auth/login\\nContent-Type: application/json\\n\\n{\\n  \\\"username\\\": \\\"user@example.com\\\",\\n  \\\"password\\\": \\\"yourpassword\\\"\\n}\\n```\\n\\nResponse:\\n```json\\n{\\n  \\\"token\\\": \\\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\\\",\\n  \\\"expires_in\\\": 3600,\\n  \\\"token_type\\\": \\\"Bearer\\\"\\n}\\n```\\n\\n### Using the Token\\n\\nInclude the token in the `Authorization` header:\\n```\\nAuthorization: Bearer your.jwt.token.here\\n```\\n\\n## 🌐 Base URL\\n\\nAll API endpoints are relative to the base URL:\\n```\\nhttps://api.your-mediavault-instance.com/api/v1\\n```\\n\\n## 📦 Response Format\\n\\nAll successful API responses follow this format:\\n\\n```json\\n{\\n  \\\"success\\\": true,\\n  \\\"data\\\": {\\n    /* response data */\\n  },\\n  \\\"meta\\\": {\\n    \\\"timestamp\\\": \\\"2023-05-30T10:00:00Z\\\",\\n    \\\"version\\\": \\\"1.0.0\\\"\\n  }\\n}\\n```\\n\\n## ❌ Error Handling\\n\\nError responses include an error code and message:\\n\\n```http\\nHTTP/1.1 400 Bad Request\\nContent-Type: application/json\\n\\n{\\n  \\\"success\\\": false,\\n  \\\"error\\\": {\\n    \\\"code\\\": \\\"validation_error\\\",\\n    \\\"message\\\": \\\"Invalid input data\\\",\\n    \\\"details\\\": [\\n      {\\n        \\\"field\\\": \\\"email\\\",\\n        \\\"message\\\": \\\"Must be a valid email address\\\"\\n      }\\n    ]\\n  },\\n  \\\"meta\\\": {\\n    \\\"timestamp\\\": \\\"2023-05-30T10:00:00Z\\\",\\n    \\\"request_id\\\": \\\"req_1234567890\\\"\\n  }\\n}\\n```\\n\\n### Common Error Codes\\n\\n| Code | HTTP Status | Description |\\n|------|-------------|-------------|\\n| `unauthorized` | 401 | Invalid or missing authentication |\\n| `forbidden` | 403 | Insufficient permissions |\\n| `not_found` | 404 | Resource not found |\\n| `validation_error` | 400 | Invalid input data |\\n| `rate_limited` | 429 | Too many requests |\\n| `internal_error` | 500 | Server error |\\n\\n## 📡 Endpoints\\n\\n### Authentication\\n\\n#### Login\\n```http\\nPOST /auth/login\\n```\\n\\n#### Refresh Token\\n```http\\nPOST /auth/refresh\\n```\\n\\n#### Logout\\n```http\\nPOST /auth/logout\\n```\\n\\n### Users\\n\\n#### Get Current User\\n```http\\nGET /users/me\\n```\\n\\n#### Update Profile\\n```http\\nPATCH /users/me\\n```\\n\\n### Media\\n\\n#### Upload File\\n```http\\nPOST /media/upload\\nContent-Type: multipart/form-data\\n```\\n\\n#### Get Media Item\\n```http\\nGET /media/{id}\\n```\\n\\n#### List Media\\n```http\\nGET /media\\n```\\n\\n### Collections\\n\\n#### Create Collection\\n```http\\nPOST /collections\\n```\\n\\n#### Add Media to Collection\\n```http\\nPOST /collections/{id}/media\\n```\\n\\n## 🔔 Webhooks\\n\\nMedia Vault can send webhook notifications for various events:\\n\\n### Available Events\\n- `media.uploaded`\\n- `media.deleted`\\n- `user.registered`\\n- `collection.created`\\n\\n### Webhook Payload\\n\\n```json\\n{\\n  \\\"event\\\": \\\"media.uploaded\\\",\\n  \\\"data\\\": {\\n    \\\"id\\\": \\\"media_123\\\",\\n    \\\"type\\\": \\\"image\\\",\\n    \\\"user_id\\\": \\\"user_123\\\"\\n  },\\n  \\\"timestamp\\\": \\\"2023-05-30T10:00:00Z\\\"\\n}\\n```\\n\\n## ⚠️ Rate Limiting\\n\\n- **Anonymous**: 60 requests per minute\\n- **Authenticated**: 1000 requests per minute\\n- **API Key**: 5000 requests per minute\\n\\nHeaders:\\n- `X-RateLimit-Limit`: Request limit per time window\\n- `X-RateLimit-Remaining`: Remaining requests\\n- `X-RateLimit-Reset`: Timestamp when the limit resets\\n\\n## 📑 Pagination\\n\\nList endpoints support pagination:\\n\\n```http\\nGET /media?page=2&per_page=20\\n```\\n\\nResponse includes pagination metadata:\\n\\n```json\\n{\\n  \\\"data\\\": [],\\n  \\\"meta\\\": {\\n    \\\"pagination\\\": {\\n      \\\"total\\\": 150,\\n      \\\"count\\\": 20,\\n      \\\"per_page\\\": 20,\\n      \\\"current_page\\\": 2,\\n      \\\"total_pages\\\": 8,\\n      \\\"links\\\": {\\n        \\\"next\\\": \\\"/media?page=3\\\",\\n        \\\"prev\\\": \\\"/media?page=1\\\"\\n      }\\n    }\\n  }\\n}\\n```\\n\\n## 🌐 WebSocket API\\n\\nReal-time updates are available via WebSocket:\\n\\n```javascript\\nconst socket = new WebSocket('wss://api.your-mediavault-instance.com/realtime');\\n\\n// Authenticate\\nsocket.send(JSON.stringify({\\n  type: 'auth',\\n  token: 'your.jwt.token'\\n}));\\n\\n// Subscribe to events\\nsocket.send(JSON.stringify({\\n  type: 'subscribe',\\n  channel: 'media_updates',\\n  resource_id: 'media_123'\\n}));\\n\\n// Handle messages\\nsocket.onmessage = (event) => {\\n  console.log('Update:', JSON.parse(event.data));\\n};\\n```\\n\\n## 📚 SDKs\\n\\nOfficial SDKs are available for popular languages:\\n\\n- **JavaScript/TypeScript**: `npm install @mediavault/sdk`\\n- **Python**: `pip install mediavault-sdk`\\n- **Go**: `go get github.com/wronai/mediavault-go`\\n\\n## 📅 API Versioning\\n\\nThe API is versioned in the URL path (e.g., `/api/v1/...`). Breaking changes will result in a new version number.\\n\\n## 🔒 Security\\n\\n- All endpoints require HTTPS\\n- JWT tokens expire after 1 hour\\n- Password hashing with Argon2id\\n- Rate limiting to prevent abuse\\n- CORS restricted to trusted domains\\n\\n## 📝 Support\\n\\nFor API support, please contact api-support@wron.ai or open an issue on GitHub.\"\n        },\n        {\n          \"name\": \"ARCHITECTURE.md\",\n          \"type\": \"file\",\n          \"path\": \"docs/ARCHITECTURE.md\",\n          \"size\": 19962,\n          \"content\": \"# 🏗️ Media Vault - Architecture Reference\\n\\n## 🌐 System Architecture\\n\\nThis document provides a comprehensive overview of the Media Vault system architecture, including its components, data flow, user roles, and design decisions.\\n\\n## 👥 User Roles\\n\\n### 1. End User\\n- **Permissions**:\\n  - Upload and manage personal media\\n  - View and edit own media metadata\\n  - Share media with other users\\n  - Generate AI descriptions for media\\n  - View personal analytics\\n\\n### 2. Partner User\\n- **Permissions**:\\n  - All End User permissions\\n  - Access to partner-specific media\\n  - Manage media shared with partner organization\\n  - View partner-level analytics\\n\\n### 3. Administrator\\n- **Permissions**:\\n  - All Partner User permissions\\n  - Manage system users and roles\\n  - Configure system settings\\n  - Access system-wide analytics\\n  - Perform system maintenance\\n\\n## 🔄 Key User Flows\\n\\n### 1. Media Upload Flow\\n```mermaid\\nsequenceDiagram\\n    participant U as User\\n    participant F as Frontend\\n    participant A as API\\n    participant S as Storage\\n    participant D as Database\\n    participant K as Keycloak\\n    \\n    U->>F: Select files to upload\\n    F->>K: Request auth token\\n    K-->>F: Return JWT\\n    F->>A: Upload files (with JWT)\\n    A->>K: Validate token\\n    A->>S: Store files\\n    A->>D: Save metadata\\n    A-->>F: Return success/error\\n    F-->>U: Show upload status\\n```\\n\\n### 2. Media Sharing Flow\\n```mermaid\\nsequenceDiagram\\n    participant U as Owner\\n    participant F as Frontend\\n    participant A as API\\n    participant D as Database\\n    participant R as Recipient\\n    \\n    U->>F: Select media to share\\n    F->>A: Request share (with permissions)\\n    A->>D: Create share record\\n    A-->>F: Share link/notification\\n    F-->>U: Confirm share\\n    A->>R: Send notification (email/in-app)\\n    R->>F: Access shared media\\n    F->>A: Validate access\\n    A-->>F: Return media\\n    F-->>R: Display shared media\\n```\\n\\n## 🏗 System Components\\n\\n### 1. Frontend (Flutter Web)\\n- Responsive web interface\\n- Media upload and management\\n- Real-time updates\\n- Authentication flows\\n\\n### 2. Backend Services\\n- **API Gateway**: Request routing and authentication\\n- **Media Service**: File processing and storage\\n- **Metadata Service**: Media metadata management\\n- **AI Service**: Media analysis and description\\n- **Sharing Service**: Access control and sharing\\n\\n### 3. Data Storage\\n- **PostgreSQL**: Relational data\\n- **Object Storage**: Media files\\n- **Redis**: Caching and sessions\\n\\n### 4. Infrastructure\\n- **Docker & Docker Compose**: Containerization\\n- **Caddy**: Reverse proxy\\n- **Keycloak**: Authentication/Authorization\\n- **Monitoring Stack**: Prometheus, Grafana, Loki\\n\\n## 🚀 Deployment Architecture\\n\\n### Development Environment\\n- Local Docker Compose setup\\n- Hot-reload for development\\n- Local database instances\\n\\n### Production Environment\\n- Container orchestration (Kubernetes)\\n- High availability\\n- Automated backups\\n- Monitoring and alerting\\n\\n## 🔄 Data Flow\\n\\n1. **Authentication**: User authenticates via Keycloak\\n2. **Request Processing**: Caddy routes requests to appropriate service\\n3. **Business Logic**: Backend services process requests\\n4. **Data Persistence**: Data is stored in appropriate storage\\n5. **Response**: Results are returned to the frontend\\n\\n## 🛡️ Security Considerations\\n\\n- All communications use HTTPS\\n- JWT-based authentication\\n- Role-based access control (RBAC)\\n- Input validation and sanitization\\n- Regular security audits\\n\\n## 📈 Scaling Strategy\\n\\n- Horizontal scaling for stateless services\\n- Database read replicas\\n- CDN for media delivery\\n- Caching layer for frequent queries\\n\\n## 🔄 CI/CD Pipeline\\n\\n1. Code commit triggers build\\n2. Run tests\\n3. Build Docker images\\n4. Deploy to staging\\n5. Run integration tests\\n6. Deploy to production\\n\\n## 📋 Compliance\\n\\n- GDPR compliance for user data\\n- Data retention policies\\n- Audit logging\\n- Regular backups\\n\\n## 🔄 Error Handling\\n\\n- Centralized error logging\\n- Graceful degradation\\n- User-friendly error messages\\n- Automatic retries for transient failures\\n\\n## 📚 API Documentation\\n\\nSee [API Documentation](./API.md) for detailed API specifications and examples.\\n\\n### High-Level Architecture\\n\\n```mermaid\\ngraph TD\\n    User[👤 User] --> Browser[🌐 Browser]\\n    Browser --> Caddy[🔶 Caddy Proxy]\\n    \\n    %% Authentication Flow\\n    Browser -.->|1. Login| Keycloak[🔐 Keycloak Auth]\\n    Keycloak -.->|2. JWT Token| Browser\\n    \\n    %% Application Flow\\n    Caddy -->|3. Serve UI| Flutter[🎨 Flutter Web]\\n    Caddy -->|4. API Requests| VaultAPI[🔒 Media Vault API]\\n    \\n    %% Backend Services\\n    VaultAPI -->|5. Validate| Keycloak\\n    VaultAPI -->|6. Store/Retrieve| Database[(📊 PostgreSQL)]\\n    VaultAPI -->|7. Process| Analyzer[🔍 Media Analyzer]\\n    VaultAPI -->|8. Scan| NSFW[🤖 NSFW Detector]\\n    \\n    %% Storage\\n    VaultAPI -->|9. Store Files| Storage[💾 Object Storage]\\n    \\n    %% Monitoring\\n    subgraph \\\"📊 Monitoring\\\"\\n        Prometheus[Prometheus]\\n        Grafana[Grafana]\\n        Loki[Loki]\\n        Promtail[Promtail]\\n    end\\n    \\n    VaultAPI -->|10. Metrics| Prometheus\\n    Prometheus -->|11. Visualize| Grafana\\n    VaultAPI -->|12. Logs| Loki\\n    \\n    %% Styling\\n    classDef frontend fill:#e3f2fd,stroke:#1976d2\\n    classDef backend fill:#4a148c,stroke:#7b1fa2,color:white\\n    classDef auth fill:#fff3e0,stroke:#f57c00\\n    classDef storage fill:#fff8e1,stroke:#f57c00\\n    classDef monitoring fill:#e8f5e9,stroke:#388e3c\\n    \\n    class Flutter frontend\\n    class VaultAPI,Analyzer,NSFW backend\\n    class Keycloak auth\\n    class Database,Storage storage\\n    class Prometheus,Grafana,Loki,Promtail monitoring\\n```\\n\\n## 🧱 Core Components\\n\\n### 1. Frontend (Flutter Web)\\n- **Responsive UI**: Works on all devices\\n- **Progressive Web App (PWA)**: Installable on desktop/mobile\\n- **State Management**: Provider/Riverpod\\n- **Theming**: Light/Dark mode support\\n\\n### 2. API Layer (Go + Fiber)\\n- **RESTful API**: JSON-based endpoints\\n- **Authentication**: JWT validation with Keycloak\\n- **Rate Limiting**: Protect against abuse\\n- **Request Validation**: Input sanitization\\n- **Documentation**: OpenAPI/Swagger\\n\\n### 3. Authentication (Keycloak)\\n- **Single Sign-On (SSO)**: Support for OAuth2/OIDC\\n- **Multi-Factor Auth**: TOTP, WebAuthn\\n- **User Federation**: LDAP, Active Directory\\n- **Role-Based Access Control (RBAC)**: Fine-grained permissions\\n\\n### 4. Media Processing\\n- **File Analysis**: Extract metadata\\n- **Thumbnail Generation**: For images and videos\\n- **Content Moderation**: NSFW detection\\n- **Format Conversion**: Transcoding to web-friendly formats\\n\\n### 5. Storage\\n- **Object Storage**: S3-compatible (MinIO)\\n- **Encryption**: At-rest and in-transit\\n- **Versioning**: File history and rollback\\n- **Replication**: Cross-region replication for DR\\n\\n### 6. Monitoring & Observability\\n- **Metrics**: Prometheus\\n- **Visualization**: Grafana dashboards\\n- **Logging**: Loki + Promtail\\n- **Alerting**: Alertmanager\\n\\n## 🔄 Data Flow\\n\\n### File Upload Process\\n1. User authenticates and gets JWT\\n2. Client requests signed upload URL from API\\n3. Client uploads file directly to storage\\n4. API processes the file asynchronously\\n5. Metadata is stored in database\\n6. User receives upload confirmation\\n\\n### Authentication Flow\\n```mermaid\\nsequenceDiagram\\n    participant U as User\\n    participant F as Frontend\\n    participant K as Keycloak\\n    participant A as API\\n    \\n    U->>F: Access app\\n    F->>K: Redirect to login\\n    U->>K: Enter credentials\\n    K->>F: Return JWT\\n    F->>A: Request with JWT\\n    A->>K: Validate token\\n    K->>A: Token info\\n    A->>F: Protected data\\n    F->>U: Render UI\\n```\\n\\n## 🚀 Infrastructure Administration\\n\\nBelow is the detailed infrastructure stack that powers Media Vault:\\n\\n### 📊 Complete Infrastructure Stack\\n\\n```ascii\\n                    🏗️ INFRASTRUCTURE OVERVIEW\\n┌─────────────────────────────────────────────────────────────────────┐\\n│                          MONITORING LAYER                          │\\n│  ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐   │\\n│  │  Prometheus │ │   Grafana   │ │AlertManager │ │   Jaeger    │   │\\n│  │ :9090       │ │ :3333       │ │ :9093       │ │ :16686      │   │\\n│  │ Metrics     │ │ Dashboards  │ │ Alerts      │ │ Tracing     │   │\\n│  └─────────────┘ └─────────────┘ └─────────────┘ └─────────────┘   │\\n└─────────────────────────────────────────────────────────────────────┘\\n\\n## 📊 Complete Infrastructure Stack\\n\\n```ascii\\n                    🏗️ INFRASTRUCTURE OVERVIEW\\n┌─────────────────────────────────────────────────────────────────────┐\\n│                          MONITORING LAYER                          │\\n│  ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐   │\\n│  │  Prometheus │ │   Grafana   │ │AlertManager │ │   Jaeger    │   │\\n│  │ :9090       │ │ :3333       │ │ :9093       │ │ :16686      │   │\\n│  │ Metrics     │ │ Dashboards  │ │ Alerts      │ │ Tracing     │   │\\n│  └─────────────┘ └─────────────┘ └─────────────┘ └─────────────┘   │\\n└─────────────────────────────────────────────────────────────────────┘\\n┌─────────────────────────────────────────────────────────────────────┐\\n│                           LOGGING LAYER                            │\\n│  ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐   │\\n│  │    Loki     │ │  Promtail   │ │    ELK      │ │  FileBeat   │   │\\n│  │ :3100       │ │ Log Ship    │ │ :5601       │ │ Log Ship    │   │\\n│  │ Log Aggreg  │ │             │ │ Advanced    │ │             │   │\\n│  └─────────────┘ └─────────────┘ └─────────────┘ └─────────────┘   │\\n└─────────────────────────────────────────────────────────────────────┘\\n┌─────────────────────────────────────────────────────────────────────┐\\n│                         MANAGEMENT LAYER                           │\\n│  ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐   │\\n│  │  Portainer  │ │  pgAdmin    │ │Redis Cmd    │ │ Watchtower  │   │\\n│  │ :9000       │ │ :5050       │ │ :8081       │ │ Auto Update │   │\\n│  │ Docker Mgmt │ │ DB Admin    │ │ Redis Mgmt  │ │             │   │\\n│  └─────────────┘ └─────────────┘ └─────────────┘ └─────────────┘   │\\n└─────────────────────────────────────────────────────────────────────┘\\n┌─────────────────────────────────────────────────────────────────────┐\\n│                         SECURITY & BACKUP                          │\\n│  ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐   │\\n│  │   Traefik   │ │ Nginx Proxy │ │   Backup    │ │  Security   │   │\\n│  │ :8080       │ │ :8181       │ │ Service     │ │ Scanner     │   │\\n│  │ Load Bal    │ │ Proxy Mgmt  │ │ Automated   │ │ Trivy       │   │\\n│  └─────────────┘ └─────────────┘ └─────────────┘ └─────────────┘   │\\n└─────────────────────────────────────────────────────────────────────┘\\n```\\n\\n## 🚀 Quick Start Commands\\n\\n### **Infrastructure Deployment:**\\n```bash\\n# Full infrastructure stack\\nmake infrastructure\\n\\n# Basic monitoring only\\nmake monitoring  \\n\\n# Everything (Vault + Infrastructure)\\nmake full-stack\\n\\n# Specialized stacks\\nmake infra-elk      # Elasticsearch + Kibana\\nmake infra-traefik  # Traefik load balancer\\nmake infra-nginx    # Nginx Proxy Manager\\n```\\n\\n### **Management Commands:**\\n```bash\\n# Status and health\\nmake infra-status   # Infrastructure status\\nmake health-check   # Health check all services\\nmake dev-logs       # Development logs\\n\\n# Performance and security\\nmake load-test      # K6 performance testing\\nmake security-scan  # Trivy vulnerability scan\\nmake performance-report  # Generate report\\n\\n# Backup and maintenance\\nmake backup-now     # Immediate backup\\nmake cleanup-all    # Clean unused resources\\n```\\n\\n## 📊 Monitoring & Observability\\n\\n### **Prometheus Metrics:**\\n- ✅ **System metrics** (CPU, Memory, Disk, Network)\\n- ✅ **Container metrics** (Docker stats via cAdvisor)\\n- ✅ **Application metrics** (API response times, errors)\\n- ✅ **Keycloak metrics** (authentication events)\\n- ✅ **Custom alerts** (service down, high resource usage)\\n\\n### **Grafana Dashboards:**\\n- 📊 **Infrastructure Overview** - System health\\n- 📈 **Application Performance** - API metrics\\n- 🔐 **Security Dashboard** - Auth events\\n- 💾 **Storage Analytics** - Vault usage\\n- 🐳 **Container Monitoring** - Docker stats\\n\\n### **Alert Definitions:**\\n```yaml\\nCritical Alerts:\\n  - Service Down (> 1 min)\\n  - Disk Space < 10%\\n  - Memory Usage > 90%\\n  - Failed Login Spike\\n\\nWarning Alerts:\\n  - High CPU (> 80%, 5 min)\\n  - Response Time > 2s\\n  - Memory Usage > 85%\\n```\\n\\n## 🏗️ Infrastructure Components\\n\\n### **Core Monitoring:**\\n| Service | Port | Purpose | Dashboard |\\n|---------|------|---------|-----------|\\n| **Prometheus** | 9090 | Metrics collection | http://localhost:9090 |\\n| **Grafana** | 3333 | Visualization | http://localhost:3333 |\\n| **AlertManager** | 9093 | Alert management | http://localhost:9093 |\\n| **Node Exporter** | 9100 | Host metrics | http://localhost:9100 |\\n| **cAdvisor** | 8888 | Container metrics | http://localhost:8888 |\\n\\n### **Advanced Logging:**\\n| Service | Port | Purpose | Dashboard |\\n|---------|------|---------|-----------|\\n| **Loki** | 3100 | Log aggregation | via Grafana |\\n| **Promtail** | - | Log shipping | - |\\n| **Elasticsearch** | 9200 | Search & analytics | http://localhost:9200 |\\n| **Kibana** | 5601 | Log visualization | http://localhost:5601 |\\n| **Jaeger** | 16686 | Distributed tracing | http://localhost:16686 |\\n\\n### **Management Tools:**\\n| Service | Port | Purpose | Dashboard |\\n|---------|------|---------|-----------|\\n| **Portainer** | 9000 | Docker management | http://localhost:9000 |\\n| **pgAdmin** | 5050 | PostgreSQL admin | http://localhost:5050 |\\n| **Redis Commander** | 8081 | Redis management | http://localhost:8081 |\\n| **Traefik** | 8080 | Load balancer | http://localhost:8080 |\\n\\n## 🔒 Security & Compliance\\n\\n### **Security Features:**\\n- 🛡️ **Container scanning** with Trivy\\n- 🔐 **Secret management** via Docker secrets\\n- 🌐 **Network policies** and segmentation\\n- 📝 **Audit logging** for all admin actions\\n- 🚨 **Intrusion detection** alerts\\n\\n### **Backup Strategy:**\\n- 📅 **Automated daily backups** at 2 AM\\n- ☁️ **S3 upload** for off-site storage\\n- 🔄 **30-day retention** policy\\n- 🗜️ **Compressed archives** with encryption\\n- ✅ **Backup verification** checks\\n\\n### **Production Security:**\\n```yaml\\nSecurity Headers:\\n  - Strict-Transport-Security\\n  - X-Content-Type-Options: nosniff\\n  - X-Frame-Options: DENY\\n  - Referrer-Policy: strict-origin\\n\\nRate Limiting:\\n  - 100 requests/minute per IP\\n  - Admin panel IP restriction\\n  - API throttling enabled\\n```\\n\\n## 📈 Performance Optimization\\n\\n### **Resource Monitoring:**\\n- 📊 **Real-time dashboards** \\n- ⚡ **Performance alerts**\\n- 🎯 **SLA monitoring** (99.9% uptime)\\n- 📉 **Trend analysis**\\n\\n### **Auto-scaling:**\\n- 🔄 **HPA** for API services\\n- 📈 **Load balancing** with Traefik\\n- 🎛️ **Resource limits** per container\\n- ⚖️ **Dynamic scaling** based on metrics\\n\\n### **Performance Testing:**\\n```bash\\n# K6 load testing\\nmake load-test\\n\\n# Response time monitoring\\ncurl -w \\\"@curl-format.txt\\\" http://localhost:8080/health\\n\\n# Resource usage\\ndocker stats --format \\\"table {{.Name}}\\\\t{{.CPUPerc}}\\\\t{{.MemUsage}}\\\"\\n```\\n\\n## 🚨 Incident Response\\n\\n### **Alert Channels:**\\n- 📧 **Email notifications** to admin\\n- 💬 **Slack integration** for team alerts\\n- 📱 **PagerDuty** for critical issues\\n- 📊 **Dashboard notifications**\\n\\n### **Runbooks:**\\n1. **Service Down:**\\n   ```bash\\n   make health-check     # Identify failed service\\n   docker-compose restart <service>\\n   make dev-logs        # Check logs\\n   ```\\n\\n2. **High Resource Usage:**\\n   ```bash\\n   make performance-report  # Generate report\\n   docker stats            # Check current usage\\n   make cleanup-all        # Clean resources\\n   ```\\n\\n3. **Security Incident:**\\n   ```bash\\n   make security-scan      # Vulnerability check\\n   docker-compose logs     # Review access logs\\n   # Block suspicious IPs in Caddy/Traefik\\n   ```\\n\\n## 🎛️ Administration Workflows\\n\\n### **Daily Operations:**\\n- ✅ Check health dashboard\\n- 📊 Review performance metrics\\n- 🔍 Scan security alerts\\n- 💾 Verify backup completion\\n\\n### **Weekly Tasks:**\\n- 📈 Performance report review\\n- 🛡️ Security scan execution\\n- 🧹 Resource cleanup\\n- 📋 Capacity planning review\\n\\n### **Monthly Maintenance:**\\n- 🔄 Update container images\\n- 📊 SLA report generation\\n- 🗄️ Backup retention cleanup\\n- 🔐 Security audit review\\n\\n## 💡 Pro Tips\\n\\n### **Optimization:**\\n- Use **profiles** for different environments\\n- Enable **automatic updates** with Watchtower\\n- Set up **custom metrics** for business logic\\n- Implement **circuit breakers** for resilience\\n\\n### **Troubleshooting:**\\n- Always check **logs first**: `make dev-logs`\\n- Use **health endpoints** for service status\\n- Monitor **resource usage** trends\\n- Keep **runbooks updated** for common issues\\n\\nThis infrastructure setup provides **enterprise-grade** monitoring, security, and management capabilities for Media Vault! 🚀\"\n        },\n        {\n          \"name\": \"DEPLOYMENT.md\",\n          \"type\": \"file\",\n          \"path\": \"docs/DEPLOYMENT.md\",\n          \"size\": 4143,\n          \"content\": \"# 🚀 Deployment Guide\\n\\nThis guide provides detailed instructions for deploying the Media Vault platform in various environments.\\n\\n## Table of Contents\\n- [Prerequisites](#-prerequisites)\\n- [Quick Start](#-quick-start)\\n- [Configuration](#-configuration)\\n- [Environment Variables](#-environment-variables)\\n- [Service Ports](#-service-ports)\\n- [Scaling](#-scaling)\\n- [Backup & Recovery](#-backup--recovery)\\n- [Troubleshooting](#-troubleshooting)\\n\\n## 📋 Prerequisites\\n\\n### System Requirements\\n- **Minimum**:\\n  - 2 vCPUs\\n  - 4GB RAM\\n  - 20GB Storage\\n- **Recommended**:\\n  - 4+ vCPUs\\n  - 8GB+ RAM\\n  - 100GB+ Storage (SSD recommended)\\n\\n### Required Software\\n- Docker 20.10+\\n- Docker Compose 2.0+\\n- Git\\n- Make (optional but recommended)\\n\\n## 🚀 Quick Start\\n\\n### Local Development Setup\\n\\n1. **Clone the repository**:\\n   ```bash\\n   git clone https://github.com/wronai/docker-platform.git\\n   cd docker-platform\\n   ```\\n\\n2. **Set up environment**:\\n   ```bash\\n   cp .env.example .env\\n   # Edit .env with your configuration\\n   ```\\n\\n3. **Start the stack**:\\n   ```bash\\n   make up\\n   ```\\n   \\n   Or for development mode:\\n   ```bash\\n   make dev\\n   ```\\n\\n4. **Verify the installation**:\\n   ```bash\\n   make status\\n   ```\\n\\n## 🔧 Configuration\\n\\n### Key Configuration Files\\n\\n| File | Description |\\n|------|-------------|\\n| `.env` | Main environment configuration |\\n| `docker-compose.yml` | Core services definition |\\n| `docker-compose.monitoring.yml` | Monitoring stack |\\n| `caddy/Caddyfile` | Reverse proxy configuration |\\n| `keycloak/import/realm-export.json` | Keycloak realm settings |\\n\\n### Environment Variables\\n\\nKey environment variables to configure:\\n\\n```bash\\n# Application\\nAPP_ENV=production\\nAPP_SECRET=your-secret-key\\nAPP_URL=https://your-domain.com\\n\\n# Database\\nPOSTGRES_USER=mediavault\\nPOSTGRES_PASSWORD=secure-password\\nPOSTGRES_DB=mediavault\\n\\n# Keycloak\\nKEYCLOAK_ADMIN=admin\\nKEYCLOAK_ADMIN_PASSWORD=change-me\\nKEYCLOAK_FRONTEND_URL=https://auth.your-domain.com\\n\\n# Storage\\nSTORAGE_PATH=/data/media\\nBACKUP_PATH=/data/backups\\n```\\n\\n## 🔌 Service Ports\\n\\n| Service | Port | Protocol | Description |\\n|---------|------|----------|-------------|\\n| Web UI | 80/443 | HTTP/HTTPS | Main application interface |\\n| Admin | 8081 | HTTPS | Admin dashboard |\\n| Keycloak | 8080 | HTTPS | Authentication service |\\n| Grafana | 3000 | HTTP | Monitoring dashboards |\\n| Prometheus | 9090 | HTTP | Metrics collection |\\n| Alertmanager | 9093 | HTTP | Alert management |\\n| cAdvisor | 8081 | HTTP | Container metrics |\\n| Node Exporter | 9100 | HTTP | Host metrics |\\n\\n## ⚖️ Scaling\\n\\n### Horizontal Scaling\\n\\nTo scale backend services:\\n```bash\\ndocker-compose up -d --scale backend=3\\n```\\n\\n### Database Scaling\\nFor production deployments, consider:\\n- Setting up PostgreSQL replication\\n- Using a managed database service\\n- Implementing connection pooling with PgBouncer\\n\\n## 💾 Backup & Recovery\\n\\n### Automated Backups\\n\\n1. **Database Backups**:\\n   ```bash\\n   # Create a database backup\\n   make backup-db\\n   \\n   # Restore from backup\\n   make restore-db BACKUP_FILE=backup_20230530.sql\\n   ```\\n\\n2. **Media Files**:\\n   ```bash\\n   # Backup media files\\n   make backup-media\\n   \\n   # Restore media\\n   make restore-media BACKUP_FILE=media_backup_20230530.tar.gz\\n   ```\\n\\n### Disaster Recovery\\n\\n1. **Full System Backup**:\\n   ```bash\\n   make full-backup\\n   ```\\n\\n2. **Restore from Backup**:\\n   ```bash\\n   make restore-backup BACKUP_FILE=full_backup_20230530.tar.gz\\n   ```\\n\\n## 🐛 Troubleshooting\\n\\n### Common Issues\\n\\n1. **Port Conflicts**\\n   - Check for running services: `sudo lsof -i -P -n | grep LISTEN`\\n   - Update `docker-compose.yml` with available ports\\n\\n2. **Permission Issues**\\n   ```bash\\n   sudo chown -R $USER:$USER .\\n   chmod -R 755 data/\\n   ```\\n\\n3. **Service Not Starting**\\n   ```bash\\n   # Check logs\\n   make logs service=backend\\n   \\n   # Restart services\\n   make restart\\n   ```\\n\\n### Getting Help\\n\\n- Check the [FAQ](docs/FAQ.md)\\n- Search [GitHub Issues](https://github.com/wronai/docker-platform/issues)\\n- Join our [community forum](#) (coming soon)\\n\\n## 📝 Next Steps\\n\\n- [Set up monitoring](MONITORING.md)\\n- [Configure authentication](SECURITY.md)\\n- [API Documentation](API.md)\"\n        },\n        {\n          \"name\": \"MONITORING.md\",\n          \"type\": \"file\",\n          \"path\": \"docs/MONITORING.md\",\n          \"size\": 5849,\n          \"content\": \"# 📊 Monitoring & Observability Guide\\n\\nThis document provides a comprehensive guide to monitoring the Media Vault platform using the built-in observability stack.\\n\\n## Table of Contents\\n- [Monitoring Stack](#-monitoring-stack)\\n- [Accessing Dashboards](#-accessing-dashboards)\\n- [Key Metrics](#-key-metrics)\\n- [Alerting](#-alerting)\\n- [Log Management](#-log-management)\\n- [Performance Tuning](#-performance-tuning)\\n- [Troubleshooting](#-troubleshooting)\\n\\n## 🛠️ Monitoring Stack\\n\\nMedia Vault uses a modern observability stack:\\n\\n```mermaid\\ngraph TD\\n    A[Prometheus] -->|Scrape Metrics| B[Node Exporter]\\n    A -->|Scrape Metrics| C[cAdvisor]\\n    A -->|Scrape Metrics| D[Application Metrics]\\n    A -->|Send Alerts| E[Alertmanager]\\n    E -->|Notifications| F[Email/Slack]\\n    G[Grafana] -->|Query| A\\n    G -->|Query| H[Loki]\\n    I[Promtail] -->|Ship Logs| H\\n    J[Applications] -->|Logs| I\\n```\\n\\n### Components\\n\\n| Component | Description | Port |\\n|-----------|-------------|------|\\n| **Prometheus** | Metrics collection and storage | 9090 |\\n| **Grafana** | Visualization and dashboards | 3000 |\\n| **Alertmanager** | Alert routing and deduplication | 9093 |\\n| **Node Exporter** | Host-level metrics | 9100 |\\n| **cAdvisor** | Container metrics | 8080 |\\n| **Loki** | Log aggregation | 3100 |\\n| **Promtail** | Log shipping | - |\\n\\n\\n## 🖥️ Accessing Dashboards\\n\\n### Grafana\\n- **URL**: http://localhost:3000\\n- **Default Credentials**:\\n  - Username: `admin`\\n  - Password: `admin` (change on first login)\\n\\n### Prometheus\\n- **URL**: http://localhost:9090\\n- **API**: http://localhost:9090/api/v1/query\\n\\n### Alertmanager\\n- **URL**: http://localhost:9093\\n\\n## 📈 Key Metrics\\n\\n### Infrastructure Metrics\\n- **CPU Usage**: `rate(node_cpu_seconds_total[5m])`\\n- **Memory Usage**: `node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes`\\n- **Disk I/O**: `rate(node_disk_read_bytes_total[5m])`\\n- **Network Traffic**: `rate(node_network_receive_bytes_total[5m])`\\n\\n### Application Metrics\\n- **Request Rate**: `rate(http_requests_total[5m])`\\n- **Error Rate**: `rate(http_requests_total{status=~\\\"5..\\\"}[5m])`\\n- **Request Duration**: `histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket[5m])) by (le))`\\n- **Active Users**: `sum(up{job=~\\\"app.*\\\"})`\\n\\n### Database Metrics\\n- **Active Connections**: `pg_stat_activity_count`\\n- **Query Performance**: `rate(pg_stat_activity_queries_duration_seconds_sum[5m])`\\n- **Cache Hit Ratio**: `sum(rate(pg_stat_database_blks_hit[5m])) / sum(rate(pg_stat_database_blks_hit[5m])) + sum(rate(pg_stat_database_blks_read[5m]))`\\n\\n## 🚨 Alerting\\n\\n### Critical Alerts\\n\\n| Alert | Description | Severity |\\n|-------|-------------|----------|\\n| HighErrorRate | Error rate > 5% | critical |\\n| HighLatency | p95 latency > 1s | critical |\\n| InstanceDown | Service down > 5m | critical |\\n| DiskSpaceLow | < 10% free space | warning |\\n| HighCPU | CPU > 90% for 5m | warning |\\n\\n### Alert Configuration\\n\\nAlert rules are defined in `monitoring/prometheus/alert.rules`:\\n\\n```yaml\\ngroups:\\n- name: instance\\n  rules:\\n  - alert: InstanceDown\\n    expr: up == 0\\n    for: 5m\\n    labels:\\n      severity: critical\\n    annotations:\\n      summary: \\\"Instance {{ $labels.instance }} down\\\"\\n      description: \\\"{{ $labels.instance }} has been down for more than 5 minutes\\\"\\n```\\n\\n### Notification Channels\\n- Email\\n- Slack\\n- PagerDuty\\n- Webhooks\\n\\n## 📝 Log Management\\n\\n### Log Collection\\n- **Loki** aggregates logs from all services\\n- **Promtail** ships logs to Loki\\n- Structured logging in JSON format\\n\\n### Querying Logs\\n\\n```sql\\n# Find errors in the last hour\\n{job=~\\\"app.+\\\"} |= \\\"error\\\" | json | line_format \\\"{{.message}}\\\"\\n\\n# Slow requests\\n{job=\\\"api\\\"} | json | duration > 1s\\n\\n# User activity\\n{job=~\\\"app.+\\\"} | json | user_id!=\\\"\\\"\\n```\\n\\n## ⚡ Performance Tuning\\n\\n### Prometheus Configuration\\n\\n```yaml\\n# Increase retention period\\nretention: 30d\\n\\n# Configure scrape intervals\\nscrape_interval: 15s\\nevaluation_interval: 15s\\n\\n# Enable remote write for long-term storage\\nremote_write:\\n  - url: http://remote-storage:8086/api/v1/push\\n```\\n\\n### Resource Limits\\n\\n```yaml\\n# docker-compose.override.yml\\nservices:\\n  prometheus:\\n    deploy:\\n      resources:\\n        limits:\\n          cpus: '2'\\n          memory: 4G\\n```\\n\\n## 🐛 Troubleshooting\\n\\n### Common Issues\\n\\n1. **No Data in Grafana**\\n   - Check Prometheus targets: http://localhost:9090/targets\\n   - Verify service discovery is working\\n   - Check Prometheus logs: `docker-compose logs prometheus`\\n\\n2. **High Memory Usage**\\n   - Increase memory limits\\n   - Adjust retention periods\\n   - Optimize queries\\n\\n3. **Alert Notifications Not Working**\\n   - Check Alertmanager configuration\\n   - Verify notification channels\\n   - Check Alertmanager logs\\n\\n### Useful Commands\\n\\n```bash\\n# Check Prometheus status\\ncurl -s http://localhost:9090/-/healthy\\n\\n# Query metrics directly\\ncurl 'http://localhost:9090/api/v1/query?query=up'\\n\\n# Check Promtail status\\ncurl http://localhost:9080/metrics\\n```\\n\\n## 🔄 Maintenance\\n\\n### Backup & Restore\\n\\n```bash\\n# Backup Prometheus data\\ndocker run --rm -v prometheus_data:/source -v $(pwd):/backup alpine tar czf /backup/prometheus_backup.tar.gz -C /source .\\n\\n# Restore\\ndocker run --rm -v prometheus_data:/target -v $(pwd):/backup alpine sh -c \\\"cd /target && tar xzf /backup/prometheus_backup.tar.gz\\\"\\n```\\n\\n### Upgrading\\n\\n1. Backup all data\\n2. Check release notes for breaking changes\\n3. Update configuration files\\n4. Run migrations if needed\\n5. Restart services\\n\\n## 📚 Additional Resources\\n\\n- [Prometheus Documentation](https://prometheus.io/docs/)\\n- [Grafana Documentation](https://grafana.com/docs/)\\n- [Loki Documentation](https://grafana.com/docs/loki/latest/)\\n- [Alerting Best Practices](https://prometheus.io/docs/practices/alerting/)\\n\\nFor support, please contact the DevOps team or open an issue in our [GitHub repository](https://github.com/wronai/docker-platform/issues).\"\n        },\n        {\n          \"name\": \"NEW_DEPLOYMENT.md\",\n          \"type\": \"file\",\n          \"path\": \"docs/NEW_DEPLOYMENT.md\",\n          \"size\": 5416,\n          \"content\": \"# 🚀 Media Vault Deployment Guide\\n\\nThis guide provides comprehensive instructions for deploying the Media Vault platform across different environments, from local development to production.\\n\\n## 📋 Table of Contents\\n\\n### Getting Started\\n- [Prerequisites](#-prerequisites)\\n- [Quick Start](#-quick-start)\\n- [Configuration](#-configuration)\\n\\n### Deployment Types\\n- [Local Development](#-local-development)\\n- [Production Deployment](#-production-deployment)\\n- [Kubernetes](#-kubernetes-deployment)\\n\\n### Configuration\\n- [Environment Variables](#-environment-variables)\\n- [Service Ports](#-service-ports)\\n- [Storage Configuration](#-storage-configuration)\\n- [Networking](#-networking)\\n\\n### Operations\\n- [Scaling](#-scaling)\\n- [Monitoring](#-monitoring)\\n- [Backup & Recovery](#-backup--recovery)\\n- [Upgrading](#-upgrading)\\n- [Troubleshooting](#-troubleshooting)\\n\\n## 📋 Prerequisites\\n\\n### System Requirements\\n\\n#### Development Environment\\n- **Minimum**:\\n  - 2 vCPUs\\n  - 4GB RAM\\n  - 20GB available storage\\n  - Docker 20.10+\\n  - Docker Compose 2.0+\\n  - Git\\n  - Make (recommended)\\n\\n#### Production Environment\\n- **Minimum**:\\n  - 4 vCPUs\\n  - 8GB RAM\\n  - 100GB+ SSD storage\\n  - Linux-based OS (Ubuntu 20.04 LTS recommended)\\n  - Docker 20.10+ and Docker Compose 2.0+\\n  - Domain name with valid SSL certificate\\n\\n#### Kubernetes (Optional)\\n- Kubernetes 1.20+\\n- Helm 3.0+\\n- Ingress controller (Nginx, Traefik, etc.)\\n- Persistent Volume provisioner\\n\\n## 🚀 Quick Start\\n\\n### Local Development Setup\\n\\n1. **Clone the repository**:\\n   ```bash\\n   git clone https://github.com/wronai/docker-platform.git\\n   cd docker-platform\\n   ```\\n\\n2. **Set up environment**:\\n   ```bash\\n   # Copy and edit the environment file\\n   cp .env.example .env\\n   \\n   # Review and update configuration as needed\\n   # - Set ADMIN_EMAIL and ADMIN_PASSWORD\\n   # - Configure database credentials\\n   # - Update hostnames if needed\\n   ```\\n\\n3. **Build and start services**:\\n   ```bash\\n   # Pull latest images and build containers\\n   make build\\n   \\n   # Start all services in detached mode\\n   make up\\n   \\n   # View logs (optional)\\n   make logs\\n   ```\\n\\n4. **Verify the installation**:\\n   ```bash\\n   # Check running containers\\n   docker-compose ps\\n   \\n   # Check service health\\n   curl http://localhost:8080/health\\n   ```\\n\\n5. **Access the application**:\\n   - Web UI: https://localhost\\n   - Admin Panel: https://admin.localhost\\n   - API Documentation: http://localhost:8080/api/docs\\n   - Keycloak Admin: https://auth.localhost\\n\\n## 🔧 Configuration\\n\\n### Key Configuration Files\\n\\n| File | Description |\\n|------|-------------|\\n| `.env` | Main environment configuration |\\n| `docker-compose.yml` | Core services definition |\\n| `docker-compose.monitoring.yml` | Monitoring stack |\\n| `caddy/Caddyfile` | Reverse proxy configuration |\\n| `keycloak/import/realm-export.json` | Keycloak realm settings |\\n\\n### Environment Variables\\n\\nKey environment variables to configure:\\n\\n```bash\\n# Application\\nAPP_ENV=production\\nAPP_SECRET=your-secret-key\\nAPP_URL=https://your-domain.com\\n\\n# Database\\nPOSTGRES_USER=mediavault\\nPOSTGRES_PASSWORD=secure-password\\nPOSTGRES_DB=mediavault\\n\\n# Keycloak\\nKEYCLOAK_ADMIN=admin\\nKEYCLOAK_ADMIN_PASSWORD=change-me\\nKEYCLOAK_FRONTEND_URL=https://auth.your-domain.com\\n\\n# Storage\\nSTORAGE_PATH=/data/media\\nBACKUP_PATH=/data/backups\\n```\\n\\n## 🔌 Service Ports\\n\\n| Service | Port | Protocol | Description |\\n|---------|------|----------|-------------|\\n| Web UI | 80/443 | HTTP/HTTPS | Main application interface |\\n| Admin | 8081 | HTTPS | Admin dashboard |\\n| Keycloak | 8080 | HTTPS | Authentication service |\\n| Grafana | 3000 | HTTP | Monitoring dashboards |\\n| Prometheus | 9090 | HTTP | Metrics collection |\\n| Alertmanager | 9093 | HTTP | Alert management |\\n| cAdvisor | 8081 | HTTP | Container metrics |\\n| Node Exporter | 9100 | HTTP | Host metrics |\\n\\n## ⚖️ Scaling\\n\\n### Horizontal Scaling\\n\\nTo scale backend services:\\n```bash\\ndocker-compose up -d --scale backend=3\\n```\\n\\n### Database Scaling\\nFor production deployments, consider:\\n- Setting up PostgreSQL replication\\n- Using a managed database service\\n- Implementing connection pooling with PgBouncer\\n\\n## 💾 Backup & Recovery\\n\\n### Automated Backups\\n\\n1. **Database Backups**:\\n   ```bash\\n   # Create a database backup\\n   make backup-db\\n   \\n   # Restore from backup\\n   make restore-db BACKUP_FILE=backup_20230530.sql\\n   ```\\n\\n2. **Media Files**:\\n   ```bash\\n   # Backup media files\\n   make backup-media\\n   \\n   # Restore media\\n   make restore-media BACKUP_FILE=media_backup_20230530.tar.gz\\n   ```\\n\\n### Disaster Recovery\\n\\n1. **Full System Backup**:\\n   ```bash\\n   make full-backup\\n   ```\\n\\n2. **Restore from Backup**:\\n   ```bash\\n   make restore-backup BACKUP_FILE=full_backup_20230530.tar.gz\\n   ```\\n\\n## 🐛 Troubleshooting\\n\\n### Common Issues\\n\\n1. **Port Conflicts**\\n   - Check for running services: `sudo lsof -i -P -n | grep LISTEN`\\n   - Update `docker-compose.yml` with available ports\\n\\n2. **Permission Issues**\\n   ```bash\\n   sudo chown -R $USER:$USER .\\n   chmod -R 755 data/\\n   ```\\n\\n3. **Service Not Starting**\\n   ```bash\\n   # Check logs\\n   make logs service=backend\\n   \\n   # Restart services\\n   make restart\\n   ```\\n\\n### Getting Help\\n\\n- Check the [FAQ](docs/FAQ.md)\\n- Search [GitHub Issues](https://github.com/wronai/docker-platform/issues)\\n- Join our [community forum](#) (coming soon)\\n\\n## 📝 Next Steps\\n\\n- [Set up monitoring](MONITORING.md)\\n- [Configure authentication](SECURITY.md)\\n- [API Documentation](API.md)\\n\"\n        },\n        {\n          \"name\": \"README.md\",\n          \"type\": \"file\",\n          \"path\": \"docs/README.md\",\n          \"size\": 21909,\n          \"content\": \"# 📚 Media Vault Documentation\\n\\nWelcome to the Media Vault documentation! This directory contains comprehensive guides and references for setting up, configuring, and maintaining your Media Vault instance.\\n\\n## 📋 Table of Contents\\n\\n### Getting Started\\n- [Quick Start Guide](../README.md) - Get up and running in minutes\\n- [Deployment Guide](DEPLOYMENT.md) - Detailed deployment instructions\\n- [Architecture](ARCHITECTURE.md) - System design and components\\n\\n### User Guides\\n- [User Guide](USER_GUIDE.md) - End-user documentation\\n- [API Reference](API.md) - Complete API documentation\\n- [Security Guide](SECURITY.md) - Security best practices\\n\\n### Administration\\n- [Monitoring](MONITORING.md) - Observability and alerting\\n- [Backup & Recovery](DEPLOYMENT.md#backup--recovery) - Data protection\\n- [Troubleshooting](DEPLOYMENT.md#-troubleshooting) - Common issues and solutions\\n\\n## 🚀 Quick Links\\n\\n- [Main Repository](https://github.com/wronai/docker-platform)\\n- [Issue Tracker](https://github.com/wronai/docker-platform/issues)\\n- [Changelog](../CHANGELOG.md)\\n- [Contributing Guide](../CONTRIBUTING.md)\\n\\n## 📂 Documentation Structure\\n\\n```\\ndocs/\\n├── API.md               # REST API reference and usage\\n├── ARCHITECTURE.md      # System design and components\\n├── DEPLOYMENT.md        # Installation and configuration\\n├── MONITORING.md        # Monitoring and observability\\n├── README.md            # This file\\n├── SECURITY.md          # Security best practices\\n└── USER_GUIDE.md        # End-user documentation\\n```\\n\\n## 🛠️ Development\\n\\n### Prerequisites\\n\\n- Docker 20.10+\\n- Docker Compose 2.0+\\n- Make (optional but recommended)\\n- Node.js 16+ (for frontend development)\\n- Go 1.19+ (for backend development)\\n\\n### Local Development Setup\\n\\n1. Clone the repository:\\n   ```bash\\n   git clone https://github.com/wronai/docker-platform.git\\n   cd docker-platform\\n   ```\\n\\n2. Set up environment variables:\\n   ```bash\\n   cp .env.example .env\\n   # Edit .env with your configuration\\n   ```\\n\\n3. Start the development environment:\\n   ```bash\\n   make dev\\n   ```\\n\\n4. Access the applications:\\n   - Web UI: http://localhost:3000\\n   - API: http://localhost:8080\\n   - Documentation: http://localhost:8080/docs\\n   - Monitoring: http://localhost:9090\\n\\n## 🧪 Testing\\n\\n### Running Tests\\n\\n```bash\\n# Run all tests\\nmake test\\n\\n# Run backend tests\\nmake test-backend\\n\\n# Run frontend tests\\nmake test-frontend\\n\\n# Run integration tests\\nmake test-integration\\n```\\n\\n## 🔄 Maintenance\\n\\n### Database Migrations\\n\\n```bash\\n# Create a new migration\\nmake migration-create name=add_user_preferences\\n\\n# Run pending migrations\\nmake migrate-up\\n\\n# Rollback last migration\\nmake migrate-down\\n```\\n\\n### Monitoring and Logs\\n\\n```bash\\n# View application logs\\nmake logs\\n\\n# View specific service logs\\nmake logs service=backend\\n\\n# Access Prometheus metrics\\nopen http://localhost:9090\\n\\n# Access Grafana dashboards\\nopen http://localhost:3000\\n```\\n\\n## 🤝 Contributing\\n\\nWe welcome contributions from the community! Here's how you can help:\\n\\n1. **Report Bugs**\\n   - Search existing issues first\\n   - Create a new issue with detailed reproduction steps\\n\\n2. **Submit Fixes**\\n   - Fork the repository\\n   - Create a feature branch\\n   - Write tests for your changes\\n   - Submit a pull request\\n\\n3. **Improve Documentation**\\n   - Fix typos and clarify text\\n   - Add examples or missing information\\n   - Improve code comments\\n\\n### Code Style\\n\\n- **Backend (Go)**: `gofmt`, `golint`, `go vet`\\n- **Frontend (TypeScript)**: ESLint, Prettier\\n- **Commit Messages**: Follow [Conventional Commits](https://www.conventionalcommits.org/)\\n\\n## 📄 License\\n\\nThis project is licensed under the Apache 2.0 License - see the [LICENSE](../LICENSE) file for details.\\n\\n---\\n\\n<div align=\\\"center\\\">\\n  <p>Need help? Contact us at <a href=\\\"mailto:support@wron.ai\\\">support@wron.ai</a></p>\\n  <p>© 2023 WRON AI. All rights reserved.</p>\\n</div>\\n    Exporters-->>Prometheus: Forward metrics\\n    Prometheus-->>Grafana: Return data\\n    Grafana-->>Admin: Display dashboard\\n```\\n\\n## 🔧 Getting Started\\n\\n### Prerequisites\\n\\n- Docker 20.10+ and Docker Compose\\n- At least 4GB RAM (8GB recommended)\\n- Ports 80, 443, 8080, 8443, 3000 available\\n\\n### Quick Start\\n\\n1. Clone the repository:\\n   ```bash\\n   git clone https://github.com/wronai/docker-platform.git\\n   cd docker-platform\\n   ```\\n\\n2. Set up environment variables:\\n   ```bash\\n   cp .env.example .env\\n   # Edit .env with your configuration\\n   ```\\n\\n3. Start the stack:\\n   ```bash\\n   make up\\n   ```\\n\\n4. Access the applications:\\n   - Web UI: https://localhost\\n   - Admin Panel: https://admin.localhost\\n   - Keycloak: https://auth.localhost\\n   - Grafana: http://localhost:3000\\n\\n## 🧪 Testing\\n\\n### Running Tests\\n\\n```bash\\n# Run unit tests\\nmake test-unit\\n\\n# Run integration tests\\nmake test-integration\\n\\n# Run end-to-end tests\\nmake test-e2e\\n```\\n\\n### Test Coverage\\n\\n```bash\\n# Generate test coverage report\\nmake coverage\\n\\n# View coverage in browser\\nmake coverage-html\\n```\\n\\n## 📈 Monitoring\\n\\n### Access Monitoring Tools\\n\\n- **Grafana**: http://localhost:3000 (admin/admin)\\n- **Prometheus**: http://localhost:9090\\n- **Alertmanager**: http://localhost:9093\\n\\n### Key Metrics\\n\\n- API response times\\n- Error rates\\n- Resource usage\\n- User activity\\n- Storage utilization\\n\\n## 🛠️ Development\\n\\n### Project Structure\\n\\n```\\ndocker-platform/\\n├── media-vault-backend/    # Backend API service\\n├── media-vault-analyzer/   # AI analysis service\\n├── media-vault-admin/      # Admin dashboard\\n├── flutter-web/           # Frontend application\\n├── keycloak/              # Keycloak configuration\\n├── monitoring/            # Monitoring stack\\n├── docker-compose.yml     # Main compose file\\n└── Makefile              # Development commands\\n```\\n\\n### Development Workflow\\n\\n1. Start development environment:\\n   ```bash\\n   make dev\\n   ```\\n\\n2. Run services in watch mode:\\n   ```bash\\n   # Backend\\n   make watch-backend\\n   \\n   # Frontend\\n   make watch-frontend\\n   ```\\n\\n3. Run linters and formatters:\\n   ```bash\\n   make lint\\n   make format\\n   ```\\n\\n4. Check for security issues:\\n   ```bash\\n   make security-scan\\n   ```\\n\\n## 🤝 Contributing\\n\\n1. Fork the repository\\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\\n4. Push to the branch (`git push origin feature/amazing-feature`)\\n5. Open a Pull Request\\n\\n## 📄 License\\n\\nThis project is licensed under the Apache 2.0 License - see the [LICENSE](LICENSE) file for details.\\n\\n## 🚀 Deployment\\n\\n### Production Deployment\\n\\n1. Set up production environment:\\n   ```bash\\n   make env-prod\\n   ```\\n\\n2. Deploy the stack:\\n   ```bash\\n   make deploy\\n   ```\\n\\n3. Verify deployment:\\n   ```bash\\n   make status\\n   ```\\n\\n### Scaling\\n\\n```bash\\n# Scale backend services\\nmake scale-backend replicas=3\\n\\n# Scale frontend\\nmake scale-frontend replicas=2\\n```\\n\\n## 📚 Documentation\\n\\n### API Documentation\\n\\n- [API Reference](docs/API.md)\\n- [Authentication Guide](docs/AUTHENTICATION.md)\\n- [Deployment Guide](docs/DEPLOYMENT.md)\\n\\n### Architecture Decisions\\n\\n- [Architecture Decision Records](docs/architecture/decisions/)\\n- [System Design](docs/architecture/DESIGN.md)\\n\\n## 🎯 Features Overview\\n\\n### 👤 **User Features**\\n- 🔐 **Keycloak SSO Authentication** - Secure single sign-on\\n- 📸 **Photo Upload & Management** - Drag & drop photo uploads\\n- 🤖 **AI-Powered Descriptions** - Automatic image content analysis\\n- 📝 **Manual Description Editing** - Enhance AI-generated descriptions\\n- 🖼️ **Personal Gallery** - Organized photo viewing\\n- 🔍 **Smart Search** - Find photos by description or metadata\\n- 📱 **Responsive Design** - Works on desktop and mobile\\n\\n### 👨‍💼 **Admin Features**\\n- 👥 **User Management** - Add, edit, and manage users\\n- 📊 **System Analytics** - Performance and usage metrics\\n- 🛡️ **Security Monitoring** - Login attempts and threat detection\\n- 🔒 **Content Moderation** - Review and approve uploaded content\\n- ⚙️ **System Configuration** - Manage vault settings\\n- 📋 **Audit Logging** - Track all administrative actions\\n- 📈 **Grafana Dashboards** - Real-time system monitoring\\n\\n### 🤝 **Partner Features**\\n- 📦 **Bulk Photo Upload** - Import hundreds of photos at once\\n- 🏷️ **Batch Description Management** - Edit multiple photo descriptions\\n- 📤 **Photo Sharing** - Share photos with specific users\\n- 👥 **User Access Control** - Manage photo permissions\\n- 📊 **Analytics Dashboard** - Track photo engagement and views\\n- 🔄 **Batch Operations** - Mass edit, delete, or share operations\\n\\n### 🏗️ **Infrastructure Features**\\n- 📊 **Prometheus Metrics** - Comprehensive system monitoring\\n- 📈 **Grafana Dashboards** - Beautiful visualization\\n- 🚨 **AlertManager** - Intelligent alerting system\\n- 📝 **Centralized Logging** - Loki log aggregation\\n- 🔍 **Distributed Tracing** - Jaeger integration\\n- 🐳 **Container Monitoring** - Docker metrics with cAdvisor\\n- 🔒 **Security Scanning** - Automated vulnerability detection\\n\\n---\\n\\n## 🚀 **Quick Start (3 Commands)**\\n\\n```bash\\n# 1. Clone and setup\\ngit clone https://github.com/wronai/docker-platform\\ncd docker-platform\\n\\n# 2. Start everything with monitoring\\nmake full-stack-with-monitoring\\n\\n# 3. Access the application\\nopen http://localhost\\n```\\n\\n**🌐 Service URLs:**\\n- **Main App**: http://localhost\\n- **Grafana**: http://localhost:3333 (admin/grafana123)\\n- **Prometheus**: http://localhost:9090\\n- **Keycloak**: http://localhost:8443/admin (admin/admin123)\\n- **AlertManager**: http://localhost:9093\\n\\n**👤 Test Accounts:**\\n- **Admin**: vaultadmin / admin123\\n- **User**: vaultuser / user123\\n\\n---\\n\\n## 📋 **System Requirements**\\n\\n- **Docker**: 20.10+\\n- **Docker Compose**: 2.0+\\n- **RAM**: 8GB+ recommended\\n- **Storage**: 50GB+ for media files\\n- **CPU**: 4+ cores recommended\\n\\n---\\n\\n## 🏗️ **Architecture Overview**\\n\\n```mermaid\\ngraph TB\\n    User[Users] --> Caddy[Caddy Proxy]\\n    Caddy --> Flutter[Flutter Web App]\\n    Caddy --> API[Media Vault API]\\n    Caddy --> Admin[Admin Panel]\\n    Caddy --> Keycloak[Keycloak]\\n    \\n    API --> SQLite[(SQLite)]\\n    API --> Storage[File Storage]\\n    API --> Analyzer[AI Analyzer]\\n    API --> NSFW[NSFW Detector]\\n    \\n    subgraph \\\"Monitoring Stack\\\"\\n        Prometheus[Prometheus]\\n        Grafana[Grafana]\\n        AlertManager[AlertManager]\\n        Loki[Loki Logs]\\n    end\\n    \\n    API --> Prometheus\\n    Grafana --> Prometheus\\n    AlertManager --> Prometheus\\n```\\n\\n\\n## 🔧 **Configuration**\\n\\n### **Environment Variables (.env)**\\n\\n```bash\\n# Vault Configuration\\nVAULT_NAME=MediaVault\\nENVIRONMENT=production\\nDEBUG=false\\n\\n# Authentication\\nKEYCLOAK_ADMIN_USER=admin\\nKEYCLOAK_ADMIN_PASSWORD=admin123\\nOAUTH2_ENABLED=true\\n\\n# AI Features\\nAI_DESCRIPTION_ENABLED=true\\nNSFW_DETECTION_ENABLED=true\\n\\n# Monitoring\\nGRAFANA_ADMIN_PASSWORD=grafana123\\nPROMETHEUS_PORT=9090\\nGRAFANA_PORT=3333\\n\\n# Email Alerts\\nSMTP_HOST=smtp.gmail.com\\nSMTP_USER=alerts@mediavault.com\\nADMIN_EMAIL=admin@mediavault.com\\n\\n# Slack Integration\\nSLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK\\n```\\n\\n### **Feature Flags**\\n- `AI_DESCRIPTION_ENABLED`: Enable/disable AI photo descriptions\\n- `NSFW_DETECTION_ENABLED`: Enable/disable content moderation\\n- `BULK_UPLOAD_ENABLED`: Enable/disable partner bulk uploads\\n- `PHOTO_SHARING_ENABLED`: Enable/disable photo sharing features\\n\\n---\\n\\n## 📊 **Monitoring & Observability**\\n\\n### **Grafana Dashboards**\\n- **Infrastructure Overview** - System health and performance\\n- **Application Metrics** - API response times, user activity\\n- **Security Dashboard** - Authentication events, failed logins\\n- **Business Intelligence** - Photo uploads, user engagement\\n\\n### **Prometheus Metrics**\\n- System metrics (CPU, memory, disk, network)\\n- Application metrics (API performance, upload rates)\\n- Security metrics (authentication events, threats)\\n- Business metrics (user activity, storage usage)\\n\\n### **Alerting Rules**\\n- **Critical**: Service down, disk full, security breaches\\n- **Warning**: High resource usage, slow responses\\n- **Info**: Successful deployments, maintenance events\\n\\n### **Access Monitoring**\\n```bash\\n# View real-time metrics\\nmake prometheus           # http://localhost:9090\\n\\n# Access dashboards\\nmake grafana             # http://localhost:3333\\n\\n# Check alerts\\nmake alerts              # http://localhost:9093\\n\\n# System health\\nmake health-check-full   # Comprehensive health check\\n```\\n\\n---\\n\\n## 🎛️ **Management Commands**\\n\\n### **Basic Operations**\\n```bash\\nmake up                  # Start main application\\nmake down                # Stop all services\\nmake logs                # Show application logs\\nmake status              # Show service status\\nmake restart-api         # Restart API service\\n```\\n\\n### **Monitoring**\\n```bash\\nmake monitoring          # Start monitoring stack\\nmake monitoring-logs     # Show monitoring logs\\nmake backup-monitoring   # Backup monitoring data\\nmake test-alerts         # Test alert system\\n```\\n\\n### **Authentication**\\n```bash\\nmake setup-keycloak      # Configure Keycloak\\nmake keycloak-clean      # Reset Keycloak\\n```\\n\\n### **Maintenance**\\n```bash\\nmake backup-now          # Create system backup\\nmake cleanup-all         # Clean unused resources\\nmake load-test-monitored # Performance testing\\nmake security-scan       # Security vulnerability scan\\n```\\n\\n---\\n\\n## 🔒 **Security Features**\\n\\n### **Authentication & Authorization**\\n- **Keycloak SSO** - Enterprise-grade identity management\\n- **JWT Tokens** - Secure API authentication\\n- **Role-based Access** - User, Admin, Partner roles\\n- **Session Management** - Secure session handling\\n\\n### **Content Security**\\n- **NSFW Detection** - Automatic content moderation\\n- **File Validation** - Type and size restrictions\\n- **Virus Scanning** - Malware protection (configurable)\\n- **Encryption** - File encryption at rest\\n\\n### **Infrastructure Security**\\n- **Container Security** - Trivy vulnerability scanning\\n- **Network Policies** - Segmented container networking\\n- **Security Headers** - HTTPS, HSTS, CSP headers\\n- **Audit Logging** - Comprehensive activity tracking\\n\\n### **Monitoring Security**\\n- **Failed Login Detection** - Brute force protection\\n- **Suspicious Activity Alerts** - Real-time threat detection\\n- **IP Blocking** - Automatic threat response\\n- **Security Dashboards** - Visual threat monitoring\\n\\n---\\n\\n## 🗂️ **Project Structure**\\n\\n```\\nmedia-vault/\\n├── 📄 docker-compose.yml                    # Main application stack\\n├── 📄 docker-compose.monitoring.yml         # Monitoring stack\\n├── 📄 .env                                  # Environment configuration\\n├── 📄 Makefile                              # Management commands\\n│\\n├── 🔒 media-vault-backend/                  # Go API Backend\\n├── 🎨 flutter_frontend/                     # Flutter Web Application\\n├── ⚙️ media-vault-admin/                    # Admin Panel\\n├── 🔍 media-vault-analyzer/                 # AI Processing Service\\n├── 🤖 nsfw-analyzer/                        # Content Moderation\\n│\\n├── 📊 monitoring/                           # Monitoring Configuration\\n│   ├── prometheus/                          # Metrics collection\\n│   ├── grafana/                             # Dashboards\\n│   ├── alertmanager/                        # Alert routing\\n│   └── loki/                                # Log aggregation\\n│\\n├── 🔐 keycloak/                             # Authentication\\n├── 🌐 caddy/                                # Reverse proxy\\n├── 📝 scripts/                              # Automation scripts\\n└── 📋 docs/                                 # Documentation\\n```\\n\\n---\\n\\n## 🔄 **Development Workflow**\\n\\n### **Local Development**\\n```bash\\n# Start development environment\\nmake dev-start\\n\\n# Run tests\\nmake test\\n\\n# Check code quality\\nmake lint\\n\\n# Build all components\\nmake build\\n```\\n\\n### **Code Standards**\\n- **Go**: gofmt, golint, go vet\\n- **Flutter**: dart format, flutter analyze\\n- **Docker**: Dockerfile best practices\\n- **Security**: Regular vulnerability scans\\n\\n---\\n\\n## 🚀 **Production Deployment**\\n\\n### **Docker Swarm**\\n```bash\\n# Initialize swarm\\ndocker swarm init\\n\\n# Deploy stack\\ndocker stack deploy -c docker-compose.yml media-vault\\n```\\n\\n### **Kubernetes**\\n```bash\\n# Apply manifests\\nkubectl apply -f deployment/kubernetes/\\n\\n# Check status\\nkubectl get pods -n media-vault\\n```\\n\\n### **Production Checklist**\\n- [ ] Change default passwords\\n- [ ] Configure SSL certificates\\n- [ ] Set up external backups\\n- [ ] Configure monitoring alerts\\n- [ ] Review security settings\\n- [ ] Test disaster recovery\\n\\n---\\n\\n## 📈 **Performance Optimization**\\n\\n### **Recommended Settings**\\n- **API**: 2-4 replicas, 1GB RAM each\\n- **Database**: SSD storage, regular backups\\n- **File Storage**: CDN for media delivery\\n- **Monitoring**: 30-day retention, efficient queries\\n\\n### **Scaling Guidelines**\\n- **Horizontal Scaling**: Add API replicas for more users\\n- **Vertical Scaling**: Increase resources for AI processing\\n- **Storage Scaling**: Use external object storage (S3, MinIO)\\n- **Database Scaling**: Consider PostgreSQL for large datasets\\n\\n---\\n\\n## 🤝 **Contributing**\\n\\n1. Fork the repository\\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\\n3. Commit changes (`git commit -m 'Add amazing feature'`)\\n4. Push to branch (`git push origin feature/amazing-feature`)\\n5. Open a Pull Request\\n\\n---\\n\\n## 📄 **License**\\n\\nThis project is licensed under the Apache 2.0 License - see the [LICENSE](LICENSE) file for details.\\n\\n---\\n\\n## 🆘 **Support**\\n\\n- **Documentation**: [docs/](docs/)\\n- **Issues**: [GitHub Issues](https://github.com/wronai/docker-platform/issues)\\n- **Discussions**: [GitHub Discussions](https://github.com/wronai/docker-platform/discussions)\\n- **Email**: support@mediavault.com\\n\\n---\\n\\n## 🎉 **Acknowledgments**\\n\\n- **Flutter Team** - Amazing web framework\\n- **Keycloak** - Robust authentication\\n- **Prometheus/Grafana** - Excellent monitoring\\n- **Docker** - Containerization platform\\n- **Go Community** - Fast backend development\\n\\n---\\n\\n**Media Vault** - *Secure, intelligent, and scalable media management for the modern enterprise.*\\n\\n\\n\\n\\n# 🏗️ Media Vault - Complete Infrastructure Administration Guide\\n\\n## 🎯 **Executive Summary**\\n\\nMedia Vault Infrastructure provides **enterprise-grade** monitoring, alerting, automation, and management capabilities:\\n\\n- **📊 360° Monitoring** - Metrics, logs, tracing, alerts\\n- **🤖 Automated Incident Response** - Self-healing capabilities\\n- **🔮 Predictive Analytics** - Capacity planning & forecasting\\n- **🛡️ Security & Compliance** - Automated scanning & response\\n- **⚡ Performance Optimization** - Automated tuning & scaling\\n\\n---\\n\\n## 🚀 **Quick Start (3 Commands)**\\n\\n```bash\\n# 1. Setup infrastructure\\nmake infrastructure\\n\\n# 2. Start with authentication  \\nmake full-stack\\n\\n# 3. Check status\\nmake infra-status\\n```\\n\\n**🌐 Access Points:**\\n- **Main App**: http://localhost\\n- **Grafana**: http://localhost:3333 (admin/grafana123)\\n- **Prometheus**: http://localhost:9090\\n- **Portainer**: http://localhost:9000\\n- **AlertManager**: http://localhost:9093\\n\\n---\\n\\n## 📊 **Monitoring Stack**\\n\\n### **Core Metrics (Prometheus)**\\n```yaml\\nSystem Metrics:\\n  ✅ CPU usage per container and host\\n  ✅ Memory utilization and pressure\\n  ✅ Disk space and I/O performance\\n  ✅ Network traffic and errors\\n  ✅ Container lifecycle events\\n\\nApplication Metrics:\\n  ✅ API response times (95th percentile)\\n  ✅ Request rates and error rates  \\n  ✅ Database query performance\\n  ✅ Upload success/failure rates\\n  ✅ Authentication events (Keycloak)\\n\\nBusiness Metrics:\\n  ✅ Active users and sessions\\n  ✅ Storage utilization trends\\n  ✅ Content analysis results\\n  ✅ Security incident counts\\n```\\n\\n### **Visualization (Grafana)**\\n```yaml\\nDashboards Available:\\n  📊 Infrastructure Overview - System health\\n  📈 Application Performance - API metrics  \\n  🔐 Security Dashboard - Auth & threats\\n  💾 Storage Analytics - Vault usage\\n  🐳 Container Monitoring - Docker stats\\n  📡 Network Analysis - Traffic patterns\\n  🎯 Business Intelligence - KPIs\\n```\\n\\n### **Advanced Logging**\\n```yaml\\nLog Aggregation Options:\\n  🪵 Loki + Promtail (Lightweight)\\n    - Container logs centralization\\n    - Grafana integration\\n    - Label-based querying\\n    \\n  📊 ELK Stack (Advanced)\\n    - Elasticsearch search\\n    - Kibana visualization  \\n    - Advanced analytics\\n    - Full-text search\\n```\\n\\n---\\n\\n## 🚨 **Advanced Alerting System**\\n\\n### **Alert Categories**\\n```yaml\\n🔴 CRITICAL (Immediate Action):\\n  - Service completely down (>1 min)\\n  - Disk will fill in 4 hours\\n  - Database connection exhaustion\\n  - Security breach indicators\\n\\n🟡 WARNING (Investigation Required):\\n  - High resource usage (>80% for 5 min)\\n  - API response time degraded (>5s)\\n  - Failed login spike (>20 in 5 min)\\n  - Memory pressure (>85%)\\n\\n🔵 INFO (Monitoring):\\n  - Scheduled maintenance\\n  - Performance optimizations\\n  - Backup completion\\n  - Certificate renewals\\n```\\n\\n### **Notification Channels**\\n```yaml\\nAlert Delivery:\\n  📧 Email - admin@mediavault.com\\n  💬 Slack - #alerts, #warnings channels\\n  📱 PagerDuty - Critical issues only\\n  📊 Grafana - Dashboard notifications\\n  🔔 Teams - Alternative to Slack\\n```\\n\\n### **Automated Responses**\\n```yaml\\nSelf-Healing Actions:\\n  🔄 Service restart for container failures\\n  🧹 Automatic cleanup for disk space\\n  ⚡ Resource rebalancing for high usage\\n  🛡️ Security lockdown for threats\\n  📊 Performance optimization triggers\\n```\\n\\n---\\n\\n## 🤖 **Intelligent Automation**\\n\\n### **Incident Response Automation**\\n```bash\\n# Automated actions for common issues:\\nService Down → Docker restart → Health check → Notify\\nHigh Memory → Clear caches → Restart services → Monitor\\nDisk Full → Cleanup logs → Docker prune → Expand if needed\\nSecurity\"\n        },\n        {\n          \"name\": \"SECURITY.md\",\n          \"type\": \"file\",\n          \"path\": \"docs/SECURITY.md\",\n          \"size\": 4809,\n          \"content\": \"# 🔐 Security Guide\\n\\nThis document outlines the security measures and best practices for the Media Vault platform.\\n\\n## Table of Contents\\n- [Security Overview](#-security-overview)\\n- [Authentication](#-authentication)\\n- [Authorization](#-authorization)\\n- [Data Protection](#-data-protection)\\n- [Network Security](#-network-security)\\n- [Vulnerability Management](#-vulnerability-management)\\n- [Incident Response](#-incident-response)\\n- [Compliance](#-compliance)\\n- [Security Best Practices](#-security-best-practices)\\n\\n## 🛡️ Security Overview\\n\\nMedia Vault implements a defense-in-depth security strategy with multiple layers of protection:\\n\\n1. **Perimeter Security**: Firewall, WAF, and DDoS protection\\n2. **Identity & Access Management**: Keycloak-based authentication\\n3. **Data Protection**: Encryption at rest and in transit\\n4. **Network Security**: VPCs, security groups, and network policies\\n5. **Monitoring & Logging**: Comprehensive audit trails\\n\\n## 🔑 Authentication\\n\\n### Keycloak Integration\\n- Centralized identity management\\n- Multi-factor authentication (MFA) support\\n- Social login (Google, GitHub, etc.)\\n- Password policies enforcement\\n\\n### Session Management\\n- Secure, HTTP-only cookies\\n- Short-lived access tokens (15-30 minutes)\\n- Refresh token rotation\\n- Session timeout after 24 hours of inactivity\\n\\n## 🔐 Authorization\\n\\n### Role-Based Access Control (RBAC)\\n\\n| Role | Permissions |\\n|------|-------------|\\n| Admin | Full system access |\\n| Manager | User management, content moderation |\\n| User | Upload, view, manage own content |\\n| Guest | Read-only access to public content |\\n\\n### Attribute-Based Access Control (ABAC)\\n- Fine-grained permissions based on:\\n  - User attributes\\n  - Resource attributes\\n  - Environment conditions\\n  - Action types\\n\\n## 🔒 Data Protection\\n\\n### Encryption\\n\\n| Data State | Encryption Method |\\n|------------|-------------------|\\n| In Transit | TLS 1.3 |\\n| At Rest | AES-256 |\\n| Database | TDE (Transparent Data Encryption) |\\n| Backups | GPG |\\n\\n\\n### Data Retention\\n- User data: Retained until account deletion\\n- Audit logs: 1 year\\n- System logs: 30 days\\n- Backups: 90 days\\n\\n## 🌐 Network Security\\n\\n### Network Segmentation\\n```mermaid\\ngraph LR\\n    A[Internet] -->|HTTPS| B[Caddy]\\n    B --> C[Frontend]\\n    B --> D[Backend API]\\n    D --> E[Database]\\n    D --> F[Keycloak]\\n    D --> G[Storage]\\n    \\n    subgraph Public Zone\\n    C\\n    end\\n    \\n    subgraph Private Zone\\n    D\\n    E\\n    F\\n    G\\n    end\\n```\\n\\n### Security Groups\\n- Restrict access to required ports only\\n- Implement IP whitelisting for admin interfaces\\n- Use security groups to control traffic between services\\n\\n## 🕵️ Vulnerability Management\\n\\n### Scanning\\n- **Container Images**: Daily vulnerability scans\\n- **Dependencies**: Weekly security updates\\n- **Infrastructure**: Monthly security assessments\\n\\n### Patching\\n- Critical patches applied within 24 hours\\n- High severity patches within 7 days\\n- Regular updates for all dependencies\\n\\n## 🚨 Incident Response\\n\\n### Response Plan\\n1. **Detection**\\n   - Monitor security events\\n   - Set up alerts for suspicious activities\\n\\n2. **Containment**\\n   - Isolate affected systems\\n   - Preserve evidence\\n\\n3. **Eradication**\\n   - Identify root cause\\n   - Apply fixes\\n\\n4. **Recovery**\\n   - Restore from clean backups\\n   - Verify system integrity\\n\\n5. **Post-Mortem**\\n   - Document the incident\\n   - Implement preventive measures\\n\\n## 📜 Compliance\\n\\n### Standards & Regulations\\n- GDPR (General Data Protection Regulation)\\n- CCPA (California Consumer Privacy Act)\\n- SOC 2 Type II\\n- ISO 27001\\n\\n### Security Certifications\\n- Regular third-party security audits\\n- Penetration testing bi-annually\\n- Compliance certification audits annually\\n\\n## 🛠️ Security Best Practices\\n\\n### For Developers\\n1. **Code Security**\\n   - Regular code reviews\\n   - Static code analysis\\n   - Dependency scanning\\n\\n2. **Secrets Management**\\n   - Never commit secrets to version control\\n   - Use environment variables or secret managers\\n   - Rotate credentials regularly\\n\\n3. **Secure Development**\\n   - Follow OWASP Top 10\\n   - Implement input validation\\n   - Use parameterized queries\\n\\n### For System Administrators\\n1. **Hardening**\\n   - Disable unused services\\n   - Apply OS security patches\\n   - Configure firewalls\\n\\n2. **Monitoring**\\n   - Centralized logging\\n   - Real-time alerting\\n   - Regular security audits\\n\\n### For Users\\n1. **Account Security**\\n   - Use strong, unique passwords\\n   - Enable MFA\\n   - Regularly review account activity\\n\\n2. **Data Handling**\\n   - Share sensitive data only when necessary\\n   - Be cautious with public sharing\\n   - Report suspicious activities\\n\\n## 📝 Security Contact\\n\\nTo report security vulnerabilities, please email:\\nsecurity@wron.ai\\n\\nWe respond to all reports within 24 hours and appreciate your help in keeping Media Vault secure.\"\n        },\n        {\n          \"name\": \"TODO.md\",\n          \"type\": \"file\",\n          \"path\": \"docs/TODO.md\",\n          \"size\": 336,\n          \"content\": \"# Documentation - TODO\\n\\n## High Priority\\n- [ ] Complete API documentation\\n- [ ] Add setup guide for new developers\\n- [ ] Document architecture decisions\\n\\n## Medium Priority\\n- [ ] Add troubleshooting guide\\n- [ ] Document environment variables\\n- [ ] Create user guides for each service\\n\\n## Completed\\n- [x] Initial documentation structure\\n\"\n        },\n        {\n          \"name\": \"USER_GUIDE.md\",\n          \"type\": \"file\",\n          \"path\": \"docs/USER_GUIDE.md\",\n          \"size\": 4539,\n          \"content\": \"# 📘 User Guide\\n\\nWelcome to Media Vault! This guide will help you get started with using the platform to securely store, manage, and analyze your media files.\\n\\n## 📱 Getting Started\\n\\n### System Requirements\\n- Modern web browser (Chrome, Firefox, Safari, or Edge)\\n- Internet connection\\n- Screen resolution: 1280x720 or higher recommended\\n\\n### First-Time Setup\\n1. **Account Creation**\\n   - Contact your administrator to create an account\\n   - You'll receive a welcome email with login instructions\\n\\n2. **Logging In**\\n   - Navigate to your Media Vault instance (provided by your administrator)\\n   - Click \\\"Login\\\" and enter your credentials\\n   - If using SSO, click the appropriate provider button\\n\\n## 🖥️ Dashboard Overview\\n\\n```mermaid\\ngraph LR\\n    A[📊 Dashboard] --> B[📁 My Files]\\n    A --> C[🔄 Recent Activity]\\n    A --> D[📊 Storage Usage]\\n    A --> E[🔔 Notifications]\\n    \\n    style A fill:#4a148c,stroke:#7b1fa2,color:white\\n    style B fill:#e3f2fd,stroke:#1976d2\\n    style C fill:#e3f2fd,stroke:#1976d2\\n    style D fill:#e3f2fd,stroke:#1976d2\\n    style E fill:#e3f2fd,stroke:#1976d2\\n```\\n\\n## 📤 Uploading Files\\n\\n### Basic Upload\\n1. Click the \\\"+\\\" or \\\"Upload\\\" button\\n2. Select files from your device\\n3. Add metadata (optional)\\n4. Click \\\"Upload\\\"\\n\\n### Advanced Options\\n- **Drag and Drop**: Simply drag files into the upload area\\n- **Folder Upload**: Upload entire folders while preserving structure\\n- **Bulk Upload**: Select multiple files at once\\n\\n### Upload Settings\\n- File size limits: 2GB per file\\n- Supported formats: JPG, PNG, GIF, MP4, MOV, PDF, and more\\n- Automatic virus scanning on upload\\n\\n## 🗂️ File Management\\n\\n### Organizing Files\\n- **Create Folders**: Click \\\"New\\\" → \\\"Folder\\\"\\n- **Move Files**: Select items and use the \\\"Move to\\\" option\\n- **Bulk Actions**: Select multiple files for batch operations\\n\\n### File Actions\\n- **Preview**: Click any file to preview\\n- **Download**: Click the download button\\n- **Share**: Generate shareable links\\n- **Delete**: Move to trash (can be restored within 30 days)\\n\\n## 🔍 Searching and Filtering\\n\\n### Basic Search\\n1. Click the search bar\\n2. Type your search term\\n3. Press Enter or click \\\"Search\\\"\\n\\n### Advanced Search\\n- **Filters**: File type, date range, size\\n- **Tags**: Search by custom tags\\n- **Metadata**: Search within file metadata\\n\\n## 🤝 Sharing and Collaboration\\n\\n### Sharing Files\\n1. Select the file(s)\\n2. Click \\\"Share\\\"\\n3. Choose sharing method:\\n   - **Link**: Generate a shareable link\\n   - **Email**: Send directly to email addresses\\n   - **Team**: Share with specific team members\\n\\n### Permission Levels\\n- **Viewer**: Can view only\\n- **Commenter**: Can view and comment\\n- **Editor**: Can view, edit, and share\\n- **Owner**: Full control (including deletion)\\n\\n## 🔒 Security Features\\n\\n### Two-Factor Authentication (2FA)\\n1. Go to Account Settings → Security\\n2. Click \\\"Enable 2FA\\\"\\n3. Scan the QR code with your authenticator app\\n4. Enter the verification code\\n\\n### File Encryption\\n- All files are encrypted at rest and in transit\\n- End-to-end encryption for shared links\\n- Automatic virus scanning\\n\\n## 📱 Mobile Access\\n\\n### Mobile App\\n1. Download the Media Vault app from your app store\\n2. Log in with your credentials\\n3. Enable biometric authentication for quick access\\n\\n### Mobile Features\\n- Camera upload\\n- Offline access to favorite files\\n- Document scanning\\n\\n## 🛠️ Customization\\n\\n### User Preferences\\n- Dark/Light theme\\n- Notification preferences\\n- Default upload folder\\n- Keyboard shortcuts\\n\\n### Integration\\n- Connect to third-party apps\\n- Set up automated workflows\\n- Configure webhooks\\n\\n## ❓ Getting Help\\n\\n### Help Center\\n- [FAQs](https://help.mediavault.example.com/faq)\\n- [Video Tutorials](https://help.mediavault.example.com/tutorials)\\n- [Community Forum](https://community.mediavault.example.com)\\n\\n### Support\\n- **Email**: support@wron.ai\\n- **Chat**: Available in the web app\\n- **Phone**: +1 (555) 123-4567 (Business hours)\\n\\n## 📜 Appendix\\n\\n### Keyboard Shortcuts\\n| Shortcut | Action |\\n|----------|--------|\\n| `Ctrl + U` | Upload files |\\n| `Ctrl + F` | Search |\\n| `Ctrl + N` | New folder |\\n| `Ctrl + /` | Show all shortcuts |\\n\\n### File Type Support\\n| Category | Supported Formats |\\n|----------|-------------------|\\n| Images | JPG, PNG, GIF, WEBP, SVG, RAW |\\n| Videos | MP4, MOV, AVI, MKV |\\n| Documents | PDF, DOCX, XLSX, PPTX |\\n| Archives | ZIP, RAR, 7Z |\\n\\n---\\n\\n<div align=\\\"center\\\">\\n  <p>Need help? Contact us at <a href=\\\"mailto:support@wron.ai\\\">support@wron.ai</a></p>\\n  <p>© 2023 WRON AI. All rights reserved.</p>\\n</div>\"\n        }\n      ]\n    },\n    {\n      \"name\": \"flutter_frontend\",\n      \"type\": \"directory\",\n      \"path\": \"flutter_frontend\",\n      \"children\": [\n        {\n          \"name\": \"assets\",\n          \"type\": \"directory\",\n          \"path\": \"flutter_frontend/assets\",\n          \"children\": [\n            {\n              \"name\": \"images\",\n              \"type\": \"directory\",\n              \"path\": \"flutter_frontend/assets/images\",\n              \"children\": [\n                {\n                  \"name\": \"logo.png\",\n                  \"type\": \"file\",\n                  \"path\": \"flutter_frontend/assets/images/logo.png\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"placeholder.png\",\n                  \"type\": \"file\",\n                  \"path\": \"flutter_frontend/assets/images/placeholder.png\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"name\": \"lib\",\n          \"type\": \"directory\",\n          \"path\": \"flutter_frontend/lib\",\n          \"children\": [\n            {\n              \"name\": \"models\",\n              \"type\": \"directory\",\n              \"path\": \"flutter_frontend/lib/models\",\n              \"children\": [\n                {\n                  \"name\": \"vault_item.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"flutter_frontend/lib/models/vault_item.dart\",\n                  \"size\": 996,\n                  \"content\": \"class VaultItem {\\n  final String id;\\n  final String name;\\n  final String type; // 'image', 'video', 'document', etc.\\n  final String thumbnailUrl;\\n  final DateTime createdAt;\\n  final int size;\\n  final Map<String, dynamic>? metadata;\\n\\n  VaultItem({\\n    required this.id,\\n    required this.name,\\n    required this.type,\\n    required this.thumbnailUrl,\\n    required this.createdAt,\\n    required this.size,\\n    this.metadata,\\n  });\\n\\n  factory VaultItem.fromJson(Map<String, dynamic> json) {\\n    return VaultItem(\\n      id: json['id'],\\n      name: json['name'],\\n      type: json['type'],\\n      thumbnailUrl: json['thumbnailUrl'],\\n      createdAt: DateTime.parse(json['createdAt']),\\n      size: json['size'],\\n      metadata: json['metadata'],\\n    );\\n  }\\n\\n  Map<String, dynamic> toJson() {\\n    return {\\n      'id': id,\\n      'name': name,\\n      'type': type,\\n      'thumbnailUrl': thumbnailUrl,\\n      'createdAt': createdAt.toIso8601String(),\\n      'size': size,\\n      'metadata': metadata,\\n    };\\n  }\\n}\\n\"\n                }\n              ]\n            },\n            {\n              \"name\": \"providers\",\n              \"type\": \"directory\",\n              \"path\": \"flutter_frontend/lib/providers\",\n              \"children\": [\n                {\n                  \"name\": \"vault_provider.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"flutter_frontend/lib/providers/vault_provider.dart\",\n                  \"size\": 1420,\n                  \"content\": \"import 'package:flutter/foundation.dart';\\nimport '../models/vault_item.dart';\\n\\nclass VaultProvider with ChangeNotifier {\\n  List<VaultItem> _items = [];\\n  bool _isLoading = false;\\n  String? _error;\\n\\n  List<VaultItem> get items => _items;\\n  bool get isLoading => _isLoading;\\n  String? get error => _error;\\n\\n  Future<void> loadVaultContents() async {\\n    _isLoading = true;\\n    _error = null;\\n    notifyListeners();\\n\\n    try {\\n      // TODO: Load vault contents from API\\n      _items = [];\\n    } catch (e) {\\n      _error = 'Failed to load vault contents: $e';\\n    } finally {\\n      _isLoading = false;\\n      notifyListeners();\\n    }\\n  }\\n\\n  Future<void> uploadFile(String filePath) async {\\n    _isLoading = true;\\n    _error = null;\\n    notifyListeners();\\n\\n    try {\\n      // TODO: Upload file\\n      await Future.delayed(const Duration(seconds: 1)); // Simulate upload\\n      // TODO: Refresh vault contents\\n    } catch (e) {\\n      _error = 'Failed to upload file: $e';\\n      rethrow;\\n    } finally {\\n      _isLoading = false;\\n      notifyListeners();\\n    }\\n  }\\n\\n  Future<void> deleteFile(String fileId) async {\\n    _isLoading = true;\\n    _error = null;\\n    notifyListeners();\\n\\n    try {\\n      // TODO: Delete file\\n      _items.removeWhere((item) => item.id == fileId);\\n    } catch (e) {\\n      _error = 'Failed to delete file: $e';\\n      rethrow;\\n    } finally {\\n      _isLoading = false;\\n      notifyListeners();\\n    }\\n  }\\n}\\n\"\n                }\n              ]\n            },\n            {\n              \"name\": \"screens\",\n              \"type\": \"directory\",\n              \"path\": \"flutter_frontend/lib/screens\",\n              \"children\": [\n                {\n                  \"name\": \"gallery_screen.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"flutter_frontend/lib/screens/gallery_screen.dart\",\n                  \"size\": 10913,\n                  \"content\": \"import 'package:flutter/material.dart';\\nimport 'package:provider/provider.dart';\\nimport '../providers/vault_provider.dart';\\n\\nclass GalleryScreen extends StatefulWidget {\\n  @override\\n  _GalleryScreenState createState() => _GalleryScreenState();\\n}\\n\\nclass _GalleryScreenState extends State<GalleryScreen> {\\n  @override\\n  void initState() {\\n    super.initState();\\n    // Load gallery items when the screen is first displayed\\n    WidgetsBinding.instance.addPostFrameCallback((_) {\\n      _loadGalleryItems();\\n    });\\n  }\\n\\n  Future<void> _loadGalleryItems() async {\\n    try {\\n      await Provider.of<VaultProvider>(context, listen: false).loadVaultContents();\\n    } catch (e) {\\n      if (mounted) {\\n        ScaffoldMessenger.of(context).showSnackBar(\\n          SnackBar(content: Text('Failed to load gallery: $e')),\\n        );\\n      }\\n    }\\n  }\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return Scaffold(\\n      appBar: AppBar(\\n        title: Text('Gallery'),\\n      ),\\n      body: Consumer<VaultProvider>(\\n        builder: (context, vault, child) {\\n          if (vault.isLoading && vault.items.isEmpty) {\\n            return Center(child: CircularProgressIndicator());\\n          }\\n\\n          if (vault.error != null) {\\n            return Center(\\n              child: Column(\\n                mainAxisAlignment: MainAxisAlignment.center,\\n                children: [\\n                  Icon(Icons.error_outline, color: Colors.red, size: 48),\\n                  SizedBox(height: 16),\\n                  Text(\\n                    'Failed to load gallery',\\n                    style: Theme.of(context).textTheme.titleMedium,\\n                  ),\\n                  SizedBox(height: 8),\\n                  Text(\\n                    vault.error!,\\n                    textAlign: TextAlign.center,\\n                    style: Theme.of(context).textTheme.bodySmall,\\n                  ),\\n                  SizedBox(height: 16),\\n                  ElevatedButton.icon(\\n                    onPressed: _loadGalleryItems,\\n                    icon: Icon(Icons.refresh),\\n                    label: Text('Retry'),\\n                  ),\\n                ],\\n              ),\\n            );\\n          }\\n\\n          if (vault.items.isEmpty) {\\n            return Center(\\n              child: Column(\\n                mainAxisAlignment: MainAxisAlignment.center,\\n                children: [\\n                  Icon(\\n                    Icons.photo_library,\\n                    size: 64,\\n                    color: Colors.grey[400],\\n                  ),\\n                  SizedBox(height: 16),\\n                  Text(\\n                    'No items in gallery',\\n                    style: Theme.of(context).textTheme.titleMedium,\\n                  ),\\n                  SizedBox(height: 8),\\n                  Text(\\n                    'Upload some files to see them here',\\n                    style: Theme.of(context).textTheme.bodyMedium,\\n                  ),\\n                ],\\n              ),\\n            );\\n          }\\n\\n          return GridView.builder(\\n            padding: const EdgeInsets.all(8.0),\\n            gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\\n              crossAxisCount: 3,\\n              crossAxisSpacing: 4.0,\\n              mainAxisSpacing: 4.0,\\n              childAspectRatio: 1.0,\\n            ),\\n            itemCount: vault.items.length,\\n            itemBuilder: (context, index) {\\n              final item = vault.items[index];\\n              return GestureDetector(\\n                onTap: () {\\n                  // TODO: Show full-screen preview\\n                  _showItemDetails(item);\\n                },\\n                child: Stack(\\n                  fit: StackFit.expand,\\n                  children: [\\n                    item.type == 'image'\\n                        ? Image.network(\\n                            item.thumbnailUrl,\\n                            fit: BoxFit.cover,\\n                            loadingBuilder: (context, child, loadingProgress) {\\n                              if (loadingProgress == null) return child;\\n                              return Center(\\n                                child: CircularProgressIndicator(\\n                                  value: loadingProgress.expectedTotalBytes != null\\n                                      ? loadingProgress.cumulativeBytesLoaded /\\n                                          loadingProgress.expectedTotalBytes!\\n                                      : null,\\n                                ),\\n                              );\\n                            },\\n                            errorBuilder: (context, error, stackTrace) {\\n                              return Center(\\n                                child: Icon(Icons.broken_image, size: 40),\\n                              );\\n                            },\\n                          )\\n                        : Container(\\n                            color: Colors.grey[200],\\n                            child: Center(\\n                              child: Icon(\\n                                _getFileTypeIcon(item.type),\\n                                size: 40,\\n                                color: Colors.grey[600],\\n                              ),\\n                            ),\\n                          ),\\n                    if (vault.isLoading && index == vault.items.length - 1)\\n                      Positioned(\\n                        bottom: 4,\\n                        right: 4,\\n                        child: Container(\\n                          padding: EdgeInsets.all(4),\\n                          decoration: BoxDecoration(\\n                            color: Colors.black54,\\n                            borderRadius: BorderRadius.circular(4),\\n                          ),\\n                          child: SizedBox(\\n                            width: 16,\\n                            height: 16,\\n                            child: CircularProgressIndicator(\\n                              strokeWidth: 2,\\n                              valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\\n                            ),\\n                          ),\\n                        ),\\n                      ),\\n                  ],\\n                ),\\n              );\\n            },\\n          );\\n        },\\n      ),\\n    );\\n  }\\n\\n  void _showItemDetails(VaultItem item) {\\n    showModalBottomSheet(\\n      context: context,\\n      builder: (context) {\\n        return Container(\\n          padding: EdgeInsets.all(16),\\n          child: Column(\\n            mainAxisSize: MainAxisSize.min,\\n            crossAxisAlignment: CrossAxisAlignment.start,\\n            children: [\\n              Row(\\n                children: [\\n                  Icon(\\n                    _getFileTypeIcon(item.type),\\n                    size: 24,\\n                  ),\\n                  SizedBox(width: 8),\\n                  Expanded(\\n                    child: Text(\\n                      item.name,\\n                      style: Theme.of(context).textTheme.titleMedium,\\n                      overflow: TextOverflow.ellipsis,\\n                    ),\\n                  ),\\n                ],\\n              ),\\n              SizedBox(height: 16),\\n              Text('Type: ${item.type}'),\\n              Text('Size: ${_formatFileSize(item.size)}'),\\n              Text('Uploaded: ${_formatDate(item.createdAt)}'),\\n              SizedBox(height: 16),\\n              Row(\\n                mainAxisAlignment: MainAxisAlignment.end,\\n                children: [\\n                  TextButton(\\n                    onPressed: () => Navigator.pop(context),\\n                    child: Text('CANCEL'),\\n                  ),\\n                  SizedBox(width: 8),\\n                  TextButton(\\n                    onPressed: () {\\n                      // TODO: Implement download\\n                      Navigator.pop(context);\\n                      ScaffoldMessenger.of(context).showSnackBar(\\n                        SnackBar(content: Text('Downloading ${item.name}...')),\\n                      );\\n                    },\\n                    child: Text('DOWNLOAD'),\\n                  ),\\n                  SizedBox(width: 8),\\n                  TextButton(\\n                    onPressed: () {\\n                      // TODO: Implement delete\\n                      Navigator.pop(context);\\n                      _confirmDelete(item);\\n                    },\\n                    style: TextButton.styleFrom(\\n                      foregroundColor: Theme.of(context).colorScheme.error,\\n                    ),\\n                    child: Text('DELETE'),\\n                  ),\\n                ],\\n              ),\\n            ],\\n          ),\\n        );\\n      },\\n    );\\n  }\\n\\n  void _confirmDelete(VaultItem item) {\\n    showDialog(\\n      context: context,\\n      builder: (context) => AlertDialog(\\n        title: Text('Delete file'),\\n        content: Text('Are you sure you want to delete ${item.name}? This action cannot be undone.'),\\n        actions: [\\n          TextButton(\\n            onPressed: () => Navigator.pop(context),\\n            child: Text('CANCEL'),\\n          ),\\n          TextButton(\\n            onPressed: () async {\\n              Navigator.pop(context);\\n              try {\\n                await Provider.of<VaultProvider>(context, listen: false)\\n                    .deleteFile(item.id);\\n                if (mounted) {\\n                  ScaffoldMessenger.of(context).showSnackBar(\\n                    SnackBar(content: Text('File deleted successfully')),\\n                  );\\n                }\\n              } catch (e) {\\n                if (mounted) {\\n                  ScaffoldMessenger.of(context).showSnackBar(\\n                    SnackBar(content: Text('Failed to delete file: $e')),\\n                  );\\n                }\\n              }\\n            },\\n            style: TextButton.styleFrom(\\n              foregroundColor: Theme.of(context).colorScheme.error,\\n            ),\\n            child: Text('DELETE'),\\n          ),\\n        ],\\n      ),\\n    );\\n  }\\n\\n  IconData _getFileTypeIcon(String type) {\\n    switch (type) {\\n      case 'image':\\n        return Icons.image;\\n      case 'video':\\n        return Icons.videocam;\\n      case 'audio':\\n        return Icons.audiotrack;\\n      case 'document':\\n        return Icons.description;\\n      case 'archive':\\n        return Icons.archive;\\n      default:\\n        return Icons.insert_drive_file;\\n    }\\n  }\\n\\n  String _formatFileSize(int bytes) {\\n    if (bytes < 1024) return '$bytes B';\\n    final kb = bytes / 1024;\\n    if (kb < 1024) return '${kb.toStringAsFixed(1)} KB';\\n    final mb = kb / 1024;\\n    if (mb < 1024) return '${mb.toStringAsFixed(1)} MB';\\n    final gb = mb / 1024;\\n    return '${gb.toStringAsFixed(1)} GB';\\n  }\\n\\n  String _formatDate(DateTime date) {\\n    return '${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')} ' +\\n           '${date.hour.toString().padLeft(2, '0')}:${date.minute.toString().padLeft(2, '0')}';\\n  }\\n}\\n\"\n                },\n                {\n                  \"name\": \"upload_screen.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"flutter_frontend/lib/screens/upload_screen.dart\",\n                  \"size\": 5450,\n                  \"content\": \"import 'dart:io';\\nimport 'package:flutter/material.dart';\\nimport 'package:provider/provider.dart';\\nimport 'package:file_picker/file_picker.dart';\\nimport '../providers/vault_provider.dart';\\n\\nclass UploadScreen extends StatefulWidget {\\n  @override\\n  _UploadScreenState createState() => _UploadScreenState();\\n}\\n\\nclass _UploadScreenState extends State<UploadScreen> {\\n  bool _isDragging = false;\\n  String? _filePath;\\n  String? _fileName;\\n  bool _isUploading = false;\\n\\n  Future<void> _pickFile() async {\\n    try {\\n      FilePickerResult? result = await FilePicker.platform.pickFiles(\\n        type: FileType.any,\\n        allowMultiple: false,\\n      );\\n\\n      if (result != null) {\\n        setState(() {\\n          _filePath = result.files.single.path!;\\n          _fileName = result.files.single.name;\\n        });\\n      }\\n    } catch (e) {\\n      ScaffoldMessenger.of(context).showSnackBar(\\n        SnackBar(content: Text('Error picking file: $e')),\\n      );\\n    }\\n  }\\n\\n  Future<void> _uploadFile() async {\\n    if (_filePath == null) return;\\n\\n    setState(() {\\n      _isUploading = true;\\n    });\\n\\n    try {\\n      await Provider.of<VaultProvider>(context, listen: false)\\n          .uploadFile(_filePath!);\\n      \\n      if (mounted) {\\n        ScaffoldMessenger.of(context).showSnackBar(\\n          SnackBar(content: Text('File uploaded successfully')),\\n        );\\n        Navigator.pop(context);\\n      }\\n    } catch (e) {\\n      if (mounted) {\\n        ScaffoldMessenger.of(context).showSnackBar(\\n          SnackBar(content: Text('Error uploading file: $e')),\\n        );\\n      }\\n    } finally {\\n      if (mounted) {\\n        setState(() {\\n          _isUploading = false;\\n        });\\n      }\\n    }\\n  }\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return Scaffold(\\n      appBar: AppBar(\\n        title: Text('Upload File'),\\n        leading: IconButton(\\n          icon: Icon(Icons.arrow_back),\\n          onPressed: _isUploading ? null : () => Navigator.pop(context),\\n        ),\\n      ),\\n      body: Padding(\\n        padding: const EdgeInsets.all(16.0),\\n        child: Column(\\n          crossAxisAlignment: CrossAxisAlignment.stretch,\\n          children: [\\n            Expanded(\\n              child: GestureDetector(\\n                onTap: _pickFile,\\n                child: DragTarget<Map<String, dynamic>>(\\n                  onWillAccept: (data) {\\n                    setState(() => _isDragging = true);\\n                    return true;\\n                  },\\n                  onLeave: (_) {\\n                    setState(() => _isDragging = false);\\n                  },\\n                  onAccept: (data) {\\n                    setState(() {\\n                      _isDragging = false;\\n                      _filePath = data['path'];\\n                      _fileName = data['name'];\\n                    });\\n                  },\\n                  builder: (context, candidateData, rejectedData) {\\n                    return Container(\\n                      decoration: BoxDecoration(\\n                        border: Border.all(\\n                          color: _isDragging\\n                              ? Theme.of(context).primaryColor\\n                              : Colors.grey[300]!,\\n                          width: 2,\\n                          style: BorderStyle.dashed,\\n                        ),\\n                        borderRadius: BorderRadius.circular(8.0),\\n                        color: _isDragging\\n                            ? Theme.of(context).primaryColor.withOpacity(0.1)\\n                            : Colors.grey[50],\\n                      ),\\n                      child: Column(\\n                        mainAxisAlignment: MainAxisAlignment.center,\\n                        children: [\\n                          Icon(\\n                            Icons.cloud_upload,\\n                            size: 64,\\n                            color: _isDragging\\n                                ? Theme.of(context).primaryColor\\n                                : Colors.grey[400],\\n                          ),\\n                          SizedBox(height: 16),\\n                          Text(\\n                            _filePath == null\\n                                ? 'Tap or drag a file here to upload'\\n                                : 'Selected file: $_fileName',\\n                            style: Theme.of(context).textTheme.titleMedium,\\n                          ),\\n                          if (_filePath != null) ...[\\n                            SizedBox(height: 8),\\n                            Text(\\n                              'Tap to select a different file',\\n                              style: Theme.of(context).textTheme.bodySmall,\\n                            ),\\n                          ],\\n                        ],\\n                      ),\\n                    );\\n                  },\\n                ),\\n              ),\\n            ),\\n            SizedBox(height: 20),\\n            ElevatedButton(\\n              onPressed: _filePath == null || _isUploading ? null : _uploadFile,\\n              child: _isUploading\\n                  ? SizedBox(\\n                      width: 20,\\n                      height: 20,\\n                      child: CircularProgressIndicator(\\n                        strokeWidth: 2,\\n                        valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\\n                      ),\\n                    )\\n                  : Text('Upload File'),\\n            ),\\n          ],\\n        ),\\n      ),\\n    );\\n  }\\n}\\n\"\n                },\n                {\n                  \"name\": \"vault_home_screen.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"flutter_frontend/lib/screens/vault_home_screen.dart\",\n                  \"size\": 3531,\n                  \"content\": \"import 'package:flutter/material.dart';\\nimport 'package:provider/provider.dart';\\nimport '../providers/vault_provider.dart';\\n\\nclass VaultHomeScreen extends StatelessWidget {\\n  @override\\n  Widget build(BuildContext context) {\\n    return Scaffold(\\n      appBar: AppBar(\\n        title: Text('Media Vault'),\\n        actions: [\\n          IconButton(\\n            icon: Icon(Icons.add_photo_alternate),\\n            onPressed: () {\\n              Navigator.pushNamed(context, '/upload');\\n            },\\n          ),\\n        ],\\n      ),\\n      body: Consumer<VaultProvider>(\\n        builder: (context, vault, child) {\\n          if (vault.isLoading) {\\n            return Center(child: CircularProgressIndicator());\\n          }\\n          \\n          if (vault.error != null) {\\n            return Center(child: Text(vault.error!));\\n          }\\n          \\n          if (vault.items.isEmpty) {\\n            return Center(\\n              child: Column(\\n                mainAxisAlignment: MainAxisAlignment.center,\\n                children: [\\n                  Icon(\\n                    Icons.folder_open,\\n                    size: 64,\\n                    color: Colors.grey[400],\\n                  ),\\n                  SizedBox(height: 16),\\n                  Text(\\n                    'Your vault is empty',\\n                    style: Theme.of(context).textTheme.titleLarge,\\n                  ),\\n                  SizedBox(height: 8),\\n                  Text(\\n                    'Upload your first file to get started',\\n                    style: Theme.of(context).textTheme.bodyMedium,\\n                  ),\\n                ],\\n              ),\\n            );\\n          }\\n          \\n          return GridView.builder(\\n            padding: const EdgeInsets.all(8.0),\\n            gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\\n              crossAxisCount: 2,\\n              crossAxisSpacing: 8.0,\\n              mainAxisSpacing: 8.0,\\n              childAspectRatio: 1.0,\\n            ),\\n            itemCount: vault.items.length,\\n            itemBuilder: (context, index) {\\n              final item = vault.items[index];\\n              return GestureDetector(\\n                onTap: () {\\n                  // TODO: Show file preview\\n                },\\n                child: Card(\\n                  child: Column(\\n                    children: [\\n                      Expanded(\\n                        child: item.type == 'image'\\n                            ? Image.network(\\n                                item.thumbnailUrl,\\n                                fit: BoxFit.cover,\\n                                width: double.infinity,\\n                              )\\n                            : Icon(\\n                                Icons.insert_drive_file,\\n                                size: 48,\\n                                color: Colors.grey[600],\\n                              ),\\n                      ),\\n                      Padding(\\n                        padding: const EdgeInsets.all(8.0),\\n                        child: Text(\\n                          item.name,\\n                          maxLines: 1,\\n                          overflow: TextOverflow.ellipsis,\\n                        ),\\n                      ),\\n                    ],\\n                  ),\\n                ),\\n              );\\n            },\\n          );\\n        },\\n      ),\\n      floatingActionButton: FloatingActionButton(\\n        onPressed: () {\\n          Navigator.pushNamed(context, '/upload');\\n        },\\n        child: Icon(Icons.add),\\n      ),\\n    );\\n  }\\n}\\n\"\n                }\n              ]\n            },\n            {\n              \"name\": \"services\",\n              \"type\": \"directory\",\n              \"path\": \"flutter_frontend/lib/services\",\n              \"children\": [\n                {\n                  \"name\": \"media_vault_service.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"flutter_frontend/lib/services/media_vault_service.dart\",\n                  \"size\": 835,\n                  \"content\": \"import 'dart:convert';\\nimport 'package:http/http.dart' as http;\\n\\nclass MediaVaultService {\\n  final String baseUrl = 'http://localhost:8080/api/v1';\\n  \\n  Future<Map<String, dynamic>> uploadFile(String filePath) async {\\n    // TODO: Implement file upload\\n    throw UnimplementedError('Upload file not implemented');\\n  }\\n  \\n  Future<List<dynamic>> getVaultContents() async {\\n    // TODO: Implement getting vault contents\\n    throw UnimplementedError('Get vault contents not implemented');\\n  }\\n  \\n  Future<Map<String, dynamic>> getFileMetadata(String fileId) async {\\n    // TODO: Implement getting file metadata\\n    throw UnimplementedError('Get file metadata not implemented');\\n  }\\n  \\n  Future<void> deleteFile(String fileId) async {\\n    // TODO: Implement file deletion\\n    throw UnimplementedError('Delete file not implemented');\\n  }\\n}\\n\"\n                }\n              ]\n            },\n            {\n              \"name\": \"main.dart\",\n              \"type\": \"file\",\n              \"path\": \"flutter_frontend/lib/main.dart\",\n              \"size\": 1160,\n              \"content\": \"import 'package:flutter/material.dart';\\nimport 'package:provider/provider.dart';\\nimport 'services/media_vault_service.dart';\\nimport 'providers/vault_provider.dart';\\nimport 'screens/vault_home_screen.dart';\\nimport 'screens/upload_screen.dart';\\nimport 'screens/gallery_screen.dart';\\n\\nvoid main() {\\n  runApp(MediaVaultApp());\\n}\\n\\nclass MediaVaultApp extends StatelessWidget {\\n  @override\\n  Widget build(BuildContext context) {\\n    return MultiProvider(\\n      providers: [\\n        ChangeNotifierProvider(create: (_) => VaultProvider()),\\n        Provider(create: (_) => MediaVaultService()),\\n      ],\\n      child: MaterialApp(\\n        title: 'Media Vault',\\n        theme: ThemeData(\\n          primarySwatch: Colors.indigo,\\n          visualDensity: VisualDensity.adaptivePlatformDensity,\\n          appBarTheme: AppBarTheme(\\n            backgroundColor: Colors.indigo[800],\\n            foregroundColor: Colors.white,\\n          ),\\n        ),\\n        initialRoute: '/',\\n        routes: {\\n          '/': (context) => VaultHomeScreen(),\\n          '/upload': (context) => UploadScreen(),\\n          '/gallery': (context) => GalleryScreen(),\\n        },\\n      ),\\n    );\\n  }\\n}\\n\"\n            }\n          ]\n        },\n        {\n          \"name\": \"web\",\n          \"type\": \"directory\",\n          \"path\": \"flutter_frontend/web\",\n          \"children\": [\n            {\n              \"name\": \"icons\",\n              \"type\": \"directory\",\n              \"path\": \"flutter_frontend/web/icons\",\n              \"children\": [\n                {\n                  \"name\": \"app_icon.png\",\n                  \"type\": \"file\",\n                  \"path\": \"flutter_frontend/web/icons/app_icon.png\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"Icon-192.png\",\n                  \"type\": \"file\",\n                  \"path\": \"flutter_frontend/web/icons/Icon-192.png\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"Icon-512.png\",\n                  \"type\": \"file\",\n                  \"path\": \"flutter_frontend/web/icons/Icon-512.png\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                }\n              ]\n            },\n            {\n              \"name\": \"favicon.png\",\n              \"type\": \"file\",\n              \"path\": \"flutter_frontend/web/favicon.png\",\n              \"size\": 0,\n              \"content\": \"\"\n            },\n            {\n              \"name\": \"index.html\",\n              \"type\": \"file\",\n              \"path\": \"flutter_frontend/web/index.html\",\n              \"size\": 0,\n              \"content\": \"\"\n            },\n            {\n              \"name\": \"manifest.json\",\n              \"type\": \"file\",\n              \"path\": \"flutter_frontend/web/manifest.json\",\n              \"size\": 0,\n              \"content\": \"\"\n            }\n          ]\n        },\n        {\n          \"name\": \"analysis_options.yaml\",\n          \"type\": \"file\",\n          \"path\": \"flutter_frontend/analysis_options.yaml\",\n          \"size\": 0,\n          \"content\": \"\"\n        },\n        {\n          \"name\": \"Dockerfile.web\",\n          \"type\": \"file\",\n          \"path\": \"flutter_frontend/Dockerfile.web\",\n          \"size\": 1000,\n          \"content\": \"# Stage 1: Build the Flutter web app\\nFROM debian:bullseye-slim AS build-env\\n\\n# Install required tools\\nRUN apt-get update && apt-get install -y \\\\\\n    curl \\\\\\n    git \\\\\\n    unzip \\\\\\n    xz-utils \\\\\\n    zip \\\\\\n    && rm -rf /var/lib/apt/lists/*\\n\\n# Clone the Flutter repository\\nRUN git clone --depth 1 --branch stable https://github.com/flutter/flutter.git /usr/local/flutter\\n\\n# Add Flutter to PATH\\nENV PATH=\\\"${PATH}:/usr/local/flutter/bin:/usr/local/flutter/bin/cache/dart-sdk/bin\\\"\\n\\n# Enable web development\\nRUN flutter doctor -v\\nRUN flutter config --enable-web\\n\\n# Copy the source code\\nWORKDIR /app\\nCOPY . .\\n\\n# Get dependencies\\nRUN flutter pub get\\n\\n# Build the web app\\nRUN flutter build web --release\\n\\n# Stage 2: Serve the built web app with Nginx\\nFROM nginx:alpine\\n\\n# Copy the built web app\\nCOPY --from=build-env /app/build/web /usr/share/nginx/html\\n\\n# Copy the nginx configuration\\nCOPY nginx.conf /etc/nginx/conf.d/default.conf\\n\\n# Expose port 80\\nEXPOSE 80\\n\\n# Start Nginx\\nCMD [\\\"nginx\\\", \\\"-g\\\", \\\"daemon off;\\\"]\"\n        },\n        {\n          \"name\": \"nginx.conf\",\n          \"type\": \"file\",\n          \"path\": \"flutter_frontend/nginx.conf\",\n          \"size\": 876,\n          \"content\": \"server {\\n    listen 80;\\n    server_name localhost;\\n    root /usr/share/nginx/html;\\n    index index.html;\\n\\n    location / {\\n        try_files $uri $uri/ /index.html;\\n    }\\n\\n    # Enable gzip compression\\n    gzip on;\\n    gzip_vary on;\\n    gzip_min_length 10240;\\n    gzip_proxied expired no-cache no-store private auth;\\n    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml;\\n    gzip_disable \\\"MSIE [1-6]\\\\.\\\";\\n\\n    # Cache control for static assets\\n    location ~* \\\\.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc|ttf|woff|woff2)$ {\\n        expires 1y;\\n        access_log off;\\n        add_header Cache-Control \\\"public\\\";\\n    }\\n\\n    # Don't cache HTML files\\n    location ~* \\\\.(?:html|json)$ {\\n        expires -1;\\n        add_header Cache-Control \\\"no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0\\\";\\n    }\\n}\\n\"\n        },\n        {\n          \"name\": \"pubspec.yaml\",\n          \"type\": \"file\",\n          \"path\": \"flutter_frontend/pubspec.yaml\",\n          \"size\": 641,\n          \"content\": \"name: media_vault_app\\ndescription: Media Vault Flutter Web Application\\nversion: 1.0.0+1\\n\\nenvironment:\\n  sdk: '>=3.0.0 <4.0.0'\\n  flutter: \\\">=3.10.0\\\"\\n\\ndependencies:\\n  flutter:\\n    sdk: flutter\\n  \\n  # HTTP client\\n  http: ^1.1.0\\n  dio: ^5.3.2\\n  \\n  # State management\\n  provider: ^6.0.5\\n  \\n  # File handling\\n  file_picker: ^6.0.0\\n  mime: ^1.0.4\\n  \\n  # UI components\\n  material_design_icons_flutter: ^7.0.7296\\n  flutter_dropzone: ^4.0.1\\n  \\n  # Utils\\n  path: ^1.8.3\\n  intl: ^0.18.1\\n\\ndev_dependencies:\\n  flutter_test:\\n    sdk: flutter\\n  flutter_lints: ^3.0.0\\n\\nflutter:\\n  uses-material-design: true\\n  assets:\\n    - assets/images/\\n    - assets/icons/\\n\"\n        },\n        {\n          \"name\": \"TODO.md\",\n          \"type\": \"file\",\n          \"path\": \"flutter_frontend/TODO.md\",\n          \"size\": 301,\n          \"content\": \"# Flutter Frontend - TODO\\n\\n## High Priority\\n- [ ] Implement user authentication flow\\n- [ ] Create main dashboard layout\\n- [ ] Set up state management\\n\\n## Medium Priority\\n- [ ] Implement media gallery\\n- [ ] Add search functionality\\n- [ ] Create settings page\\n\\n## Completed\\n- [x] Project initialization\\n\"\n        }\n      ]\n    },\n    {\n      \"name\": \"js\",\n      \"type\": \"directory\",\n      \"path\": \"js\",\n      \"children\": [\n        {\n          \"name\": \"file-explorer-new.js\",\n          \"type\": \"file\",\n          \"path\": \"js/file-explorer-new.js\",\n          \"size\": 11267,\n          \"content\": \"// Current path stack\\nlet currentPath = [];\\nlet fileSystem = null;\\n\\n// DOM Elements\\nconst fileExplorer = document.getElementById('file-explorer');\\nconst fileContent = document.getElementById('file-content');\\nconst fileTitle = document.getElementById('file-title');\\nconst breadcrumb = document.getElementById('breadcrumb');\\nconst refreshBtn = document.getElementById('refresh-btn');\\nconst copyBtn = document.getElementById('copy-btn');\\nconst downloadBtn = document.getElementById('download-btn');\\nconst fileActions = document.getElementById('file-actions');\\n\\n// File type icons\\nconst FILE_ICONS = {\\n    'directory': 'folder',\\n    'file': 'file-earmark',\\n    'json': 'filetype-json',\\n    'js': 'filetype-js',\\n    'css': 'filetype-css',\\n    'html': 'filetype-html',\\n    'md': 'file-earmark-text',\\n    'py': 'filetype-py',\\n    'jpg': 'file-image',\\n    'jpeg': 'file-image',\\n    'png': 'file-image',\\n    'gif': 'file-image',\\n    'svg': 'file-image'\\n};\\n\\n// Get file icon based on file extension\\nfunction getFileIcon(name, type) {\\n    if (type === 'directory') return 'folder';\\n    const ext = name.split('.').pop().toLowerCase();\\n    return FILE_ICONS[ext] || 'file-earmark';\\n}\\n\\n// Format file size\\nfunction formatFileSize(bytes) {\\n    if (bytes === 0) return '0 Bytes';\\n    const k = 1024;\\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\\n}\\n\\n// Render breadcrumb\\nfunction renderBreadcrumb() {\\n    breadcrumb.innerHTML = '';\\n    \\n    // Add root/home\\n    const homeItem = document.createElement('li');\\n    homeItem.className = 'breadcrumb-item' + (currentPath.length === 0 ? ' active' : '');\\n    const homeLink = document.createElement('a');\\n    homeLink.href = '#';\\n    homeLink.textContent = 'Home';\\n    homeLink.addEventListener('click', (e) => {\\n        e.preventDefault();\\n        navigateTo([]);\\n    });\\n    homeItem.appendChild(homeLink);\\n    breadcrumb.appendChild(homeItem);\\n    \\n    // Add path segments\\n    let currentPathStr = '';\\n    currentPath.forEach((segment, index) => {\\n        currentPathStr += (currentPathStr ? '/' : '') + segment;\\n        const isLast = index === currentPath.length - 1;\\n        \\n        const item = document.createElement('li');\\n        item.className = 'breadcrumb-item' + (isLast ? ' active' : '');\\n        \\n        if (!isLast) {\\n            const link = document.createElement('a');\\n            link.href = '#';\\n            link.textContent = segment;\\n            const pathToNavigate = currentPath.slice(0, index + 1);\\n            link.addEventListener('click', (e) => {\\n                e.preventDefault();\\n                navigateTo(pathToNavigate);\\n            });\\n            item.appendChild(link);\\n        } else {\\n            item.textContent = segment;\\n        }\\n        \\n        breadcrumb.appendChild(item);\\n    });\\n}\\n\\n// Find item by path\\nfunction findItemByPath(pathArray, root = fileSystem) {\\n    let current = root;\\n    \\n    for (const segment of pathArray) {\\n        if (!current.children) return null;\\n        const found = current.children.find(item => item.name === segment);\\n        if (!found) return null;\\n        current = found;\\n    }\\n    \\n    return current;\\n}\\n\\n// Render file explorer\\nfunction renderFileExplorer() {\\n    fileExplorer.innerHTML = '';\\n    \\n    // Get current directory\\n    const currentDir = currentPath.length === 0 ? fileSystem : findItemByPath(currentPath);\\n    if (!currentDir || !currentDir.children) return;\\n    \\n    // Sort: directories first, then files, both alphabetically\\n    const sortedItems = [...currentDir.children].sort((a, b) => {\\n        if (a.type === b.type) {\\n            return a.name.localeCompare(b.name);\\n        }\\n        return a.type === 'directory' ? -1 : 1;\\n    });\\n    \\n    // Render each item\\n    sortedItems.forEach(item => {\\n        const itemElement = document.createElement('div');\\n        itemElement.className = `file-item ${item.type === 'directory' ? 'dir-item' : ''}`;\\n        \\n        const icon = document.createElement('i');\\n        icon.className = `bi bi-${getFileIcon(item.name, item.type)}`;\\n        \\n        const name = document.createElement('span');\\n        name.textContent = item.name;\\n        \\n        const size = document.createElement('span');\\n        size.className = 'file-size';\\n        size.textContent = item.type === 'file' ? formatFileSize(item.size || 0) : '';\\n        \\n        itemElement.appendChild(icon);\\n        itemElement.appendChild(name);\\n        itemElement.appendChild(size);\\n        \\n        itemElement.addEventListener('click', (e) => {\\n            e.stopPropagation();\\n            if (item.type === 'directory') {\\n                navigateTo([...currentPath, item.name]);\\n            } else {\\n                showFileContent(item);\\n            }\\n        });\\n        \\n        fileExplorer.appendChild(itemElement);\\n    });\\n    \\n    // Show empty state if no items\\n    if (sortedItems.length === 0) {\\n        const emptyState = document.createElement('div');\\n        emptyState.className = 'empty-state';\\n        emptyState.innerHTML = `\\n            <i class=\\\"bi bi-folder-x\\\"></i>\\n            <p class=\\\"mb-0\\\">This directory is empty</p>\\n        `;\\n        fileExplorer.appendChild(emptyState);\\n    }\\n}\\n\\n// Show file content\\nfunction showFileContent(file) {\\n    fileTitle.textContent = file.name;\\n    fileActions.style.display = 'block';\\n    \\n    // Set up copy button\\n    copyBtn.onclick = () => {\\n        navigator.clipboard.writeText(file.content || '');\\n        const originalText = copyBtn.innerHTML;\\n        copyBtn.innerHTML = '<i class=\\\"bi bi-check\\\"></i>';\\n        setTimeout(() => {\\n            copyBtn.innerHTML = originalText;\\n        }, 2000);\\n    };\\n    \\n    // Set up download button\\n    downloadBtn.onclick = () => {\\n        const blob = new Blob([file.content || ''], { type: 'text/plain' });\\n        const url = URL.createObjectURL(blob);\\n        const a = document.createElement('a');\\n        a.href = url;\\n        a.download = file.name;\\n        document.body.appendChild(a);\\n        a.click();\\n        document.body.removeChild(a);\\n        URL.revokeObjectURL(url);\\n    };\\n    \\n    // Determine content type and render accordingly\\n    let content = '';\\n    const ext = file.name.split('.').pop().toLowerCase();\\n    \\n    if (['jpg', 'jpeg', 'png', 'gif', 'svg'].includes(ext)) {\\n        // For images, create an image element\\n        content = `<div class=\\\"text-center\\\"><img src=\\\"${file.path}\\\" class=\\\"img-fluid\\\" alt=\\\"${file.name}\\\" onerror=\\\"this.parentElement.innerHTML='<i class=\\\\'bi bi-file-earmark-image\\\\'></i> <span>Cannot display image</span>';\\\"></div>`;\\n    } else if (file.content) {\\n        // For text files, use highlight.js\\n        let codeClass = '';\\n        let codeContent = file.content;\\n        \\n        switch(ext) {\\n            case 'js':\\n                codeClass = 'javascript';\\n                break;\\n            case 'json':\\n                codeClass = 'json';\\n                try { codeContent = JSON.stringify(JSON.parse(file.content), null, 2); } catch(e) {}\\n                break;\\n            case 'html':\\n                codeClass = 'html';\\n                break;\\n            case 'css':\\n                codeClass = 'css';\\n                break;\\n            case 'md':\\n                // Render markdown\\n                content = `<div class=\\\"markdown-body\\\">${window.marked.parse(file.content)}</div>`;\\n                break;\\n            default:\\n                codeClass = '';\\n        }\\n        \\n        if (content === '') {\\n            content = `<pre><code class=\\\"${codeClass}\\\">${escapeHtml(codeContent)}</code></pre>`;\\n        }\\n    } else {\\n        content = '<div class=\\\"empty-state\\\"><i class=\\\"bi bi-file-earmark\\\"></i><p class=\\\"mb-0\\\">No content to display</p></div>';\\n    }\\n    \\n    fileContent.innerHTML = content;\\n    \\n    // Apply syntax highlighting\\n    if (file.content && !['md', 'jpg', 'jpeg', 'png', 'gif', 'svg'].includes(ext)) {\\n        document.querySelectorAll('pre code').forEach((block) => {\\n            hljs.highlightElement(block);\\n        });\\n    }\\n    \\n    // Update active state\\n    document.querySelectorAll('.file-item').forEach(el => el.classList.remove('active'));\\n    const activeItem = Array.from(document.querySelectorAll('.file-item')).find(el => \\n        el.textContent.trim().startsWith(file.name)\\n    );\\n    if (activeItem) activeItem.classList.add('active');\\n}\\n\\n// Helper to escape HTML\\nfunction escapeHtml(unsafe) {\\n    return unsafe\\n        .replace(/&/g, \\\"&amp;\\\")\\n        .replace(/</g, \\\"&lt;\\\")\\n        .replace(/>/g, \\\"&gt;\\\")\\n        .replace(/\\\"/g, \\\"&quot;\\\")\\n        .replace(/'/g, \\\"&#039;\\\");\\n}\\n\\n// Navigate to path\\nfunction navigateTo(pathArray) {\\n    currentPath = pathArray;\\n    renderBreadcrumb();\\n    renderFileExplorer();\\n    \\n    // Hide file content when navigating directories\\n    fileContent.innerHTML = '<div class=\\\"empty-state\\\"><i class=\\\"bi bi-file-earmark-text\\\"></i><p class=\\\"mb-0\\\">Select a file to view its contents</p></div>';\\n    fileTitle.textContent = 'Select a file';\\n    fileActions.style.display = 'none';\\n    \\n    // Update URL hash\\n    const hash = currentPath.length > 0 ? '#' + currentPath.join('/') : '';\\n    window.history.pushState(null, '', window.location.pathname + hash);\\n}\\n\\n// Handle back/forward navigation\\nwindow.addEventListener('popstate', () => {\\n    const hash = window.location.hash.slice(1);\\n    currentPath = hash ? hash.split('/') : [];\\n    renderBreadcrumb();\\n    renderFileExplorer();\\n});\\n\\n// Initialize\\nasync function init() {\\n    try {\\n        // Load file system from inline script or fallback to fetch\\n        if (typeof FILE_SYSTEM !== 'undefined') {\\n            fileSystem = FILE_SYSTEM;\\n        } else {\\n            const response = await fetch('data/file-system.json');\\n            if (!response.ok) throw new Error('Failed to load file system');\\n            fileSystem = await response.json();\\n        }\\n        \\n        // Handle initial navigation based on URL hash\\n        const hash = window.location.hash.slice(1);\\n        if (hash) {\\n            currentPath = hash.split('/').filter(Boolean);\\n            // Check if the path exists\\n            const item = findItemByPath(currentPath);\\n            if (!item) {\\n                currentPath = [];\\n                window.location.hash = '';\\n            } else if (item.type === 'file') {\\n                const dirPath = currentPath.slice(0, -1);\\n                currentPath = dirPath;\\n                renderBreadcrumb();\\n                renderFileExplorer();\\n                showFileContent(item);\\n                return;\\n            }\\n        }\\n        \\n        renderBreadcrumb();\\n        renderFileExplorer();\\n        \\n        // Set up refresh button\\n        refreshBtn.addEventListener('click', () => {\\n            window.location.reload();\\n        });\\n        \\n    } catch (error) {\\n        console.error('Error initializing file explorer:', error);\\n        fileExplorer.innerHTML = `\\n            <div class=\\\"alert alert-danger m-3\\\">\\n                <i class=\\\"bi bi-exclamation-triangle-fill\\\"></i>\\n                Failed to load file system: ${error.message}\\n            </div>\\n        `;\\n    }\\n}\\n\\n// Start the application\\ndocument.addEventListener('DOMContentLoaded', init);\\n\"\n        },\n        {\n          \"name\": \"file-explorer.js\",\n          \"type\": \"file\",\n          \"path\": \"js/file-explorer.js\",\n          \"size\": 20995,\n          \"content\": \"// Current path stack\\nlet currentPath = [];\\nlet fileSystem = null;\\n\\n// DOM Elements\\nconst fileExplorer = document.getElementById('file-explorer');\\nconst fileContent = document.getElementById('file-content');\\nconst fileTitle = document.getElementById('file-title');\\nconst breadcrumb = document.getElementById('breadcrumb');\\nconst refreshBtn = document.getElementById('refresh-btn');\\nconst copyBtn = document.getElementById('copy-btn');\\nconst downloadBtn = document.getElementById('download-btn');\\nconst fileActions = document.getElementById('file-actions');\\n\\n// File type icons\\nconst FILE_ICONS = {\\n    'directory': 'folder',\\n    'file': 'file-earmark',\\n    'json': 'filetype-json',\\n    'js': 'filetype-js',\\n    'css': 'filetype-css',\\n    'html': 'filetype-html',\\n    'md': 'file-earmark-text',\\n    'py': 'filetype-py',\\n    'jpg': 'file-image',\\n    'jpeg': 'file-image',\\n    'png': 'file-image',\\n    'gif': 'file-image',\\n    'svg': 'file-image'\\n};\\n\\n// Get file icon based on file extension\\nfunction getFileIcon(name, type) {\\n    if (type === 'directory') return 'folder';\\n    const ext = name.split('.').pop().toLowerCase();\\n    return FILE_ICONS[ext] || 'file-earmark';\\n}\\n\\n// Format file size\\nfunction formatFileSize(bytes) {\\n    if (bytes === 0) return '0 Bytes';\\n    const k = 1024;\\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\\n}\\n\\n// Render breadcrumb\\nfunction renderBreadcrumb() {\\n    breadcrumb.innerHTML = '';\\n    \\n    // Add root/home\\n    const homeItem = document.createElement('li');\\n    homeItem.className = 'breadcrumb-item' + (currentPath.length === 0 ? ' active' : '');\\n    const homeLink = document.createElement('a');\\n    homeLink.href = '#';\\n    homeLink.textContent = 'Home';\\n    homeLink.addEventListener('click', (e) => {\\n        e.preventDefault();\\n        navigateTo([]);\\n    });\\n    homeItem.appendChild(homeLink);\\n    breadcrumb.appendChild(homeItem);\\n    \\n    // Add path segments\\n    let currentPathStr = '';\\n    currentPath.forEach((segment, index) => {\\n        currentPathStr += (currentPathStr ? '/' : '') + segment;\\n        const isLast = index === currentPath.length - 1;\\n        \\n        const item = document.createElement('li');\\n        item.className = 'breadcrumb-item' + (isLast ? ' active' : '');\\n        \\n        if (!isLast) {\\n            const link = document.createElement('a');\\n            link.href = '#';\\n            link.textContent = segment;\\n            const pathToNavigate = currentPath.slice(0, index + 1);\\n            link.addEventListener('click', (e) => {\\n                e.preventDefault();\\n                navigateTo(pathToNavigate);\\n            });\\n            item.appendChild(link);\\n        } else {\\n            item.textContent = segment;\\n        }\\n        \\n        breadcrumb.appendChild(item);\\n    });\\n}\\n\\n// Find item by path\\nfunction findItemByPath(pathArray, root = fileSystem) {\\n    let current = root;\\n    \\n    for (const segment of pathArray) {\\n        if (!current.children) return null;\\n        const found = current.children.find(item => item.name === segment);\\n        if (!found) return null;\\n        current = found;\\n    }\\n    \\n    return current;\\n}\\n\\n// Render file explorer\\nfunction renderFileExplorer() {\\n    fileExplorer.innerHTML = '';\\n    \\n    // Get current directory\\n    const currentDir = currentPath.length === 0 ? fileSystem : findItemByPath(currentPath);\\n    if (!currentDir || !currentDir.children) return;\\n    \\n    // Sort: directories first, then files, both alphabetically\\n    const sortedItems = [...currentDir.children].sort((a, b) => {\\n        if (a.type === b.type) {\\n            return a.name.localeCompare(b.name);\\n        }\\n        return a.type === 'directory' ? -1 : 1;\\n    });\\n    \\n    // Render each item\\n    sortedItems.forEach(item => {\\n        const itemElement = document.createElement('div');\\n        itemElement.className = `file-item ${item.type === 'directory' ? 'dir-item' : ''}`;\\n        \\n        const icon = document.createElement('i');\\n        icon.className = `bi bi-${getFileIcon(item.name, item.type)}`;\\n        \\n        const name = document.createElement('span');\\n        name.textContent = item.name;\\n        \\n        const size = document.createElement('span');\\n        size.className = 'file-size';\\n        size.textContent = item.type === 'file' ? formatFileSize(item.size || 0) : '';\\n        \\n        itemElement.appendChild(icon);\\n        itemElement.appendChild(name);\\n        itemElement.appendChild(size);\\n        \\n        itemElement.addEventListener('click', (e) => {\\n            e.stopPropagation();\\n            if (item.type === 'directory') {\\n                navigateTo([...currentPath, item.name]);\\n            } else {\\n                showFileContent(item);\\n            }\\n        });\\n        \\n        fileExplorer.appendChild(itemElement);\\n    });\\n    \\n    // Show empty state if no items\\n    if (sortedItems.length === 0) {\\n        const emptyState = document.createElement('div');\\n        emptyState.className = 'empty-state';\\n        emptyState.innerHTML = `\\n            <i class=\\\"bi bi-folder-x\\\"></i>\\n            <p class=\\\"mb-0\\\">This directory is empty</p>\\n        `;\\n        fileExplorer.appendChild(emptyState);\\n    }\\n}\\n\\n// Show file content\\nfunction showFileContent(file) {\\n    fileTitle.textContent = file.name;\\n    fileActions.style.display = 'block';\\n    \\n    // Set up copy button\\n    copyBtn.onclick = () => {\\n        navigator.clipboard.writeText(file.content || '');\\n        const originalText = copyBtn.innerHTML;\\n        copyBtn.innerHTML = '<i class=\\\"bi bi-check\\\"></i>';\\n        setTimeout(() => {\\n            copyBtn.innerHTML = originalText;\\n        }, 2000);\\n    };\\n    \\n    // Set up download button\\n    downloadBtn.onclick = () => {\\n        const blob = new Blob([file.content || ''], { type: 'text/plain' });\\n        const url = URL.createObjectURL(blob);\\n        const a = document.createElement('a');\\n        a.href = url;\\n        a.download = file.name;\\n        document.body.appendChild(a);\\n        a.click();\\n        document.body.removeChild(a);\\n        URL.revokeObjectURL(url);\\n    };\\n    \\n    // Determine content type and render accordingly\\n    let content = '';\\n    const ext = file.name.split('.').pop().toLowerCase();\\n    \\n    if (['jpg', 'jpeg', 'png', 'gif', 'svg'].includes(ext)) {\\n        // For images, create an image element\\n        content = `<div class=\\\"text-center\\\"><img src=\\\"${file.path}\\\" class=\\\"img-fluid\\\" alt=\\\"${file.name}\\\" onerror=\\\"this.parentElement.innerHTML='<i class=\\\\'bi bi-file-earmark-image\\\\'></i> <span>Cannot display image</span>';\\\"></div>`;\\n    } else if (file.content) {\\n        // For text files, use highlight.js\\n        let codeClass = '';\\n        let codeContent = file.content;\\n        \\n        switch(ext) {\\n            case 'js':\\n                codeClass = 'javascript';\\n                break;\\n            case 'json':\\n                codeClass = 'json';\\n                try { codeContent = JSON.stringify(JSON.parse(file.content), null, 2); } catch(e) {}\\n                break;\\n            case 'html':\\n                codeClass = 'html';\\n                break;\\n            case 'css':\\n                codeClass = 'css';\\n                break;\\n            case 'md':\\n                // Render markdown\\n                content = `<div class=\\\"markdown-body\\\">${window.marked.parse(file.content)}</div>`;\\n                break;\\n            default:\\n                codeClass = '';\\n        }\\n        \\n        if (content === '') {\\n            content = `<pre><code class=\\\"${codeClass}\\\">${escapeHtml(codeContent)}</code></pre>`;\\n        }\\n    } else {\\n        content = '<div class=\\\"empty-state\\\"><i class=\\\"bi bi-file-earmark\\\"></i><p class=\\\"mb-0\\\">No content to display</p></div>';\\n    }\\n    \\n    fileContent.innerHTML = content;\\n    \\n    // Apply syntax highlighting\\n    if (file.content && !['md', 'jpg', 'jpeg', 'png', 'gif', 'svg'].includes(ext)) {\\n        document.querySelectorAll('pre code').forEach((block) => {\\n            hljs.highlightElement(block);\\n        });\\n    }\\n    \\n    // Update active state\\n    document.querySelectorAll('.file-item').forEach(el => el.classList.remove('active'));\\n    const activeItem = Array.from(document.querySelectorAll('.file-item')).find(el => \\n        el.textContent.trim().startsWith(file.name)\\n    );\\n    if (activeItem) activeItem.classList.add('active');\\n}\\n\\n// Helper to escape HTML\\nfunction escapeHtml(unsafe) {\\n    return unsafe\\n        .replace(/&/g, \\\"&amp;\\\")\\n        .replace(/</g, \\\"&lt;\\\")\\n        .replace(/>/g, \\\"&gt;\\\")\\n        .replace(/\\\"/g, \\\"&quot;\\\")\\n        .replace(/'/g, \\\"&#039;\\\");\\n}\\n\\n// Navigate to path\\nfunction navigateTo(pathArray) {\\n    currentPath = pathArray;\\n    renderBreadcrumb();\\n    renderFileExplorer();\\n    \\n    // Hide file content when navigating directories\\n    fileContent.innerHTML = '<div class=\\\"empty-state\\\"><i class=\\\"bi bi-file-earmark-text\\\"></i><p class=\\\"mb-0\\\">Select a file to view its contents</p></div>';\\n    fileTitle.textContent = 'Select a file';\\n    fileActions.style.display = 'none';\\n    \\n    // Update URL hash\\n    const hash = currentPath.length > 0 ? '#' + currentPath.join('/') : '';\\n    window.history.pushState(null, '', window.location.pathname + hash);\\n}\\n\\n// Handle back/forward navigation\\nwindow.addEventListener('popstate', () => {\\n    const hash = window.location.hash.slice(1);\\n    currentPath = hash ? hash.split('/') : [];\\n    renderBreadcrumb();\\n    renderFileExplorer();\\n});\\n\\n// Initialize\\nasync function init() {\\n    try {\\n        // Load file system from inline script or fallback to fetch\\n        if (typeof FILE_SYSTEM !== 'undefined') {\\n            fileSystem = FILE_SYSTEM;\\n        } else {\\n            const response = await fetch('data/file-system.json');\\n            if (!response.ok) throw new Error('Failed to load file system');\\n            fileSystem = await response.json();\\n        }\\n        \\n        // Handle initial navigation based on URL hash\\n        const hash = window.location.hash.slice(1);\\n        if (hash) {\\n            currentPath = hash.split('/').filter(Boolean);\\n            // Check if the path exists\\n            const item = findItemByPath(currentPath);\\n            if (!item) {\\n                currentPath = [];\\n                window.location.hash = '';\\n            } else if (item.type === 'file') {\\n                const dirPath = currentPath.slice(0, -1);\\n                currentPath = dirPath;\\n                renderBreadcrumb();\\n                renderFileExplorer();\\n                showFileContent(item);\\n                return;\\n            }\\n        }\\n        \\n        renderBreadcrumb();\\n        renderFileExplorer();\\n        \\n        // Set up refresh button\\n        refreshBtn.addEventListener('click', () => {\\n            window.location.reload();\\n        });\\n        \\n    } catch (error) {\\n        console.error('Error initializing file explorer:', error);\\n        fileExplorer.innerHTML = `\\n            <div class=\\\"alert alert-danger m-3\\\">\\n                <i class=\\\"bi bi-exclamation-triangle-fill\\\"></i>\\n                Failed to load file system: ${error.message}\\n            </div>\\n        `;\\n    }\\n}\\n\\n// Start the application\\ndocument.addEventListener('DOMContentLoaded', init);\\n\\n    const fileContent = document.getElementById('file-content');\\n    if (fileContent) {\\n        fileContent.innerHTML = `\\n            <div class=\\\"p-4 text-center text-danger\\\">\\n                <i class=\\\"bi bi-exclamation-triangle-fill\\\" style=\\\"font-size: 3rem;\\\"></i>\\n                <h4 class=\\\"mt-3\\\">Error</h4>\\n                <p class=\\\"mb-0\\\">${message}</p>\\n            </div>`;\\n    }\\n}\\n\\n// State\\nlet currentPath = '';\\nlet currentFile = null;\\n\\n// Format file size\\nfunction formatFileSize(bytes) {\\n    if (bytes === 0) return '0 Bytes';\\n    const k = 1024;\\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\\n}\\n\\n// Get file icon based on extension\\nfunction getFileIcon(filename) {\\n    const extension = filename.split('.').pop().toLowerCase();\\n    \\n    if (['jpg', 'jpeg', 'png', 'gif', 'svg'].includes(extension)) {\\n        return 'file-image';\\n    } else if (['js', 'jsx', 'ts', 'tsx', 'py', 'java', 'c', 'cpp', 'go', 'rs'].includes(extension)) {\\n        return 'file-code';\\n    } else if (['md', 'txt'].includes(extension)) {\\n        return 'file-text';\\n    } else if (['json', 'yaml', 'yml', 'xml'].includes(extension)) {\\n        return 'file-code';\\n    } else if (['pdf'].includes(extension)) {\\n        return 'file-pdf';\\n    } else if (['zip', 'tar', 'gz', 'rar'].includes(extension)) {\\n        return 'file-zip';\\n    } else {\\n        return 'file-earmark';\\n    }\\n}\\n\\n// Render file content\\nfunction renderFileContent(content, filename) {\\n    const fileContent = document.getElementById('file-content');\\n    const extension = filename.split('.').pop().toLowerCase();\\n    \\n    if (extension === 'md') {\\n        fileContent.innerHTML = `\\n            <div class=\\\"p-4\\\">\\n                <div class=\\\"markdown-body\\\">\\n                    ${marked(content || 'No content available')}\\n                </div>\\n            </div>`;\\n    } else if (['js', 'jsx', 'ts', 'tsx', 'py', 'java', 'c', 'cpp', 'go', 'rs', 'css', 'html', 'json', 'yaml', 'yml', 'xml'].includes(extension)) {\\n        fileContent.innerHTML = `\\n            <div class=\\\"p-3\\\">\\n                <pre><code class=\\\"language-${extension}\\\">${content || ''}</code></pre>\\n            </div>`;\\n        hljs.highlightAll();\\n    } else {\\n        fileContent.innerHTML = `\\n            <div class=\\\"p-4\\\">\\n                <pre class=\\\"mb-0\\\">${content || 'No content available'}</pre>\\n            </div>`;\\n    }\\n}\\n\\n// Update breadcrumb navigation\\nfunction updateBreadcrumb(path) {\\n    const breadcrumb = document.getElementById('breadcrumb');\\n    const parts = path ? path.split('/').filter(p => p) : [];\\n    \\n    let breadcrumbHtml = '<li class=\\\"breadcrumb-item\\\"><a href=\\\"#\\\" onclick=\\\"navigateTo(\\\\'\\\\')\\\">Root</a></li>';\\n    \\n    let currentPath = '';\\n    parts.forEach((part, index) => {\\n        currentPath += (currentPath ? '/' : '') + part;\\n        const isLast = index === parts.length - 1;\\n        \\n        if (isLast) {\\n            breadcrumbHtml += `\\n                <li class=\\\"breadcrumb-item active\\\" aria-current=\\\"page\\\">${part}</li>`;\\n        } else {\\n            breadcrumbHtml += `\\n                <li class=\\\"breadcrumb-item\\\"><a href=\\\"#\\\" onclick=\\\"navigateTo('${currentPath}')\\\">${part}</a></li>`;\\n        }\\n    });\\n    \\n    breadcrumb.innerHTML = breadcrumbHtml;\\n}\\n\\n// Find node by path\\nfunction findNodeByPath(path) {\\n    if (!path) return FILE_SYSTEM;\\n    \\n    const parts = path.split('/').filter(p => p);\\n    let node = FILE_SYSTEM;\\n    \\n    for (const part of parts) {\\n        const found = node.children?.find(child => child.name === part);\\n        if (!found) return null;\\n        node = found;\\n    }\\n    \\n    return node;\\n}\\n\\n// Render file explorer\\nfunction renderFileExplorer(path) {\\n    const explorer = document.getElementById('file-explorer');\\n    const node = findNodeByPath(path);\\n    \\n    if (!node || node.type !== 'directory') {\\n        explorer.innerHTML = `\\n            <div class=\\\"list-group-item text-center py-4 text-muted\\\">\\n                <i class=\\\"bi bi-exclamation-triangle\\\"></i>\\n                <div class=\\\"mt-2\\\">Directory not found</div>\\n            </div>`;\\n        return;\\n    }\\n    \\n    let content = '';\\n    const dirs = [];\\n    const files = [];\\n    \\n    // Separate directories and files\\n    (node.children || []).forEach(child => {\\n        if (child.type === 'directory') {\\n            dirs.push(child);\\n        } else {\\n            files.push(child);\\n        }\\n    });\\n    \\n    // Sort directories and files\\n    dirs.sort((a, b) => a.name.localeCompare(b.name));\\n    files.sort((a, b) => a.name.localeCompare(b.name));\\n    \\n    // Add parent directory link if not in root\\n    if (path) {\\n        const parentPath = path.split('/').slice(0, -1).join('/');\\n        content += `\\n            <div class=\\\"list-group-item list-group-item-action\\\" onclick=\\\"navigateTo('${parentPath}')\\\">\\n                <i class=\\\"bi bi-folder2\\\"></i> ..\\n            </div>`;\\n    }\\n    \\n    // Add directories\\n    dirs.forEach(dir => {\\n        content += `\\n            <div class=\\\"list-group-item list-group-item-action dir-item\\\" \\n                 onclick=\\\"navigateTo('${dir.path}')\\\">\\n                <i class=\\\"bi bi-folder2\\\"></i> ${dir.name}\\n            </div>`;\\n    });\\n    \\n    // Add files\\n    files.forEach(file => {\\n        const icon = getFileIcon(file.name);\\n        const isActive = currentFile === file.path ? 'active' : '';\\n        content += `\\n            <div class=\\\"list-group-item list-group-item-action ${isActive}\\\" \\n                 onclick=\\\"openFile('${file.path}')\\\" \\n                 data-path=\\\"${file.path}\\\">\\n                <i class=\\\"bi bi-${icon}\\\"></i> ${file.name}\\n                <span class=\\\"float-end text-muted small\\\">${formatFileSize(file.size)}</span>\\n            </div>`;\\n    });\\n    \\n    explorer.innerHTML = content || `\\n        <div class=\\\"list-group-item text-center py-4 text-muted\\\">\\n            <i class=\\\"bi bi-folder-x\\\"></i>\\n            <div class=\\\"mt-2\\\">Directory is empty</div>\\n        </div>`;\\n    \\n    // Update file count\\n    const fileCount = document.getElementById('file-count');\\n    if (dirs.length === 0 && files.length === 0) {\\n        fileCount.textContent = 'Empty';\\n    } else {\\n        fileCount.textContent = `${dirs.length} ${dirs.length === 1 ? 'folder' : 'folders'}, ${files.length} ${files.length === 1 ? 'file' : 'files'}`;\\n    }\\n}\\n\\n// Navigate to directory\\nfunction navigateTo(path) {\\n    currentPath = path;\\n    currentFile = null;\\n    renderFileExplorer(path);\\n    updateBreadcrumb(path);\\n    \\n    // Update file content view\\n    const fileContent = document.getElementById('file-content');\\n    fileContent.innerHTML = `\\n        <div class=\\\"p-4 text-center text-muted\\\">\\n            <i class=\\\"bi bi-folder2-open\\\" style=\\\"font-size: 3rem; opacity: 0.5;\\\"></i>\\n            <h4 class=\\\"mt-3\\\">${path ? path.split('/').pop() || 'Root' : 'Root'}</h4>\\n            <p class=\\\"mb-0\\\">Select a file to view its contents</p>\\n        </div>`;\\n}\\n\\n// Open file\\nfunction openFile(path) {\\n    const node = findNodeByPath(path);\\n    if (!node || node.type !== 'file') return;\\n    \\n    currentFile = path;\\n    \\n    // Update active state in file list\\n    document.querySelectorAll('.file-item').forEach(item => {\\n        item.classList.remove('active');\\n        if (item.getAttribute('data-path') === path) {\\n            item.classList.add('active');\\n        }\\n    });\\n    \\n    // Render file content\\n    renderFileContent(node.content, node.name);\\n}\\n\\n// Initialize file explorer\\nasync function initFileExplorer() {\\n    // Show loading state\\n    const explorer = document.getElementById('file-explorer');\\n    if (explorer) {\\n        explorer.innerHTML = `\\n            <div class=\\\"list-group-item text-center py-4\\\">\\n                <div class=\\\"spinner-border text-primary\\\" role=\\\"status\\\">\\n                    <span class=\\\"visually-hidden\\\">Loading...</span>\\n                </div>\\n                <div class=\\\"mt-2 text-muted\\\">Loading file system...</div>\\n            </div>`;\\n    }\\n\\n    // Load file system\\n    await loadFileSystem();\\n    \\n    if (!FILE_SYSTEM) {\\n        return; // Error already shown by loadFileSystem\\n    }\\n    \\n    // Make functions available globally\\n    window.navigateTo = navigateTo;\\n    window.openFile = openFile;\\n    \\n    // Set up download button\\n    document.getElementById('download-btn').addEventListener('click', function() {\\n        if (currentFile) {\\n            const node = findNodeByPath(currentFile);\\n            if (node && node.type === 'file') {\\n                const blob = new Blob([node.content || ''], { type: 'text/plain' });\\n                const url = URL.createObjectURL(blob);\\n                const a = document.createElement('a');\\n                a.href = url;\\n                a.download = node.name;\\n                document.body.appendChild(a);\\n                a.click();\\n                document.body.removeChild(a);\\n                URL.revokeObjectURL(url);\\n            }\\n        }\\n    });\\n    \\n    // Set up copy button\\n    document.getElementById('copy-btn').addEventListener('click', function() {\\n        if (currentFile) {\\n            const node = findNodeByPath(currentFile);\\n            if (node && node.type === 'file') {\\n                navigator.clipboard.writeText(node.content || '');\\n                const btn = this;\\n                const originalHTML = btn.innerHTML;\\n                btn.innerHTML = '<i class=\\\"bi bi-check\\\"></i>';\\n                setTimeout(() => {\\n                    btn.innerHTML = originalHTML;\\n                }, 2000);\\n            }\\n        }\\n    });\\n    \\n    // Initial render\\n    navigateTo('');\\n}\\n\\n// Start the application when the DOM is loaded\\ndocument.addEventListener('DOMContentLoaded', initFileExplorer);\\n\"\n        }\n      ]\n    },\n    {\n      \"name\": \"keycloak\",\n      \"type\": \"directory\",\n      \"path\": \"keycloak\",\n      \"children\": [\n        {\n          \"name\": \"certs\",\n          \"type\": \"directory\",\n          \"path\": \"keycloak/certs\",\n          \"children\": []\n        },\n        {\n          \"name\": \"conf\",\n          \"type\": \"directory\",\n          \"path\": \"keycloak/conf\",\n          \"children\": [\n            {\n              \"name\": \"cache-ispn.xml\",\n              \"type\": \"file\",\n              \"path\": \"keycloak/conf/cache-ispn.xml\",\n              \"size\": 2301,\n              \"content\": \"<infinispan\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xsi:schemaLocation=\\\"urn:infinispan:config:12.1\\\"\\n    xmlns=\\\"urn:infinispan:config:12.1\\\">\\n\\n    <jgroups>\\n        <stack name=\\\"tcp\\\" extends=\\\"tcp\\\">\\n            <TCP bind_port=\\\"7800\\\" port_range=\\\"30\\\" recv_buf_size=\\\"20000000\\\" send_buf_size=\\\"640000\\\"/>\\n            <JDBC_PING connection_url=\\\"jdbc:postgresql://keycloak-db:5432/keycloak\\\"\\n                      connection_username=\\\"${env.KEYCLOAK_DATABASE_USER}\\\"\\n                      connection_password=\\\"${env.KEYCLOAK_DATABASE_PASSWORD}\\\"\\n                      initialize_sql=\\\"CREATE TABLE IF NOT EXISTS JGROUPSPING (own_addr VARCHAR(200) NOT NULL, cluster_name VARCHAR(200) NOT NULL, updated TIMESTAMP, ping_data BYTEA, CONSTRAINT pk_jgroupsping PRIMARY KEY (own_addr, cluster_name))\\\"/>\\n            <MERGE3 min_interval=\\\"10000\\\" max_interval=\\\"30000\\\"/>\\n            <FD_SOCK/>\\n            <FD_ALL timeout=\\\"30000\\\" interval=\\\"5000\\\" />\\n            <VERIFY_SUSPECT timeout=\\\"1500\\\" />\\n            <pbcast.NAKACK2 xmit_interval=\\\"500\\\" xmit_table_num_rows=\\\"100\\\" xmit_msgs_min_size=\\\"5000\\\" use_mcast_xmit=\\\"false\\\" discard_delivered_msgs=\\\"true\\\"/>\\n            <UNICAST3 xmit_interval=\\\"500\\\" xmit_table_num_rows=\\\"10\\\" xmit_table_max_compaction_time=\\\"10000\\\" conn_close_timeout=\\\"5000\\\" />\\n            <pbcast.STABLE stability_delay=\\\"500\\\" desired_avg_gossip=\\\"5000\\\" max_bytes=\\\"400000\\\"/>\\n            <pbcast.GMS print_local_addr=\\\"true\\\" join_timeout=\\\"3000\\\" max_bundling_time=\\\"500\\\"/>\\n            <UFC max_credits=\\\"2000000\\\" min_threshold=\\\"0.4\\\"/>\\n            <MFC max_credits=\\\"2000000\\\" min_threshold=\\\"0.4\\\"/>\\n            <FRAG3/>\\n        </stack>\\n    </jgroups>\\n\\n    <cache-container name=\\\"keycloak\\\">\\n        <transport stack=\\\"tcp\\\" node-name=\\\"${jboss.node.name:keycloak}\\\"/>\\n        <local-cache name=\\\"realms\\\"/>\\n        <local-cache name=\\\"users\\\"/>\\n        <local-cache name=\\\"sessions\\\"/>\\n        <local-cache name=\\\"offlineSessions\\\"/>\\n        <local-cache name=\\\"loginFailures\\\"/>\\n        <local-cache name=\\\"work\\\"/>\\n        <local-cache name=\\\"authorization\\\"/>\\n        <local-cache name=\\\"keys\\\">\\n            <expiration max-idle=\\\"3600000\\\"/>\\n        </local-cache>\\n        <local-cache name=\\\"actionTokens\\\">\\n            <expiration max-idle=\\\"-1\\\" interval=\\\"300000\\\"/>\\n        </local-cache>\\n    </cache-container>\\n</infinispan>\\n\"\n            }\n          ]\n        },\n        {\n          \"name\": \"import\",\n          \"type\": \"directory\",\n          \"path\": \"keycloak/import\",\n          \"children\": []\n        },\n        {\n          \"name\": \"themes\",\n          \"type\": \"directory\",\n          \"path\": \"keycloak/themes\",\n          \"children\": []\n        },\n        {\n          \"name\": \"cache-local.xml\",\n          \"type\": \"file\",\n          \"path\": \"keycloak/cache-local.xml\",\n          \"size\": 1473,\n          \"content\": \"<infinispan\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xsi:schemaLocation=\\\"urn:infinispan:server:14.0\\n    https://infinispan.org/schemas/infinispan-server-14.0.xsd\\\"\\n    xmlns=\\\"urn:infinispan:server:14.0\\\">\\n\\n    <cache-container name=\\\"keycloak\\\">\\n        <local-cache name=\\\"realms\\\">\\n            <encoding>\\n                <key media-type=\\\"application/x-java-object\\\"/>\\n                <value media-type=\\\"application/x-java-object\\\"/>\\n            </encoding>\\n            <memory max-count=\\\"10000\\\" when-full=\\\"REMOVE\\\"/>\\n        </local-cache>\\n        <local-cache name=\\\"users\\\">\\n            <encoding>\\n                <key media-type=\\\"application/x-java-object\\\"/>\\n                <value media-type=\\\"application/x-java-object\\\"/>\\n            </encoding>\\n            <memory max-count=\\\"10000\\\" when-full=\\\"REMOVE\\\"/>\\n        </local-cache>\\n        <local-cache name=\\\"sessions\\\">\\n            <encoding>\\n                <key media-type=\\\"application/x-java-object\\\"/>\\n                <value media-type=\\\"application/x-java-object\\\"/>\\n            </encoding>\\n            <memory max-count=\\\"10000\\\" when-full=\\\"REMOVE\\\"/>\\n        </local-cache>\\n        <local-cache name=\\\"login-failures\\\">\\n            <encoding>\\n                <key media-type=\\\"application/x-java-object\\\"/>\\n                <value media-type=\\\"application/x-java-object\\\"/>\\n            </encoding>\\n            <memory max-count=\\\"10000\\\" when-full=\\\"REMOVE\\\"/>\\n        </local-cache>\\n    </cache-container>\\n</infinispan>\\n\"\n        },\n        {\n          \"name\": \"keycloak-setup.json\",\n          \"type\": \"file\",\n          \"path\": \"keycloak/keycloak-setup.json\",\n          \"size\": 0,\n          \"content\": \"\"\n        },\n        {\n          \"name\": \"setup-keycloak.sh\",\n          \"type\": \"file\",\n          \"path\": \"keycloak/setup-keycloak.sh\",\n          \"size\": 15104,\n          \"content\": \"#!/bin/bash\\n\\n# setup-keycloak.sh - Automatyczne skonfigurowanie Keycloak dla Media Vault\\n\\nset -e\\n\\necho \\\"🔐 Konfigurowanie Keycloak dla Media Vault...\\\"\\n\\n# Kolory dla output\\nRED='\\\\033[0;31m'\\nGREEN='\\\\033[0;32m'\\nYELLOW='\\\\033[1;33m'\\nNC='\\\\033[0m' # No Color\\n\\n# Konfiguracja\\nKEYCLOAK_URL=\\\"https://localhost:8445\\\"\\nADMIN_USER=\\\"admin\\\"\\nADMIN_PASS=\\\"admin123\\\"\\nREALM_NAME=\\\"media-vault\\\"\\n\\n# Funkcje pomocnicze\\nprint_status() {\\n    echo -e \\\"${GREEN}✅ $1${NC}\\\"\\n}\\n\\nprint_warning() {\\n    echo -e \\\"${YELLOW}⚠️  $1${NC}\\\"\\n}\\n\\nprint_error() {\\n    echo -e \\\"${RED}❌ $1${NC}\\\"\\n}\\n\\n# Sprawdź czy Keycloak jest dostępny\\nwait_for_keycloak() {\\n    echo \\\"⏳ Oczekiwanie na uruchomienie Keycloak...\\\"\\n    for i in {1..60}; do\\n        if curl -f -s \\\"$KEYCLOAK_URL/health/ready\\\" > /dev/null 2>&1; then\\n            print_status \\\"Keycloak jest gotowy\\\"\\n            return 0\\n        fi\\n        echo \\\"Próba $i/60 - Keycloak nie jest jeszcze gotowy...\\\"\\n        sleep 5\\n    done\\n    print_error \\\"Keycloak nie uruchomił się w czasie 5 minut\\\"\\n    return 1\\n}\\n\\n# Uzyskaj access token\\nget_admin_token() {\\n    echo \\\"🔑 Uzyskiwanie tokenu administratora...\\\"\\n\\n    RESPONSE=$(curl -s -X POST \\\"$KEYCLOAK_URL/realms/master/protocol/openid_connect/token\\\" \\\\\\n        -H \\\"Content-Type: application/x-www-form-urlencoded\\\" \\\\\\n        -d \\\"username=$ADMIN_USER\\\" \\\\\\n        -d \\\"password=$ADMIN_PASS\\\" \\\\\\n        -d \\\"grant_type=password\\\" \\\\\\n        -d \\\"client_id=admin-cli\\\")\\n\\n    TOKEN=$(echo $RESPONSE | jq -r '.access_token')\\n\\n    if [ \\\"$TOKEN\\\" == \\\"null\\\" ] || [ -z \\\"$TOKEN\\\" ]; then\\n        print_error \\\"Nie udało się uzyskać tokenu administratora\\\"\\n        echo \\\"Response: $RESPONSE\\\"\\n        return 1\\n    fi\\n\\n    print_status \\\"Token administratora uzyskany\\\"\\n    export ADMIN_TOKEN=\\\"$TOKEN\\\"\\n}\\n\\n# Stwórz realm Media Vault\\ncreate_realm() {\\n    echo \\\"🏰 Tworzenie realm 'media-vault'...\\\"\\n\\n    # Sprawdź czy realm już istnieje\\n    REALM_CHECK=$(curl -s -H \\\"Authorization: Bearer $ADMIN_TOKEN\\\" \\\\\\n        \\\"$KEYCLOAK_URL/admin/realms/$REALM_NAME\\\" \\\\\\n        -w \\\"%{http_code}\\\" -o /dev/null)\\n\\n    if [ \\\"$REALM_CHECK\\\" == \\\"200\\\" ]; then\\n        print_warning \\\"Realm '$REALM_NAME' już istnieje\\\"\\n        return 0\\n    fi\\n\\n    # Stwórz realm\\n    curl -s -X POST \\\"$KEYCLOAK_URL/admin/realms\\\" \\\\\\n        -H \\\"Authorization: Bearer $ADMIN_TOKEN\\\" \\\\\\n        -H \\\"Content-Type: application/json\\\" \\\\\\n        -d '{\\n            \\\"realm\\\": \\\"media-vault\\\",\\n            \\\"enabled\\\": true,\\n            \\\"displayName\\\": \\\"Media Vault\\\",\\n            \\\"registrationAllowed\\\": true,\\n            \\\"registrationEmailAsUsername\\\": true,\\n            \\\"rememberMe\\\": true,\\n            \\\"verifyEmail\\\": false,\\n            \\\"loginWithEmailAllowed\\\": true,\\n            \\\"duplicateEmailsAllowed\\\": false,\\n            \\\"resetPasswordAllowed\\\": true,\\n            \\\"editUsernameAllowed\\\": false,\\n            \\\"bruteForceProtected\\\": true\\n        }'\\n\\n    print_status \\\"Realm '$REALM_NAME' utworzony\\\"\\n}\\n\\n# Stwórz role\\ncreate_roles() {\\n    echo \\\"👥 Tworzenie ról...\\\"\\n\\n    # Role do utworzenia\\n    ROLES=(\\\"vault-user\\\" \\\"vault-admin\\\" \\\"vault-analyzer\\\")\\n\\n    for role in \\\"${ROLES[@]}\\\"; do\\n        curl -s -X POST \\\"$KEYCLOAK_URL/admin/realms/$REALM_NAME/roles\\\" \\\\\\n            -H \\\"Authorization: Bearer $ADMIN_TOKEN\\\" \\\\\\n            -H \\\"Content-Type: application/json\\\" \\\\\\n            -d \\\"{\\n                \\\\\\\"name\\\\\\\": \\\\\\\"$role\\\\\\\",\\n                \\\\\\\"description\\\\\\\": \\\\\\\"$role role for Media Vault\\\\\\\"\\n            }\\\"\\n        print_status \\\"Rola '$role' utworzona\\\"\\n    done\\n}\\n\\n# Stwórz klientów\\ncreate_clients() {\\n    echo \\\"📱 Tworzenie klientów...\\\"\\n\\n    # Frontend Client (public)\\n    curl -s -X POST \\\"$KEYCLOAK_URL/admin/realms/$REALM_NAME/clients\\\" \\\\\\n        -H \\\"Authorization: Bearer $ADMIN_TOKEN\\\" \\\\\\n        -H \\\"Content-Type: application/json\\\" \\\\\\n        -d '{\\n            \\\"clientId\\\": \\\"media-vault-frontend\\\",\\n            \\\"name\\\": \\\"Media Vault Frontend\\\",\\n            \\\"enabled\\\": true,\\n            \\\"publicClient\\\": true,\\n            \\\"standardFlowEnabled\\\": true,\\n            \\\"implicitFlowEnabled\\\": false,\\n            \\\"directAccessGrantsEnabled\\\": false,\\n            \\\"serviceAccountsEnabled\\\": false,\\n            \\\"protocol\\\": \\\"openid-connect\\\",\\n            \\\"fullScopeAllowed\\\": true,\\n            \\\"redirectUris\\\": [\\n                \\\"http://localhost:3000/*\\\",\\n                \\\"http://localhost/*\\\"\\n            ],\\n            \\\"webOrigins\\\": [\\n                \\\"http://localhost:3000\\\",\\n                \\\"http://localhost\\\"\\n            ],\\n            \\\"defaultClientScopes\\\": [\\n                \\\"web-origins\\\",\\n                \\\"profile\\\",\\n                \\\"roles\\\",\\n                \\\"email\\\"\\n            ]\\n        }'\\n\\n    print_status \\\"Klient 'media-vault-frontend' utworzony\\\"\\n\\n    # API Client (confidential)\\n    curl -s -X POST \\\"$KEYCLOAK_URL/admin/realms/$REALM_NAME/clients\\\" \\\\\\n        -H \\\"Authorization: Bearer $ADMIN_TOKEN\\\" \\\\\\n        -H \\\"Content-Type: application/json\\\" \\\\\\n        -d '{\\n            \\\"clientId\\\": \\\"media-vault-api\\\",\\n            \\\"name\\\": \\\"Media Vault API\\\",\\n            \\\"enabled\\\": true,\\n            \\\"publicClient\\\": false,\\n            \\\"standardFlowEnabled\\\": true,\\n            \\\"implicitFlowEnabled\\\": false,\\n            \\\"directAccessGrantsEnabled\\\": true,\\n            \\\"serviceAccountsEnabled\\\": true,\\n            \\\"protocol\\\": \\\"openid-connect\\\",\\n            \\\"secret\\\": \\\"vault-api-secret-123\\\",\\n            \\\"redirectUris\\\": [\\\"*\\\"],\\n            \\\"webOrigins\\\": [\\\"*\\\"],\\n            \\\"defaultClientScopes\\\": [\\n                \\\"web-origins\\\",\\n                \\\"profile\\\",\\n                \\\"roles\\\",\\n                \\\"email\\\"\\n            ]\\n        }'\\n\\n    print_status \\\"Klient 'media-vault-api' utworzony\\\"\\n\\n    # Admin Client (public)\\n    curl -s -X POST \\\"$KEYCLOAK_URL/admin/realms/$REALM_NAME/clients\\\" \\\\\\n        -H \\\"Authorization: Bearer $ADMIN_TOKEN\\\" \\\\\\n        -H \\\"Content-Type: application/json\\\" \\\\\\n        -d '{\\n            \\\"clientId\\\": \\\"media-vault-admin\\\",\\n            \\\"name\\\": \\\"Media Vault Admin Panel\\\",\\n            \\\"enabled\\\": true,\\n            \\\"publicClient\\\": true,\\n            \\\"standardFlowEnabled\\\": true,\\n            \\\"implicitFlowEnabled\\\": false,\\n            \\\"directAccessGrantsEnabled\\\": false,\\n            \\\"serviceAccountsEnabled\\\": false,\\n            \\\"protocol\\\": \\\"openid-connect\\\",\\n            \\\"redirectUris\\\": [\\n                \\\"http://localhost:3001/*\\\",\\n                \\\"http://localhost/admin/*\\\"\\n            ],\\n            \\\"webOrigins\\\": [\\n                \\\"http://localhost:3001\\\",\\n                \\\"http://localhost\\\"\\n            ],\\n            \\\"defaultClientScopes\\\": [\\n                \\\"web-origins\\\",\\n                \\\"profile\\\",\\n                \\\"roles\\\",\\n                \\\"email\\\"\\n            ]\\n        }'\\n\\n    print_status \\\"Klient 'media-vault-admin' utworzony\\\"\\n}\\n\\n# Stwórz użytkowników testowych\\ncreate_users() {\\n    echo \\\"👤 Tworzenie użytkowników testowych...\\\"\\n\\n    # Admin user\\n    USER_ID=$(curl -s -X POST \\\"$KEYCLOAK_URL/admin/realms/$REALM_NAME/users\\\" \\\\\\n        -H \\\"Authorization: Bearer $ADMIN_TOKEN\\\" \\\\\\n        -H \\\"Content-Type: application/json\\\" \\\\\\n        -d '{\\n            \\\"username\\\": \\\"vaultadmin\\\",\\n            \\\"enabled\\\": true,\\n            \\\"emailVerified\\\": true,\\n            \\\"firstName\\\": \\\"Vault\\\",\\n            \\\"lastName\\\": \\\"Administrator\\\",\\n            \\\"email\\\": \\\"admin@mediavault.local\\\",\\n            \\\"credentials\\\": [\\n                {\\n                    \\\"type\\\": \\\"password\\\",\\n                    \\\"value\\\": \\\"admin123\\\",\\n                    \\\"temporary\\\": false\\n                }\\n            ]\\n        }' -D - | grep -i location | cut -d'/' -f8 | tr -d '\\\\r')\\n\\n    # Przypisz role admin\\n    curl -s -X POST \\\"$KEYCLOAK_URL/admin/realms/$REALM_NAME/users/$USER_ID/role-mappings/realm\\\" \\\\\\n        -H \\\"Authorization: Bearer $ADMIN_TOKEN\\\" \\\\\\n        -H \\\"Content-Type: application/json\\\" \\\\\\n        -d '[\\n            {\\\"name\\\": \\\"vault-admin\\\"},\\n            {\\\"name\\\": \\\"vault-user\\\"}\\n        ]'\\n\\n    print_status \\\"Użytkownik 'vaultadmin' utworzony z rolą admin\\\"\\n\\n    # Regular user\\n    USER_ID=$(curl -s -X POST \\\"$KEYCLOAK_URL/admin/realms/$REALM_NAME/users\\\" \\\\\\n        -H \\\"Authorization: Bearer $ADMIN_TOKEN\\\" \\\\\\n        -H \\\"Content-Type: application/json\\\" \\\\\\n        -d '{\\n            \\\"username\\\": \\\"vaultuser\\\",\\n            \\\"enabled\\\": true,\\n            \\\"emailVerified\\\": true,\\n            \\\"firstName\\\": \\\"Vault\\\",\\n            \\\"lastName\\\": \\\"User\\\",\\n            \\\"email\\\": \\\"user@mediavault.local\\\",\\n            \\\"credentials\\\": [\\n                {\\n                    \\\"type\\\": \\\"password\\\",\\n                    \\\"value\\\": \\\"user123\\\",\\n                    \\\"temporary\\\": false\\n                }\\n            ]\\n        }' -D - | grep -i location | cut -d'/' -f8 | tr -d '\\\\r')\\n\\n    # Przypisz rolę user\\n    curl -s -X POST \\\"$KEYCLOAK_URL/admin/realms/$REALM_NAME/users/$USER_ID/role-mappings/realm\\\" \\\\\\n        -H \\\"Authorization: Bearer $ADMIN_TOKEN\\\" \\\\\\n        -H \\\"Content-Type: application/json\\\" \\\\\\n        -d '[\\n            {\\\"name\\\": \\\"vault-user\\\"}\\n        ]'\\n\\n    print_status \\\"Użytkownik 'vaultuser' utworzony z rolą user\\\"\\n}\\n\\n# Konfiguruj ustawienia realm\\nconfigure_realm_settings() {\\n    echo \\\"⚙️ Konfigurowanie ustawień realm...\\\"\\n\\n    # Update realm settings\\n    curl -s -X PUT \\\"$KEYCLOAK_URL/admin/realms/$REALM_NAME\\\" \\\\\\n        -H \\\"Authorization: Bearer $ADMIN_TOKEN\\\" \\\\\\n        -H \\\"Content-Type: application/json\\\" \\\\\\n        -d '{\\n            \\\"realm\\\": \\\"media-vault\\\",\\n            \\\"enabled\\\": true,\\n            \\\"displayName\\\": \\\"Media Vault\\\",\\n            \\\"registrationAllowed\\\": true,\\n            \\\"registrationEmailAsUsername\\\": true,\\n            \\\"rememberMe\\\": true,\\n            \\\"verifyEmail\\\": false,\\n            \\\"loginWithEmailAllowed\\\": true,\\n            \\\"duplicateEmailsAllowed\\\": false,\\n            \\\"resetPasswordAllowed\\\": true,\\n            \\\"editUsernameAllowed\\\": false,\\n            \\\"bruteForceProtected\\\": true,\\n            \\\"passwordPolicy\\\": \\\"length(8) and digits(1) and lowerCase(1) and upperCase(1)\\\",\\n            \\\"sslRequired\\\": \\\"none\\\",\\n            \\\"loginTheme\\\": \\\"keycloak\\\",\\n            \\\"adminTheme\\\": \\\"keycloak\\\",\\n            \\\"emailTheme\\\": \\\"keycloak\\\",\\n            \\\"accountTheme\\\": \\\"keycloak\\\",\\n            \\\"accessTokenLifespan\\\": 300,\\n            \\\"accessTokenLifespanForImplicitFlow\\\": 900,\\n            \\\"ssoSessionIdleTimeout\\\": 1800,\\n            \\\"ssoSessionMaxLifespan\\\": 36000,\\n            \\\"offlineSessionIdleTimeout\\\": 2592000,\\n            \\\"offlineSessionMaxLifespanEnabled\\\": false,\\n            \\\"accessCodeLifespan\\\": 60,\\n            \\\"accessCodeLifespanUserAction\\\": 300,\\n            \\\"accessCodeLifespanLogin\\\": 1800\\n        }'\\n\\n    print_status \\\"Ustawienia realm zaktualizowane\\\"\\n}\\n\\n# Sprawdź czy wymagane narzędzia są zainstalowane\\ncheck_dependencies() {\\n    echo \\\"🔍 Sprawdzanie zależności...\\\"\\n\\n    if ! command -v curl &> /dev/null; then\\n        print_error \\\"curl nie jest zainstalowany\\\"\\n        exit 1\\n    fi\\n\\n    if ! command -v jq &> /dev/null; then\\n        print_warning \\\"jq nie jest zainstalowany - instalowanie...\\\"\\n        if command -v apt-get &> /dev/null; then\\n            sudo apt-get update && sudo apt-get install -y jq\\n        elif command -v yum &> /dev/null; then\\n            sudo yum install -y jq\\n        elif command -v brew &> /dev/null; then\\n            brew install jq\\n        else\\n            print_error \\\"Nie można zainstalować jq automatycznie. Zainstaluj ręcznie.\\\"\\n            exit 1\\n        fi\\n    fi\\n\\n    print_status \\\"Wszystkie zależności są dostępne\\\"\\n}\\n\\n# Wyexportuj konfigurację realm\\nexport_realm_config() {\\n    echo \\\"📤 Eksportowanie konfiguracji realm...\\\"\\n\\n    curl -s -X GET \\\"$KEYCLOAK_URL/admin/realms/$REALM_NAME\\\" \\\\\\n        -H \\\"Authorization: Bearer $ADMIN_TOKEN\\\" \\\\\\n        > \\\"media-vault-realm-export.json\\\"\\n\\n    print_status \\\"Konfiguracja realm wyeksportowana do 'media-vault-realm-export.json'\\\"\\n}\\n\\n# Pokaż podsumowanie\\nshow_summary() {\\n    echo \\\"\\\"\\n    echo \\\"🎉 Konfiguracja Keycloak dla Media Vault zakończona!\\\"\\n    echo \\\"\\\"\\n    echo \\\"📋 Podsumowanie:\\\"\\n    echo \\\"├── Keycloak URL: $KEYCLOAK_URL\\\"\\n    echo \\\"├── Realm: $REALM_NAME\\\"\\n    echo \\\"├── Admin Console: $KEYCLOAK_URL/admin/\\\"\\n    echo \\\"└── User Account: $KEYCLOAK_URL/realms/$REALM_NAME/account/\\\"\\n    echo \\\"\\\"\\n    echo \\\"👥 Konta testowe:\\\"\\n    echo \\\"├── Admin: vaultadmin / admin123 (role: vault-admin, vault-user)\\\"\\n    echo \\\"└── User:  vaultuser / user123 (role: vault-user)\\\"\\n    echo \\\"\\\"\\n    echo \\\"📱 Klienci:\\\"\\n    echo \\\"├── media-vault-frontend (public)\\\"\\n    echo \\\"├── media-vault-api (confidential, secret: vault-api-secret-123)\\\"\\n    echo \\\"└── media-vault-admin (public)\\\"\\n    echo \\\"\\\"\\n    echo \\\"🔧 Następne kroki:\\\"\\n    echo \\\"1. Zaktualizuj .env file z odpowiednimi secretami\\\"\\n    echo \\\"2. Uruchom Media Vault: docker-compose up -d\\\"\\n    echo \\\"3. Otwórz http://localhost i zaloguj się\\\"\\n    echo \\\"\\\"\\n    print_status \\\"Keycloak jest gotowy do użycia!\\\"\\n}\\n\\n# Główna funkcja\\nmain() {\\n    echo \\\"🔐 Media Vault + Keycloak Setup\\\"\\n    echo \\\"================================\\\"\\n\\n    check_dependencies\\n    wait_for_keycloak\\n    get_admin_token\\n    create_realm\\n    create_roles\\n    create_clients\\n    create_users\\n    configure_realm_settings\\n    export_realm_config\\n    show_summary\\n}\\n\\n# Sprawdź argumenty\\nif [ \\\"$1\\\" == \\\"--help\\\" ] || [ \\\"$1\\\" == \\\"-h\\\" ]; then\\n    echo \\\"Użycie: $0 [opcje]\\\"\\n    echo \\\"\\\"\\n    echo \\\"Opcje:\\\"\\n    echo \\\"  --help, -h     Pokaż tę pomoc\\\"\\n    echo \\\"  --clean        Wyczyść istniejący realm przed konfiguracją\\\"\\n    echo \\\"  --export-only  Tylko wyeksportuj konfigurację\\\"\\n    echo \\\"\\\"\\n    echo \\\"Zmienne środowiskowe:\\\"\\n    echo \\\"  KEYCLOAK_URL   URL do Keycloak (domyślnie: http://localhost:8443)\\\"\\n    echo \\\"  ADMIN_USER     Admin username (domyślnie: admin)\\\"\\n    echo \\\"  ADMIN_PASS     Admin password (domyślnie: admin123)\\\"\\n    echo \\\"  REALM_NAME     Nazwa realm (domyślnie: media-vault)\\\"\\n    exit 0\\nfi\\n\\nif [ \\\"$1\\\" == \\\"--clean\\\" ]; then\\n    echo \\\"🧹 Czyszczenie istniejącego realm...\\\"\\n    get_admin_token\\n    curl -s -X DELETE \\\"$KEYCLOAK_URL/admin/realms/$REALM_NAME\\\" \\\\\\n        -H \\\"Authorization: Bearer $ADMIN_TOKEN\\\"\\n    print_status \\\"Realm '$REALM_NAME' usunięty\\\"\\nfi\\n\\nif [ \\\"$1\\\" == \\\"--export-only\\\" ]; then\\n    get_admin_token\\n    export_realm_config\\n    exit 0\\nfi\\n\\n# Uruchom główną funkcję\\nmain\\n\\n---\\n\\n# update-env.sh - Automatyczne aktualizowanie .env z Keycloak\\n#!/bin/bash\\n\\necho \\\"🔧 Aktualizowanie .env file dla Keycloak...\\\"\\n\\nENV_FILE=\\\".env\\\"\\nBACKUP_FILE=\\\".env.backup.$(date +%Y%m%d_%H%M%S)\\\"\\n\\n# Backup istniejącego .env\\nif [ -f \\\"$ENV_FILE\\\" ]; then\\n    cp \\\"$ENV_FILE\\\" \\\"$BACKUP_FILE\\\"\\n    echo \\\"✅ Backup utworzony: $BACKUP_FILE\\\"\\nfi\\n\\n# Aktualizuj lub dodaj zmienne Keycloak\\ncat >> \\\"$ENV_FILE\\\" << 'EOF'\\n\\n# Keycloak Configuration\\nKEYCLOAK_URL=http://keycloak:8080\\nKEYCLOAK_REALM=media-vault\\nKEYCLOAK_CLIENT_ID=media-vault-api\\nKEYCLOAK_CLIENT_SECRET=vault-api-secret-123\\nJWT_ISSUER=http://localhost:8443/realms/media-vault\\nJWT_AUDIENCE=media-vault-api\\nOAUTH2_ENABLED=true\\n\\n# Frontend Keycloak Config\\nKEYCLOAK_FRONTEND_URL=http://localhost:8443\\nKEYCLOAK_FRONTEND_REALM=media-vault\\nKEYCLOAK_FRONTEND_CLIENT_ID=media-vault-frontend\\n\\n# Admin Panel Keycloak Config\\nKEYCLOAK_ADMIN_CLIENT_ID=media-vault-admin\\nADMIN_ROLE=vault-admin\\n\\n# Service Account (dla analyzer)\\nSERVICE_ACCOUNT_CLIENT_ID=analyzer-service\\nSERVICE_ACCOUNT_SECRET=analyzer-secret-123\\nEOF\\n\\necho \\\"✅ .env file zaktualizowany z konfiguracją Keycloak\\\"\\n\\n---\\n\\n\"\n        },\n        {\n          \"name\": \"TODO.md\",\n          \"type\": \"file\",\n          \"path\": \"keycloak/TODO.md\",\n          \"size\": 296,\n          \"content\": \"# Keycloak - TODO\\n\\n## High Priority\\n- [ ] Configure OAuth2 clients\\n- [ ] Set up user federation\\n- [ ] Configure realm settings\\n\\n## Medium Priority\\n- [ ] Create user roles and permissions\\n- [ ] Set up identity providers\\n- [ ] Configure password policies\\n\\n## Completed\\n- [x] Initial Keycloak setup\\n\"\n        },\n        {\n          \"name\": \"update-env.sh\",\n          \"type\": \"file\",\n          \"path\": \"keycloak/update-env.sh\",\n          \"size\": 0,\n          \"content\": \"\"\n        }\n      ]\n    },\n    {\n      \"name\": \"media-vault-admin\",\n      \"type\": \"directory\",\n      \"path\": \"media-vault-admin\",\n      \"children\": [\n        {\n          \"name\": \"config\",\n          \"type\": \"directory\",\n          \"path\": \"media-vault-admin/config\",\n          \"children\": [\n            {\n              \"name\": \"admin-config.js\",\n              \"type\": \"file\",\n              \"path\": \"media-vault-admin/config/admin-config.js\",\n              \"size\": 1111,\n              \"content\": \"// Media Vault Admin Configuration\\nwindow.APP_CONFIG = {\\n  // API Configuration\\n  API_BASE_URL: process.env.API_URL || 'http://localhost:8080',\\n  \\n  // Authentication Configuration\\n  AUTH: {\\n    KEYCLOAK_URL: process.env.KEYCLOAK_URL || 'http://localhost:8080',\\n    REALM: process.env.KEYCLOAK_REALM || 'media-vault',\\n    CLIENT_ID: process.env.KEYCLOAK_CLIENT_ID || 'media-vault-admin',\\n    ADMIN_ROLE: process.env.ADMIN_ROLE || 'vault-admin'\\n  },\\n  \\n  // UI Configuration\\n  UI: {\\n    TITLE: process.env.VAULT_TITLE || 'Media Vault Admin',\\n    THEME: {\\n      PRIMARY_COLOR: '#4f46e5',\\n      SECONDARY_COLOR: '#6366f1',\\n      DANGER_COLOR: '#ef4444',\\n      SUCCESS_COLOR: '#10b981',\\n      WARNING_COLOR: '#f59e0b',\\n      INFO_COLOR: '#3b82f6'\\n    }\\n  },\\n  \\n  // Feature Flags\\n  FEATURES: {\\n    USER_MANAGEMENT: true,\\n    SYSTEM_MONITORING: true,\\n    VAULT_MANAGEMENT: true,\\n    SECURITY_SETTINGS: true\\n  },\\n  \\n  // Monitoring URLs\\n  MONITORING: {\\n    GRAFANA: process.env.MONITORING_GRAFANA_URL || 'http://localhost:3000',\\n    PROMETHEUS: process.env.MONITORING_PROMETHEUS_URL || 'http://localhost:9090'\\n  }\\n};\\n\"\n            }\n          ]\n        },\n        {\n          \"name\": \"src\",\n          \"type\": \"directory\",\n          \"path\": \"media-vault-admin/src\",\n          \"children\": [\n            {\n              \"name\": \"css\",\n              \"type\": \"directory\",\n              \"path\": \"media-vault-admin/src/css\",\n              \"children\": [\n                {\n                  \"name\": \"admin.css\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-admin/src/css/admin.css\",\n                  \"size\": 4314,\n                  \"content\": \"/* Admin Styles */\\n:root {\\n  --primary-color: #4f46e5;\\n  --primary-hover: #4338ca;\\n  --secondary-color: #6b7280;\\n  --success-color: #10b981;\\n  --info-color: #3b82f6;\\n  --warning-color: #f59e0b;\\n  --danger-color: #ef4444;\\n  --light-color: #f9fafb;\\n  --dark-color: #1f2937;\\n  --sidebar-width: 250px;\\n  --header-height: 60px;\\n  --transition-speed: 0.3s;\\n}\\n\\n/* Layout */\\nbody {\\n  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\\n  background-color: #f3f4f6;\\n  color: #374151;\\n  line-height: 1.6;\\n}\\n\\n.app-container {\\n  display: flex;\\n  min-height: 100vh;\\n}\\n\\n/* Sidebar */\\n.sidebar {\\n  width: var(--sidebar-width);\\n  background: #1e293b;\\n  color: #fff;\\n  transition: all var(--transition-speed) ease;\\n  position: fixed;\\n  height: 100vh;\\n  z-index: 1000;\\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);\\n}\\n\\n.sidebar.active {\\n  margin-left: calc(-1 * var(--sidebar-width));\\n}\\n\\n.sidebar-header {\\n  padding: 20px;\\n  background: rgba(0, 0, 0, 0.2);\\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\\n}\\n\\n.sidebar-header h3 {\\n  color: #fff;\\n  margin: 0;\\n  font-weight: 600;\\n  font-size: 1.25rem;\\n}\\n\\n.sidebar ul.components {\\n  padding: 20px 0;\\n}\\n\\n.sidebar ul li a {\\n  padding: 12px 20px;\\n  font-size: 0.9rem;\\n  display: block;\\n  color: #cbd5e1;\\n  text-decoration: none;\\n  transition: all 0.3s;\\n  border-left: 3px solid transparent;\\n}\\n\\n.sidebar ul li a:hover,\\n.sidebar ul li.active > a {\\n  color: #fff;\\n  background: rgba(255, 255, 255, 0.1);\\n  border-left-color: var(--primary-color);\\n}\\n\\n.sidebar ul li a i {\\n  margin-right: 10px;\\n  font-size: 1.1rem;\\n  vertical-align: middle;\\n}\\n\\n/* Content */\\n#content {\\n  width: calc(100% - var(--sidebar-width));\\n  margin-left: var(--sidebar-width);\\n  min-height: 100vh;\\n  transition: all var(--transition-speed) ease;\\n}\\n\\n#content.active {\\n  width: 100%;\\n  margin-left: 0;\\n}\\n\\n/* Navbar */\\n.navbar {\\n  padding: 0.75rem 1.5rem;\\n  background: #fff !important;\\n  border-bottom: 1px solid #e5e7eb;\\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);\\n}\\n\\n.navbar .dropdown-menu {\\n  padding: 0.5rem 0;\\n  border: 1px solid #e5e7eb;\\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\\n  border-radius: 0.5rem;\\n}\\n\\n.navbar .dropdown-item {\\n  padding: 0.5rem 1.25rem;\\n  font-size: 0.875rem;\\n}\\n\\n/* Cards */\\n.card {\\n  border: none;\\n  border-radius: 0.5rem;\\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);\\n  margin-bottom: 1.5rem;\\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\\n}\\n\\n.card:hover {\\n  transform: translateY(-2px);\\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\\n}\\n\\n.card-header {\\n  background-color: #fff;\\n  border-bottom: 1px solid #e5e7eb;\\n  padding: 1.25rem 1.5rem;\\n  border-top-left-radius: 0.5rem !important;\\n  border-top-right-radius: 0.5rem !important;\\n}\\n\\n.card-header h5 {\\n  font-weight: 600;\\n  margin: 0;\\n  font-size: 1.1rem;\\n}\\n\\n.card-body {\\n  padding: 1.5rem;\\n}\\n\\n/* Tables */\\n.table {\\n  margin-bottom: 0;\\n}\\n\\n.table thead th {\\n  background-color: #f9fafb;\\n  border-top: none;\\n  font-weight: 600;\\n  font-size: 0.75rem;\\n  text-transform: uppercase;\\n  letter-spacing: 0.05em;\\n  color: #6b7280;\\n  padding: 0.75rem 1.5rem;\\n  border-bottom: 1px solid #e5e7eb;\\n}\\n\\n.table tbody td {\\n  padding: 1rem 1.5rem;\\n  vertical-align: middle;\\n  border-color: #f3f4f6;\\n}\\n\\n.table-hover tbody tr:hover {\\n  background-color: #f9fafb;\\n}\\n\\n/* Buttons */\\n.btn {\\n  font-weight: 500;\\n  padding: 0.5rem 1rem;\\n  border-radius: 0.375rem;\\n  font-size: 0.875rem;\\n  transition: all 0.2s ease;\\n}\\n\\n.btn-sm {\\n  padding: 0.25rem 0.5rem;\\n  font-size: 0.75rem;\\n}\\n\\n.btn-primary {\\n  background-color: var(--primary-color);\\n  border-color: var(--primary-color);\\n}\\n\\n.btn-primary:hover {\\n  background-color: var(--primary-hover);\\n  border-color: var(--primary-hover);\\n}\\n\\n/* Badges */\\n.badge {\\n  font-weight: 500;\\n  padding: 0.35em 0.65em;\\n  font-size: 0.75em;\\n}\\n\\n/* Progress */\\n.progress {\\n  height: 0.5rem;\\n  border-radius: 0.25rem;\\n  background-color: #e5e7eb;\\n}\\n\\n.progress-bar {\\n  transition: width 0.6s ease;\\n}\\n\\n/* Responsive */\\n@media (max-width: 768px) {\\n  .sidebar {\\n    margin-left: calc(-1 * var(--sidebar-width));\\n  }\\n  \\n  .sidebar.active {\\n    margin-left: 0;\\n  }\\n  \\n  #content {\\n    width: 100%;\\n    margin-left: 0;\\n  }\\n  \\n  #content.active {\\n    margin-left: var(--sidebar-width);\\n  }\\n}\\n\"\n                },\n                {\n                  \"name\": \"dashboard.css\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-admin/src/css/dashboard.css\",\n                  \"size\": 3509,\n                  \"content\": \"/* Dashboard Specific Styles */\\n\\n/* Stats Cards */\\n.stats-card {\\n  border-radius: 0.75rem;\\n  overflow: hidden;\\n  transition: all 0.3s ease;\\n  border: 1px solid rgba(0, 0, 0, 0.05);\\n}\\n\\n.stats-card .card-body {\\n  padding: 1.5rem;\\n  position: relative;\\n  z-index: 1;\\n}\\n\\n.stats-card .card-title {\\n  font-size: 0.875rem;\\n  font-weight: 500;\\n  text-transform: uppercase;\\n  letter-spacing: 0.05em;\\n  margin-bottom: 0.5rem;\\n  color: rgba(255, 255, 255, 0.9);\\n}\\n\\n.stats-card .card-value {\\n  font-size: 1.75rem;\\n  font-weight: 700;\\n  margin: 0.5rem 0;\\n  color: #fff;\\n}\\n\\n.stats-card .card-icon {\\n  position: absolute;\\n  right: 1.5rem;\\n  top: 50%;\\n  transform: translateY(-50%);\\n  font-size: 3.5rem;\\n  opacity: 0.2;\\n  z-index: -1;\\n}\\n\\n/* Activity Feed */\\n.activity-feed {\\n  list-style: none;\\n  padding: 0;\\n  margin: 0;\\n}\\n\\n.activity-item {\\n  display: flex;\\n  padding: 1rem 0;\\n  border-bottom: 1px solid #f0f2f5;\\n  align-items: flex-start;\\n}\\n\\n.activity-item:last-child {\\n  border-bottom: none;\\n}\\n\\n.activity-avatar {\\n  width: 40px;\\n  height: 40px;\\n  border-radius: 50%;\\n  background-color: #f0f2f5;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  margin-right: 1rem;\\n  flex-shrink: 0;\\n  color: #6c757d;\\n  font-weight: 600;\\n}\\n\\n.activity-content {\\n  flex: 1;\\n}\\n\\n.activity-user {\\n  font-weight: 600;\\n  color: #2d3748;\\n  margin-right: 0.25rem;\\n}\\n\\n.activity-action {\\n  color: #4a5568;\\n  margin-right: 0.25rem;\\n}\\n\\n.activity-target {\\n  color: #4a5568;\\n  font-weight: 500;\\n}\\n\\n.activity-time {\\n  display: block;\\n  font-size: 0.75rem;\\n  color: #a0aec0;\\n  margin-top: 0.25rem;\\n}\\n\\n/* System Status */\\n.system-status-item {\\n  margin-bottom: 1.5rem;\\n}\\n\\n.system-status-item:last-child {\\n  margin-bottom: 0;\\n}\\n\\n.system-status-header {\\n  display: flex;\\n  justify-content: space-between;\\n  margin-bottom: 0.5rem;\\n}\\n\\n.system-status-label {\\n  font-size: 0.875rem;\\n  color: #4a5568;\\n  font-weight: 500;\\n}\\n\\n.system-status-value {\\n  font-weight: 600;\\n  color: #2d3748;\\n}\\n\\n/* Chart Container */\\n.chart-container {\\n  position: relative;\\n  height: 250px;\\n  width: 100%;\\n}\\n\\n/* Responsive Adjustments */\\n@media (max-width: 991.98px) {\\n  .stats-card {\\n    margin-bottom: 1rem;\\n  }\\n  \\n  .chart-container {\\n    height: 200px;\\n  }\\n}\\n\\n/* Animations */\\n@keyframes fadeIn {\\n  from { opacity: 0; transform: translateY(10px); }\\n  to { opacity: 1; transform: translateY(0); }\\n}\\n\\n.fade-in {\\n  animation: fadeIn 0.3s ease-out forwards;\\n}\\n\\n/* Custom Scrollbar */\\n::-webkit-scrollbar {\\n  width: 8px;\\n  height: 8px;\\n}\\n\\n::-webkit-scrollbar-track {\\n  background: #f1f1f1;\\n  border-radius: 4px;\\n}\\n\\n::-webkit-scrollbar-thumb {\\n  background: #c1c1c1;\\n  border-radius: 4px;\\n}\\n\\n::-webkit-scrollbar-thumb:hover {\\n  background: #a8a8a8;\\n}\\n\\n/* Custom Utilities */\\n.text-ellipsis {\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n}\\n\\n.cursor-pointer {\\n  cursor: pointer;\\n}\\n\\n.transition-all {\\n  transition: all 0.3s ease;\\n}\\n\\n.hover-shadow:hover {\\n  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\\n}\\n\\n/* Custom Badge Variants */\\n.badge-outline {\\n  background-color: transparent;\\n  border: 1px solid currentColor;\\n}\\n\\n/* Custom Backgrounds */\\n.bg-gradient-primary {\\n  background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);\\n}\\n\\n.bg-gradient-success {\\n  background: linear-gradient(135deg, #10b981 0%, #34d399 100%);\\n}\\n\\n.bg-gradient-warning {\\n  background: linear-gradient(135deg, #f59e0b 0%, #fbbf24 100%);\\n}\\n\\n.bg-gradient-danger {\\n  background: linear-gradient(135deg, #ef4444 0%, #f87171 100%);\\n}\"\n                }\n              ]\n            },\n            {\n              \"name\": \"js\",\n              \"type\": \"directory\",\n              \"path\": \"media-vault-admin/src/js\",\n              \"children\": [\n                {\n                  \"name\": \"charts.js\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-admin/src/js/charts.js\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"keycloak-admin.js\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-admin/src/js/keycloak-admin.js\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"system-monitoring.js\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-admin/src/js/system-monitoring.js\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"user-management.js\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-admin/src/js/user-management.js\",\n                  \"size\": 17556,\n                  \"content\": \"// User Management for Media Vault Admin\\n\\nclass UserManager {\\n  constructor() {\\n    this.config = window.APP_CONFIG || {};\\n    this.endpoints = {\\n      users: `${this.config.API_BASE_URL}/api/admin/users`,\\n      roles: `${this.config.API_BASE_URL}/api/admin/roles`\\n    };\\n    this.currentPage = 1;\\n    this.pageSize = 10;\\n    this.totalUsers = 0;\\n    this.users = [];\\n    this.roles = [];\\n    \\n    // Initialize if on users page\\n    if (document.getElementById('users-page')) {\\n      this.init();\\n    }\\n  }\\n\\n  /**\\n   * Initialize the user management interface\\n   */\\n  async init() {\\n    this.bindEvents();\\n    await this.loadRoles();\\n    await this.loadUsers();\\n    this.renderUserTable();\\n  }\\n\\n  /**\\n   * Bind event listeners\\n   */\\n  bindEvents() {\\n    // User search\\n    const searchInput = document.getElementById('user-search');\\n    if (searchInput) {\\n      searchInput.addEventListener('input', this.debounce(() => {\\n        this.currentPage = 1;\\n        this.loadUsers();\\n      }, 300));\\n    }\\n\\n    // Add user modal\\n    const addUserBtn = document.getElementById('add-user-btn');\\n    if (addUserBtn) {\\n      addUserBtn.addEventListener('click', () => this.showAddUserModal());\\n    }\\n\\n    // Save user form\\n    const userForm = document.getElementById('user-form');\\n    if (userForm) {\\n      userForm.addEventListener('submit', (e) => {\\n        e.preventDefault();\\n        this.saveUser();\\n      });\\n    }\\n\\n    // Role filter\\n    const roleFilter = document.getElementById('role-filter');\\n    if (roleFilter) {\\n      roleFilter.addEventListener('change', () => {\\n        this.currentPage = 1;\\n        this.loadUsers();\\n      });\\n    }\\n\\n    // Pagination\\n    document.addEventListener('click', (e) => {\\n      if (e.target.closest('.page-link')) {\\n        e.preventDefault();\\n        const page = parseInt(e.target.closest('.page-link').dataset.page);\\n        if (page && !isNaN(page)) {\\n          this.currentPage = page;\\n          this.loadUsers();\\n        }\\n      }\\n    });\\n  }\\n\\n  /**\\n   * Load users from the API\\n   */\\n  async loadUsers() {\\n    try {\\n      this.showLoading(true);\\n      \\n      const search = document.getElementById('user-search')?.value || '';\\n      const role = document.getElementById('role-filter')?.value || '';\\n      \\n      let url = `${this.endpoints.users}?page=${this.currentPage}&pageSize=${this.pageSize}`;\\n      if (search) url += `&search=${encodeURIComponent(search)}`;\\n      if (role) url += `&role=${encodeURIComponent(role)}`;\\n      \\n      const response = await fetch(url, {\\n        headers: this.getAuthHeaders()\\n      });\\n      \\n      if (!response.ok) {\\n        throw new Error('Failed to load users');\\n      }\\n      \\n      const data = await response.json();\\n      this.users = data.users || [];\\n      this.totalUsers = data.total || 0;\\n      \\n      this.renderUserTable();\\n      this.renderPagination();\\n      \\n    } catch (error) {\\n      console.error('Error loading users:', error);\\n      this.showError('Failed to load users. Please try again.');\\n    } finally {\\n      this.showLoading(false);\\n    }\\n  }\\n\\n  /**\\n   * Load available roles from the API\\n   */\\n  async loadRoles() {\\n    try {\\n      const response = await fetch(this.endpoints.roles, {\\n        headers: this.getAuthHeaders()\\n      });\\n      \\n      if (!response.ok) {\\n        throw new Error('Failed to load roles');\\n      }\\n      \\n      this.roles = await response.json();\\n      this.renderRoleFilter();\\n      \\n    } catch (error) {\\n      console.error('Error loading roles:', error);\\n      this.showError('Failed to load roles. Some features may be limited.');\\n    }\\n  }\\n\\n  /**\\n   * Render the users table\\n   */\\n  renderUserTable() {\\n    const tbody = document.querySelector('#users-table tbody');\\n    if (!tbody) return;\\n    \\n    tbody.innerHTML = '';\\n    \\n    if (this.users.length === 0) {\\n      const tr = document.createElement('tr');\\n      tr.innerHTML = `\\n        <td colspan=\\\"6\\\" class=\\\"text-center py-4 text-muted\\\">\\n          No users found\\n        </td>\\n      `;\\n      tbody.appendChild(tr);\\n      return;\\n    }\\n    \\n    this.users.forEach(user => {\\n      const tr = document.createElement('tr');\\n      tr.className = 'align-middle';\\n      \\n      const statusClass = user.isActive ? 'success' : 'secondary';\\n      const statusText = user.isActive ? 'Active' : 'Inactive';\\n      \\n      tr.innerHTML = `\\n        <td>\\n          <div class=\\\"d-flex align-items-center\\\">\\n            <div class=\\\"avatar avatar-sm me-3\\\">\\n              <span class=\\\"avatar-text rounded-circle bg-light text-dark\\\">\\n                ${user.name?.charAt(0).toUpperCase() || 'U'}\\n              </span>\\n            </div>\\n            <div>\\n              <div class=\\\"fw-semibold\\\">${user.name || 'N/A'}</div>\\n              <div class=\\\"text-muted small\\\">${user.email || ''}</div>\\n            </div>\\n          </div>\\n        </td>\\n        <td>${user.username || 'N/A'}</td>\\n        <td>\\n          ${user.roles?.map(role => \\n            `<span class=\\\"badge bg-primary me-1\\\">${role}</span>`\\n          ).join('') || '<span class=\\\"text-muted\\\">No roles</span>'}\\n        </td>\\n        <td>\\n          <span class=\\\"badge bg-${statusClass}\\\">${statusText}</span>\\n        </td>\\n        <td>${new Date(user.createdAt).toLocaleDateString()}</td>\\n        <td class=\\\"text-end\\\">\\n          <div class=\\\"dropdown\\\">\\n            <button class=\\\"btn btn-sm btn-link text-dark\\\" type=\\\"button\\\" data-bs-toggle=\\\"dropdown\\\" aria-expanded=\\\"false\\\">\\n              <i class=\\\"bi bi-three-dots-vertical\\\"></i>\\n            </button>\\n            <ul class=\\\"dropdown-menu dropdown-menu-end\\\">\\n              <li>\\n                <a class=\\\"dropdown-item\\\" href=\\\"#\\\" data-action=\\\"edit\\\" data-user-id=\\\"${user.id}\\\">\\n                  <i class=\\\"bi bi-pencil me-2\\\"></i>Edit\\n                </a>\\n              </li>\\n              <li>\\n                <a class=\\\"dropdown-item\\\" href=\\\"#\\\" data-action=\\\"reset-password\\\" data-user-id=\\\"${user.id}\\\">\\n                  <i class=\\\"bi bi-key me-2\\\"></i>Reset Password\\n                </a>\\n              </li>\\n              <li><hr class=\\\"dropdown-divider\\\"></li>\\n              <li>\\n                <a class=\\\"dropdown-item text-danger\\\" href=\\\"#\\\" data-action=\\\"delete\\\" data-user-id=\\\"${user.id}\\\">\\n                  <i class=\\\"bi bi-trash me-2\\\"></i>Delete\\n                </a>\\n              </li>\\n            </ul>\\n          </div>\\n        </td>\\n      `;\\n      \\n      tbody.appendChild(tr);\\n    });\\n    \\n    // Add event listeners to action buttons\\n    document.querySelectorAll('[data-action]').forEach(button => {\\n      button.addEventListener('click', (e) => {\\n        e.preventDefault();\\n        const action = button.dataset.action;\\n        const userId = button.dataset.userId;\\n        \\n        switch (action) {\\n          case 'edit':\\n            this.editUser(userId);\\n            break;\\n          case 'delete':\\n            this.confirmDeleteUser(userId);\\n            break;\\n          case 'reset-password':\\n            this.resetPassword(userId);\\n            break;\\n        }\\n      });\\n    });\\n  }\\n\\n  /**\\n   * Render the role filter dropdown\\n   */\\n  renderRoleFilter() {\\n    const roleFilter = document.getElementById('role-filter');\\n    if (!roleFilter) return;\\n    \\n    // Clear existing options except the first one\\n    while (roleFilter.options.length > 1) {\\n      roleFilter.remove(1);\\n    }\\n    \\n    // Add role options\\n    this.roles.forEach(role => {\\n      const option = document.createElement('option');\\n      option.value = role.id;\\n      option.textContent = role.name;\\n      roleFilter.appendChild(option);\\n    });\\n  }\\n\\n  /**\\n   * Render pagination controls\\n   */\\n  renderPagination() {\\n    const pagination = document.getElementById('pagination');\\n    if (!pagination) return;\\n    \\n    const totalPages = Math.ceil(this.totalUsers / this.pageSize);\\n    \\n    if (totalPages <= 1) {\\n      pagination.innerHTML = '';\\n      return;\\n    }\\n    \\n    let html = `\\n      <nav aria-label=\\\"User pagination\\\">\\n        <ul class=\\\"pagination mb-0\\\">\\n          <li class=\\\"page-item ${this.currentPage === 1 ? 'disabled' : ''}\\\">\\n            <a class=\\\"page-link\\\" href=\\\"#\\\" data-page=\\\"${this.currentPage - 1}\\\" aria-label=\\\"Previous\\\">\\n              <span aria-hidden=\\\"true\\\">&laquo;</span>\\n            </a>\\n          </li>\\n    `;\\n    \\n    // Show first page, current page, and pages around it\\n    const pagesToShow = 3; // Number of pages to show around current page\\n    let startPage = Math.max(1, this.currentPage - pagesToShow);\\n    let endPage = Math.min(totalPages, this.currentPage + pagesToShow);\\n    \\n    // Adjust if we're near the start or end\\n    if (this.currentPage <= pagesToShow) {\\n      endPage = Math.min(2 * pagesToShow + 1, totalPages);\\n    }\\n    \\n    if (totalPages - this.currentPage < pagesToShow) {\\n      startPage = Math.max(1, totalPages - 2 * pagesToShow);\\n    }\\n    \\n    // First page\\n    if (startPage > 1) {\\n      html += `\\n        <li class=\\\"page-item ${1 === this.currentPage ? 'active' : ''}\\\">\\n          <a class=\\\"page-link\\\" href=\\\"#\\\" data-page=\\\"1\\\">1</a>\\n        </li>\\n      `;\\n      \\n      if (startPage > 2) {\\n        html += '<li class=\\\"page-item disabled\\\"><span class=\\\"page-link\\\">...</span></li>';\\n      }\\n    }\\n    \\n    // Page numbers\\n    for (let i = startPage; i <= endPage; i++) {\\n      html += `\\n        <li class=\\\"page-item ${i === this.currentPage ? 'active' : ''}\\\">\\n          <a class=\\\"page-link\\\" href=\\\"#\\\" data-page=\\\"${i}\\\">${i}</a>\\n        </li>\\n      `;\\n    }\\n    \\n    // Last page\\n    if (endPage < totalPages) {\\n      if (endPage < totalPages - 1) {\\n        html += '<li class=\\\"page-item disabled\\\"><span class=\\\"page-link\\\">...</span></li>';\\n      }\\n      \\n      html += `\\n        <li class=\\\"page-item ${totalPages === this.currentPage ? 'active' : ''}\\\">\\n          <a class=\\\"page-link\\\" href=\\\"#\\\" data-page=\\\"${totalPages}\\\">${totalPages}</a>\\n        </li>\\n      `;\\n    }\\n    \\n    // Next button\\n    html += `\\n          <li class=\\\"page-item ${this.currentPage === totalPages ? 'disabled' : ''}\\\">\\n            <a class=\\\"page-link\\\" href=\\\"#\\\" data-page=\\\"${this.currentPage + 1}\\\" aria-label=\\\"Next\\\">\\n              <span aria-hidden=\\\"true\\\">&raquo;</span>\\n            </a>\\n          </li>\\n        </ul>\\n      </nav>\\n    `;\\n    \\n    pagination.innerHTML = html;\\n  }\\n\\n  /**\\n   * Show the add user modal\\n   */\\n  showAddUserModal(user = null) {\\n    const modal = new bootstrap.Modal(document.getElementById('userModal'));\\n    const form = document.getElementById('user-form');\\n    const modalTitle = document.getElementById('userModalLabel');\\n    const userIdField = document.getElementById('user-id');\\n    const isEdit = !!user;\\n    \\n    // Reset form\\n    form.reset();\\n    \\n    // Set modal title and button text\\n    if (isEdit) {\\n      modalTitle.textContent = 'Edit User';\\n      document.getElementById('save-user-btn').textContent = 'Update User';\\n      \\n      // Populate form fields\\n      userIdField.value = user.id;\\n      document.getElementById('name').value = user.name || '';\\n      document.getElementById('email').value = user.email || '';\\n      document.getElementById('username').value = user.username || '';\\n      document.getElementById('isActive').checked = user.isActive !== false;\\n      \\n      // Set roles\\n      const roleSelect = document.getElementById('roles');\\n      Array.from(roleSelect.options).forEach(option => {\\n        option.selected = user.roles?.includes(option.value) || false;\\n      });\\n      \\n    } else {\\n      modalTitle.textContent = 'Add New User';\\n      document.getElementById('save-user-btn').textContent = 'Add User';\\n      userIdField.value = '';\\n    }\\n    \\n    modal.show();\\n  }\\n\\n  /**\\n   * Edit a user\\n   */\\n  async editUser(userId) {\\n    try {\\n      this.showLoading(true);\\n      \\n      const response = await fetch(`${this.endpoints.users}/${userId}`, {\\n        headers: this.getAuthHeaders()\\n      });\\n      \\n      if (!response.ok) {\\n        throw new Error('Failed to load user data');\\n      }\\n      \\n      const user = await response.json();\\n      this.showAddUserModal(user);\\n      \\n    } catch (error) {\\n      console.error('Error loading user:', error);\\n      this.showError('Failed to load user data. Please try again.');\\n    } finally {\\n      this.showLoading(false);\\n    }\\n  }\\n\\n  /**\\n   * Save user (create or update)\\n   */\\n  async saveUser() {\\n    const form = document.getElementById('user-form');\\n    if (!form) return;\\n    \\n    const userId = document.getElementById('user-id').value;\\n    const isEdit = !!userId;\\n    \\n    const formData = new FormData(form);\\n    const userData = {\\n      name: formData.get('name'),\\n      email: formData.get('email'),\\n      username: formData.get('username'),\\n      isActive: formData.get('isActive') === 'on',\\n      roles: Array.from(document.getElementById('roles').selectedOptions).map(opt => opt.value)\\n    };\\n    \\n    // Add password only for new users\\n    if (!isEdit) {\\n      const password = formData.get('password');\\n      const confirmPassword = formData.get('confirmPassword');\\n      \\n      if (!password) {\\n        this.showError('Password is required');\\n        return;\\n      }\\n      \\n      if (password !== confirmPassword) {\\n        this.showError('Passwords do not match');\\n        return;\\n      }\\n      \\n      userData.password = password;\\n    }\\n    \\n    try {\\n      this.showLoading(true);\\n      \\n      const url = isEdit \\n        ? `${this.endpoints.users}/${userId}`\\n        : this.endpoints.users;\\n      \\n      const method = isEdit ? 'PUT' : 'POST';\\n      \\n      const response = await fetch(url, {\\n        method,\\n        headers: {\\n          'Content-Type': 'application/json',\\n          ...this.getAuthHeaders()\\n        },\\n        body: JSON.stringify(userData)\\n      });\\n      \\n      if (!response.ok) {\\n        const error = await response.json().catch(() => ({}));\\n        throw new Error(error.message || 'Failed to save user');\\n      }\\n      \\n      // Close modal and refresh user list\\n      const modal = bootstrap.Modal.getInstance(document.getElementById('userModal'));\\n      if (modal) modal.hide();\\n      \\n      this.showSuccess(`User ${isEdit ? 'updated' : 'created'} successfully`);\\n      this.loadUsers();\\n      \\n    } catch (error) {\\n      console.error('Error saving user:', error);\\n      this.showError(error.message || 'Failed to save user. Please try again.');\\n    } finally {\\n      this.showLoading(false);\\n    }\\n  }\\n\\n  /**\\n   * Confirm user deletion\\n   */\\n  confirmDeleteUser(userId) {\\n    const user = this.users.find(u => u.id === userId);\\n    if (!user) return;\\n    \\n    if (confirm(`Are you sure you want to delete the user \\\"${user.name || user.username}\\\"? This action cannot be undone.`)) {\\n      this.deleteUser(userId);\\n    }\\n  }\\n\\n  /**\\n   * Delete a user\\n   */\\n  async deleteUser(userId) {\\n    try {\\n      this.showLoading(true);\\n      \\n      const response = await fetch(`${this.endpoints.users}/${userId}`, {\\n        method: 'DELETE',\\n        headers: this.getAuthHeaders()\\n      });\\n      \\n      if (!response.ok) {\\n        throw new Error('Failed to delete user');\\n      }\\n      \\n      this.showSuccess('User deleted successfully');\\n      this.loadUsers();\\n      \\n    } catch (error) {\\n      console.error('Error deleting user:', error);\\n      this.showError('Failed to delete user. Please try again.');\\n    } finally {\\n      this.showLoading(false);\\n    }\\n  }\\n\\n  /**\\n   * Reset user password\\n   */\\n  async resetPassword(userId) {\\n    const user = this.users.find(u => u.id === userId);\\n    if (!user) return;\\n    \\n    const newPassword = prompt(`Enter new password for ${user.name || user.username}:`);\\n    if (!newPassword) return;\\n    \\n    try {\\n      this.showLoading(true);\\n      \\n      const response = await fetch(`${this.endpoints.users}/${userId}/reset-password`, {\\n        method: 'POST',\\n        headers: {\\n          'Content-Type': 'application/json',\\n          ...this.getAuthHeaders()\\n        },\\n        body: JSON.stringify({ newPassword })\\n      });\\n      \\n      if (!response.ok) {\\n        throw new Error('Failed to reset password');\\n      }\\n      \\n      this.showSuccess('Password reset successfully');\\n      \\n    } catch (error) {\\n      console.error('Error resetting password:', error);\\n      this.showError('Failed to reset password. Please try again.');\\n    } finally {\\n      this.showLoading(false);\\n    }\\n  }\\n\\n  /**\\n   * Show loading state\\n   */\\n  showLoading(isLoading) {\\n    const buttons = document.querySelectorAll('button[type=\\\"submit\\\"]');\\n    buttons.forEach(button => {\\n      button.disabled = isLoading;\\n      const spinner = button.querySelector('.spinner-border');\\n      if (spinner) {\\n        spinner.style.display = isLoading ? 'inline-block' : 'none';\\n      }\\n    });\\n  }\\n\\n  /**\\n   * Show success message\\n   */\\n  showSuccess(message) {\\n    // You can implement a toast notification system here\\n    alert(`Success: ${message}`);\\n  }\\n\\n  /**\\n   * Show error message\\n   */\\n  showError(message) {\\n    // You can implement a toast notification system here\\n    alert(`Error: ${message}`);\\n  }\\n\\n  /**\\n   * Get authentication headers\\n   */\\n  getAuthHeaders() {\\n    const token = localStorage.getItem('auth_token');\\n    return token ? { 'Authorization': `Bearer ${token}` } : {};\\n  }\\n\\n  /**\\n   * Debounce function to limit the rate of function calls\\n   */\\n  debounce(func, wait) {\\n    let timeout;\\n    return function executedFunction(...args) {\\n      const later = () => {\\n        clearTimeout(timeout);\\n        func(...args);\\n      };\\n      clearTimeout(timeout);\\n      timeout = setTimeout(later, wait);\\n    };\\n  }\\n}\\n\\n// Initialize the user manager when the DOM is fully loaded\\ndocument.addEventListener('DOMContentLoaded', () => {\\n  window.userManager = new UserManager();\\n});\"\n                },\n                {\n                  \"name\": \"vault-admin.js\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-admin/src/js/vault-admin.js\",\n                  \"size\": 10660,\n                  \"content\": \"// Media Vault Admin - Main JavaScript\\n\\nclass MediaVaultAdmin {\\n  constructor() {\\n    this.config = window.APP_CONFIG || {};\\n    this.endpoints = {\\n      stats: `${this.config.API_BASE_URL}/api/admin/stats`,\\n      activity: `${this.config.API_BASE_URL}/api/admin/activity`,\\n      system: `${this.config.API_BASE_URL}/api/admin/system`,\\n    };\\n    this.init();\\n  }\\n\\n  /**\\n   * Initialize the admin interface\\n   */\\n  init() {\\n    this.bindEvents();\\n    this.loadDashboardData();\\n    this.setupCharts();\\n  }\\n\\n  /**\\n   * Bind event listeners\\n   */\\n  bindEvents() {\\n    // Sidebar toggle\\n    document.getElementById('sidebarCollapse')?.addEventListener('click', () => {\\n      document.getElementById('sidebar')?.classList.toggle('active');\\n      document.getElementById('content')?.classList.toggle('active');\\n    });\\n\\n    // Logout button\\n    document.getElementById('logout')?.addEventListener('click', (e) => {\\n      e.preventDefault();\\n      this.logout();\\n    });\\n\\n    // Refresh stats button\\n    document.getElementById('refresh-stats')?.addEventListener('click', () => {\\n      this.loadDashboardData();\\n    });\\n  }\\n\\n  /**\\n   * Load dashboard data\\n   */\\n  async loadDashboardData() {\\n    try {\\n      // Show loading state\\n      this.setLoadingState(true);\\n      \\n      // Fetch stats\\n      const statsResponse = await fetch(this.endpoints.stats, {\\n        headers: this.getAuthHeaders()\\n      });\\n      \\n      if (!statsResponse.ok) {\\n        throw new Error('Failed to load dashboard stats');\\n      }\\n      \\n      const stats = await statsResponse.json();\\n      this.updateStatsUI(stats);\\n      \\n      // Fetch recent activity\\n      const activityResponse = await fetch(this.endpoints.activity, {\\n        headers: this.getAuthHeaders()\\n      });\\n      \\n      if (!activityResponse.ok) {\\n        throw new Error('Failed to load recent activity');\\n      }\\n      \\n      const activities = await activityResponse.json();\\n      this.updateActivityUI(activities);\\n      \\n      // Fetch system status\\n      const systemResponse = await fetch(this.endpoints.system, {\\n        headers: this.getAuthHeaders()\\n      });\\n      \\n      if (!systemResponse.ok) {\\n        throw new Error('Failed to load system status');\\n      }\\n      \\n      const systemStatus = await systemResponse.json();\\n      this.updateSystemStatusUI(systemStatus);\\n      \\n    } catch (error) {\\n      console.error('Error loading dashboard data:', error);\\n      this.showError('Failed to load dashboard data. Please try again.');\\n    } finally {\\n      this.setLoadingState(false);\\n    }\\n  }\\n\\n  /**\\n   * Update stats cards UI\\n   */\\n  updateStatsUI(stats) {\\n    // Total files\\n    if (document.getElementById('total-files')) {\\n      document.getElementById('total-files').textContent = stats.totalFiles?.toLocaleString() || '0';\\n    }\\n    \\n    // Active users\\n    if (document.getElementById('active-users')) {\\n      document.getElementById('active-users').textContent = stats.activeUsers?.toLocaleString() || '0';\\n    }\\n    \\n    // Storage used\\n    if (document.getElementById('storage-used')) {\\n      const storageGB = (stats.storageUsed / 1024 / 1024 / 1024).toFixed(2);\\n      document.getElementById('storage-used').textContent = `${storageGB} GB`;\\n    }\\n    \\n    // Alerts\\n    if (document.getElementById('alerts-count')) {\\n      document.getElementById('alerts-count').textContent = stats.alertsCount?.toLocaleString() || '0';\\n    }\\n  }\\n\\n  /**\\n   * Update activity feed UI\\n   */\\n  updateActivityUI(activities = []) {\\n    const activityList = document.getElementById('activity-list');\\n    if (!activityList) return;\\n    \\n    // Clear existing content\\n    activityList.innerHTML = '';\\n    \\n    // Add new activities\\n    activities.slice(0, 5).forEach(activity => {\\n      const activityItem = document.createElement('tr');\\n      activityItem.className = 'fade-in';\\n      \\n      const timeAgo = this.formatTimeAgo(activity.timestamp);\\n      \\n      activityItem.innerHTML = `\\n        <td class=\\\"align-middle\\\">\\n          <div class=\\\"d-flex align-items-center\\\">\\n            <div class=\\\"avatar avatar-sm me-2\\\">\\n              <span class=\\\"avatar-text rounded-circle bg-light text-dark\\\">\\n                ${activity.user?.charAt(0).toUpperCase() || 'U'}\\n              </span>\\n            </div>\\n            <div>\\n              <div class=\\\"fw-semibold\\\">${activity.user || 'System'}</div>\\n              <small class=\\\"text-muted\\\">${timeAgo}</small>\\n            </div>\\n          </div>\\n        </td>\\n        <td class=\\\"align-middle\\\">\\n          <span class=\\\"badge bg-light text-dark\\\">${activity.action}</span>\\n        </td>\\n        <td class=\\\"align-middle text-truncate\\\" style=\\\"max-width: 200px;\\\">\\n          ${activity.target || 'N/A'}\\n        </td>\\n        <td class=\\\"align-middle text-end\\\">\\n          <small class=\\\"text-muted\\\">${new Date(activity.timestamp).toLocaleTimeString()}</small>\\n        </td>\\n      `;\\n      \\n      activityList.appendChild(activityItem);\\n    });\\n  }\\n\\n  /**\\n   * Update system status UI\\n   */\\n  updateSystemStatusUI(status) {\\n    // CPU Usage\\n    if (status.cpu) {\\n      const cpuUsage = Math.round(status.cpu.usage * 100);\\n      document.getElementById('cpu-usage').textContent = `${cpuUsage}%`;\\n      const cpuProgress = document.getElementById('cpu-progress');\\n      if (cpuProgress) {\\n        cpuProgress.style.width = `${cpuUsage}%`;\\n        cpuProgress.className = `progress-bar ${this.getUsageColorClass(cpuUsage)}`;\\n      }\\n    }\\n    \\n    // Memory Usage\\n    if (status.memory) {\\n      const memoryUsage = Math.round((status.memory.used / status.memory.total) * 100);\\n      document.getElementById('memory-usage').textContent = `${memoryUsage}%`;\\n      const memoryProgress = document.getElementById('memory-progress');\\n      if (memoryProgress) {\\n        memoryProgress.style.width = `${memoryUsage}%`;\\n        memoryProgress.className = `progress-bar ${this.getUsageColorClass(memoryUsage)}`;\\n      }\\n    }\\n    \\n    // Storage\\n    if (status.storage) {\\n      const storagePercent = Math.round((status.storage.used / status.storage.total) * 100);\\n      document.getElementById('storage-percent').textContent = `${storagePercent}%`;\\n      const storageProgress = document.getElementById('storage-progress');\\n      if (storageProgress) {\\n        storageProgress.style.width = `${storagePercent}%`;\\n        storageProgress.className = `progress-bar ${this.getUsageColorClass(storagePercent)}`;\\n      }\\n      \\n      // Update storage details\\n      const usedGB = (status.storage.used / 1024 / 1024 / 1024).toFixed(1);\\n      const totalGB = (status.storage.total / 1024 / 1024 / 1024).toFixed(1);\\n      document.getElementById('storage-details').textContent = `${usedGB} GB of ${totalGB} GB used`;\\n    }\\n  }\\n\\n  /**\\n   * Setup charts\\n   */\\n  setupCharts() {\\n    // Check if Chart.js is available\\n    if (typeof Chart === 'undefined') {\\n      console.warn('Chart.js is not loaded. Charts will not be rendered.');\\n      return;\\n    }\\n    \\n    // Example chart setup - you can add more charts as needed\\n    const ctx = document.getElementById('usage-chart');\\n    if (ctx) {\\n      new Chart(ctx.getContext('2d'), {\\n        type: 'line',\\n        data: {\\n          labels: Array.from({ length: 24 }, (_, i) => `${i}:00`),\\n          datasets: [\\n            {\\n              label: 'CPU Usage',\\n              data: Array.from({ length: 24 }, () => Math.floor(Math.random() * 30) + 20),\\n              borderColor: '#4f46e5',\\n              backgroundColor: 'rgba(79, 70, 229, 0.1)',\\n              tension: 0.3,\\n              fill: true\\n            },\\n            {\\n              label: 'Memory Usage',\\n              data: Array.from({ length: 24 }, () => Math.floor(Math.random() * 30) + 40),\\n              borderColor: '#10b981',\\n              backgroundColor: 'rgba(16, 185, 129, 0.1)',\\n              tension: 0.3,\\n              fill: true\\n            }\\n          ]\\n        },\\n        options: {\\n          responsive: true,\\n          maintainAspectRatio: false,\\n          plugins: {\\n            legend: {\\n              position: 'top',\\n            },\\n            tooltip: {\\n              mode: 'index',\\n              intersect: false,\\n            }\\n          },\\n          scales: {\\n            y: {\\n              beginAtZero: true,\\n              max: 100,\\n              ticks: {\\n                callback: (value) => `${value}%`\\n              }\\n            }\\n          }\\n        }\\n      });\\n    }\\n  }\\n\\n  /**\\n   * Get color class based on usage percentage\\n   */\\n  getUsageColorClass(percent) {\\n    if (percent > 90) return 'bg-danger';\\n    if (percent > 70) return 'bg-warning';\\n    if (percent > 40) return 'bg-info';\\n    return 'bg-success';\\n  }\\n\\n  /**\\n   * Format timestamp as time ago\\n   */\\n  formatTimeAgo(timestamp) {\\n    const seconds = Math.floor((new Date() - new Date(timestamp)) / 1000);\\n    \\n    const intervals = {\\n      year: 31536000,\\n      month: 2592000,\\n      week: 604800,\\n      day: 86400,\\n      hour: 3600,\\n      minute: 60,\\n      second: 1\\n    };\\n    \\n    for (const [unit, secondsInUnit] of Object.entries(intervals)) {\\n      const interval = Math.floor(seconds / secondsInUnit);\\n      if (interval >= 1) {\\n        return interval === 1 ? `1 ${unit} ago` : `${interval} ${unit}s ago`;\\n      }\\n    }\\n    \\n    return 'Just now';\\n  }\\n\\n  /**\\n   * Get authentication headers\\n   */\\n  getAuthHeaders() {\\n    const token = this.getAuthToken();\\n    return {\\n      'Content-Type': 'application/json',\\n      'Authorization': token ? `Bearer ${token}` : ''\\n    };\\n  }\\n\\n  /**\\n   * Get authentication token from storage\\n   */\\n  getAuthToken() {\\n    // This should be implemented based on your auth system\\n    return localStorage.getItem('auth_token');\\n  }\\n\\n  /**\\n   * Logout user\\n   */\\n  logout() {\\n    // Clear auth token\\n    localStorage.removeItem('auth_token');\\n    \\n    // Redirect to login page\\n    window.location.href = '/login';\\n  }\\n\\n  /**\\n   * Show error message\\n   */\\n  showError(message) {\\n    // You can implement a toast or alert system here\\n    console.error('Error:', message);\\n    alert(message);\\n  }\\n\\n  /**\\n   * Set loading state\\n   */\\n  setLoadingState(isLoading) {\\n    const buttons = document.querySelectorAll('button[type=\\\"button\\\"]');\\n    buttons.forEach(button => {\\n      if (button.id !== 'logout') { // Don't disable logout button\\n        button.disabled = isLoading;\\n      }\\n    });\\n    \\n    // You can add a loading spinner or other UI indicators here\\n    if (isLoading) {\\n      document.body.style.cursor = 'wait';\\n    } else {\\n      document.body.style.cursor = 'default';\\n    }\\n  }\\n}\\n\\n// Initialize the admin interface when the DOM is fully loaded\\ndocument.addEventListener('DOMContentLoaded', () => {\\n  window.mediaVaultAdmin = new MediaVaultAdmin();\\n});\"\n                }\n              ]\n            },\n            {\n              \"name\": \"index.html\",\n              \"type\": \"file\",\n              \"path\": \"media-vault-admin/src/index.html\",\n              \"size\": 12931,\n              \"content\": \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Media Vault Admin</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\\\">\\n    <link rel=\\\"stylesheet\\\" href=\\\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css\\\">\\n    <link rel=\\\"stylesheet\\\" href=\\\"css/admin.css\\\">\\n    <link rel=\\\"stylesheet\\\" href=\\\"css/dashboard.css\\\">\\n    <script src=\\\"/config/admin-config.js\\\"></script>\\n</head>\\n<body>\\n    <div class=\\\"app-container\\\">\\n        <!-- Sidebar -->\\n        <nav id=\\\"sidebar\\\" class=\\\"sidebar\\\">\\n            <div class=\\\"sidebar-header\\\">\\n                <h3 id=\\\"app-title\\\">Media Vault</h3>\\n            </div>\\n            <ul class=\\\"list-unstyled components\\\">\\n                <li class=\\\"active\\\">\\n                    <a href=\\\"#\\\" data-page=\\\"dashboard\\\">\\n                        <i class=\\\"bi bi-speedometer2\\\"></i> Dashboard\\n                    </a>\\n                </li>\\n                <li>\\n                    <a href=\\\"#\\\" data-page=\\\"vault\\\">\\n                        <i class=\\\"bi bi-collection\\\"></i> Vault\\n                    </a>\\n                </li>\\n                <li>\\n                    <a href=\\\"users.html\\\">\\n                        <i class=\\\"bi bi-people\\\"></i> Users\\n                    </a>\\n                </li>\\n                <li>\\n                    <a href=\\\"system.html\\\">\\n                        <i class=\\\"bi bi-hdd-rack\\\"></i> System\\n                    </a>\\n                </li>\\n                <li>\\n                    <a href=\\\"security.html\\\">\\n                        <i class=\\\"bi bi-shield-lock\\\"></i> Security\\n                    </a>\\n                </li>\\n            </ul>\\n        </nav>\\n\\n        <!-- Page Content -->\\n        <div id=\\\"content\\\">\\n            <nav class=\\\"navbar navbar-expand-lg navbar-light bg-light\\\">\\n                <div class=\\\"container-fluid\\\">\\n                    <button type=\\\"button\\\" id=\\\"sidebarCollapse\\\" class=\\\"btn btn-outline-secondary\\\">\\n                        <i class=\\\"bi bi-list\\\"></i>\\n                    </button>\\n                    <div class=\\\"ms-auto d-flex align-items-center\\\">\\n                        <div class=\\\"dropdown\\\">\\n                            <button class=\\\"btn btn-link text-dark dropdown-toggle\\\" type=\\\"button\\\" id=\\\"userDropdown\\\" data-bs-toggle=\\\"dropdown\\\" aria-expanded=\\\"false\\\">\\n                                <i class=\\\"bi bi-person-circle me-1\\\"></i>\\n                                <span id=\\\"username\\\">Admin User</span>\\n                            </button>\\n                            <ul class=\\\"dropdown-menu dropdown-menu-end\\\" aria-labelledby=\\\"userDropdown\\\">\\n                                <li><a class=\\\"dropdown-item\\\" href=\\\"#\\\"><i class=\\\"bi bi-person me-2\\\"></i>Profile</a></li>\\n                                <li><hr class=\\\"dropdown-divider\\\"></li>\\n                                <li><a class=\\\"dropdown-item text-danger\\\" href=\\\"#\\\" id=\\\"logout\\\"><i class=\\\"bi bi-box-arrow-right me-2\\\"></i>Logout</a></li>\\n                            </ul>\\n                        </div>\\n                    </div>\\n                </div>\\n            </nav>\\n\\n            <!-- Main Content -->\\n            <div class=\\\"container-fluid p-4\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-12\\\">\\n                        <h2 id=\\\"page-title\\\">Dashboard</h2>\\n                        <nav aria-label=\\\"breadcrumb\\\">\\n                            <ol class=\\\"breadcrumb\\\">\\n                                <li class=\\\"breadcrumb-item\\\"><a href=\\\"#\\\">Home</a></li>\\n                                <li id=\\\"breadcrumb-active\\\" class=\\\"breadcrumb-item active\\\" aria-current=\\\"page\\\">Dashboard</li>\\n                            </ol>\\n                        </nav>\\n                    </div>\\n                </div>\\n\\n                <!-- Stats Cards -->\\n                <div class=\\\"row mb-4\\\">\\n                    <div class=\\\"col-md-3 mb-3\\\">\\n                        <div class=\\\"card bg-primary text-white\\\">\\n                            <div class=\\\"card-body\\\">\\n                                <div class=\\\"d-flex justify-content-between align-items-center\\\">\\n                                    <div>\\n                                        <h6 class=\\\"card-title\\\">Total Files</h6>\\n                                        <h2 id=\\\"total-files\\\" class=\\\"mb-0\\\">0</h2>\\n                                    </div>\\n                                    <i class=\\\"bi bi-folder2-open display-4 opacity-50\\\"></i>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-md-3 mb-3\\\">\\n                        <div class=\\\"card bg-success text-white\\\">\\n                            <div class=\\\"card-body\\\">\\n                                <div class=\\\"d-flex justify-content-between align-items-center\\\">\\n                                    <div>\\n                                        <h6 class=\\\"card-title\\\">Active Users</h6>\\n                                        <h2 id=\\\"active-users\\\" class=\\\"mb-0\\\">0</h2>\\n                                    </div>\\n                                    <i class=\\\"bi bi-people display-4 opacity-50\\\"></i>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-md-3 mb-3\\\">\\n                        <div class=\\\"card bg-warning text-dark\\\">\\n                            <div class=\\\"card-body\\\">\\n                                <div class=\\\"d-flex justify-content-between align-items-center\\\">\\n                                    <div>\\n                                        <h6 class=\\\"card-title\\\">Storage Used</h6>\\n                                        <h2 id=\\\"storage-used\\\" class=\\\"mb-0\\\">0 GB</h2>\\n                                    </div>\\n                                    <i class=\\\"bi bi-hdd-rack display-4 opacity-50\\\"></i>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-md-3 mb-3\\\">\\n                        <div class=\\\"card bg-danger text-white\\\">\\n                            <div class=\\\"card-body\\\">\\n                                <div class=\\\"d-flex justify-content-between align-items-center\\\">\\n                                    <div>\\n                                        <h6 class=\\\"card-title\\\">Alerts</h6>\\n                                        <h2 id=\\\"alerts-count\\\" class=\\\"mb-0\\\">0</h2>\\n                                    </div>\\n                                    <i class=\\\"bi bi-exclamation-triangle display-4 opacity-50\\\"></i>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n\\n                <!-- Recent Activity -->\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-md-8 mb-4\\\">\\n                        <div class=\\\"card\\\">\\n                            <div class=\\\"card-header d-flex justify-content-between align-items-center\\\">\\n                                <h5 class=\\\"mb-0\\\">Recent Activity</h5>\\n                                <div class=\\\"btn-group\\\" role=\\\"group\\\">\\n                                    <button type=\\\"button\\\" class=\\\"btn btn-sm btn-outline-secondary\\\">Today</button>\\n                                    <button type=\\\"button\\\" class=\\\"btn btn-sm btn-outline-secondary\\\">Week</button>\\n                                    <button type=\\\"button\\\" class=\\\"btn btn-sm btn-outline-secondary active\\\">Month</button>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"card-body\\\">\\n                                <div class=\\\"table-responsive\\\">\\n                                    <table class=\\\"table table-hover\\\">\\n                                        <thead>\\n                                            <tr>\\n                                                <th>User</th>\\n                                                <th>Action</th>\\n                                                <th>File</th>\\n                                                <th>Time</th>\\n                                            </tr>\\n                                        </thead>\\n                                        <tbody id=\\\"activity-list\\\">\\n                                            <!-- Activity items will be added here by JavaScript -->\\n                                        </tbody>\\n                                    </table>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"col-md-4 mb-4\\\">\\n                        <div class=\\\"card\\\">\\n                            <div class=\\\"card-header\\\">\\n                                <h5 class=\\\"mb-0\\\">System Status</h5>\\n                            </div>\\n                            <div class=\\\"card-body\\\">\\n                                <div class=\\\"mb-3\\\">\\n                                    <div class=\\\"d-flex justify-content-between mb-1\\\">\\n                                        <span>CPU Usage</span>\\n                                        <span id=\\\"cpu-usage\\\">0%</span>\\n                                    </div>\\n                                    <div class=\\\"progress\\\">\\n                                        <div id=\\\"cpu-progress\\\" class=\\\"progress-bar\\\" role=\\\"progressbar\\\" style=\\\"width: 0%\\\"></div>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"mb-3\\\">\\n                                    <div class=\\\"d-flex justify-content-between mb-1\\\">\\n                                        <span>Memory Usage</span>\\n                                        <span id=\\\"memory-usage\\\">0%</span>\\n                                    </div>\\n                                    <div class=\\\"progress\\\">\\n                                        <div id=\\\"memory-progress\\\" class=\\\"progress-bar bg-success\\\" role=\\\"progressbar\\\" style=\\\"width: 0%\\\"></div>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"mb-3\\\">\\n                                    <div class=\\\"d-flex justify-content-between mb-1\\\">\\n                                        <span>Storage</span>\\n                                        <span id=\\\"storage-percent\\\">0%</span>\\n                                    </div>\\n                                    <div class=\\\"progress\\\">\\n                                        <div id=\\\"storage-progress\\\" class=\\\"progress-bar bg-info\\\" role=\\\"progressbar\\\" style=\\\"width: 0%\\\"></div>\\n                                    </div>\\n                                    <small class=\\\"text-muted\\\" id=\\\"storage-details\\\">0 GB of 0 GB used</small>\\n                                </div>\\n                                <hr>\\n                                <div class=\\\"d-grid\\\">\\n                                    <button class=\\\"btn btn-outline-primary\\\" id=\\\"refresh-stats\\\">\\n                                        <i class=\\\"bi bi-arrow-repeat me-1\\\"></i> Refresh Stats\\n                                    </button>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <!-- Scripts -->\\n    <script src=\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\\\"></script>\\n    <script src=\\\"https://cdn.jsdelivr.net/npm/chart.js\\\"></script>\\n    <script src=\\\"js/vault-admin.js\\\"></script>\\n    <script src=\\\"js/user-management.js\\\"></script>\\n    <script src=\\\"js/system-monitoring.js\\\"></script>\\n    <script>\\n        // Initialize the admin interface\\n        document.addEventListener('DOMContentLoaded', function() {\\n            // Set the app title from config\\n            if (window.APP_CONFIG && window.APP_CONFIG.UI && window.APP_CONFIG.UI.TITLE) {\\n                document.title = window.APP_CONFIG.UI.TITLE;\\n                const appTitle = document.getElementById('app-title');\\n                if (appTitle) {\\n                    appTitle.textContent = window.APP_CONFIG.UI.TITLE;\\n                }\\n            }\\n\\n            // Toggle sidebar\\n            document.getElementById('sidebarCollapse').addEventListener('click', function() {\\n                document.getElementById('sidebar').classList.toggle('active');\\n                document.getElementById('content').classList.toggle('active');\\n            });\\n\\n            // Initialize tooltips\\n            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\\\"tooltip\\\"]'));\\n            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {\\n                return new bootstrap.Tooltip(tooltipTriggerEl);\\n            });\\n        });\\n    </script>\\n</body>\\n</html>\"\n            },\n            {\n              \"name\": \"security.html\",\n              \"type\": \"file\",\n              \"path\": \"media-vault-admin/src/security.html\",\n              \"size\": 0,\n              \"content\": \"\"\n            },\n            {\n              \"name\": \"system.html\",\n              \"type\": \"file\",\n              \"path\": \"media-vault-admin/src/system.html\",\n              \"size\": 0,\n              \"content\": \"\"\n            },\n            {\n              \"name\": \"users.html\",\n              \"type\": \"file\",\n              \"path\": \"media-vault-admin/src/users.html\",\n              \"size\": 0,\n              \"content\": \"\"\n            }\n          ]\n        },\n        {\n          \"name\": \"Dockerfile\",\n          \"type\": \"file\",\n          \"path\": \"media-vault-admin/Dockerfile\",\n          \"size\": 1095,\n          \"content\": \"# Use nginx to serve static files\\nFROM nginx:alpine\\n\\n# Create config directory\\nRUN mkdir -p /usr/share/nginx/html/config\\n\\n# Copy the configuration file\\nCOPY config/admin-config.js /usr/share/nginx/html/config/\\n\\n# Copy the static files to the nginx web root\\nCOPY src/ /usr/share/nginx/html/\\n\\n# Copy the nginx configuration\\nCOPY nginx.conf /etc/nginx/conf.d/default.conf\\n\\n# Set environment variables for the admin interface\\nENV API_URL=http://media-vault-api:8080 \\\\\\n    KEYCLOAK_URL=http://keycloak:8080 \\\\\\n    KEYCLOAK_REALM=media-vault \\\\\\n    KEYCLOAK_CLIENT_ID=media-vault-admin \\\\\\n    ADMIN_ROLE=vault-admin \\\\\\n    VAULT_TITLE=\\\"Media Vault Admin\\\" \\\\\\n    MONITORING_GRAFANA_URL=http://grafana:3000 \\\\\\n    MONITORING_PROMETHEUS_URL=http://prometheus:9090\\n\\n# Replace environment variables in the config file\\nRUN envsubst < /usr/share/nginx/html/config/admin-config.js > /usr/share/nginx/html/config/admin-config.tmp.js && \\\\\\n    mv /usr/share/nginx/html/config/admin-config.tmp.js /usr/share/nginx/html/config/admin-config.js\\n\\n# Expose port 80\\nEXPOSE 80\\n\\n# Start Nginx\\nCMD [\\\"nginx\\\", \\\"-g\\\", \\\"daemon off;\\\"]\"\n        },\n        {\n          \"name\": \"nginx.conf\",\n          \"type\": \"file\",\n          \"path\": \"media-vault-admin/nginx.conf\",\n          \"size\": 875,\n          \"content\": \"server {\\n    listen 80;\\n    server_name localhost;\\n    root /usr/share/nginx/html;\\n    index index.html;\\n\\n    location / {\\n        try_files $uri $uri/ /index.html;\\n    }\\n\\n    # Enable gzip compression\\n    gzip on;\\n    gzip_vary on;\\n    gzip_min_length 10240;\\n    gzip_proxied expired no-cache no-store private auth;\\n    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml;\\n    gzip_disable \\\"MSIE [1-6]\\\\.\\\";\\n\\n    # Cache control for static assets\\n    location ~* \\\\.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc|ttf|woff|woff2)$ {\\n        expires 1y;\\n        access_log off;\\n        add_header Cache-Control \\\"public\\\";\\n    }\\n\\n    # Don't cache HTML files\\n    location ~* \\\\.(?:html|json)$ {\\n        expires -1;\\n        add_header Cache-Control \\\"no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0\\\";\\n    }\\n}\"\n        },\n        {\n          \"name\": \"TODO.md\",\n          \"type\": \"file\",\n          \"path\": \"media-vault-admin/TODO.md\",\n          \"size\": 750,\n          \"content\": \"# Media Vault Admin - TODO\\n\\n## High Priority\\n- [ ] Implement user authentication and authorization\\n- [ ] Create dashboard with system status overview\\n- [ ] Add media library management interface\\n\\n## Medium Priority\\n- [ ] Implement user management (CRUD operations)\\n- [ ] Add role-based access control\\n- [ ] Create settings/configuration page\\n- [ ] Add logging and audit trail\\n\\n## Low Priority\\n- [ ] Implement theme customization\\n- [ ] Add support for multiple languages\\n- [ ] Create documentation\\n\\n## In Progress\\n- [ ] Setup basic project structure\\n\\n## Completed\\n- [x] Initialize project\\n- [x] Setup development environment\\n\\n## Notes\\n- API documentation is available in the docs/API.md file\\n- Configuration files are located in the config/ directory\\n\"\n        }\n      ]\n    },\n    {\n      \"name\": \"media-vault-analyzer\",\n      \"type\": \"directory\",\n      \"path\": \"media-vault-analyzer\",\n      \"children\": [\n        {\n          \"name\": \"processors\",\n          \"type\": \"directory\",\n          \"path\": \"media-vault-analyzer/processors\",\n          \"children\": [\n            {\n              \"name\": \"description_generator.py\",\n              \"type\": \"file\",\n              \"path\": \"media-vault-analyzer/processors/description_generator.py\",\n              \"size\": 34,\n              \"content\": \"\\\"\\\"\\\"\\ndescription_generator.py\\n\\\"\\\"\\\"\\n\\n\"\n            },\n            {\n              \"name\": \"image_analyzer.py\",\n              \"type\": \"file\",\n              \"path\": \"media-vault-analyzer/processors/image_analyzer.py\",\n              \"size\": 27,\n              \"content\": \"\\\"\\\"\\\"\\nimage_analyzer.py\\n\\\"\\\"\\\"\\n\\n\"\n            },\n            {\n              \"name\": \"metadata_extractor.py\",\n              \"type\": \"file\",\n              \"path\": \"media-vault-analyzer/processors/metadata_extractor.py\",\n              \"size\": 31,\n              \"content\": \"\\\"\\\"\\\"\\nmetadata_extractor.py\\n\\\"\\\"\\\"\\n\\n\"\n            },\n            {\n              \"name\": \"nsfw_detector.py\",\n              \"type\": \"file\",\n              \"path\": \"media-vault-analyzer/processors/nsfw_detector.py\",\n              \"size\": 26,\n              \"content\": \"\\\"\\\"\\\"\\nnsfw_detector.py\\n\\\"\\\"\\\"\\n\\n\"\n            }\n          ]\n        },\n        {\n          \"name\": \"analyzer.py\",\n          \"type\": \"file\",\n          \"path\": \"media-vault-analyzer/analyzer.py\",\n          \"size\": 6397,\n          \"content\": \"import os\\nimport time\\nimport requests\\nimport cv2\\nimport numpy as np\\nfrom PIL import Image, ExifTags\\nimport tensorflow as tf\\nfrom transformers import BlipProcessor, BlipForConditionalGeneration\\nimport logging\\n\\nlogging.basicConfig(level=logging.INFO)\\nlogger = logging.getLogger(__name__)\\n\\nclass MediaVaultAnalyzer:\\n    def __init__(self):\\n        self.api_url = os.getenv('API_URL', 'http://media-vault-api:8080')\\n        self.processing_path = os.getenv('PROCESSING_PATH', '/processing')\\n        self.output_path = os.getenv('OUTPUT_PATH', '/uploads')\\n\\n        # Initialize AI models\\n        self.load_models()\\n\\n    def load_models(self):\\n        \\\"\\\"\\\"Load AI models for image analysis\\\"\\\"\\\"\\n        try:\\n            # Load image captioning model\\n            logger.info(\\\"Loading BLIP model for image captioning...\\\")\\n            self.processor = BlipProcessor.from_pretrained(\\\"Salesforce/blip-image-captioning-base\\\")\\n            self.caption_model = BlipForConditionalGeneration.from_pretrained(\\\"Salesforce/blip-image-captioning-base\\\")\\n            logger.info(\\\"BLIP model loaded successfully\\\")\\n\\n        except Exception as e:\\n            logger.error(f\\\"Failed to load models: {e}\\\")\\n            self.processor = None\\n            self.caption_model = None\\n\\n    def generate_description(self, image_path):\\n        \\\"\\\"\\\"Generate AI description for an image\\\"\\\"\\\"\\n        if not self.processor or not self.caption_model:\\n            return \\\"AI description service unavailable\\\"\\n\\n        try:\\n            # Load and preprocess image\\n            image = Image.open(image_path).convert('RGB')\\n\\n            # Generate caption\\n            inputs = self.processor(image, return_tensors=\\\"pt\\\")\\n            out = self.caption_model.generate(**inputs, max_length=50)\\n            caption = self.processor.decode(out[0], skip_special_tokens=True)\\n\\n            return caption\\n\\n        except Exception as e:\\n            logger.error(f\\\"Failed to generate description: {e}\\\")\\n            return \\\"Failed to generate description\\\"\\n\\n    def extract_metadata(self, image_path):\\n        \\\"\\\"\\\"Extract metadata from image\\\"\\\"\\\"\\n        metadata = {}\\n\\n        try:\\n            # Open image with PIL\\n            image = Image.open(image_path)\\n\\n            # Get basic info\\n            metadata['width'] = image.width\\n            metadata['height'] = image.height\\n            metadata['format'] = image.format\\n            metadata['mode'] = image.mode\\n\\n            # Extract EXIF data\\n            exif_data = {}\\n            if hasattr(image, '_getexif') and image._getexif():\\n                exif = image._getexif()\\n                for tag_id, value in exif.items():\\n                    tag = ExifTags.TAGS.get(tag_id, tag_id)\\n                    exif_data[tag] = str(value)\\n\\n            metadata['exif'] = exif_data\\n\\n            # Camera info\\n            if 'Make' in exif_data:\\n                metadata['camera_make'] = exif_data['Make']\\n            if 'Model' in exif_data:\\n                metadata['camera_model'] = exif_data['Model']\\n            if 'DateTime' in exif_data:\\n                metadata['taken_at'] = exif_data['DateTime']\\n\\n        except Exception as e:\\n            logger.error(f\\\"Failed to extract metadata: {e}\\\")\\n\\n        return metadata\\n\\n    def generate_thumbnail(self, image_path, photo_id):\\n        \\\"\\\"\\\"Generate thumbnail for image\\\"\\\"\\\"\\n        try:\\n            thumbnail_dir = os.path.join(self.output_path, 'thumbnails')\\n            os.makedirs(thumbnail_dir, exist_ok=True)\\n\\n            # Load image\\n            image = Image.open(image_path)\\n\\n            # Create thumbnail\\n            thumbnail_size = (300, 300)\\n            image.thumbnail(thumbnail_size, Image.Resampling.LANCZOS)\\n\\n            # Save thumbnail\\n            thumbnail_path = os.path.join(thumbnail_dir, f\\\"{photo_id}_thumb.jpg\\\")\\n            image.save(thumbnail_path, \\\"JPEG\\\", quality=85)\\n\\n            return thumbnail_path\\n\\n        except Exception as e:\\n            logger.error(f\\\"Failed to generate thumbnail: {e}\\\")\\n            return None\\n\\n    def process_photo(self, photo_data):\\n        \\\"\\\"\\\"Process a single photo\\\"\\\"\\\"\\n        photo_id = photo_data['id']\\n        file_path = photo_data['file_path']\\n\\n        logger.info(f\\\"Processing photo {photo_id}: {file_path}\\\")\\n\\n        try:\\n            # Generate AI description\\n            ai_description = self.generate_description(file_path)\\n\\n            # Extract metadata\\n            metadata = self.extract_metadata(file_path)\\n\\n            # Generate thumbnail\\n            thumbnail_path = self.generate_thumbnail(file_path, photo_id)\\n\\n            # Update photo via API\\n            update_data = {\\n                'ai_description': ai_description,\\n                'ai_confidence': 0.85,  # Mock confidence score\\n                'metadata': metadata,\\n                'thumbnail_path': thumbnail_path,\\n                'processed_at': time.strftime('%Y-%m-%d %H:%M:%S'),\\n                'moderation_status': 'approved'  # Basic approval\\n            }\\n\\n            # Send update to API\\n            response = requests.put(\\n                f\\\"{self.api_url}/api/vault/files/{photo_id}\\\",\\n                json=update_data,\\n                timeout=30\\n            )\\n\\n            if response.status_code == 200:\\n                logger.info(f\\\"Successfully processed photo {photo_id}\\\")\\n            else:\\n                logger.error(f\\\"Failed to update photo {photo_id}: {response.status_code}\\\")\\n\\n        except Exception as e:\\n            logger.error(f\\\"Failed to process photo {photo_id}: {e}\\\")\\n\\n    def run(self):\\n        \\\"\\\"\\\"Main processing loop\\\"\\\"\\\"\\n        logger.info(\\\"Media Vault Analyzer started\\\")\\n\\n        while True:\\n            try:\\n                # Get pending photos from API\\n                response = requests.get(\\n                    f\\\"{self.api_url}/api/admin/photos/pending\\\",\\n                    timeout=30\\n                )\\n\\n                if response.status_code == 200:\\n                    pending_photos = response.json()\\n\\n                    for photo in pending_photos:\\n                        self.process_photo(photo)\\n                        time.sleep(1)  # Small delay between processing\\n\\n                # Wait before next check\\n                time.sleep(10)\\n\\n            except Exception as e:\\n                logger.error(f\\\"Error in main loop: {e}\\\")\\n                time.sleep(30)  # Wait longer on error\\n\\nif __name__ == \\\"__main__\\\":\\n    analyzer = MediaVaultAnalyzer()\\n    analyzer.run()\\n\\n\"\n        },\n        {\n          \"name\": \"app.py\",\n          \"type\": \"file\",\n          \"path\": \"media-vault-analyzer/app.py\",\n          \"size\": 1162,\n          \"content\": \"\\\"\\\"\\\"\\nMedia Vault Analyzer Service\\n\\nThis service handles media analysis tasks such as:\\n- Image analysis (NSFW detection, object detection, etc.)\\n- Video analysis\\n- Metadata extraction\\n- Content classification\\n\\\"\\\"\\\"\\n\\nimport os\\nimport logging\\nfrom fastapi import FastAPI, HTTPException\\nfrom fastapi.middleware.cors import CORSMiddleware\\n\\n# Set up logging\\nlogging.basicConfig(level=logging.INFO)\\nlogger = logging.getLogger(__name__)\\n\\n# Initialize FastAPI app\\napp = FastAPI(\\n    title=\\\"Media Vault Analyzer\\\",\\n    description=\\\"Media analysis service for the Media Vault application\\\",\\n    version=\\\"1.0.0\\\"\\n)\\n\\n# Add CORS middleware\\napp.add_middleware(\\n    CORSMiddleware,\\n    allow_origins=[\\\"*\\\"],\\n    allow_credentials=True,\\n    allow_methods=[\\\"*\\\"],\\n    allow_headers=[\\\"*\\\"],\\n)\\n\\n@app.get(\\\"/health\\\")\\nasync def health_check():\\n    \\\"\\\"\\\"Health check endpoint\\\"\\\"\\\"\\n    return {\\\"status\\\": \\\"ok\\\", \\\"service\\\": \\\"media-vault-analyzer\\\"}\\n\\n@app.get(\\\"/analyze/image\\\")\\nasync def analyze_image():\\n    \\\"\\\"\\\"Analyze an image\\\"\\\"\\\"\\n    # TODO: Implement image analysis\\n    return {\\\"status\\\": \\\"not_implemented\\\"}\\n\\nif __name__ == \\\"__main__\\\":\\n    import uvicorn\\n    uvicorn.run(app, host=\\\"0.0.0.0\\\", port=8000)\\n\"\n        },\n        {\n          \"name\": \"Dockerfile\",\n          \"type\": \"file\",\n          \"path\": \"media-vault-analyzer/Dockerfile\",\n          \"size\": 654,\n          \"content\": \"# Use an official Python runtime as a parent image\\nFROM python:3.9-slim\\n\\n# Set the working directory in the container\\nWORKDIR /app\\n\\n# Set environment variables\\nENV PYTHONDONTWRITEBYTECODE 1\\nENV PYTHONUNBUFFERED 1\\n\\n# Install system dependencies\\nRUN apt-get update && apt-get install -y --no-install-recommends \\\\\\n    build-essential \\\\\\n    && rm -rf /var/lib/apt/lists/*\\n\\n# Install Python dependencies\\nCOPY requirements.txt .\\nRUN pip install --no-cache-dir -r requirements.txt\\n\\n# Copy the current directory contents into the container at /app\\nCOPY . .\\n\\n# Expose the port the app runs on\\nEXPOSE 8000\\n\\n# Command to run the application\\nCMD [\\\"python\\\", \\\"app.py\\\"]\"\n        },\n        {\n          \"name\": \"requirements.txt\",\n          \"type\": \"file\",\n          \"path\": \"media-vault-analyzer/requirements.txt\",\n          \"size\": 292,\n          \"content\": \"fastapi==0.104.1\\nuvicorn==0.24.0\\nopencv-python==4.8.1.78\\npillow==10.1.0\\nnumpy==1.24.3\\nscipy==1.11.4\\nscikit-learn==1.3.2\\ntensorflow==2.13.0\\nrequests==2.31.0\\npython-multipart==0.0.6\\npython-magic==0.4.27\\nffmpeg-python==0.2.0\\nexifread==3.0.0\\ntransformers==4.35.0\\ntorch==2.1.0\\ntorchvision==0.16.0\\n\"\n        },\n        {\n          \"name\": \"TODO.md\",\n          \"type\": \"file\",\n          \"path\": \"media-vault-analyzer/TODO.md\",\n          \"size\": 304,\n          \"content\": \"# Media Vault Analyzer - TODO\\n\\n## High Priority\\n- [ ] Implement media analysis pipeline\\n- [ ] Add support for image analysis\\n- [ ] Set up video processing\\n\\n## Medium Priority\\n- [ ] Add metadata extraction\\n- [ ] Implement content moderation\\n- [ ] Create analysis reports\\n\\n## Completed\\n- [x] Project setup\\n\"\n        }\n      ]\n    },\n    {\n      \"name\": \"media-vault-backend\",\n      \"type\": \"directory\",\n      \"path\": \"media-vault-backend\",\n      \"children\": [\n        {\n          \"name\": \"cmd\",\n          \"type\": \"directory\",\n          \"path\": \"media-vault-backend/cmd\",\n          \"children\": [\n            {\n              \"name\": \"main.go\",\n              \"type\": \"file\",\n              \"path\": \"media-vault-backend/cmd/main.go\",\n              \"size\": 5059,\n              \"content\": \"// github.com/wronai/media-vault-backend/cmd/main.go\\npackage main\\n\\nimport (\\n\\t\\\"log\\\"\\n\\t\\\"os\\\"\\n\\n\\n\\t\\\"github.com/gofiber/fiber/v2\\\"\\n\\t\\\"github.com/gofiber/fiber/v2/middleware/cors\\\"\\n\\t\\\"github.com/gofiber/fiber/v2/middleware/logger\\\"\\n\\t\\\"github.com/gofiber/fiber/v2/middleware/monitor\\\"\\n\\t\\\"github.com/gofiber/fiber/v2/middleware/recover\\\"\\n\\n\\t\\\"github.com/wronai/media-vault-backend/internal/auth\\\"\\n\\t\\\"github.com/wronai/media-vault-backend/internal/database\\\"\\n\\t\\\"github.com/wronai/media-vault-backend/internal/handlers\\\"\\n\\t\\\"github.com/wronai/media-vault-backend/internal/services\\\"\\n)\\n\\nfunc main() {\\n\\t// Initialize database\\n\\tdb, err := database.Initialize()\\n\\tif err != nil {\\n\\t\\tlog.Fatal(\\\"Failed to initialize database:\\\", err)\\n\\t}\\n\\tdefer db.Close()\\n\\n\\t// Initialize Keycloak authentication\\n\\tif os.Getenv(\\\"OAUTH2_ENABLED\\\") == \\\"true\\\" {\\n\\t\\tif err := auth.InitKeycloak(); err != nil {\\n\\t\\t\\tlog.Printf(\\\"Warning: Failed to initialize Keycloak: %v\\\", err)\\n\\t\\t\\tlog.Println(\\\"Running without authentication\\\")\\n\\t\\t} else {\\n\\t\\t\\tlog.Println(\\\"Keycloak authentication enabled\\\")\\n\\t\\t}\\n\\t}\\n\\n\\t// Initialize services\\n\\tvaultService := services.NewVaultService(db)\\n\\tphotoService := services.NewPhotoService(db)\\n\\tdescriptionService := services.NewDescriptionService()\\n\\tsharingService := services.NewSharingService(db)\\n\\n\\t// Initialize auth middleware\\n\\tauthMiddleware := auth.NewAuthMiddleware(auth.JWTConfig{\\n\\t\\tSigningKey: []byte(os.Getenv(\\\"JWT_SECRET\\\")),\\n\\t})\\n\\n\\t// Initialize handlers\\n\\tvaultHandler := handlers.NewVaultHandler(vaultService)\\n\\tadminHandler := handlers.NewAdminHandler()\\n\\tpartnerHandler := handlers.NewPartnerHandler(photoService, sharingService)\\n\\tuploadHandler := handlers.NewUploadHandler(*vaultService, *photoService, *descriptionService)\\n\\tphotoHandler := handlers.NewPhotoHandler(photoService)\\n\\n\\t// Create Fiber app\\n\\tapp := fiber.New(fiber.Config{\\n\\t\\tAppName:       \\\"Media Vault API\\\",\\n\\t\\tPrefork:       false,\\n\\t\\tCaseSensitive: true,\\n\\t\\tStrictRouting: true,\\n\\t})\\n\\n\\t// Middleware\\n\\tapp.Use(recover.New())\\n\\tapp.Use(logger.New())\\n\\tapp.Use(cors.New(cors.Config{\\n\\t\\tAllowOrigins:     \\\"*\\\",\\n\\t\\tAllowMethods:     \\\"GET,POST,PUT,DELETE,OPTIONS\\\",\\n\\t\\tAllowHeaders:     \\\"Origin, Content-Type, Accept, Authorization\\\",\\n\\t\\tAllowCredentials: true,\\n\\t}))\\n\\n\\t// Health check\\n\\tapp.Get(\\\"/health\\\", func(c *fiber.Ctx) error {\\n\\t\\treturn c.SendString(\\\"OK\\\")\\n\\t})\\n\\n\\n\\t// Metrics\\n\\tapp.Get(\\\"/metrics\\\", monitor.New(monitor.Config{Title: \\\"Media Vault Metrics\\\"}))\\n\\n\\t// API v1 routes\\n\\tapi := app.Group(\\\"/api/v1\\\")\\n\\n\\n\\t// Auth routes (placeholder - implement these handlers)\\n\\tauthGroup := api.Group(\\\"/auth\\\")\\n\\t{\\n\\t\\tauthGroup.Post(\\\"/login\\\", func(c *fiber.Ctx) error {\\n\\t\\t\\treturn c.Status(fiber.StatusNotImplemented).JSON(fiber.Map{\\n\\t\\t\\t\\t\\\"error\\\": \\\"Login endpoint not implemented\\\",\\n\\t\\t\\t})\\n\\t\\t})\\n\\t\\tauthGroup.Post(\\\"/register\\\", func(c *fiber.Ctx) error {\\n\\t\\t\\treturn c.Status(fiber.StatusNotImplemented).JSON(fiber.Map{\\n\\t\\t\\t\\t\\\"error\\\": \\\"Register endpoint not implemented\\\",\\n\\t\\t\\t})\\n\\t\\t})\\n\\t\\tauthGroup.Post(\\\"/refresh\\\", func(c *fiber.Ctx) error {\\n\\t\\t\\treturn c.Status(fiber.StatusNotImplemented).JSON(fiber.Map{\\n\\t\\t\\t\\t\\\"error\\\": \\\"Refresh token endpoint not implemented\\\",\\n\\t\\t\\t})\\n\\t\\t})\\n\\t\\tauthGroup.Post(\\\"/logout\\\", func(c *fiber.Ctx) error {\\n\\t\\t\\treturn c.Status(fiber.StatusNotImplemented).JSON(fiber.Map{\\n\\t\\t\\t\\t\\\"error\\\": \\\"Logout endpoint not implemented\\\",\\n\\t\\t\\t})\\n\\t\\t})\\n\\t}\\n\\n\\t// Protected routes\\n\\tprotected := api.Use(authMiddleware)\\n\\t{\\n\\t\\t// Vault routes\\n\\t\\tvault := protected.Group(\\\"/vault\\\")\\n\\t\\t{\\n\\t\\t\\t// Vault routes\\n\\t\\t\\tvault.Get(\\\"\\\", vaultHandler.GetVault)\\n\\t\\t\\tvault.Post(\\\"/upload\\\", uploadHandler.UploadSingle)\\n\\t\\t\\tvault.Post(\\\"/upload/bulk\\\", uploadHandler.BulkUpload)\\n\\t\\t}\\n\\n\\t\\t// Photo routes\\n\\t\\tphotos := protected.Group(\\\"/photos\\\")\\n\\t\\t{\\n\\t\\t\\tphotos.Get(\\\"\\\", photoHandler.ListPhotos)\\n\\t\\t\\tphotos.Get(\\\"/:id\\\", photoHandler.GetPhoto)\\n\\t\\t\\tphotos.Put(\\\"/:id\\\", photoHandler.UpdatePhoto)\\n\\t\\t\\tphotos.Delete(\\\"/:id\\\", photoHandler.DeletePhoto)\\n\\t\\t\\tphotos.Get(\\\"/:id/thumbnail\\\", photoHandler.GetThumbnail)\\n\\t\\t\\tphotos.Post(\\\"/:id/description\\\", photoHandler.UpdateDescription)\\n\\t\\t\\tphotos.Post(\\\"/:id/generate-description\\\", photoHandler.GenerateDescription)\\n\\t\\t\\tphotos.Get(\\\"/:id/shared-with\\\", photoHandler.GetSharedWith)\\n\\t\\t}\\n\\n\\t\\t// Partner routes\\n\\t\\tpartner := protected.Group(\\\"/partner\\\")\\n\\t\\t{\\n\\t\\t\\tpartner.Post(\\\"/upload\\\", partnerHandler.BulkUpload)\\n\\t\\t\\tpartner.Get(\\\"/photos\\\", partnerHandler.GetPartnerPhotos)\\n\\t\\t\\tpartner.Put(\\\"/photos/descriptions\\\", partnerHandler.BatchUpdateDescriptions)\\n\\t\\t\\tpartner.Post(\\\"/photos/share\\\", partnerHandler.BatchSharePhotos)\\n\\t\\t\\tpartner.Get(\\\"/photos/:id/analytics\\\", partnerHandler.GetPhotoAnalytics)\\n\\t\\t\\tpartner.Get(\\\"/dashboard\\\", partnerHandler.GetPartnerDashboard)\\n\\t\\t\\tpartner.Get(\\\"/analytics\\\", partnerHandler.GetPartnerAnalytics)\\n\\t\\t}\\n\\n\\t\\t// Admin routes\\n\\t\\tadmin := protected.Group(\\\"/admin\\\", auth.RequireRole(\\\"admin\\\"))\\n\\t\\t{\\n\\t\\t\\t// Admin routes\\n\\t\\t\\tadmin.Get(\\\"/users\\\", adminHandler.ListUsers)\\n\\t\\t\\tadmin.Post(\\\"/users\\\", adminHandler.CreateUser)\\n\\t\\t\\tadmin.Get(\\\"/users/:id\\\", adminHandler.GetUser)\\n\\t\\t\\tadmin.Put(\\\"/users/:id\\\", adminHandler.UpdateUser)\\n\\t\\t\\tadmin.Delete(\\\"/users/:id\\\", adminHandler.DeleteUser)\\n\\t\\t}\\n\\t}\\n\\n\\t// Start server\\n\\tport := os.Getenv(\\\"PORT\\\")\\n\\tif port == \\\"\\\" {\\n\\t\\tport = \\\"8080\\\"\\n\\t}\\n\\n\\tlog.Fatal(app.Listen(\\\":\\\" + port))\\n}\\n\"\n            }\n          ]\n        },\n        {\n          \"name\": \"internal\",\n          \"type\": \"directory\",\n          \"path\": \"media-vault-backend/internal\",\n          \"children\": [\n            {\n              \"name\": \"auth\",\n              \"type\": \"directory\",\n              \"path\": \"media-vault-backend/internal/auth\",\n              \"children\": [\n                {\n                  \"name\": \"keycloak.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/auth/keycloak.go\",\n                  \"size\": 334,\n                  \"content\": \"package auth\\n\\n// InitKeycloak initializes the Keycloak client\\nfunc InitKeycloak() error {\\n\\t// TODO: Implement Keycloak client initialization\\n\\treturn nil\\n}\\n\\n// VerifyToken verifies a JWT token from Keycloak\\nfunc VerifyToken(tokenString string) (map[string]interface{}, error) {\\n\\t// TODO: Implement token verification\\n\\treturn nil, nil\\n}\"\n                },\n                {\n                  \"name\": \"middleware.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/auth/middleware.go\",\n                  \"size\": 1710,\n                  \"content\": \"package auth\\n\\nimport (\\n\\t\\\"github.com/gofiber/fiber/v2\\\"\\n\\t\\\"github.com/golang-jwt/jwt/v5\\\"\\n)\\n\\n// JWTConfig defines the configuration for JWT middleware\\ntype JWTConfig struct {\\n\\tSigningKey []byte\\n}\\n\\n// NewAuthMiddleware creates a new JWT authentication middleware\\nfunc NewAuthMiddleware(config JWTConfig) fiber.Handler {\\n\\treturn func(c *fiber.Ctx) error {\\n\\t\\tauthHeader := c.Get(\\\"Authorization\\\")\\n\\t\\tif authHeader == \\\"\\\" {\\n\\t\\t\\treturn c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{\\n\\t\\t\\t\\t\\\"error\\\": \\\"Missing Authorization header\\\",\\n\\t\\t\\t})\\n\\t\\t}\\n\\n\\t\\ttokenString := authHeader[len(\\\"Bearer \\\"):]\\n\\t\\ttoken, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {\\n\\t\\t\\tif _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {\\n\\t\\t\\t\\treturn nil, fiber.NewError(fiber.StatusUnauthorized, \\\"Invalid token\\\")\\n\\t\\t\\t}\\n\\t\\t\\treturn config.SigningKey, nil\\n\\t\\t})\\n\\n\\t\\tif err != nil || !token.Valid {\\n\\t\\t\\treturn c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{\\n\\t\\t\\t\\t\\\"error\\\": \\\"Invalid or expired token\\\",\\n\\t\\t\\t})\\n\\t\\t}\\n\\n\\t\\t// Add user info to context\\n\\t\\tif claims, ok := token.Claims.(jwt.MapClaims); ok {\\n\\t\\t\\tc.Locals(\\\"userID\\\", claims[\\\"sub\\\"])\\n\\t\\t\\tc.Locals(\\\"roles\\\", claims[\\\"realm_access\\\"].(map[string]interface{})[\\\"roles\\\"])\\n\\t\\t}\\n\\n\\t\\treturn c.Next()\\n\\t}\\n}\\n\\n// RequireRole checks if the user has the required role\\nfunc RequireRole(role string) fiber.Handler {\\n\\treturn func(c *fiber.Ctx) error {\\n\\t\\tuserRoles, ok := c.Locals(\\\"roles\\\").([]interface{})\\n\\t\\tif !ok {\\n\\t\\t\\treturn c.Status(fiber.StatusForbidden).JSON(fiber.Map{\\n\\t\\t\\t\\t\\\"error\\\": \\\"No roles found in token\\\",\\n\\t\\t\\t})\\n\\t\\t}\\n\\n\\t\\tfor _, r := range userRoles {\\n\\t\\t\\tif r == role {\\n\\t\\t\\t\\treturn c.Next()\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn c.Status(fiber.StatusForbidden).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Insufficient permissions\\\",\\n\\t\\t})\\n\\t}\\n}\"\n                },\n                {\n                  \"name\": \"roles.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/auth/roles.go\",\n                  \"size\": 729,\n                  \"content\": \"package auth\\n\\n// User roles\\nconst (\\n\\tRoleAdmin = \\\"admin\\\"\\n\\tRoleUser  = \\\"user\\\"\\n)\\n\\n// HasAdminRole checks if the user has admin role\\nfunc HasAdminRole(roles []string) bool {\\n\\tfor _, role := range roles {\\n\\t\\tif role == RoleAdmin {\\n\\t\\t\\treturn true\\n\\t\\t}\\n\\t}\\n\\treturn false\\n}\\n\\n// HasUserRole checks if the user has user role\\nfunc HasUserRole(roles []string) bool {\\n\\tfor _, role := range roles {\\n\\t\\tif role == RoleUser {\\n\\t\\t\\treturn true\\n\\t\\t}\\n\\t}\\n\\treturn false\\n}\\n\\n// HasAnyRole checks if the user has any of the specified roles\\nfunc HasAnyRole(userRoles, requiredRoles []string) bool {\\n\\tfor _, requiredRole := range requiredRoles {\\n\\t\\tfor _, userRole := range userRoles {\\n\\t\\t\\tif userRole == requiredRole {\\n\\t\\t\\t\\treturn true\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn false\\n}\"\n                }\n              ]\n            },\n            {\n              \"name\": \"database\",\n              \"type\": \"directory\",\n              \"path\": \"media-vault-backend/internal/database\",\n              \"children\": [\n                {\n                  \"name\": \"migrations.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/database/migrations.go\",\n                  \"size\": 179,\n                  \"content\": \"package database\\n\\nimport \\\"database/sql\\\"\\n\\n// RunMigrations runs all database migrations\\nfunc RunMigrations(db *sql.DB) error {\\n\\t// TODO: Implement database migrations\\n\\treturn nil\\n}\"\n                },\n                {\n                  \"name\": \"sqlite.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/database/sqlite.go\",\n                  \"size\": 3396,\n                  \"content\": \"package database\\n\\nimport (\\n    \\\"database/sql\\\"\\n    \\\"os\\\"\\n    \\\"path/filepath\\\"\\n\\n    _ \\\"github.com/mattn/go-sqlite3\\\"\\n)\\n\\nfunc Initialize() (*sql.DB, error) {\\n    dbPath := os.Getenv(\\\"DATABASE_PATH\\\")\\n    if dbPath == \\\"\\\" {\\n        dbPath = \\\"./data/media.db\\\"\\n    }\\n\\n    // Ensure directory exists\\n    dir := filepath.Dir(dbPath)\\n    if err := os.MkdirAll(dir, 0755); err != nil {\\n        return nil, err\\n    }\\n\\n    db, err := sql.Open(\\\"sqlite3\\\", dbPath)\\n    if err != nil {\\n        return nil, err\\n    }\\n\\n    // Enable foreign keys\\n    if _, err := db.Exec(\\\"PRAGMA foreign_keys = ON\\\"); err != nil {\\n        return nil, err\\n    }\\n\\n    // Run migrations\\n    if err := runMigrations(db); err != nil {\\n        return nil, err\\n    }\\n\\n    return db, nil\\n}\\n\\nfunc runMigrations(db *sql.DB) error {\\n    migrations := []string{\\n        `CREATE TABLE IF NOT EXISTS photos (\\n            id TEXT PRIMARY KEY,\\n            user_id TEXT NOT NULL,\\n            partner_id TEXT,\\n            filename TEXT NOT NULL,\\n            original_name TEXT NOT NULL,\\n            file_path TEXT NOT NULL,\\n            thumbnail_path TEXT,\\n            file_size INTEGER NOT NULL,\\n            mime_type TEXT NOT NULL,\\n            width INTEGER,\\n            height INTEGER,\\n            hash TEXT NOT NULL,\\n            description TEXT,\\n            ai_description TEXT,\\n            tags TEXT,\\n            ai_confidence REAL,\\n            is_nsfw BOOLEAN,\\n            nsfw_confidence REAL,\\n            moderation_status TEXT DEFAULT 'pending',\\n            exif_data TEXT,\\n            location TEXT,\\n            camera_make TEXT,\\n            camera_model TEXT,\\n            taken_at DATETIME,\\n            is_shared BOOLEAN DEFAULT FALSE,\\n            share_count INTEGER DEFAULT 0,\\n            view_count INTEGER DEFAULT 0,\\n            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\\n            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\\n            processed_at DATETIME\\n        )`,\\n\\n        `CREATE TABLE IF NOT EXISTS photo_sharing (\\n            id TEXT PRIMARY KEY,\\n            photo_id TEXT NOT NULL,\\n            shared_by TEXT NOT NULL,\\n            shared_with TEXT NOT NULL,\\n            permission TEXT NOT NULL DEFAULT 'view',\\n            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\\n            expires_at DATETIME,\\n            FOREIGN KEY (photo_id) REFERENCES photos (id) ON DELETE CASCADE\\n        )`,\\n\\n        `CREATE TABLE IF NOT EXISTS photo_analytics (\\n            photo_id TEXT PRIMARY KEY,\\n            views INTEGER DEFAULT 0,\\n            downloads INTEGER DEFAULT 0,\\n            shares INTEGER DEFAULT 0,\\n            last_viewed DATETIME,\\n            FOREIGN KEY (photo_id) REFERENCES photos (id) ON DELETE CASCADE\\n        )`,\\n\\n        `CREATE INDEX IF NOT EXISTS idx_photos_user_id ON photos (user_id)`,\\n        `CREATE INDEX IF NOT EXISTS idx_photos_partner_id ON photos (partner_id)`,\\n        `CREATE INDEX IF NOT EXISTS idx_photos_created_at ON photos (created_at)`,\\n        `CREATE INDEX IF NOT EXISTS idx_photos_moderation_status ON photos (moderation_status)`,\\n        `CREATE INDEX IF NOT EXISTS idx_photo_sharing_photo_id ON photo_sharing (photo_id)`,\\n        `CREATE INDEX IF NOT EXISTS idx_photo_sharing_shared_with ON photo_sharing (shared_with)`,\\n    }\\n\\n    for _, migration := range migrations {\\n        if _, err := db.Exec(migration); err != nil {\\n            return err\\n        }\\n    }\\n\\n    return nil\\n}\\n\\n\"\n                }\n              ]\n            },\n            {\n              \"name\": \"handlers\",\n              \"type\": \"directory\",\n              \"path\": \"media-vault-backend/internal/handlers\",\n              \"children\": [\n                {\n                  \"name\": \"admin.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/handlers/admin.go\",\n                  \"size\": 1693,\n                  \"content\": \"package handlers\\n\\nimport (\\n\\t\\\"github.com/gofiber/fiber/v2\\\"\\n)\\n\\n// AdminHandler handles admin-related HTTP requests\\ntype AdminHandler struct {\\n\\t// Add any dependencies here\\n}\\n\\n// NewAdminHandler creates a new AdminHandler\\nfunc NewAdminHandler() *AdminHandler {\\n\\treturn &AdminHandler{}\\n}\\n\\n// ListUsers returns a list of all users\\nfunc (h *AdminHandler) ListUsers(c *fiber.Ctx) error {\\n\\t// TODO: Implement user listing\\n\\treturn c.Status(fiber.StatusNotImplemented).JSON(fiber.Map{\\n\\t\\t\\\"error\\\": \\\"List users endpoint not implemented\\\",\\n\\t})\\n}\\n\\n// GetUser returns a specific user by ID\\nfunc (h *AdminHandler) GetUser(c *fiber.Ctx) error {\\n\\t// TODO: Implement get user by ID\\n\\treturn c.Status(fiber.StatusNotImplemented).JSON(fiber.Map{\\n\\t\\t\\\"error\\\": \\\"Get user endpoint not implemented\\\",\\n\\t})\\n}\\n\\n// CreateUser creates a new user\\nfunc (h *AdminHandler) CreateUser(c *fiber.Ctx) error {\\n\\t// TODO: Implement user creation\\n\\treturn c.Status(fiber.StatusNotImplemented).JSON(fiber.Map{\\n\\t\\t\\\"error\\\": \\\"Create user endpoint not implemented\\\",\\n\\t})\\n}\\n\\n// UpdateUser updates an existing user\\nfunc (h *AdminHandler) UpdateUser(c *fiber.Ctx) error {\\n\\t// TODO: Implement user update\\n\\treturn c.Status(fiber.StatusNotImplemented).JSON(fiber.Map{\\n\\t\\t\\\"error\\\": \\\"Update user endpoint not implemented\\\",\\n\\t})\\n}\\n\\n// DeleteUser deletes a user\\nfunc (h *AdminHandler) DeleteUser(c *fiber.Ctx) error {\\n\\t// TODO: Implement user deletion\\n\\treturn c.Status(fiber.StatusNotImplemented).JSON(fiber.Map{\\n\\t\\t\\\"error\\\": \\\"Delete user endpoint not implemented\\\",\\n\\t})\\n}\\n\\n// GetSystemStats returns system statistics\\nfunc (h *AdminHandler) GetSystemStats(c *fiber.Ctx) error {\\n\\t// TODO: Implement system stats retrieval\\n\\treturn c.JSON(fiber.Map{\\\"status\\\": \\\"ok\\\"})\\n}\"\n                },\n                {\n                  \"name\": \"auth.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/handlers/auth.go\",\n                  \"size\": 2450,\n                  \"content\": \"package handlers\\n\\nimport (\\n\\t\\\"github.com/gofiber/fiber/v2\\\"\\n)\\n\\n// Login handles user login\\n// @Summary User login\\n// @Description Authenticate user and get access token\\n// @Tags auth\\n// @Accept json\\n// @Produce json\\n// @Param credentials body LoginRequest true \\\"Login credentials\\\"\\n// @Success 200 {object} map[string]string\\n// @Failure 400 {object} map[string]string\\n// @Failure 401 {object} map[string]string\\n// @Router /auth/login [post]\\nfunc Login(c *fiber.Ctx) error {\\n\\t// TODO: Implement actual login logic\\n\\treturn c.JSON(fiber.Map{\\n\\t\\t\\\"token\\\": \\\"dummy-jwt-token\\\",\\n\\t})\\n}\\n\\n// Register handles user registration\\n// @Summary Register a new user\\n// @Description Create a new user account\\n// @Tags auth\\n// @Accept json\\n// @Produce json\\n// @Param user body RegisterRequest true \\\"User registration data\\\"\\n// @Success 201 {object} map[string]string\\n// @Failure 400 {object} map[string]string\\n// @Failure 409 {object} map[string]string\\n// @Router /auth/register [post]\\nfunc Register(c *fiber.Ctx) error {\\n\\t// TODO: Implement actual registration logic\\n\\treturn c.Status(fiber.StatusCreated).JSON(fiber.Map{\\n\\t\\t\\\"message\\\": \\\"User registered successfully\\\",\\n\\t})\\n}\\n\\n// RefreshToken handles token refresh\\n// @Summary Refresh access token\\n// @Description Get a new access token using a refresh token\\n// @Tags auth\\n// @Accept json\\n// @Produce json\\n// @Param refreshToken body RefreshTokenRequest true \\\"Refresh token\\\"\\n// @Success 200 {object} map[string]string\\n// @Failure 400 {object} map[string]string\\n// @Failure 401 {object} map[string]string\\n// @Router /auth/refresh [post]\\nfunc RefreshToken(c *fiber.Ctx) error {\\n\\t// TODO: Implement actual token refresh logic\\n\\treturn c.JSON(fiber.Map{\\n\\t\\t\\\"token\\\": \\\"new-jwt-token\\\",\\n\\t})\\n}\\n\\n// Logout handles user logout\\n// @Summary User logout\\n// @Description Invalidate the current session\\n// @Tags auth\\n// @Security BearerAuth\\n// @Success 200 {object} map[string]string\\n// @Failure 401 {object} map[string]string\\n// @Router /auth/logout [post]\\nfunc Logout(c *fiber.Ctx) error {\\n\\t// TODO: Implement actual logout logic\\n\\treturn c.JSON(fiber.Map{\\n\\t\\t\\\"message\\\": \\\"Successfully logged out\\\",\\n\\t})\\n}\\n\\n// Request/response models\\ntype LoginRequest struct {\\n\\tUsername string `json:\\\"username\\\"`\\n\\tPassword string `json:\\\"password\\\"`\\n}\\n\\ntype RegisterRequest struct {\\n\\tUsername string `json:\\\"username\\\"`\\n\\tEmail    string `json:\\\"email\\\"`\\n\\tPassword string `json:\\\"password\\\"`\\n}\\n\\ntype RefreshTokenRequest struct {\\n\\tRefreshToken string `json:\\\"refresh_token\\\"`\\n}\\n\"\n                },\n                {\n                  \"name\": \"partner.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/handlers/partner.go\",\n                  \"size\": 1988,\n                  \"content\": \"package handlers\\n\\nimport (\\n\\t\\\"github.com/gofiber/fiber/v2\\\"\\n\\t\\\"github.com/wronai/media-vault-backend/internal/services\\\"\\n)\\n\\ntype PartnerHandler struct {\\n    photoService   *services.PhotoService\\n    sharingService *services.SharingService\\n}\\n\\nfunc NewPartnerHandler(photoService *services.PhotoService, sharingService *services.SharingService) *PartnerHandler {\\n    return &PartnerHandler{\\n        photoService:   photoService,\\n        sharingService: sharingService,\\n    }\\n}\\n\\n// BulkUpload handles bulk photo upload for partners\\nfunc (h *PartnerHandler) BulkUpload(c *fiber.Ctx) error {\\n    // Implementation from main.go\\n    return c.SendString(\\\"Bulk upload endpoint\\\")\\n}\\n\\n// GetPartnerPhotos returns photos uploaded by the partner\\nfunc (h *PartnerHandler) GetPartnerPhotos(c *fiber.Ctx) error {\\n    // Implementation from main.go\\n    return c.SendString(\\\"Partner photos endpoint\\\")\\n}\\n\\n// BatchUpdateDescriptions updates descriptions for multiple photos\\nfunc (h *PartnerHandler) BatchUpdateDescriptions(c *fiber.Ctx) error {\\n    // Implementation from main.go\\n    return c.SendString(\\\"Batch update descriptions endpoint\\\")\\n}\\n\\n// BatchSharePhotos shares multiple photos with users\\nfunc (h *PartnerHandler) BatchSharePhotos(c *fiber.Ctx) error {\\n    // Implementation from main.go\\n    return c.SendString(\\\"Batch share photos endpoint\\\")\\n}\\n\\n// GetPhotoAnalytics returns analytics for a specific photo\\nfunc (h *PartnerHandler) GetPhotoAnalytics(c *fiber.Ctx) error {\\n    // Implementation from main.go\\n    return c.SendString(\\\"Photo analytics endpoint\\\")\\n}\\n\\n// GetPartnerDashboard returns dashboard data for partner\\nfunc (h *PartnerHandler) GetPartnerDashboard(c *fiber.Ctx) error {\\n    // Implementation from main.go\\n    return c.SendString(\\\"Partner dashboard endpoint\\\")\\n}\\n\\n// GetPartnerAnalytics returns comprehensive analytics for partner\\nfunc (h *PartnerHandler) GetPartnerAnalytics(c *fiber.Ctx) error {\\n    // Implementation from main.go\\n    return c.SendString(\\\"Partner analytics endpoint\\\")\\n}\\n\"\n                },\n                {\n                  \"name\": \"photos.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/handlers/photos.go\",\n                  \"size\": 10473,\n                  \"content\": \"package handlers\\n\\nimport (\\n\\t\\\"github.com/gofiber/fiber/v2\\\"\\n\\t\\\"github.com/wronai/media-vault-backend/internal/services\\\"\\n)\\n\\n// PhotoHandler handles photo-related HTTP requests\\ntype PhotoHandler struct {\\n\\tphotoService *services.PhotoService\\n}\\n\\n// NewPhotoHandler creates a new PhotoHandler\\nfunc NewPhotoHandler(photoService *services.PhotoService) *PhotoHandler {\\n\\treturn &PhotoHandler{\\n\\t\\tphotoService: photoService,\\n\\t}\\n}\\n\\n// UploadPhoto handles photo uploads\\nfunc (h *PhotoHandler) UploadPhoto(c *fiber.Ctx) error {\\n\\t// Get the file from the form data\\n\\tfile, err := c.FormFile(\\\"photo\\\")\\n\\tif err != nil {\\n\\t\\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"No file uploaded\\\",\\n\\t\\t})\\n\\t}\\n\\n\\t// Get user ID from context (set by auth middleware)\\n\\tuserID := c.Locals(\\\"userID\\\").(string)\\n\\n\\t// Upload the photo\\n\\tphoto, err := h.photoService.UploadPhoto(c.Context(), userID, file, nil)\\n\\tif err != nil {\\n\\t\\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Failed to upload photo: \\\" + err.Error(),\\n\\t\\t})\\n\\t}\\n\\n\\treturn c.Status(fiber.StatusCreated).JSON(photo)\\n}\\n\\n// GetPhoto handles retrieving a photo by ID\\nfunc (h *PhotoHandler) GetPhoto(c *fiber.Ctx) error {\\n\\tphotoID := c.Params(\\\"id\\\")\\n\\tif photoID == \\\"\\\" {\\n\\t\\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Photo ID is required\\\",\\n\\t\\t})\\n\\t}\\n\\n\\t// Get photo from service\\n\\tphoto, err := h.photoService.GetPhoto(c.Context(), photoID)\\n\\tif err != nil {\\n\\t\\treturn c.Status(fiber.StatusNotFound).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Photo not found: \\\" + err.Error(),\\n\\t\\t})\\n\\t}\\n\\n\\t// Check if user has permission to view this photo\\n\\tuserID := c.Locals(\\\"userID\\\").(string)\\n\\tif photo.UserID != userID {\\n\\t\\treturn c.Status(fiber.StatusForbidden).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"You don't have permission to view this photo\\\",\\n\\t\\t})\\n\\t}\\n\\n\\treturn c.JSON(photo)\\n}\\n\\n// ListPhotos handles listing photos with pagination\\nfunc (h *PhotoHandler) ListPhotos(c *fiber.Ctx) error {\\n\\t// Get pagination parameters\\n\\tpage := c.QueryInt(\\\"page\\\", 1)\\n\\tlimit := c.QueryInt(\\\"limit\\\", 20)\\n\\n\\t// Get user ID from context\\n\\tuserID := c.Locals(\\\"userID\\\").(string)\\n\\n\\t// Get photos from service\\n\\tphotos, total, err := h.photoService.ListPhotos(c.Context(), userID, page, limit)\\n\\tif err != nil {\\n\\t\\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Failed to fetch photos: \\\" + err.Error(),\\n\\t\\t})\\n\\t}\\n\\n\\treturn c.JSON(fiber.Map{\\n\\t\\t\\\"data\\\":  photos,\\n\\t\\t\\\"total\\\": total,\\n\\t\\t\\\"page\\\":  page,\\n\\t\\t\\\"limit\\\": limit,\\n\\t})\\n}\\n\\n// UpdatePhoto handles updating a photo's metadata\\nfunc (h *PhotoHandler) UpdatePhoto(c *fiber.Ctx) error {\\n\\tphotoID := c.Params(\\\"id\\\")\\n\\tif photoID == \\\"\\\" {\\n\\t\\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Photo ID is required\\\",\\n\\t\\t})\\n\\t}\\n\\n\\t// Parse request body\\n\\tvar updates map[string]interface{}\\n\\tif err := c.BodyParser(&updates); err != nil {\\n\\t\\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Invalid request body: \\\" + err.Error(),\\n\\t\\t})\\n\\t}\\n\\n\\t// Update photo\\n\\tphoto, err := h.photoService.UpdatePhoto(c.Context(), photoID, updates)\\n\\tif err != nil {\\n\\t\\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Failed to update photo: \\\" + err.Error(),\\n\\t\\t})\\n\\t}\\n\\n\\t// Verify ownership\\n\\tuserID := c.Locals(\\\"userID\\\").(string)\\n\\tif photo.UserID != userID {\\n\\t\\treturn c.Status(fiber.StatusForbidden).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"You don't have permission to update this photo\\\",\\n\\t\\t})\\n\\t}\\n\\n\\treturn c.JSON(photo)\\n}\\n\\n// DeletePhoto handles deleting a photo\\nfunc (h *PhotoHandler) DeletePhoto(c *fiber.Ctx) error {\\n\\tphotoID := c.Params(\\\"id\\\")\\n\\tif photoID == \\\"\\\" {\\n\\t\\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Photo ID is required\\\",\\n\\t\\t})\\n\\t}\\n\\n\\t// First get the photo to verify ownership\\n\\tphoto, err := h.photoService.GetPhoto(c.Context(), photoID)\\n\\tif err != nil {\\n\\t\\treturn c.Status(fiber.StatusNotFound).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Photo not found: \\\" + err.Error(),\\n\\t\\t})\\n\\t}\\n\\n\\t// Verify ownership\\n\\tuserID := c.Locals(\\\"userID\\\").(string)\\n\\tif photo.UserID != userID {\\n\\t\\treturn c.Status(fiber.StatusForbidden).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"You don't have permission to delete this photo\\\",\\n\\t\\t})\\n\\t}\\n\\n\\t// Delete the photo\\n\\terr = h.photoService.DeletePhoto(c.Context(), photoID)\\n\\tif err != nil {\\n\\t\\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Failed to delete photo: \\\" + err.Error(),\\n\\t\\t})\\n\\t}\\n\\n\\treturn c.Status(fiber.StatusNoContent).Send(nil)\\n}\\n\\n// GetThumbnail handles retrieving a photo's thumbnail\\nfunc (h *PhotoHandler) GetThumbnail(c *fiber.Ctx) error {\\n\\tphotoID := c.Params(\\\"id\\\")\\n\\tif photoID == \\\"\\\" {\\n\\t\\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Photo ID is required\\\",\\n\\t\\t})\\n\\t}\\n\\n\\t// First get the photo to verify ownership\\n\\tphoto, err := h.photoService.GetPhoto(c.Context(), photoID)\\n\\tif err != nil {\\n\\t\\treturn c.Status(fiber.StatusNotFound).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Photo not found: \\\" + err.Error(),\\n\\t\\t})\\n\\t}\\n\\n\\t// Verify ownership\\n\\tuserID := c.Locals(\\\"userID\\\").(string)\\n\\tif photo.UserID != userID {\\n\\t\\treturn c.Status(fiber.StatusForbidden).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"You don't have permission to view this thumbnail\\\",\\n\\t\\t})\\n\\t}\\n\\n\\t// Get size parameter (optional, default to medium)\\n\\tsize := c.Query(\\\"size\\\", \\\"medium\\\")\\n\\n\\t// Get thumbnail data\\n\\tdata, contentType, err := h.photoService.GetThumbnail(c.Context(), photoID, size)\\n\\tif err != nil {\\n\\t\\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Failed to get thumbnail: \\\" + err.Error(),\\n\\t\\t})\\n\\t}\\n\\n\\t// Set content type and send the image data\\n\\tc.Set(\\\"Content-Type\\\", contentType)\\n\\treturn c.Send(data)\\n}\\n\\n// UpdateDescription updates a photo's description\\nfunc (h *PhotoHandler) UpdateDescription(c *fiber.Ctx) error {\\n\\tphotoID := c.Params(\\\"id\\\")\\n\\tif photoID == \\\"\\\" {\\n\\t\\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Photo ID is required\\\",\\n\\t\\t})\\n\\t}\\n\\n\\t// First get the photo to verify ownership\\n\\tphoto, err := h.photoService.GetPhoto(c.Context(), photoID)\\n\\tif err != nil {\\n\\t\\treturn c.Status(fiber.StatusNotFound).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Photo not found: \\\" + err.Error(),\\n\\t\\t})\\n\\t}\\n\\n\\t// Verify ownership\\n\\tuserID := c.Locals(\\\"userID\\\").(string)\\n\\tif photo.UserID != userID {\\n\\t\\treturn c.Status(fiber.StatusForbidden).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"You don't have permission to update this photo's description\\\",\\n\\t\\t})\\n\\t}\\n\\n\\t// Parse request body\\n\\tvar request struct {\\n\\t\\tDescription string `json:\\\"description\\\"`\\n\\t}\\n\\tif err := c.BodyParser(&request); err != nil {\\n\\t\\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Invalid request body: \\\" + err.Error(),\\n\\t\\t})\\n\\t}\\n\\n\\t// Update the description\\n\\tupdates := map[string]interface{}{\\n\\t\\t\\\"description\\\": request.Description,\\n\\t}\\n\\n\\t// Update the photo\\n\\tupdatedPhoto, err := h.photoService.UpdatePhoto(c.Context(), photoID, updates)\\n\\tif err != nil {\\n\\t\\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Failed to update description: \\\" + err.Error(),\\n\\t\\t})\\n\\t}\\n\\n\\treturn c.JSON(updatedPhoto)\\n}\\n\\n// GenerateDescription generates an AI description for a photo\\nfunc (h *PhotoHandler) GenerateDescription(c *fiber.Ctx) error {\\n\\tphotoID := c.Params(\\\"id\\\")\\n\\tif photoID == \\\"\\\" {\\n\\t\\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Photo ID is required\\\",\\n\\t\\t})\\n\\t}\\n\\n\\t// First get the photo to verify ownership\\n\\tphoto, err := h.photoService.GetPhoto(c.Context(), photoID)\\n\\tif err != nil {\\n\\t\\treturn c.Status(fiber.StatusNotFound).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Photo not found: \\\" + err.Error(),\\n\\t\\t})\\n\\t}\\n\\n\\t// Verify ownership\\n\\tuserID := c.Locals(\\\"userID\\\").(string)\\n\\tif photo.UserID != userID {\\n\\t\\treturn c.Status(fiber.StatusForbidden).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"You don't have permission to generate a description for this photo\\\",\\n\\t\\t})\\n\\t}\\n\\n\\t// Generate the description\\n\\tdescription, err := h.photoService.GenerateDescription(c.Context(), photoID)\\n\\tif err != nil {\\n\\t\\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Failed to generate description: \\\" + err.Error(),\\n\\t\\t})\\n\\t}\\n\\n\\t// Update the photo with the generated description\\n\\tupdates := map[string]interface{}{\\n\\t\\t\\\"description\\\": description,\\n\\t}\\n\\n\\t_, err = h.photoService.UpdatePhoto(c.Context(), photoID, updates)\\n\\tif err != nil {\\n\\t\\t// Log the error but don't fail the request\\n\\t\\t// since we still want to return the generated description\\n\\t\\t// Consider using a background job for this in production\\n\\t\\t// log.Printf(\\\"Failed to update photo with generated description: %v\\\", err)\\n\\t}\\n\\n\\treturn c.JSON(fiber.Map{\\n\\t\\t\\\"description\\\": description,\\n\\t})\\n}\\n\\n// GetSharedWith gets the list of users a photo is shared with\\nfunc (h *PhotoHandler) GetSharedWith(c *fiber.Ctx) error {\\n\\tphotoID := c.Params(\\\"id\\\")\\n\\tif photoID == \\\"\\\" {\\n\\t\\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Photo ID is required\\\",\\n\\t\\t})\\n\\t}\\n\\n\\t// First get the photo to verify ownership\\n\\tphoto, err := h.photoService.GetPhoto(c.Context(), photoID)\\n\\tif err != nil {\\n\\t\\treturn c.Status(fiber.StatusNotFound).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Photo not found: \\\" + err.Error(),\\n\\t\\t})\\n\\t}\\n\\n\\t// Verify ownership\\n\\tuserID := c.Locals(\\\"userID\\\").(string)\\n\\tif photo.UserID != userID {\\n\\t\\treturn c.Status(fiber.StatusForbidden).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"You don't have permission to view sharing information for this photo\\\",\\n\\t\\t})\\n\\t}\\n\\n\\t// Get the list of users the photo is shared with\\n\\tusers, err := h.photoService.GetSharedWith(c.Context(), photoID)\\n\\tif err != nil {\\n\\t\\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Failed to get shared users: \\\" + err.Error(),\\n\\t\\t})\\n\\t}\\n\\n\\treturn c.JSON(fiber.Map{\\n\\t\\t\\\"photo_id\\\":   photoID,\\n\\t\\t\\\"shared_with\\\": users,\\n\\t})\\n}\\n\\n// RegisterRoutes registers photo-related routes\\nfunc (h *PhotoHandler) RegisterRoutes(router fiber.Router) {\\n\\tphotoGroup := router.Group(\\\"/photos\\\")\\n\\t{\\n\\t\\t// Upload a new photo\\n\\t\\tphotoGroup.Post(\\\"/\\\", h.UploadPhoto)\\n\\t\\t\\n\\t\\t// List all photos with pagination\\n\\t\\tphotoGroup.Get(\\\"/\\\", h.ListPhotos)\\n\\t\\t\\n\\t\\t// Get a specific photo by ID\\n\\t\\tphotoGroup.Get(\\\"/:id\\\", h.GetPhoto)\\n\\t\\t\\n\\t\\t// Update a photo's metadata\\n\\t\\tphotoGroup.Put(\\\"/:id\\\", h.UpdatePhoto)\\n\\t\\t\\n\\t\\t// Delete a photo\\n\\t\\tphotoGroup.Delete(\\\"/:id\\\", h.DeletePhoto)\\n\\t\\t\\n\\t\\t// Get a photo's thumbnail\\n\\t\\tphotoGroup.Get(\\\"/:id/thumbnail\\\", h.GetThumbnail)\\n\\t\\t\\n\\t\\t// Update a photo's description\\n\\t\\tphotoGroup.Put(\\\"/:id/description\\\", h.UpdateDescription)\\n\\t\\t\\n\\t\\t// Generate an AI description for a photo\\n\\t\\tphotoGroup.Post(\\\"/:id/generate-description\\\", h.GenerateDescription)\\n\\t\\t\\n\\t\\t// Get the list of users a photo is shared with\\n\\t\\tphotoGroup.Get(\\\"/:id/shared-with\\\", h.GetSharedWith)\\n\\t}\\n}\"\n                },\n                {\n                  \"name\": \"upload.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/handlers/upload.go\",\n                  \"size\": 7451,\n                  \"content\": \"package handlers\\n\\nimport (\\n\\t\\\"fmt\\\"\\n\\t\\\"mime/multipart\\\"\\n\\t\\\"net/http\\\"\\n\\t\\\"path/filepath\\\"\\n\\t\\\"strings\\\"\\n\\n\\t\\\"github.com/gofiber/fiber/v2\\\"\\n\\t\\\"github.com/wronai/media-vault-backend/internal/models\\\"\\n\\t\\\"github.com/wronai/media-vault-backend/internal/services\\\"\\n)\\n\\n// UploadHandler handles file uploads\\n// @title Media Vault Upload Handler\\n// @version 1.0\\n// @description Handles file uploads to the media vault\\n// @BasePath /api/v1\\n// @securityDefinitions.apikey BearerAuth\\n// @in header\\n// @name Authorization\\ntype UploadHandler struct {\\n\\tvaultService       services.VaultService\\n\\tphotoService       services.PhotoService\\n\\tdescriptionService services.DescriptionService\\n}\\n\\n// NewUploadHandler creates a new upload handler\\nfunc NewUploadHandler(\\n\\tvaultService services.VaultService,\\n\\tphotoService services.PhotoService,\\n\\tdescriptionService services.DescriptionService,\\n) *UploadHandler {\\n\\treturn &UploadHandler{\\n\\t\\tvaultService:       vaultService,\\n\\t\\tphotoService:       photoService,\\n\\t\\tdescriptionService: descriptionService,\\n\\t}\\n}\\n\\n// UploadSingle handles single file upload\\n// @Summary Upload a single file\\n// @Description Upload a single file to the media vault\\n// @Tags upload\\n// @Accept multipart/form-data\\n// @Produce json\\n// @Param file formData file true \\\"File to upload\\\"\\n// @Param description formData string false \\\"File description\\\"\\n// @Param tags formData string false \\\"Comma-separated list of tags\\\"\\n// @Success 200 {object} models.Photo\\n// @Failure 400 {object} map[string]string\\n// @Failure 401 {object} map[string]string\\n// @Failure 500 {object} map[string]string\\n// @Router /vault/upload [post]\\nfunc (h *UploadHandler) UploadSingle(c *fiber.Ctx) error {\\n\\t// Get user ID from context\\n\\tuserID := c.Locals(\\\"userID\\\").(string)\\n\\n\\t// Check if the request contains a file\\n\\tfileHeader, err := c.FormFile(\\\"file\\\")\\n\\tif err != nil {\\n\\t\\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"No file uploaded: \\\" + err.Error(),\\n\\t\\t})\\n\\t}\\n\\n\\t// Get additional form data\\n\\tdescription := c.FormValue(\\\"description\\\", \\\"\\\")\\n\\ttags := c.FormValue(\\\"tags\\\", \\\"\\\")\\n\\n\\t// Check file size (max 10MB)\\n\\tif fileHeader.Size > 10<<20 {\\n\\t\\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"File too large. Maximum size is 10MB\\\",\\n\\t\\t})\\n\\t}\\n\\n\\t// Check file type\\n\\text := filepath.Ext(fileHeader.Filename)\\n\\tallowedTypes := map[string]bool{\\n\\t\\t\\\".jpg\\\":  true,\\n\\t\\t\\\".jpeg\\\": true,\\n\\t\\t\\\".png\\\":  true,\\n\\t\\t\\\".gif\\\":  true,\\n\\t\\t\\\".webp\\\": true,\\n\\t}\\n\\n\\tif !allowedTypes[ext] {\\n\\t\\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Invalid file type. Only JPG, JPEG, PNG, GIF, and WebP are allowed\\\",\\n\\t\\t})\\n\\t}\\n\\n\\t// Prepare metadata\\n\\tmetadata := make(map[string]interface{})\\n\\tif description != \\\"\\\" {\\n\\t\\tmetadata[\\\"description\\\"] = description\\n\\t}\\n\\tif tags != \\\"\\\" {\\n\\t\\tmetadata[\\\"tags\\\"] = tags\\n\\t}\\n\\n\\t// Upload the file\\n\\tphoto, err := h.photoService.UploadPhoto(c.Context(), userID, fileHeader, metadata)\\n\\tif err != nil {\\n\\t\\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Failed to upload file: \\\" + err.Error(),\\n\\t\\t})\\n\\t}\\n\\n\\treturn c.Status(fiber.StatusCreated).JSON(photo)\\n}\\n\\n// BulkUpload handles multiple file uploads\\n// @Summary Upload multiple files\\n// @Description Upload multiple files to the media vault\\n// @Tags upload\\n// @Accept multipart/form-data\\n// @Produce json\\n// @Param files formData []file true \\\"Files to upload\\\"\\n// @Param description formData string false \\\"Description for all files\\\"\\n// @Param tags formData string false \\\"Comma-separated list of tags for all files\\\"\\n// @Success 200 {array} models.Photo\\n// @Failure 400 {object} map[string]string\\n// @Failure 401 {object} map[string]string\\n// @Failure 500 {object} map[string]string\\n// @Router /vault/upload/bulk [post]\\nfunc (h *UploadHandler) BulkUpload(c *fiber.Ctx) error {\\n\\t// Get user ID from context\\n\\tuserID := c.Locals(\\\"userID\\\").(string)\\n\\n\\t// Parse the multipart form\\n\\tform, err := c.MultipartForm()\\n\\tif err != nil {\\n\\t\\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Failed to parse form: \\\" + err.Error(),\\n\\t\\t})\\n\\t}\\n\\n\\t// Get the files\\n\\tfiles := form.File[\\\"files\\\"]\\n\\tif len(files) == 0 {\\n\\t\\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"No files uploaded. Use the 'files' form field to upload multiple files.\\\",\\n\\t\\t})\\n\\t}\\n\\n\\t// Get additional form data\\n\\tdescription := c.FormValue(\\\"description\\\", \\\"\\\")\\n\\ttags := c.FormValue(\\\"tags\\\", \\\"\\\")\\n\\n\\t// Process each file\\n\\tvar uploadedPhotos []*models.Photo\\n\\tvar uploadErrors []string\\n\\n\\tfor _, fileHeader := range files {\\n\\t\\t// Check file size (max 10MB)\\n\\t\\tif fileHeader.Size > 10<<20 {\\n\\t\\t\\terrMsg := fmt.Sprintf(\\\"File '%s' is too large. Maximum size is 10MB\\\", fileHeader.Filename)\\n\\t\\t\\tuploadErrors = append(uploadErrors, errMsg)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t// Check file type\\n\\t\\text := filepath.Ext(fileHeader.Filename)\\n\\t\\tallowedTypes := map[string]bool{\\n\\t\\t\\t\\\".jpg\\\":  true,\\n\\t\\t\\t\\\".jpeg\\\": true,\\n\\t\\t\\t\\\".png\\\":  true,\\n\\t\\t\\t\\\".gif\\\":  true,\\n\\t\\t\\t\\\".webp\\\": true,\\n\\t\\t}\\n\\n\\t\\tif !allowedTypes[ext] {\\n\\t\\t\\terrMsg := fmt.Sprintf(\\\"File '%s' has an unsupported type. Only JPG, JPEG, PNG, GIF, and WebP are allowed\\\", fileHeader.Filename)\\n\\t\\t\\tuploadErrors = append(uploadErrors, errMsg)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t// Prepare metadata\\n\\t\\tmetadata := make(map[string]interface{})\\n\\t\\tif description != \\\"\\\" {\\n\\t\\t\\tmetadata[\\\"description\\\"] = description\\n\\t\\t}\\n\\t\\tif tags != \\\"\\\" {\\n\\t\\t\\tmetadata[\\\"tags\\\"] = tags\\n\\t\\t}\\n\\n\\t\\t// Upload the file\\n\\t\\tphoto, err := h.photoService.UploadPhoto(c.Context(), userID, fileHeader, metadata)\\n\\t\\tif err != nil {\\n\\t\\t\\terrMsg := fmt.Sprintf(\\\"Failed to upload file '%s': %v\\\", fileHeader.Filename, err)\\n\\t\\t\\tuploadErrors = append(uploadErrors, errMsg)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\tuploadedPhotos = append(uploadedPhotos, photo)\\n\\t}\\n\\n\\t// If no files were uploaded successfully, return an error\\n\\tif len(uploadedPhotos) == 0 {\\n\\t\\terrMsg := \\\"No files were uploaded successfully\\\"\\n\\t\\tif len(uploadErrors) > 0 {\\n\\t\\t\\terrMsg = strings.Join(uploadErrors, \\\"; \\\")\\n\\t\\t}\\n\\t\\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": errMsg,\\n\\t\\t})\\n\\t}\\n\\n\\t// If there were some errors but some files were uploaded successfully\\n\\tif len(uploadErrors) > 0 {\\n\\t\\t// We still return a 200 status but include the errors in the response\\n\\t\\treturn c.JSON(fiber.Map{\\n\\t\\t\\t\\\"photos\\\":       uploadedPhotos,\\n\\t\\t\\t\\\"error_count\\\":  len(uploadErrors),\\n\\t\\t\\t\\\"errors\\\":       uploadErrors,\\n\\t\\t\\t\\\"message\\\":      fmt.Sprintf(\\\"Uploaded %d files with %d errors\\\", len(uploadedPhotos), len(uploadErrors)),\\n\\t\\t})\\n\\t}\\n\\n\\treturn c.JSON(uploadedPhotos)\\n}\\n\\n// Helper function to get content type from file extension\\nfunc getContentType(ext string) string {\\n\\tcontentTypes := map[string]string{\\n\\t\\t\\\".jpg\\\":  \\\"image/jpeg\\\",\\n\\t\\t\\\".jpeg\\\": \\\"image/jpeg\\\",\\n\\t\\t\\\".png\\\":  \\\"image/png\\\",\\n\\t\\t\\\".gif\\\":  \\\"image/gif\\\",\\n\\t}\\n\\treturn contentTypes[ext]\\n}\\n\\n// Helper function to check if a file is an image\\nfunc isImage(contentType string) bool {\\n\\treturn contentType == \\\"image/jpeg\\\" || \\n\\t       contentType == \\\"image/png\\\" || \\n\\t       contentType == \\\"image/gif\\\"\\n}\\n\\n// Helper function to validate image file\\nfunc validateImageFile(fileHeader *multipart.FileHeader) error {\\n\\t// Open the file\\n\\tfile, err := fileHeader.Open()\\n\\tif err != nil {\\n\\t\\treturn err\\n\\t}\\n\\tdefer file.Close()\\n\\n\\t// Read the first 512 bytes to detect the content type\\n\\tbuffer := make([]byte, 512)\\n\\t_, err = file.Read(buffer)\\n\\tif err != nil {\\n\\t\\treturn err\\n\\t}\\n\\n\\t// Reset the file pointer\\n\\t_, err = file.Seek(0, 0)\\n\\tif err != nil {\\n\\t\\treturn err\\n\\t}\\n\\n\\t// Detect content type\\n\\tcontentType := http.DetectContentType(buffer)\\n\\tif !isImage(contentType) {\\n\\t\\treturn fmt.Errorf(\\\"invalid file type: %s\\\", contentType)\\n\\t}\\n\\n\\treturn nil\\n}\"\n                },\n                {\n                  \"name\": \"vault.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/handlers/vault.go\",\n                  \"size\": 967,\n                  \"content\": \"package handlers\\n\\nimport (\\n\\t\\\"github.com/gofiber/fiber/v2\\\"\\n\\t\\\"github.com/wronai/media-vault-backend/internal/services\\\"\\n)\\n\\ntype VaultHandler struct {\\n    vaultService *services.VaultService\\n}\\n\\nfunc NewVaultHandler(vaultService *services.VaultService) *VaultHandler {\\n    return &VaultHandler{vaultService: vaultService}\\n}\\n\\n// GetVault returns the user's vault contents\\n// @Summary Get vault contents\\n// @Description Get the authenticated user's vault contents\\n// @Tags vault\\n// @Produce json\\n// @Security BearerAuth\\n// @Success 200 {object} map[string]interface{}\\n// @Failure 401 {object} map[string]string\\n// @Router /vault [get]\\nfunc (h *VaultHandler) GetVault(c *fiber.Ctx) error {\\n\\t// Get user ID from context (set by auth middleware)\\n\\tuserID := c.Locals(\\\"userID\\\").(string)\\n\\n\\t// TODO: Implement actual vault retrieval logic\\n\\t// For now, return a mock response\\n\\treturn c.JSON(fiber.Map{\\n\\t\\t\\\"user_id\\\": userID,\\n\\t\\t\\\"items\\\":    []string{},\\n\\t\\t\\\"quota\\\":    \\\"0/1024 MB\\\",\\n\\t})\\n}\\n\"\n                }\n              ]\n            },\n            {\n              \"name\": \"models\",\n              \"type\": \"directory\",\n              \"path\": \"media-vault-backend/internal/models\",\n              \"children\": [\n                {\n                  \"name\": \"description.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/models/description.dart\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"description.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/models/description.go\",\n                  \"size\": 1054,\n                  \"content\": \"package models\\n\\nimport (\\n\\t\\\"time\\\"\\n)\\n\\n// Description represents a description for a media item\\ntype Description struct {\\n\\tID          string    `json:\\\"id\\\"`\\n\\tMediaID     string    `json:\\\"media_id\\\"`\\n\\tContent     string    `json:\\\"content\\\"`\\n\\tGeneratedBy string    `json:\\\"generated_by\\\"` // \\\"user\\\" or \\\"ai\\\"\\n\\tCreatedAt   time.Time `json:\\\"created_at\\\"`\\n\\tUpdatedAt   time.Time `json:\\\"updated_at\\\"`\\n}\\n\\n// NewDescription creates a new Description instance\\nfunc NewDescription(mediaID, content, generatedBy string) *Description {\\n\\tnow := time.Now()\\n\\treturn &Description{\\n\\t\\tID:          generateID(),\\n\\t\\tMediaID:     mediaID,\\n\\t\\tContent:     content,\\n\\t\\tGeneratedBy: generatedBy,\\n\\t\\tCreatedAt:   now,\\n\\t\\tUpdatedAt:   now,\\n\\t}\\n}\\n\\n// Update updates the description content\\nfunc (d *Description) Update(content string) {\\n\\td.Content = content\\n\\td.UpdatedAt = time.Now()\\n}\\n\\n// generateID generates a new unique ID\\nfunc generateID() string {\\n\\t// In a real implementation, you might want to use UUID or another unique ID generator\\n\\treturn \\\"desc_\\\" + time.Now().Format(\\\"20060102150405\\\")\\n}\"\n                },\n                {\n                  \"name\": \"media.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/models/media.go\",\n                  \"size\": 1624,\n                  \"content\": \"package models\\n\\nimport (\\n\\t\\\"time\\\"\\n)\\n\\n// Media represents a media file in the system\\ntype Media struct {\\n\\tID          string    `json:\\\"id\\\"`\\n\\tUserID      string    `json:\\\"user_id\\\"`\\n\\tTitle       string    `json:\\\"title\\\"`\\n\\tDescription string    `json:\\\"description,omitempty\\\"`\\n\\tURL         string    `json:\\\"url\\\"`\\n\\tThumbnailURL string    `json:\\\"thumbnail_url,omitempty\\\"`\\n\\tMIMEType    string    `json:\\\"mime_type\\\"`\\n\\tSize        int64     `json:\\\"size\\\"`\\n\\tWidth       int       `json:\\\"width,omitempty\\\"`\\n\\tHeight      int       `json:\\\"height,omitempty\\\"`\\n\\tIsPublic    bool      `json:\\\"is_public\\\"`\\n\\tCreatedAt   time.Time `json:\\\"created_at\\\"`\\n\\tUpdatedAt   time.Time `json:\\\"updated_at\\\"`\\n}\\n\\n// NewMedia creates a new Media instance\\nfunc NewMedia(userID, title, url, mimeType string, size int64) *Media {\\n\\tnow := time.Now()\\n\\treturn &Media{\\n\\t\\tID:        generateMediaID(),\\n\\t\\tUserID:    userID,\\n\\t\\tTitle:     title,\\n\\t\\tURL:       url,\\n\\t\\tMIMEType:  mimeType,\\n\\t\\tSize:      size,\\n\\t\\tIsPublic:  false,\\n\\t\\tCreatedAt: now,\\n\\t\\tUpdatedAt: now,\\n\\t}\\n}\\n\\n// Update updates the media metadata\\nfunc (m *Media) Update(updates map[string]interface{}) {\\n\\tif title, ok := updates[\\\"title\\\"].(string); ok && title != \\\"\\\" {\\n\\t\\tm.Title = title\\n\\t}\\n\\tif description, ok := updates[\\\"description\\\"].(string); ok {\\n\\t\\tm.Description = description\\n\\t}\\n\\tif isPublic, ok := updates[\\\"is_public\\\"].(bool); ok {\\n\\t\\tm.IsPublic = isPublic\\n\\t}\\n\\tm.UpdatedAt = time.Now()\\n}\\n\\n// generateMediaID generates a new unique media ID\\nfunc generateMediaID() string {\\n\\t// In a real implementation, you might want to use UUID or another unique ID generator\\n\\treturn \\\"media_\\\" + time.Now().Format(\\\"20060102150405\\\")\\n}\\n\"\n                },\n                {\n                  \"name\": \"nsfw_mobilenet.h5\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/models/nsfw_mobilenet.h5\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"nsfw_model.h5\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/models/nsfw_model.h5\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"photo.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/models/photo.dart\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"photo.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/models/photo.go\",\n                  \"size\": 4552,\n                  \"content\": \"package models\\n\\nimport \\\"time\\\"\\n\\n// Photo represents a photo in the vault\\ntype Photo struct {\\n    ID                string     `json:\\\"id\\\" db:\\\"id\\\"`\\n    UserID            string     `json:\\\"user_id\\\" db:\\\"user_id\\\"`\\n    PartnerID         *string    `json:\\\"partner_id,omitempty\\\" db:\\\"partner_id\\\"`\\n    Filename          string     `json:\\\"filename\\\" db:\\\"filename\\\"`\\n    OriginalName      string     `json:\\\"original_name\\\" db:\\\"original_name\\\"`\\n    FilePath          string     `json:\\\"file_path\\\" db:\\\"file_path\\\"`\\n    ThumbnailPath     *string    `json:\\\"thumbnail_path,omitempty\\\" db:\\\"thumbnail_path\\\"`\\n    FileSize          int64      `json:\\\"file_size\\\" db:\\\"file_size\\\"`\\n    MimeType          string     `json:\\\"mime_type\\\" db:\\\"mime_type\\\"`\\n    Width             *int       `json:\\\"width,omitempty\\\" db:\\\"width\\\"`\\n    Height            *int       `json:\\\"height,omitempty\\\" db:\\\"height\\\"`\\n    Hash              string     `json:\\\"hash\\\" db:\\\"hash\\\"`\\n    Description       *string    `json:\\\"description,omitempty\\\" db:\\\"description\\\"`\\n    AIDescription     *string    `json:\\\"ai_description,omitempty\\\" db:\\\"ai_description\\\"`\\n    Tags              *string    `json:\\\"tags,omitempty\\\" db:\\\"tags\\\"`\\n    AIConfidence      *float64   `json:\\\"ai_confidence,omitempty\\\" db:\\\"ai_confidence\\\"`\\n    IsNSFW            *bool      `json:\\\"is_nsfw,omitempty\\\" db:\\\"is_nsfw\\\"`\\n    NSFWConfidence    *float64   `json:\\\"nsfw_confidence,omitempty\\\" db:\\\"nsfw_confidence\\\"`\\n    ModerationStatus  string     `json:\\\"moderation_status\\\" db:\\\"moderation_status\\\"`\\n    ExifData          *string    `json:\\\"exif_data,omitempty\\\" db:\\\"exif_data\\\"`\\n    Location          *string    `json:\\\"location,omitempty\\\" db:\\\"location\\\"`\\n    CameraMake        *string    `json:\\\"camera_make,omitempty\\\" db:\\\"camera_make\\\"`\\n    CameraModel       *string    `json:\\\"camera_model,omitempty\\\" db:\\\"camera_model\\\"`\\n    TakenAt           *time.Time `json:\\\"taken_at,omitempty\\\" db:\\\"taken_at\\\"`\\n    IsShared          bool       `json:\\\"is_shared\\\" db:\\\"is_shared\\\"`\\n    SharedWith        []string   `json:\\\"shared_with,omitempty\\\"`\\n    ShareCount        int        `json:\\\"share_count\\\" db:\\\"share_count\\\"`\\n    ViewCount         int        `json:\\\"view_count\\\" db:\\\"view_count\\\"`\\n    CreatedAt         time.Time  `json:\\\"created_at\\\" db:\\\"created_at\\\"`\\n    UpdatedAt         time.Time  `json:\\\"updated_at\\\" db:\\\"updated_at\\\"`\\n    ProcessedAt       *time.Time `json:\\\"processed_at,omitempty\\\" db:\\\"processed_at\\\"`\\n}\\n\\n// PhotoSharing represents photo sharing permissions\\ntype PhotoSharing struct {\\n    ID          string     `json:\\\"id\\\" db:\\\"id\\\"`\\n    PhotoID     string     `json:\\\"photo_id\\\" db:\\\"photo_id\\\"`\\n    SharedBy    string     `json:\\\"shared_by\\\" db:\\\"shared_by\\\"`\\n    SharedWith  string     `json:\\\"shared_with\\\" db:\\\"shared_with\\\"`\\n    Permission  string     `json:\\\"permission\\\" db:\\\"permission\\\"`\\n    CreatedAt   time.Time  `json:\\\"created_at\\\" db:\\\"created_at\\\"`\\n    ExpiresAt   *time.Time `json:\\\"expires_at,omitempty\\\" db:\\\"expires_at\\\"`\\n}\\n\\n// PhotoAnalytics represents photo analytics data\\ntype PhotoAnalytics struct {\\n    PhotoID    string     `json:\\\"photo_id\\\" db:\\\"photo_id\\\"`\\n    Views      int        `json:\\\"views\\\" db:\\\"views\\\"`\\n    Downloads  int        `json:\\\"downloads\\\" db:\\\"downloads\\\"`\\n    Shares     int        `json:\\\"shares\\\" db:\\\"shares\\\"`\\n    LastViewed *time.Time `json:\\\"last_viewed,omitempty\\\" db:\\\"last_viewed\\\"`\\n    ViewerIPs  []string   `json:\\\"viewer_ips,omitempty\\\"`\\n    Countries  []string   `json:\\\"countries,omitempty\\\"`\\n}\\n\\n// BulkUploadRequest represents a bulk upload request\\ntype BulkUploadRequest struct {\\n    Files       []UploadedFile `json:\\\"files\\\"`\\n    DefaultTags string         `json:\\\"default_tags,omitempty\\\"`\\n    ShareWith   []string       `json:\\\"share_with,omitempty\\\"`\\n    AutoDescribe bool          `json:\\\"auto_describe\\\"`\\n}\\n\\n// UploadedFile represents a file in bulk upload\\ntype UploadedFile struct {\\n    Filename    string `json:\\\"filename\\\"`\\n    Data        []byte `json:\\\"data\\\"`\\n    Description string `json:\\\"description,omitempty\\\"`\\n    Tags        string `json:\\\"tags,omitempty\\\"`\\n}\\n\\n// BatchUpdateRequest represents batch description update\\ntype BatchUpdateRequest struct {\\n    PhotoIDs    []string `json:\\\"photo_ids\\\"`\\n    Description string   `json:\\\"description,omitempty\\\"`\\n    Tags        string   `json:\\\"tags,omitempty\\\"`\\n    Operation   string   `json:\\\"operation\\\"`\\n}\\n\\n// ShareRequest represents a photo sharing request\\ntype ShareRequest struct {\\n    PhotoIDs   []string   `json:\\\"photo_ids\\\"`\\n    ShareWith  []string   `json:\\\"share_with\\\"`\\n    Permission string     `json:\\\"permission\\\"`\\n    ExpiresAt  *time.Time `json:\\\"expires_at,omitempty\\\"`\\n    Message    string     `json:\\\"message,omitempty\\\"`\\n}\\n\"\n                },\n                {\n                  \"name\": \"user.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/models/user.dart\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"user.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/models/user.go\",\n                  \"size\": 1581,\n                  \"content\": \"package models\\n\\nimport \\\"time\\\"\\n\\n// User represents a user in the system\\ntype User struct {\\n    ID        string    `json:\\\"id\\\" db:\\\"id\\\"`\\n    Email     string    `json:\\\"email\\\" db:\\\"email\\\"`\\n    Username  string    `json:\\\"username\\\" db:\\\"username\\\"`\\n    FullName  string    `json:\\\"full_name,omitempty\\\" db:\\\"full_name\\\"`\\n    AvatarURL *string   `json:\\\"avatar_url,omitempty\\\" db:\\\"avatar_url\\\"`\\n    IsAdmin   bool      `json:\\\"is_admin\\\" db:\\\"is_admin\\\"`\\n    IsActive  bool      `json:\\\"is_active\\\" db:\\\"is_active\\\"`\\n    LastLogin *time.Time `json:\\\"last_login,omitempty\\\" db:\\\"last_login\\\"`\\n    CreatedAt time.Time `json:\\\"created_at\\\" db:\\\"created_at\\\"`\\n    UpdatedAt time.Time `json:\\\"updated_at\\\" db:\\\"updated_at\\\"`\\n}\\n\\n// UserSettings represents user preferences and settings\\ntype UserSettings struct {\\n    UserID         string    `json:\\\"user_id\\\" db:\\\"user_id\\\"`\\n    Theme          string    `json:\\\"theme\\\" db:\\\"theme\\\"`\\n    Notifications  bool      `json:\\\"notifications\\\" db:\\\"notifications\\\"`\\n    EmailAlerts    bool      `json:\\\"email_alerts\\\" db:\\\"email_alerts\\\"`\\n    StorageQuota   int64     `json:\\\"storage_quota\\\" db:\\\"storage_quota\\\"`\\n    StorageUsed    int64     `json:\\\"storage_used\\\" db:\\\"storage_used\\\"`\\n    LastBackup     *time.Time `json:\\\"last_backup,omitempty\\\" db:\\\"last_backup\\\"`\\n    AutoSave       bool      `json:\\\"auto_save\\\" db:\\\"auto_save\\\"`\\n    AutoTagging    bool      `json:\\\"auto_tagging\\\" db:\\\"auto_tagging\\\"`\\n    AutoCategorize bool      `json:\\\"auto_categorize\\\" db:\\\"auto_categorize\\\"`\\n    CreatedAt      time.Time `json:\\\"created_at\\\" db:\\\"created_at\\\"`\\n    UpdatedAt      time.Time `json:\\\"updated_at\\\" db:\\\"updated_at\\\"`\\n}\\n\"\n                },\n                {\n                  \"name\": \"vault_file.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/models/vault_file.dart\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"vault_file.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/models/vault_file.go\",\n                  \"size\": 731,\n                  \"content\": \"package models\\n\\nimport \\\"time\\\"\\n\\n// VaultFile represents a file in the vault\\ntype VaultFile struct {\\n    ID          string    `json:\\\"id\\\" db:\\\"id\\\"`\\n    UserID      string    `json:\\\"user_id\\\" db:\\\"user_id\\\"`\\n    Name        string    `json:\\\"name\\\" db:\\\"name\\\"`\\n    Path        string    `json:\\\"path\\\" db:\\\"path\\\"`\\n    Size        int64     `json:\\\"size\\\" db:\\\"size\\\"`\\n    MimeType    string    `json:\\\"mime_type\\\" db:\\\"mime_type\\\"`\\n    IsPublic    bool      `json:\\\"is_public\\\" db:\\\"is_public\\\"`\\n    IsEncrypted bool      `json:\\\"is_encrypted\\\" db:\\\"is_encrypted\\\"`\\n    Metadata    string    `json:\\\"metadata,omitempty\\\" db:\\\"metadata\\\"`\\n    CreatedAt   time.Time `json:\\\"created_at\\\" db:\\\"created_at\\\"`\\n    UpdatedAt   time.Time `json:\\\"updated_at\\\" db:\\\"updated_at\\\"`\\n}\\n\"\n                }\n              ]\n            },\n            {\n              \"name\": \"services\",\n              \"type\": \"directory\",\n              \"path\": \"media-vault-backend/internal/services\",\n              \"children\": [\n                {\n                  \"name\": \"auth_service.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/services/auth_service.dart\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"description_service.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/services/description_service.dart\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"description_service.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/services/description_service.go\",\n                  \"size\": 679,\n                  \"content\": \"package services\\n\\n// DescriptionService handles AI-generated descriptions for media\\n// TODO: Implement the description service functionality\\n\\n// DescriptionService provides methods for generating and managing descriptions\\ntype DescriptionService struct {\\n\\t// Add any dependencies here\\n}\\n\\n// NewDescriptionService creates a new DescriptionService\\nfunc NewDescriptionService() *DescriptionService {\\n\\treturn &DescriptionService{}\\n}\\n\\n// GenerateDescription generates a description for the given content\\nfunc (s *DescriptionService) GenerateDescription(content string) (string, error) {\\n\\t// TODO: Implement description generation\\n\\treturn \\\"Generated description for: \\\" + content, nil\\n}\"\n                },\n                {\n                  \"name\": \"media_vault_service.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/services/media_vault_service.dart\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"photo_service.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/services/photo_service.dart\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"photo_service.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/services/photo_service.go\",\n                  \"size\": 4721,\n                  \"content\": \"package services\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"database/sql\\\"\\n\\t\\\"mime/multipart\\\"\\n\\t\\\"time\\\"\\n\\n\\t\\\"github.com/valyala/fasthttp\\\"\\n\\t\\\"github.com/wronai/media-vault-backend/internal/models\\\"\\n)\\n\\ntype PhotoService struct {\\n\\tdb *sql.DB\\n}\\n\\nfunc NewPhotoService(db *sql.DB) *PhotoService {\\n\\treturn &PhotoService{db: db}\\n}\\n\\n// UploadPhoto handles photo upload\\nfunc (s *PhotoService) UploadPhoto(ctx context.Context, userID string, fileHeader *multipart.FileHeader, meta map[string]interface{}) (*models.Photo, error) {\\n\\t// TODO: Implement actual file upload and database record creation\\n\\treturn &models.Photo{\\n\\t\\tID:           \\\"generated-id\\\",\\n\\t\\tUserID:       userID,\\n\\t\\tFilename:     fileHeader.Filename,\\n\\t\\tOriginalName: fileHeader.Filename,\\n\\t\\tFileSize:     fileHeader.Size,\\n\\t\\tMimeType:     fileHeader.Header.Get(\\\"Content-Type\\\"),\\n\\t\\tCreatedAt:    time.Now(),\\n\\t\\tUpdatedAt:    time.Now(),\\n\\t}, nil\\n}\\n\\n// GetPhoto retrieves a photo by ID\\nfunc (s *PhotoService) GetPhoto(ctx *fasthttp.RequestCtx, photoID string) (*models.Photo, error) {\\n\\t// TODO: Implement actual database query\\n\\treturn &models.Photo{\\n\\t\\tID:           photoID,\\n\\t\\tUserID:       \\\"user-id\\\",\\n\\t\\tFilename:     \\\"example.jpg\\\",\\n\\t\\tOriginalName: \\\"example.jpg\\\",\\n\\t\\tFileSize:     1024,\\n\\t\\tMimeType:     \\\"image/jpeg\\\",\\n\\t\\tCreatedAt:    time.Now(),\\n\\t\\tUpdatedAt:    time.Now(),\\n\\t}, nil\\n}\\n\\n// ListPhotos lists photos with pagination and filtering\\nfunc (s *PhotoService) ListPhotos(ctx *fasthttp.RequestCtx, userID string, page, limit int) ([]*models.Photo, int, error) {\\n\\t// TODO: Implement actual database query with pagination\\n\\treturn []*models.Photo{}, 0, nil\\n}\\n\\n// UpdatePhoto updates a photo's metadata\\nfunc (s *PhotoService) UpdatePhoto(ctx *fasthttp.RequestCtx, photoID string, updates map[string]interface{}) (*models.Photo, error) {\\n\\t// TODO: Implement actual update logic\\n\\treturn &models.Photo{\\n\\t\\tID:           photoID,\\n\\t\\tUserID:       \\\"user-id\\\",\\n\\t\\tFilename:     \\\"updated.jpg\\\",\\n\\t\\tOriginalName: \\\"updated.jpg\\\",\\n\\t\\tFileSize:     1024,\\n\\t\\tMimeType:     \\\"image/jpeg\\\",\\n\\t\\tCreatedAt:    time.Now(),\\n\\t\\tUpdatedAt:    time.Now(),\\n\\t}, nil\\n}\\n\\n// DeletePhoto removes a photo\\nfunc (s *PhotoService) DeletePhoto(ctx *fasthttp.RequestCtx, photoID string) error {\\n\\t// TODO: Implement actual delete logic\\n\\treturn nil\\n}\\n\\n// GetThumbnail retrieves a photo's thumbnail\\nfunc (s *PhotoService) GetThumbnail(ctx *fasthttp.RequestCtx, photoID, size string) ([]byte, string, error) {\\n\\t// TODO: Implement thumbnail generation/retrieval\\n\\treturn []byte{}, \\\"image/jpeg\\\", nil\\n}\\n\\n// GenerateDescription generates an AI description for a photo\\nfunc (s *PhotoService) GenerateDescription(ctx *fasthttp.RequestCtx, photoID string) (string, error) {\\n\\t// TODO: Implement AI description generation\\n\\treturn \\\"Generated description for photo \\\" + photoID, nil\\n}\\n\\n// GetSharedWith gets the list of users a photo is shared with\\nfunc (s *PhotoService) GetSharedWith(ctx *fasthttp.RequestCtx, photoID string) ([]string, error) {\\n\\t// TODO: Implement sharing logic\\n\\treturn []string{}, nil\\n}\\n\\n// GetPartnerPhotos retrieves photos for a partner with pagination\\nfunc (s *PhotoService) GetPartnerPhotos(partnerID string, page, limit int, sortBy, sortOrder, search string) ([]*models.Photo, int, error) {\\n\\t// TODO: Implement partner photos retrieval\\n\\treturn []*models.Photo{}, 0, nil\\n}\\n\\n// GenerateAIDescription generates AI description for a photo\\nfunc (s *PhotoService) GenerateAIDescription(photoID string) (string, error) {\\n\\t// TODO: Implement AI description generation\\n\\treturn \\\"AI generated description for \\\" + photoID, nil\\n}\\n\\n// GetPhotoAnalytics retrieves analytics for a photo\\nfunc (s *PhotoService) GetPhotoAnalytics(photoID string) (*models.PhotoAnalytics, error) {\\n\\t// TODO: Implement photo analytics\\n\\treturn &models.PhotoAnalytics{\\n\\t\\tPhotoID:    photoID,\\n\\t\\tViews:      0,\\n\\t\\tDownloads:  0,\\n\\t\\tShares:     0,\\n\\t\\tLastViewed: nil,\\n\\t\\tViewerIPs:  []string{},\\n\\t\\tCountries:  []string{},\\n\\t}, nil\\n}\\n\\n// GetPartnerDashboard returns dashboard data for partner\\nfunc (s *PhotoService) GetPartnerDashboard(partnerID string) (map[string]interface{}, error) {\\n\\t// TODO: Implement partner dashboard data\\n\\treturn map[string]interface{}{\\n\\t\\t\\\"total_photos\\\":    0,\\n\\t\\t\\\"total_views\\\":    0,\\n\\t\\t\\\"total_downloads\\\": 0,\\n\\t\\t\\\"storage_used\\\":    \\\"0 MB\\\",\\n\\t\\t\\\"recent_photos\\\":  []interface{}{},\\n\\t}, nil\\n}\\n\\n// GetPartnerAnalytics returns comprehensive analytics for partner\\nfunc (s *PhotoService) GetPartnerAnalytics(partnerID string, from, to *time.Time) (map[string]interface{}, error) {\\n\\t// TODO: Implement partner analytics\\n\\treturn map[string]interface{}{\\n\\t\\t\\\"period\\\": map[string]interface{}{\\n\\t\\t\\t\\\"from\\\": from,\\n\\t\\t\\t\\\"to\\\":   to,\\n\\t\\t},\\n\\t\\t\\\"total_photos\\\":    0,\\n\\t\\t\\\"total_views\\\":    0,\\n\\t\\t\\\"total_downloads\\\": 0,\\n\\t\\t\\\"popular_photos\\\": []interface{}{},\\n\\t\\t\\\"activity\\\":       []interface{}{},\\n\\t}, nil\\n}\\n\"\n                },\n                {\n                  \"name\": \"sharing_service.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/services/sharing_service.go\",\n                  \"size\": 4366,\n                  \"content\": \"package services\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"database/sql\\\"\\n\\t\\\"errors\\\"\\n\\t\\\"time\\\"\\n\\n\\t\\\"github.com/google/uuid\\\"\\n)\\n\\n// Share represents a shared photo with permissions\\ntype Share struct {\\n\\tID          string    `json:\\\"id\\\"`\\n\\tPhotoID     string    `json:\\\"photo_id\\\"`\\n\\tSharedBy    string    `json:\\\"shared_by\\\"`\\n\\tSharedWith  string    `json:\\\"shared_with\\\"`\\n\\tPermission  string    `json:\\\"permission\\\"` // \\\"view\\\" or \\\"download\\\"\\n\\tExpiresAt   time.Time `json:\\\"expires_at,omitempty\\\"`\\n\\tCreatedAt   time.Time `json:\\\"created_at\\\"`\\n}\\n\\n// SharingService handles photo sharing operations\\ntype SharingService struct {\\n\\tdb *sql.DB\\n}\\n\\n// NewSharingService creates a new SharingService\\nfunc NewSharingService(db *sql.DB) *SharingService {\\n\\treturn &SharingService{\\n\\t\\tdb: db,\\n\\t}\\n}\\n\\n// SharePhoto shares a photo with another user\\nfunc (s *SharingService) SharePhoto(ctx context.Context, share *Share) error {\\n\\t// Validate input\\n\\tif share.PhotoID == \\\"\\\" || share.SharedBy == \\\"\\\" || share.SharedWith == \\\"\\\" {\\n\\t\\treturn errors.New(\\\"photo ID, shared_by, and shared_with are required\\\")\\n\\t}\\n\\n\\t// Set default permission if not provided\\n\\tif share.Permission == \\\"\\\" {\\n\\t\\tshare.Permission = \\\"view\\\"\\n\\t}\\n\\n\\t// Generate a new share ID if not provided\\n\\tif share.ID == \\\"\\\" {\\n\\t\\tshare.ID = uuid.New().String()\\n\\t}\\n\\n\\t// Set created at time\\n\\tshare.CreatedAt = time.Now()\\n\\n\\t// Insert the share record\\n\\t_, err := s.db.ExecContext(ctx, `\\n\\t\\tINSERT INTO photo_shares (id, photo_id, shared_by, shared_with, permission, expires_at, created_at)\\n\\t\\tVALUES ($1, $2, $3, $4, $5, $6, $7)\\n\\t`,\\n\\t\\tshare.ID,\\n\\t\\tshare.PhotoID,\\n\\t\\tshare.SharedBy,\\n\\t\\tshare.SharedWith,\\n\\t\\tshare.Permission,\\n\\t\\tshare.ExpiresAt,\\n\\t\\tshare.CreatedAt,\\n\\t)\\n\\n\\treturn err\\n}\\n\\n// GetShare retrieves a share by ID\\nfunc (s *SharingService) GetShare(ctx context.Context, shareID string) (*Share, error) {\\n\\tvar share Share\\n\\terr := s.db.QueryRowContext(ctx, `\\n\\t\\tSELECT id, photo_id, shared_by, shared_with, permission, expires_at, created_at\\n\\t\\tFROM photo_shares\\n\\t\\tWHERE id = $1\\n\\t`, shareID).Scan(\\n\\t\\t&share.ID,\\n\\t\\t&share.PhotoID,\\n\\t\\t&share.SharedBy,\\n\\t\\t&share.SharedWith,\\n\\t\\t&share.Permission,\\n\\t\\t&share.ExpiresAt,\\n\\t\\t&share.CreatedAt,\\n\\t)\\n\\n\\tif err != nil {\\n\\t\\tif err == sql.ErrNoRows {\\n\\t\\t\\treturn nil, errors.New(\\\"share not found\\\")\\n\\t\\t}\\n\\t\\treturn nil, err\\n\\t}\\n\\n\\treturn &share, nil\\n}\\n\\n// ListSharesForPhoto lists all shares for a specific photo\\nfunc (s *SharingService) ListSharesForPhoto(ctx context.Context, photoID string) ([]*Share, error) {\\n\\trows, err := s.db.QueryContext(ctx, `\\n\\t\\tSELECT id, photo_id, shared_by, shared_with, permission, expires_at, created_at\\n\\t\\tFROM photo_shares\\n\\t\\tWHERE photo_id = $1\\n\\t`, photoID)\\n\\tif err != nil {\\n\\t\\treturn nil, err\\n\\t}\\n\\tdefer rows.Close()\\n\\n\\tvar shares []*Share\\n\\tfor rows.Next() {\\n\\t\\tvar share Share\\n\\t\\tif err := rows.Scan(\\n\\t\\t\\t&share.ID,\\n\\t\\t\\t&share.PhotoID,\\n\\t\\t\\t&share.SharedBy,\\n\\t\\t\\t&share.SharedWith,\\n\\t\\t\\t&share.Permission,\\n\\t\\t\\t&share.ExpiresAt,\\n\\t\\t\\t&share.CreatedAt,\\n\\t\\t); err != nil {\\n\\t\\t\\treturn nil, err\\n\\t\\t}\\n\\t\\tshares = append(shares, &share)\\n\\t}\\n\\n\\tif err = rows.Err(); err != nil {\\n\\t\\treturn nil, err\\n\\t}\\n\\n\\treturn shares, nil\\n}\\n\\n// RevokeShare removes a share\\nfunc (s *SharingService) RevokeShare(ctx context.Context, shareID string) error {\\n\\tresult, err := s.db.ExecContext(ctx, `\\n\\t\\tDELETE FROM photo_shares\\n\\t\\tWHERE id = $1\\n\\t`, shareID)\\n\\n\\tif err != nil {\\n\\t\\treturn err\\n\\t}\\n\\n\\trowsAffected, err := result.RowsAffected()\\n\\tif err != nil {\\n\\t\\treturn err\\n\\t}\\n\\n\\tif rowsAffected == 0 {\\n\\t\\treturn errors.New(\\\"share not found\\\")\\n\\t}\\n\\n\\treturn nil\\n}\\n\\n// HasPermission checks if a user has permission to access a photo\\nfunc (s *SharingService) HasPermission(ctx context.Context, photoID, userID, requiredPermission string) (bool, error) {\\n\\t// Check if the user is the owner of the photo\\n\\tvar ownerID string\\n\\terr := s.db.QueryRowContext(ctx, `\\n\\t\\tSELECT user_id FROM photos WHERE id = $1\\n\\t`, photoID).Scan(&ownerID)\\n\\n\\tif err != nil {\\n\\t\\tif err == sql.ErrNoRows {\\n\\t\\t\\treturn false, errors.New(\\\"photo not found\\\")\\n\\t\\t}\\n\\t\\treturn false, err\\n\\t}\\n\\n\\t// If the user is the owner, they have all permissions\\n\\tif ownerID == userID {\\n\\t\\treturn true, nil\\n\\t}\\n\\n\\t// Check for an active share\\n\\tvar count int\\n\\terr = s.db.QueryRowContext(ctx, `\\n\\t\\tSELECT COUNT(*)\\n\\t\\tFROM photo_shares\\n\\t\\tWHERE photo_id = $1\\n\\t\\t  AND shared_with = $2\\n\\t\\t  AND (expires_at IS NULL OR expires_at > NOW())\\n\\t\\t  AND permission = $3\\n\\t`, photoID, userID, requiredPermission).Scan(&count)\\n\\n\\tif err != nil {\\n\\t\\treturn false, err\\n\\t}\\n\\n\\treturn count > 0, nil\\n}\"\n                },\n                {\n                  \"name\": \"vault_service.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/services/vault_service.go\",\n                  \"size\": 214,\n                  \"content\": \"package services\\n\\nimport (\\n\\t\\\"database/sql\\\"\\n)\\n\\ntype VaultService struct {\\n    db *sql.DB\\n}\\n\\nfunc NewVaultService(db *sql.DB) *VaultService {\\n    return &VaultService{db: db}\\n}\\n\\n// Add your VaultService methods here\\n\"\n                }\n              ]\n            },\n            {\n              \"name\": \"utils\",\n              \"type\": \"directory\",\n              \"path\": \"media-vault-backend/internal/utils\",\n              \"children\": [\n                {\n                  \"name\": \"constants.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/utils/constants.dart\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"image_processing.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/utils/image_processing.go\",\n                  \"size\": 635,\n                  \"content\": \"package utils\\n\\nimport (\\n\\t\\\"image\\\"\\n\\t\\\"io\\\"\\n)\\n\\n// ProcessImage processes an image and returns the processed image\\nfunc ProcessImage(r io.Reader) (image.Image, error) {\\n    // Implementation for image processing\\n    return nil, nil\\n}\\n\\n// GenerateThumbnail generates a thumbnail for the given image\\nfunc GenerateThumbnail(img image.Image, width, height int) (image.Image, error) {\\n    // Implementation for thumbnail generation\\n    return nil, nil\\n}\\n\\n// ConvertImage converts an image to the specified format\\nfunc ConvertImage(img image.Image, format string) ([]byte, error) {\\n    // Implementation for image conversion\\n    return nil, nil\\n}\\n\"\n                },\n                {\n                  \"name\": \"metadata.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/utils/metadata.go\",\n                  \"size\": 441,\n                  \"content\": \"package utils\\n\\n// Metadata represents file metadata\\ntype Metadata map[string]interface{}\\n\\n// ExtractMetadata extracts metadata from a file\\nfunc ExtractMetadata(filePath string) (Metadata, error) {\\n    // Implementation for metadata extraction\\n    return Metadata{}, nil\\n}\\n\\n// CleanMetadata removes sensitive information from metadata\\nfunc CleanMetadata(meta Metadata) Metadata {\\n    // Implementation for metadata cleaning\\n    return meta\\n}\\n\"\n                },\n                {\n                  \"name\": \"permissions.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/utils/permissions.dart\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"theme.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/utils/theme.dart\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"thumbnails.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/utils/thumbnails.go\",\n                  \"size\": 643,\n                  \"content\": \"package utils\\n\\nimport \\\"image\\\"\\n\\n// ThumbnailOptions contains options for thumbnail generation\\ntype ThumbnailOptions struct {\\n    Width   int\\n    Height  int\\n    Quality int\\n    Format  string\\n}\\n\\n// GenerateThumbnail generates a thumbnail for the given image\\nfunc GenerateThumbnail(img image.Image, opts ThumbnailOptions) ([]byte, error) {\\n    // Implementation for thumbnail generation\\n    return nil, nil\\n}\\n\\n// GenerateThumbnailFromBytes generates a thumbnail from image bytes\\nfunc GenerateThumbnailFromBytes(data []byte, opts ThumbnailOptions) ([]byte, error) {\\n    // Implementation for thumbnail generation from bytes\\n    return nil, nil\\n}\\n\"\n                },\n                {\n                  \"name\": \"validators.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend/internal/utils/validators.dart\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"name\": \"migrations\",\n          \"type\": \"directory\",\n          \"path\": \"media-vault-backend/migrations\",\n          \"children\": [\n            {\n              \"name\": \"001_initial.sql\",\n              \"type\": \"file\",\n              \"path\": \"media-vault-backend/migrations/001_initial.sql\",\n              \"size\": 0,\n              \"content\": \"\"\n            },\n            {\n              \"name\": \"002_photos.sql\",\n              \"type\": \"file\",\n              \"path\": \"media-vault-backend/migrations/002_photos.sql\",\n              \"size\": 0,\n              \"content\": \"\"\n            },\n            {\n              \"name\": \"003_descriptions.sql\",\n              \"type\": \"file\",\n              \"path\": \"media-vault-backend/migrations/003_descriptions.sql\",\n              \"size\": 0,\n              \"content\": \"\"\n            }\n          ]\n        },\n        {\n          \"name\": \"Dockerfile\",\n          \"type\": \"file\",\n          \"path\": \"media-vault-backend/Dockerfile\",\n          \"size\": 750,\n          \"content\": \"# Build stage\\nFROM golang:1.21-alpine AS builder\\n\\n# Set the working directory\\nWORKDIR /app\\n\\n# Copy go mod and sum files\\nCOPY go.mod go.sum ./\\n\\n# Download all dependencies\\nRUN go mod download\\n\\n# Copy the source code\\nCOPY . .\\n\\n# Tidy up the module dependencies\\nRUN go mod tidy\\n\\n# Build the application\\nRUN CGO_ENABLED=0 GOOS=linux go build -o media-vault-api ./cmd\\n\\n# Final stage\\nFROM alpine:3.18\\n\\n# Install required packages\\nRUN apk --no-cache add ca-certificates\\n\\n# Set the working directory\\nWORKDIR /app\\n\\n# Copy the binary from builder\\nCOPY --from=builder /app/media-vault-api .\\n\\n# Copy migrations\\nCOPY --from=builder /app/migrations ./migrations\\n\\n# Expose the application port\\nEXPOSE 8080\\n\\n# Command to run the application\\nCMD [\\\"./media-vault-api\\\"]\"\n        },\n        {\n          \"name\": \"Dockerfile.bak\",\n          \"type\": \"file\",\n          \"path\": \"media-vault-backend/Dockerfile.bak\",\n          \"size\": 846,\n          \"content\": \"# Build stage\\nFROM golang:1.21-alpine AS builder\\n\\n# Set the working directory\\nWORKDIR /app\\n\\n# Copy go mod and sum files\\nCOPY go.mod go.sum ./\\n\\n# Initialize the Go module if not already done\\nRUN go mod init media-vault 2>/dev/null || true\\n\\n# Download all dependencies\\nRUN go mod download\\n\\n# Copy the source code\\nCOPY . .\\n\\n# Tidy up the module dependencies\\nRUN go mod tidy\\n\\n# Build the application\\nRUN CGO_ENABLED=0 GOOS=linux go build -o media-vault-api ./cmd\\n\\n# Final stage\\nFROM alpine:3.18\\n\\n# Install required packages\\nRUN apk --no-cache add ca-certificates\\n\\n# Set the working directory\\nWORKDIR /app\\n\\n# Copy the binary from builder\\nCOPY --from=builder /app/media-vault-api .\\n\\n# Copy migrations\\nCOPY --from=builder /app/migrations ./migrations\\n\\n# Expose the application port\\nEXPOSE 8080\\n\\n# Command to run the application\\nCMD [\\\"./media-vault-api\\\"]\"\n        },\n        {\n          \"name\": \"go.mod\",\n          \"type\": \"file\",\n          \"path\": \"media-vault-backend/go.mod\",\n          \"size\": 708,\n          \"content\": \"module github.com/wronai/media-vault-backend\\n\\ngo 1.21\\n\\nrequire (\\n    github.com/gofiber/fiber/v2 v2.50.0\\n    github.com/golang-jwt/jwt/v5 v5.0.0\\n    github.com/google/uuid v1.3.1\\n    github.com/mattn/go-sqlite3 v1.14.17\\n)\\n\\nrequire (\\n    github.com/andybalholm/brotli v1.0.5 // indirect\\n    github.com/klauspost/compress v1.16.7 // indirect\\n    github.com/mattn/go-colorable v0.1.13 // indirect\\n    github.com/mattn/go-isatty v0.0.19 // indirect\\n    github.com/mattn/go-runewidth v0.0.15 // indirect\\n    github.com/rivo/uniseg v0.2.0 // indirect\\n    github.com/valyala/bytebufferpool v1.0.0 // indirect\\n    github.com/valyala/fasthttp v1.50.0 // indirect\\n    github.com/valyala/tcplisten v1.0.0 // indirect\\n)\\n\"\n        },\n        {\n          \"name\": \"go.sum\",\n          \"type\": \"file\",\n          \"path\": \"media-vault-backend/go.sum\",\n          \"size\": 0,\n          \"content\": \"\"\n        },\n        {\n          \"name\": \"TODO.md\",\n          \"type\": \"file\",\n          \"path\": \"media-vault-backend/TODO.md\",\n          \"size\": 296,\n          \"content\": \"# Media Vault Backend - TODO\\n\\n## High Priority\\n- [ ] Implement REST API endpoints\\n- [ ] Set up database models\\n- [ ] Add authentication middleware\\n\\n## Medium Priority\\n- [ ] Implement file storage service\\n- [ ] Add API documentation\\n- [ ] Set up logging\\n\\n## Completed\\n- [x] Project initialization\\n\"\n        }\n      ]\n    },\n    {\n      \"name\": \"media-vault-backend-backup-20250530110754\",\n      \"type\": \"directory\",\n      \"path\": \"media-vault-backend-backup-20250530110754\",\n      \"children\": [\n        {\n          \"name\": \"cmd\",\n          \"type\": \"directory\",\n          \"path\": \"media-vault-backend-backup-20250530110754/cmd\",\n          \"children\": [\n            {\n              \"name\": \"main.go\",\n              \"type\": \"file\",\n              \"path\": \"media-vault-backend-backup-20250530110754/cmd/main.go\",\n              \"size\": 30526,\n              \"content\": \"// media-vault-backend/cmd/main.go\\npackage main\\n\\nimport (\\n\\t\\\"log\\\"\\n\\t\\\"os\\\"\\n\\n\\t\\\"github.com/gofiber/fiber/v2\\\"\\n\\t\\\"github.com/gofiber/fiber/v2/middleware/cors\\\"\\n\\t\\\"github.com/gofiber/fiber/v2/middleware/logger\\\"\\n\\t\\\"github.com/gofiber/fiber/v2/middleware/monitor\\\"\\n\\t\\\"github.com/gofiber/fiber/v2/middleware/recover\\\"\\n\\n\\t\\\"media-vault/internal/auth\\\"\\n\\t\\\"media-vault/internal/database\\\"\\n\\t\\\"media-vault/internal/handlers\\\"\\n\\t\\\"media-vault/internal/services\\\"\\n)\\n\\nfunc main() {\\n\\t// Initialize database\\n\\tdb, err := database.Initialize()\\n\\tif err != nil {\\n\\t\\tlog.Fatal(\\\"Failed to initialize database:\\\", err)\\n\\t}\\n\\tdefer db.Close()\\n\\n\\t// Initialize Keycloak authentication\\n\\tif os.Getenv(\\\"OAUTH2_ENABLED\\\") == \\\"true\\\" {\\n\\t\\tif err := auth.InitKeycloak(); err != nil {\\n\\t\\t\\tlog.Printf(\\\"Warning: Failed to initialize Keycloak: %v\\\", err)\\n\\t\\t\\tlog.Println(\\\"Running without authentication\\\")\\n\\t\\t} else {\\n\\t\\t\\tlog.Println(\\\"Keycloak authentication enabled\\\")\\n\\t\\t}\\n\\t}\\n\\n\\t// Initialize services\\n\\tvaultService := services.NewVaultService(db)\\n\\tphotoService := services.NewPhotoService(db)\\n\\tdescriptionService := services.NewDescriptionService()\\n\\tsharingService := services.NewSharingService(db)\\n\\n\\t// Initialize handlers\\n\\tvaultHandler := handlers.NewVaultHandler(vaultService, photoService)\\n\\tadminHandler := handlers.NewAdminHandler(vaultService)\\n\\tpartnerHandler := handlers.NewPartnerHandler(photoService, sharingService)\\n\\tuploadHandler := handlers.NewUploadHandler(vaultService, photoService, descriptionService)\\n\\n\\t// Fiber app configuration\\n\\tapp := fiber.New(fiber.Config{\\n\\t\\tBodyLimit:    100 * 1024 * 1024, // 100MB\\n\\t\\tReadTimeout:  0,\\n\\t\\tWriteTimeout: 0,\\n\\t\\tErrorHandler: func(ctx *fiber.Ctx, err error) error {\\n\\t\\t\\tcode := fiber.StatusInternalServerError\\n\\t\\t\\tif e, ok := err.(*fiber.Error); ok {\\n\\t\\t\\t\\tcode = e.Code\\n\\t\\t\\t}\\n\\t\\t\\treturn ctx.Status(code).JSON(fiber.Map{\\n\\t\\t\\t\\t\\\"error\\\": err.Error(),\\n\\t\\t\\t\\t\\\"code\\\":  code,\\n\\t\\t\\t})\\n\\t\\t},\\n\\t})\\n\\n\\t// Middleware\\n\\tapp.Use(recover.New())\\n\\tapp.Use(logger.New(logger.Config{\\n\\t\\tFormat: \\\"[${time}] ${status} - ${method} ${path} (${latency})\\\\n\\\",\\n\\t}))\\n\\tapp.Use(cors.New(cors.Config{\\n\\t\\tAllowOrigins:     os.Getenv(\\\"CORS_ORIGINS\\\"),\\n\\t\\tAllowMethods:     \\\"GET,POST,HEAD,PUT,DELETE,PATCH,OPTIONS\\\",\\n\\t\\tAllowHeaders:     \\\"Origin,Content-Type,Accept,Authorization,X-Requested-With\\\",\\n\\t\\tAllowCredentials: true,\\n\\t}))\\n\\n\\t// Health and monitoring endpoints\\n\\tapp.Get(\\\"/health\\\", func(c *fiber.Ctx) error {\\n\\t\\treturn c.JSON(fiber.Map{\\n\\t\\t\\t\\\"status\\\":  \\\"ok\\\",\\n\\t\\t\\t\\\"service\\\": \\\"media-vault-api\\\",\\n\\t\\t\\t\\\"version\\\": os.Getenv(\\\"VAULT_VERSION\\\"),\\n\\t\\t})\\n\\t})\\n\\tapp.Get(\\\"/metrics\\\", monitor.New(monitor.Config{Title: \\\"Media Vault Metrics\\\"}))\\n\\n\\t// Public routes\\n\\tapp.Get(\\\"/api/vault/info\\\", vaultHandler.GetVaultInfo)\\n\\n\\t// Protected routes\\n\\tapi := app.Group(\\\"/api\\\")\\n\\tapi.Use(auth.JWTMiddleware())\\n\\n\\t// User endpoints\\n\\tapi.Get(\\\"/user\\\", auth.GetUserInfo)\\n\\tapi.Get(\\\"/user/profile\\\", vaultHandler.GetUserProfile)\\n\\tapi.Put(\\\"/user/profile\\\", vaultHandler.UpdateUserProfile)\\n\\n\\t// Vault endpoints (User level)\\n\\tvault := api.Group(\\\"/vault\\\")\\n\\tvault.Post(\\\"/upload\\\", uploadHandler.UploadSingle)\\n\\tvault.Get(\\\"/files\\\", vaultHandler.GetUserFiles)\\n\\tvault.Get(\\\"/files/:id\\\", vaultHandler.GetFile)\\n\\tvault.Put(\\\"/files/:id\\\", vaultHandler.UpdateFile)\\n\\tvault.Delete(\\\"/files/:id\\\", vaultHandler.DeleteFile)\\n\\tvault.Get(\\\"/files/:id/download\\\", vaultHandler.DownloadFile)\\n\\tvault.Get(\\\"/files/:id/thumbnail\\\", vaultHandler.GetThumbnail)\\n\\tvault.Get(\\\"/search\\\", vaultHandler.SearchFiles)\\n\\tvault.Get(\\\"/stats\\\", vaultHandler.GetUserStats)\\n\\n\\t// Photo management endpoints\\n\\tphotos := api.Group(\\\"/photos\\\")\\n\\tphotos.Get(\\\"/\\\", vaultHandler.GetUserPhotos)\\n\\tphotos.Get(\\\"/:id\\\", vaultHandler.GetPhoto)\\n\\tphotos.Put(\\\"/:id/description\\\", vaultHandler.UpdatePhotoDescription)\\n\\tphotos.Post(\\\"/:id/generate-description\\\", vaultHandler.GenerateDescription)\\n\\tphotos.Get(\\\"/:id/shared-with\\\", vaultHandler.GetPhotoSharing)\\n\\n\\t// Partner endpoints (requires partner role)\\n\\tpartner := api.Group(\\\"/partner\\\")\\n\\tpartner.Use(auth.RequireRole(\\\"vault-partner\\\"))\\n\\tpartner.Post(\\\"/bulk-upload\\\", partnerHandler.BulkUpload)\\n\\tpartner.Get(\\\"/photos\\\", partnerHandler.GetPartnerPhotos)\\n\\tpartner.Put(\\\"/photos/batch-update\\\", partnerHandler.BatchUpdateDescriptions)\\n\\tpartner.Post(\\\"/photos/batch-share\\\", partnerHandler.BatchSharePhotos)\\n\\tpartner.Get(\\\"/photos/:id/analytics\\\", partnerHandler.GetPhotoAnalytics)\\n\\tpartner.Get(\\\"/dashboard\\\", partnerHandler.GetPartnerDashboard)\\n\\tpartner.Get(\\\"/analytics\\\", partnerHandler.GetPartnerAnalytics)\\n\\n\\t// Admin endpoints (requires admin role)\\n\\tadmin := api.Group(\\\"/admin\\\")\\n\\tadmin.Use(auth.RequireRole(\\\"vault-admin\\\"))\\n\\tadmin.Get(\\\"/users\\\", adminHandler.GetUsers)\\n\\tadmin.Get(\\\"/users/:id\\\", adminHandler.GetUser)\\n\\tadmin.Put(\\\"/users/:id\\\", adminHandler.UpdateUser)\\n\\tadmin.Delete(\\\"/users/:id\\\", adminHandler.DeleteUser)\\n\\tadmin.Get(\\\"/users/:id/files\\\", adminHandler.GetUserFiles)\\n\\tadmin.Get(\\\"/system/stats\\\", adminHandler.GetSystemStats)\\n\\tadmin.Get(\\\"/system/health\\\", adminHandler.GetSystemHealth)\\n\\tadmin.Get(\\\"/content/flagged\\\", adminHandler.GetFlaggedContent)\\n\\tadmin.Put(\\\"/content/:id/moderate\\\", adminHandler.ModerateContent)\\n\\tadmin.Get(\\\"/audit-logs\\\", adminHandler.GetAuditLogs)\\n\\n\\t// Start server\\n\\tport := os.Getenv(\\\"PORT\\\")\\n\\tif port == \\\"\\\" {\\n\\t\\tport = \\\"8080\\\"\\n\\t}\\n\\n\\tlog.Printf(\\\"Media Vault API starting on port %s\\\", port)\\n\\tlog.Printf(\\\"Vault Name: %s\\\", os.Getenv(\\\"VAULT_NAME\\\"))\\n\\tlog.Printf(\\\"Environment: %s\\\", os.Getenv(\\\"ENVIRONMENT\\\"))\\n\\n\\tlog.Fatal(app.Listen(\\\":\\\" + port))\\n}\\n\\n---\\n\\n// media-vault-backend/internal/models/photo.go\\npackage models\\n\\nimport (\\n\\t\\\"time\\\"\\n)\\n\\n// Photo represents a photo in the vault\\ntype Photo struct {\\n\\tID            string    `json:\\\"id\\\" db:\\\"id\\\"`\\n\\tUserID        string    `json:\\\"user_id\\\" db:\\\"user_id\\\"`\\n\\tPartnerID     *string   `json:\\\"partner_id,omitempty\\\" db:\\\"partner_id\\\"`\\n\\tFilename      string    `json:\\\"filename\\\" db:\\\"filename\\\"`\\n\\tOriginalName  string    `json:\\\"original_name\\\" db:\\\"original_name\\\"`\\n\\tFilePath      string    `json:\\\"file_path\\\" db:\\\"file_path\\\"`\\n\\tThumbnailPath *string   `json:\\\"thumbnail_path,omitempty\\\" db:\\\"thumbnail_path\\\"`\\n\\tFileSize      int64     `json:\\\"file_size\\\" db:\\\"file_size\\\"`\\n\\tMimeType      string    `json:\\\"mime_type\\\" db:\\\"mime_type\\\"`\\n\\tWidth         *int      `json:\\\"width,omitempty\\\" db:\\\"width\\\"`\\n\\tHeight        *int      `json:\\\"height,omitempty\\\" db:\\\"height\\\"`\\n\\tHash          string    `json:\\\"hash\\\" db:\\\"hash\\\"`\\n\\n\\t// AI Generated Content\\n\\tDescription         *string `json:\\\"description,omitempty\\\" db:\\\"description\\\"`\\n\\tAIDescription       *string `json:\\\"ai_description,omitempty\\\" db:\\\"ai_description\\\"`\\n\\tTags               *string `json:\\\"tags,omitempty\\\" db:\\\"tags\\\"`\\n\\tAIConfidence       *float64 `json:\\\"ai_confidence,omitempty\\\" db:\\\"ai_confidence\\\"`\\n\\n\\t// Content Moderation\\n\\tIsNSFW             *bool    `json:\\\"is_nsfw,omitempty\\\" db:\\\"is_nsfw\\\"`\\n\\tNSFWConfidence     *float64 `json:\\\"nsfw_confidence,omitempty\\\" db:\\\"nsfw_confidence\\\"`\\n\\tModerationStatus   string   `json:\\\"moderation_status\\\" db:\\\"moderation_status\\\"` // pending, approved, rejected\\n\\n\\t// Metadata\\n\\tExifData           *string `json:\\\"exif_data,omitempty\\\" db:\\\"exif_data\\\"`\\n\\tLocation           *string `json:\\\"location,omitempty\\\" db:\\\"location\\\"`\\n\\tCameraMake         *string `json:\\\"camera_make,omitempty\\\" db:\\\"camera_make\\\"`\\n\\tCameraModel        *string `json:\\\"camera_model,omitempty\\\" db:\\\"camera_model\\\"`\\n\\tTakenAt            *time.Time `json:\\\"taken_at,omitempty\\\" db:\\\"taken_at\\\"`\\n\\n\\t// Sharing\\n\\tIsShared           bool     `json:\\\"is_shared\\\" db:\\\"is_shared\\\"`\\n\\tSharedWith         []string `json:\\\"shared_with,omitempty\\\"`\\n\\tShareCount         int      `json:\\\"share_count\\\" db:\\\"share_count\\\"`\\n\\tViewCount          int      `json:\\\"view_count\\\" db:\\\"view_count\\\"`\\n\\n\\t// Timestamps\\n\\tCreatedAt          time.Time  `json:\\\"created_at\\\" db:\\\"created_at\\\"`\\n\\tUpdatedAt          time.Time  `json:\\\"updated_at\\\" db:\\\"updated_at\\\"`\\n\\tProcessedAt        *time.Time `json:\\\"processed_at,omitempty\\\" db:\\\"processed_at\\\"`\\n}\\n\\n// PhotoSharing represents photo sharing permissions\\ntype PhotoSharing struct {\\n\\tID        string    `json:\\\"id\\\" db:\\\"id\\\"`\\n\\tPhotoID   string    `json:\\\"photo_id\\\" db:\\\"photo_id\\\"`\\n\\tSharedBy  string    `json:\\\"shared_by\\\" db:\\\"shared_by\\\"`\\n\\tSharedWith string   `json:\\\"shared_with\\\" db:\\\"shared_with\\\"`\\n\\tPermission string   `json:\\\"permission\\\" db:\\\"permission\\\"` // view, download\\n\\tCreatedAt time.Time `json:\\\"created_at\\\" db:\\\"created_at\\\"`\\n\\tExpiresAt *time.Time `json:\\\"expires_at,omitempty\\\" db:\\\"expires_at\\\"`\\n}\\n\\n// PhotoAnalytics represents photo analytics data\\ntype PhotoAnalytics struct {\\n\\tPhotoID     string    `json:\\\"photo_id\\\" db:\\\"photo_id\\\"`\\n\\tViews       int       `json:\\\"views\\\" db:\\\"views\\\"`\\n\\tDownloads   int       `json:\\\"downloads\\\" db:\\\"downloads\\\"`\\n\\tShares      int       `json:\\\"shares\\\" db:\\\"shares\\\"`\\n\\tLastViewed  *time.Time `json:\\\"last_viewed,omitempty\\\" db:\\\"last_viewed\\\"`\\n\\tViewerIPs   []string  `json:\\\"viewer_ips,omitempty\\\"`\\n\\tCountries   []string  `json:\\\"countries,omitempty\\\"`\\n}\\n\\n// BulkUploadRequest represents a bulk upload request\\ntype BulkUploadRequest struct {\\n\\tFiles       []UploadedFile `json:\\\"files\\\"`\\n\\tDefaultTags string         `json:\\\"default_tags,omitempty\\\"`\\n\\tShareWith   []string       `json:\\\"share_with,omitempty\\\"`\\n\\tAutoDescribe bool          `json:\\\"auto_describe\\\"`\\n}\\n\\n// UploadedFile represents a file in bulk upload\\ntype UploadedFile struct {\\n\\tFilename    string `json:\\\"filename\\\"`\\n\\tData        []byte `json:\\\"data\\\"`\\n\\tDescription string `json:\\\"description,omitempty\\\"`\\n\\tTags        string `json:\\\"tags,omitempty\\\"`\\n}\\n\\n// BatchUpdateRequest represents batch description update\\ntype BatchUpdateRequest struct {\\n\\tPhotoIDs    []string `json:\\\"photo_ids\\\"`\\n\\tDescription string   `json:\\\"description,omitempty\\\"`\\n\\tTags        string   `json:\\\"tags,omitempty\\\"`\\n\\tOperation   string   `json:\\\"operation\\\"` // replace, append, prepend\\n}\\n\\n// ShareRequest represents a photo sharing request\\ntype ShareRequest struct {\\n\\tPhotoIDs   []string   `json:\\\"photo_ids\\\"`\\n\\tShareWith  []string   `json:\\\"share_with\\\"`\\n\\tPermission string     `json:\\\"permission\\\"`\\n\\tExpiresAt  *time.Time `json:\\\"expires_at,omitempty\\\"`\\n\\tMessage    string     `json:\\\"message,omitempty\\\"`\\n}\\n\\n---\\n\\n// media-vault-backend/internal/handlers/partner.go\\npackage handlers\\n\\nimport (\\n\\t\\\"encoding/json\\\"\\n\\t\\\"fmt\\\"\\n\\t\\\"log\\\"\\n\\t\\\"strconv\\\"\\n\\t\\\"strings\\\"\\n\\t\\\"time\\\"\\n\\n\\t\\\"github.com/gofiber/fiber/v2\\\"\\n\\t\\\"media-vault/internal/auth\\\"\\n\\t\\\"media-vault/internal/models\\\"\\n\\t\\\"media-vault/internal/services\\\"\\n)\\n\\ntype PartnerHandler struct {\\n\\tphotoService   *services.PhotoService\\n\\tsharingService *services.SharingService\\n}\\n\\nfunc NewPartnerHandler(photoService *services.PhotoService, sharingService *services.SharingService) *PartnerHandler {\\n\\treturn &PartnerHandler{\\n\\t\\tphotoService:   photoService,\\n\\t\\tsharingService: sharingService,\\n\\t}\\n}\\n\\n// BulkUpload handles bulk photo upload for partners\\nfunc (h *PartnerHandler) BulkUpload(c *fiber.Ctx) error {\\n\\tuser := c.Locals(\\\"user\\\").(*auth.KeycloakClaims)\\n\\n\\t// Parse multipart form\\n\\tform, err := c.MultipartForm()\\n\\tif err != nil {\\n\\t\\treturn c.Status(400).JSON(fiber.Map{\\\"error\\\": \\\"Failed to parse form data\\\"})\\n\\t}\\n\\n\\tfiles := form.File[\\\"files\\\"]\\n\\tif len(files) == 0 {\\n\\t\\treturn c.Status(400).JSON(fiber.Map{\\\"error\\\": \\\"No files provided\\\"})\\n\\t}\\n\\n\\t// Get optional parameters\\n\\tdefaultTags := c.FormValue(\\\"default_tags\\\", \\\"\\\")\\n\\tautoDescribe := c.FormValue(\\\"auto_describe\\\", \\\"false\\\") == \\\"true\\\"\\n\\tshareWithStr := c.FormValue(\\\"share_with\\\", \\\"\\\")\\n\\n\\tvar shareWith []string\\n\\tif shareWithStr != \\\"\\\" {\\n\\t\\tshareWith = strings.Split(shareWithStr, \\\",\\\")\\n\\t}\\n\\n\\tvar uploadResults []map[string]interface{}\\n\\tvar successCount, errorCount int\\n\\n\\t// Process each file\\n\\tfor i, file := range files {\\n\\t\\tlog.Printf(\\\"Processing file %d/%d: %s\\\", i+1, len(files), file.Filename)\\n\\n\\t\\t// Upload file\\n\\t\\tphoto, err := h.photoService.CreatePhotoFromUpload(file, user.Subject, &user.Subject)\\n\\t\\tif err != nil {\\n\\t\\t\\terrorCount++\\n\\t\\t\\tuploadResults = append(uploadResults, map[string]interface{}{\\n\\t\\t\\t\\t\\\"filename\\\": file.Filename,\\n\\t\\t\\t\\t\\\"status\\\":   \\\"error\\\",\\n\\t\\t\\t\\t\\\"error\\\":    err.Error(),\\n\\t\\t\\t})\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t// Set default tags if provided\\n\\t\\tif defaultTags != \\\"\\\" {\\n\\t\\t\\tphoto.Tags = &defaultTags\\n\\t\\t}\\n\\n\\t\\t// Generate AI description if requested\\n\\t\\tif autoDescribe {\\n\\t\\t\\tif description, err := h.photoService.GenerateAIDescription(photo.ID); err == nil {\\n\\t\\t\\t\\tphoto.AIDescription = &description\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Update photo with additional data\\n\\t\\tif err := h.photoService.UpdatePhoto(photo); err != nil {\\n\\t\\t\\tlog.Printf(\\\"Failed to update photo %s: %v\\\", photo.ID, err)\\n\\t\\t}\\n\\n\\t\\t// Share with specified users\\n\\t\\tif len(shareWith) > 0 {\\n\\t\\t\\tshareRequest := &models.ShareRequest{\\n\\t\\t\\t\\tPhotoIDs:   []string{photo.ID},\\n\\t\\t\\t\\tShareWith:  shareWith,\\n\\t\\t\\t\\tPermission: \\\"view\\\",\\n\\t\\t\\t}\\n\\t\\t\\tif err := h.sharingService.SharePhotos(user.Subject, shareRequest); err != nil {\\n\\t\\t\\t\\tlog.Printf(\\\"Failed to share photo %s: %v\\\", photo.ID, err)\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tsuccessCount++\\n\\t\\tuploadResults = append(uploadResults, map[string]interface{}{\\n\\t\\t\\t\\\"filename\\\": file.Filename,\\n\\t\\t\\t\\\"status\\\":   \\\"success\\\",\\n\\t\\t\\t\\\"photo_id\\\": photo.ID,\\n\\t\\t\\t\\\"size\\\":     photo.FileSize,\\n\\t\\t})\\n\\t}\\n\\n\\treturn c.JSON(fiber.Map{\\n\\t\\t\\\"message\\\":       \\\"Bulk upload completed\\\",\\n\\t\\t\\\"total_files\\\":   len(files),\\n\\t\\t\\\"success_count\\\": successCount,\\n\\t\\t\\\"error_count\\\":   errorCount,\\n\\t\\t\\\"results\\\":       uploadResults,\\n\\t})\\n}\\n\\n// GetPartnerPhotos returns photos uploaded by the partner\\nfunc (h *PartnerHandler) GetPartnerPhotos(c *fiber.Ctx) error {\\n\\tuser := c.Locals(\\\"user\\\").(*auth.KeycloakClaims)\\n\\n\\t// Parse query parameters\\n\\tpage, _ := strconv.Atoi(c.Query(\\\"page\\\", \\\"1\\\"))\\n\\tlimit, _ := strconv.Atoi(c.Query(\\\"limit\\\", \\\"20\\\"))\\n\\tsortBy := c.Query(\\\"sort\\\", \\\"created_at\\\")\\n\\tsortOrder := c.Query(\\\"order\\\", \\\"desc\\\")\\n\\tsearch := c.Query(\\\"search\\\", \\\"\\\")\\n\\n\\tphotos, total, err := h.photoService.GetPartnerPhotos(user.Subject, page, limit, sortBy, sortOrder, search)\\n\\tif err != nil {\\n\\t\\treturn c.Status(500).JSON(fiber.Map{\\\"error\\\": \\\"Failed to get photos\\\"})\\n\\t}\\n\\n\\treturn c.JSON(fiber.Map{\\n\\t\\t\\\"photos\\\": photos,\\n\\t\\t\\\"pagination\\\": fiber.Map{\\n\\t\\t\\t\\\"page\\\":        page,\\n\\t\\t\\t\\\"limit\\\":       limit,\\n\\t\\t\\t\\\"total\\\":       total,\\n\\t\\t\\t\\\"total_pages\\\": (total + limit - 1) / limit,\\n\\t\\t},\\n\\t})\\n}\\n\\n// BatchUpdateDescriptions updates descriptions for multiple photos\\nfunc (h *PartnerHandler) BatchUpdateDescriptions(c *fiber.Ctx) error {\\n\\tuser := c.Locals(\\\"user\\\").(*auth.KeycloakClaims)\\n\\n\\tvar request models.BatchUpdateRequest\\n\\tif err := c.BodyParser(&request); err != nil {\\n\\t\\treturn c.Status(400).JSON(fiber.Map{\\\"error\\\": \\\"Invalid request body\\\"})\\n\\t}\\n\\n\\tif len(request.PhotoIDs) == 0 {\\n\\t\\treturn c.Status(400).JSON(fiber.Map{\\\"error\\\": \\\"No photo IDs provided\\\"})\\n\\t}\\n\\n\\tvar updatedCount int\\n\\tvar errors []string\\n\\n\\tfor _, photoID := range request.PhotoIDs {\\n\\t\\t// Verify partner owns the photo\\n\\t\\tphoto, err := h.photoService.GetPhoto(photoID)\\n\\t\\tif err != nil {\\n\\t\\t\\terrors = append(errors, fmt.Sprintf(\\\"Photo %s not found\\\", photoID))\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\tif photo.PartnerID == nil || *photo.PartnerID != user.Subject {\\n\\t\\t\\terrors = append(errors, fmt.Sprintf(\\\"No permission for photo %s\\\", photoID))\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t// Update description based on operation\\n\\t\\tswitch request.Operation {\\n\\t\\tcase \\\"replace\\\":\\n\\t\\t\\tphoto.Description = &request.Description\\n\\t\\t\\tif request.Tags != \\\"\\\" {\\n\\t\\t\\t\\tphoto.Tags = &request.Tags\\n\\t\\t\\t}\\n\\t\\tcase \\\"append\\\":\\n\\t\\t\\tif photo.Description != nil {\\n\\t\\t\\t\\tnewDesc := *photo.Description + \\\" \\\" + request.Description\\n\\t\\t\\t\\tphoto.Description = &newDesc\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tphoto.Description = &request.Description\\n\\t\\t\\t}\\n\\t\\tcase \\\"prepend\\\":\\n\\t\\t\\tif photo.Description != nil {\\n\\t\\t\\t\\tnewDesc := request.Description + \\\" \\\" + *photo.Description\\n\\t\\t\\t\\tphoto.Description = &newDesc\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tphoto.Description = &request.Description\\n\\t\\t\\t}\\n\\t\\tdefault:\\n\\t\\t\\tphoto.Description = &request.Description\\n\\t\\t}\\n\\n\\t\\tif err := h.photoService.UpdatePhoto(photo); err != nil {\\n\\t\\t\\terrors = append(errors, fmt.Sprintf(\\\"Failed to update photo %s: %v\\\", photoID, err))\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\tupdatedCount++\\n\\t}\\n\\n\\treturn c.JSON(fiber.Map{\\n\\t\\t\\\"message\\\":       \\\"Batch update completed\\\",\\n\\t\\t\\\"updated_count\\\": updatedCount,\\n\\t\\t\\\"total_count\\\":   len(request.PhotoIDs),\\n\\t\\t\\\"errors\\\":        errors,\\n\\t})\\n}\\n\\n// BatchSharePhotos shares multiple photos with users\\nfunc (h *PartnerHandler) BatchSharePhotos(c *fiber.Ctx) error {\\n\\tuser := c.Locals(\\\"user\\\").(*auth.KeycloakClaims)\\n\\n\\tvar request models.ShareRequest\\n\\tif err := c.BodyParser(&request); err != nil {\\n\\t\\treturn c.Status(400).JSON(fiber.Map{\\\"error\\\": \\\"Invalid request body\\\"})\\n\\t}\\n\\n\\tif len(request.PhotoIDs) == 0 {\\n\\t\\treturn c.Status(400).JSON(fiber.Map{\\\"error\\\": \\\"No photo IDs provided\\\"})\\n\\t}\\n\\n\\tif len(request.ShareWith) == 0 {\\n\\t\\treturn c.Status(400).JSON(fiber.Map{\\\"error\\\": \\\"No users to share with\\\"})\\n\\t}\\n\\n\\t// Verify partner owns all photos\\n\\tfor _, photoID := range request.PhotoIDs {\\n\\t\\tphoto, err := h.photoService.GetPhoto(photoID)\\n\\t\\tif err != nil {\\n\\t\\t\\treturn c.Status(404).JSON(fiber.Map{\\\"error\\\": fmt.Sprintf(\\\"Photo %s not found\\\", photoID)})\\n\\t\\t}\\n\\n\\t\\tif photo.PartnerID == nil || *photo.PartnerID != user.Subject {\\n\\t\\t\\treturn c.Status(403).JSON(fiber.Map{\\\"error\\\": fmt.Sprintf(\\\"No permission for photo %s\\\", photoID)})\\n\\t\\t}\\n\\t}\\n\\n\\t// Share photos\\n\\tif err := h.sharingService.SharePhotos(user.Subject, &request); err != nil {\\n\\t\\treturn c.Status(500).JSON(fiber.Map{\\\"error\\\": \\\"Failed to share photos\\\"})\\n\\t}\\n\\n\\treturn c.JSON(fiber.Map{\\n\\t\\t\\\"message\\\":     \\\"Photos shared successfully\\\",\\n\\t\\t\\\"photo_count\\\": len(request.PhotoIDs),\\n\\t\\t\\\"user_count\\\":  len(request.ShareWith),\\n\\t})\\n}\\n\\n// GetPhotoAnalytics returns analytics for a specific photo\\nfunc (h *PartnerHandler) GetPhotoAnalytics(c *fiber.Ctx) error {\\n\\tuser := c.Locals(\\\"user\\\").(*auth.KeycloakClaims)\\n\\tphotoID := c.Params(\\\"id\\\")\\n\\n\\t// Verify partner owns the photo\\n\\tphoto, err := h.photoService.GetPhoto(photoID)\\n\\tif err != nil {\\n\\t\\treturn c.Status(404).JSON(fiber.Map{\\\"error\\\": \\\"Photo not found\\\"})\\n\\t}\\n\\n\\tif photo.PartnerID == nil || *photo.PartnerID != user.Subject {\\n\\t\\treturn c.Status(403).JSON(fiber.Map{\\\"error\\\": \\\"Permission denied\\\"})\\n\\t}\\n\\n\\tanalytics, err := h.photoService.GetPhotoAnalytics(photoID)\\n\\tif err != nil {\\n\\t\\treturn c.Status(500).JSON(fiber.Map{\\\"error\\\": \\\"Failed to get analytics\\\"})\\n\\t}\\n\\n\\treturn c.JSON(analytics)\\n}\\n\\n// GetPartnerDashboard returns dashboard data for partner\\nfunc (h *PartnerHandler) GetPartnerDashboard(c *fiber.Ctx) error {\\n\\tuser := c.Locals(\\\"user\\\").(*auth.KeycloakClaims)\\n\\n\\tdashboard, err := h.photoService.GetPartnerDashboard(user.Subject)\\n\\tif err != nil {\\n\\t\\treturn c.Status(500).JSON(fiber.Map{\\\"error\\\": \\\"Failed to get dashboard data\\\"})\\n\\t}\\n\\n\\treturn c.JSON(dashboard)\\n}\\n\\n// GetPartnerAnalytics returns comprehensive analytics for partner\\nfunc (h *PartnerHandler) GetPartnerAnalytics(c *fiber.Ctx) error {\\n\\tuser := c.Locals(\\\"user\\\").(*auth.KeycloakClaims)\\n\\n\\t// Parse date range\\n\\tfromStr := c.Query(\\\"from\\\", \\\"\\\")\\n\\ttoStr := c.Query(\\\"to\\\", \\\"\\\")\\n\\n\\tvar from, to *time.Time\\n\\tif fromStr != \\\"\\\" {\\n\\t\\tif parsedFrom, err := time.Parse(\\\"2006-01-02\\\", fromStr); err == nil {\\n\\t\\t\\tfrom = &parsedFrom\\n\\t\\t}\\n\\t}\\n\\tif toStr != \\\"\\\" {\\n\\t\\tif parsedTo, err := time.Parse(\\\"2006-01-02\\\", toStr); err == nil {\\n\\t\\t\\tto = &parsedTo\\n\\t\\t}\\n\\t}\\n\\n\\tanalytics, err := h.photoService.GetPartnerAnalytics(user.Subject, from, to)\\n\\tif err != nil {\\n\\t\\treturn c.Status(500).JSON(fiber.Map{\\\"error\\\": \\\"Failed to get analytics\\\"})\\n\\t}\\n\\n\\treturn c.JSON(analytics)\\n}\\n\\n---\\n\\n// media-vault-backend/internal/services/photo_service.go\\npackage services\\n\\nimport (\\n\\t\\\"crypto/md5\\\"\\n\\t\\\"database/sql\\\"\\n\\t\\\"fmt\\\"\\n\\t\\\"image\\\"\\n\\t_ \\\"image/jpeg\\\"\\n\\t_ \\\"image/png\\\"\\n\\t\\\"io\\\"\\n\\t\\\"mime/multipart\\\"\\n\\t\\\"os\\\"\\n\\t\\\"path/filepath\\\"\\n\\t\\\"time\\\"\\n\\n\\t\\\"github.com/google/uuid\\\"\\n\\t\\\"media-vault/internal/models\\\"\\n\\t\\\"media-vault/internal/utils\\\"\\n)\\n\\ntype PhotoService struct {\\n\\tdb *sql.DB\\n}\\n\\nfunc NewPhotoService(db *sql.DB) *PhotoService {\\n\\treturn &PhotoService{db: db}\\n}\\n\\n// CreatePhotoFromUpload creates a photo record from uploaded file\\nfunc (s *PhotoService) CreatePhotoFromUpload(fileHeader *multipart.FileHeader, userID string, partnerID *string) (*models.Photo, error) {\\n\\t// Open uploaded file\\n\\tfile, err := fileHeader.Open()\\n\\tif err != nil {\\n\\t\\treturn nil, fmt.Errorf(\\\"failed to open uploaded file: %v\\\", err)\\n\\t}\\n\\tdefer file.Close()\\n\\n\\t// Generate unique filename\\n\\tphotoID := uuid.New().String()\\n\\text := filepath.Ext(fileHeader.Filename)\\n\\tfilename := photoID + ext\\n\\n\\t// Create upload directory if not exists\\n\\tuploadDir := os.Getenv(\\\"UPLOAD_PATH\\\")\\n\\tif uploadDir == \\\"\\\" {\\n\\t\\tuploadDir = \\\"./uploads\\\"\\n\\t}\\n\\n\\toriginalDir := filepath.Join(uploadDir, \\\"originals\\\")\\n\\tif err := os.MkdirAll(originalDir, 0755); err != nil {\\n\\t\\treturn nil, fmt.Errorf(\\\"failed to create upload directory: %v\\\", err)\\n\\t}\\n\\n\\t// Save file\\n\\tfilePath := filepath.Join(originalDir, filename)\\n\\tdst, err := os.Create(filePath)\\n\\tif err != nil {\\n\\t\\treturn nil, fmt.Errorf(\\\"failed to create file: %v\\\", err)\\n\\t}\\n\\tdefer dst.Close()\\n\\n\\t// Copy file and calculate hash\\n\\tfile.Seek(0, 0) // Reset file pointer\\n\\thasher := md5.New()\\n\\twriter := io.MultiWriter(dst, hasher)\\n\\n\\tif _, err := io.Copy(writer, file); err != nil {\\n\\t\\treturn nil, fmt.Errorf(\\\"failed to save file: %v\\\", err)\\n\\t}\\n\\n\\thash := fmt.Sprintf(\\\"%x\\\", hasher.Sum(nil))\\n\\n\\t// Get image dimensions\\n\\tfile.Seek(0, 0)\\n\\tvar width, height *int\\n\\tif img, _, err := image.Decode(file); err == nil {\\n\\t\\tbounds := img.Bounds()\\n\\t\\tw, h := bounds.Dx(), bounds.Dy()\\n\\t\\twidth, height = &w, &h\\n\\t}\\n\\n\\t// Generate thumbnail\\n\\tthumbnailPath, err := utils.GenerateThumbnail(filePath, photoID)\\n\\tif err != nil {\\n\\t\\t// Log error but don't fail upload\\n\\t\\tfmt.Printf(\\\"Failed to generate thumbnail for %s: %v\\\\n\\\", photoID, err)\\n\\t}\\n\\n\\t// Extract EXIF data\\n\\texifData, err := utils.ExtractEXIF(filePath)\\n\\tif err != nil {\\n\\t\\t// Log error but don't fail upload\\n\\t\\tfmt.Printf(\\\"Failed to extract EXIF for %s: %v\\\\n\\\", photoID, err)\\n\\t}\\n\\n\\t// Create photo record\\n\\tphoto := &models.Photo{\\n\\t\\tID:               photoID,\\n\\t\\tUserID:           userID,\\n\\t\\tPartnerID:        partnerID,\\n\\t\\tFilename:         filename,\\n\\t\\tOriginalName:     fileHeader.Filename,\\n\\t\\tFilePath:         filePath,\\n\\t\\tThumbnailPath:    thumbnailPath,\\n\\t\\tFileSize:         fileHeader.Size,\\n\\t\\tMimeType:         fileHeader.Header.Get(\\\"Content-Type\\\"),\\n\\t\\tWidth:            width,\\n\\t\\tHeight:           height,\\n\\t\\tHash:             hash,\\n\\t\\tModerationStatus: \\\"pending\\\",\\n\\t\\tIsShared:         false,\\n\\t\\tShareCount:       0,\\n\\t\\tViewCount:        0,\\n\\t\\tCreatedAt:        time.Now(),\\n\\t\\tUpdatedAt:        time.Now(),\\n\\t\\tExifData:         exifData,\\n\\t}\\n\\n\\t// Save to database\\n\\tquery := `\\n\\t\\tINSERT INTO photos (\\n\\t\\t\\tid, user_id, partner_id, filename, original_name, file_path,\\n\\t\\t\\tthumbnail_path, file_size, mime_type, width, height, hash,\\n\\t\\t\\tmoderation_status, is_shared, share_count, view_count,\\n\\t\\t\\tcreated_at, updated_at, exif_data\\n\\t\\t) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\\n\\t`\\n\\n\\t_, err = s.db.Exec(query,\\n\\t\\tphoto.ID, photo.UserID, photo.PartnerID, photo.Filename,\\n\\t\\tphoto.OriginalName, photo.FilePath, photo.ThumbnailPath,\\n\\t\\tphoto.FileSize, photo.MimeType, photo.Width, photo.Height,\\n\\t\\tphoto.Hash, photo.ModerationStatus, photo.IsShared,\\n\\t\\tphoto.ShareCount, photo.ViewCount, photo.CreatedAt,\\n\\t\\tphoto.UpdatedAt, photo.ExifData,\\n\\t)\\n\\n\\tif err != nil {\\n\\t\\t// Clean up uploaded file on database error\\n\\t\\tos.Remove(filePath)\\n\\t\\tif thumbnailPath != nil {\\n\\t\\t\\tos.Remove(*thumbnailPath)\\n\\t\\t}\\n\\t\\treturn nil, fmt.Errorf(\\\"failed to save photo to database: %v\\\", err)\\n\\t}\\n\\n\\treturn photo, nil\\n}\\n\\n// GetPhoto retrieves a photo by ID\\nfunc (s *PhotoService) GetPhoto(photoID string) (*models.Photo, error) {\\n\\tquery := `\\n\\t\\tSELECT id, user_id, partner_id, filename, original_name, file_path,\\n\\t\\t\\t   thumbnail_path, file_size, mime_type, width, height, hash,\\n\\t\\t\\t   description, ai_description, tags, ai_confidence,\\n\\t\\t\\t   is_nsfw, nsfw_confidence, moderation_status,\\n\\t\\t\\t   exif_data, location, camera_make, camera_model, taken_at,\\n\\t\\t\\t   is_shared, share_count, view_count,\\n\\t\\t\\t   created_at, updated_at, processed_at\\n\\t\\tFROM photos WHERE id = ?\\n\\t`\\n\\n\\tphoto := &models.Photo{}\\n\\terr := s.db.QueryRow(query, photoID).Scan(\\n\\t\\t&photo.ID, &photo.UserID, &photo.PartnerID, &photo.Filename,\\n\\t\\t&photo.OriginalName, &photo.FilePath, &photo.ThumbnailPath,\\n\\t\\t&photo.FileSize, &photo.MimeType, &photo.Width, &photo.Height,\\n\\t\\t&photo.Hash, &photo.Description, &photo.AIDescription,\\n\\t\\t&photo.Tags, &photo.AIConfidence, &photo.IsNSFW,\\n\\t\\t&photo.NSFWConfidence, &photo.ModerationStatus, &photo.ExifData,\\n\\t\\t&photo.Location, &photo.CameraMake, &photo.CameraModel,\\n\\t\\t&photo.TakenAt, &photo.IsShared, &photo.ShareCount,\\n\\t\\t&photo.ViewCount, &photo.CreatedAt, &photo.UpdatedAt,\\n\\t\\t&photo.ProcessedAt,\\n\\t)\\n\\n\\tif err != nil {\\n\\t\\tif err == sql.ErrNoRows {\\n\\t\\t\\treturn nil, fmt.Errorf(\\\"photo not found\\\")\\n\\t\\t}\\n\\t\\treturn nil, fmt.Errorf(\\\"failed to get photo: %v\\\", err)\\n\\t}\\n\\n\\treturn photo, nil\\n}\\n\\n// UpdatePhoto updates a photo record\\nfunc (s *PhotoService) UpdatePhoto(photo *models.Photo) error {\\n\\tquery := `\\n\\t\\tUPDATE photos SET\\n\\t\\t\\tdescription = ?, ai_description = ?, tags = ?, ai_confidence = ?,\\n\\t\\t\\tis_nsfw = ?, nsfw_confidence = ?, moderation_status = ?,\\n\\t\\t\\tlocation = ?, camera_make = ?, camera_model = ?, taken_at = ?,\\n\\t\\t\\tis_shared = ?, share_count = ?, view_count = ?,\\n\\t\\t\\tupdated_at = ?, processed_at = ?\\n\\t\\tWHERE id = ?\\n\\t`\\n\\n\\tphoto.UpdatedAt = time.Now()\\n\\n\\t_, err := s.db.Exec(query,\\n\\t\\tphoto.Description, photo.AIDescription, photo.Tags, photo.AIConfidence,\\n\\t\\tphoto.IsNSFW, photo.NSFWConfidence, photo.ModerationStatus,\\n\\t\\tphoto.Location, photo.CameraMake, photo.CameraModel, photo.TakenAt,\\n\\t\\tphoto.IsShared, photo.ShareCount, photo.ViewCount,\\n\\t\\tphoto.UpdatedAt, photo.ProcessedAt, photo.ID,\\n\\t)\\n\\n\\treturn err\\n}\\n\\n// GetPartnerPhotos retrieves photos for a partner with pagination\\nfunc (s *PhotoService) GetPartnerPhotos(partnerID string, page, limit int, sortBy, sortOrder, search string) ([]*models.Photo, int, error) {\\n\\toffset := (page - 1) * limit\\n\\n\\t// Build WHERE clause\\n\\twhereClause := \\\"WHERE partner_id = ?\\\"\\n\\targs := []interface{}{partnerID}\\n\\n\\tif search != \\\"\\\" {\\n\\t\\twhereClause += \\\" AND (original_name LIKE ? OR description LIKE ? OR tags LIKE ?)\\\"\\n\\t\\tsearchPattern := \\\"%\\\" + search + \\\"%\\\"\\n\\t\\targs = append(args, searchPattern, searchPattern, searchPattern)\\n\\t}\\n\\n\\t// Validate sort parameters\\n\\tallowedSorts := map[string]bool{\\n\\t\\t\\\"created_at\\\": true, \\\"updated_at\\\": true, \\\"original_name\\\": true,\\n\\t\\t\\\"file_size\\\": true, \\\"view_count\\\": true, \\\"share_count\\\": true,\\n\\t}\\n\\tif !allowedSorts[sortBy] {\\n\\t\\tsortBy = \\\"created_at\\\"\\n\\t}\\n\\tif sortOrder != \\\"asc\\\" && sortOrder != \\\"desc\\\" {\\n\\t\\tsortOrder = \\\"desc\\\"\\n\\t}\\n\\n\\t// Count total\\n\\tcountQuery := \\\"SELECT COUNT(*) FROM photos \\\" + whereClause\\n\\tvar total int\\n\\terr := s.db.QueryRow(countQuery, args...).Scan(&total)\\n\\tif err != nil {\\n\\t\\treturn nil, 0, fmt.Errorf(\\\"failed to count photos: %v\\\", err)\\n\\t}\\n\\n\\t// Get photos\\n\\tquery := fmt.Sprintf(`\\n\\t\\tSELECT id, user_id, partner_id, filename, original_name, file_path,\\n\\t\\t\\t   thumbnail_path, file_size, mime_type, width, height,\\n\\t\\t\\t   description, ai_description, tags, is_nsfw, moderation_status,\\n\\t\\t\\t   is_shared, share_count, view_count, created_at, updated_at\\n\\t\\tFROM photos %s\\n\\t\\tORDER BY %s %s\\n\\t\\tLIMIT ? OFFSET ?\\n\\t`, whereClause, sortBy, sortOrder)\\n\\n\\targs = append(args, limit, offset)\\n\\trows, err := s.db.Query(query, args...)\\n\\tif err != nil {\\n\\t\\treturn nil, 0, fmt.Errorf(\\\"failed to query photos: %v\\\", err)\\n\\t}\\n\\tdefer rows.Close()\\n\\n\\tvar photos []*models.Photo\\n\\tfor rows.Next() {\\n\\t\\tphoto := &models.Photo{}\\n\\t\\terr := rows.Scan(\\n\\t\\t\\t&photo.ID, &photo.UserID, &photo.PartnerID, &photo.Filename,\\n\\t\\t\\t&photo.OriginalName, &photo.FilePath, &photo.ThumbnailPath,\\n\\t\\t\\t&photo.FileSize, &photo.MimeType, &photo.Width, &photo.Height,\\n\\t\\t\\t&photo.Description, &photo.AIDescription, &photo.Tags,\\n\\t\\t\\t&photo.IsNSFW, &photo.ModerationStatus, &photo.IsShared,\\n\\t\\t\\t&photo.ShareCount, &photo.ViewCount, &photo.CreatedAt, &photo.UpdatedAt,\\n\\t\\t)\\n\\t\\tif err != nil {\\n\\t\\t\\treturn nil, 0, fmt.Errorf(\\\"failed to scan photo: %v\\\", err)\\n\\t\\t}\\n\\t\\tphotos = append(photos, photo)\\n\\t}\\n\\n\\treturn photos, total, nil\\n}\\n\\n// GenerateAIDescription generates AI description for a photo\\nfunc (s *PhotoService) GenerateAIDescription(photoID string) (string, error) {\\n\\t// This would integrate with AI service (OpenAI, Google Vision, etc.)\\n\\t// For now, return a placeholder\\n\\treturn \\\"AI-generated description for photo \\\" + photoID, nil\\n}\\n\\n// GetPhotoAnalytics retrieves analytics for a photo\\nfunc (s *PhotoService) GetPhotoAnalytics(photoID string) (*models.PhotoAnalytics, error) {\\n\\tquery := `\\n\\t\\tSELECT photo_id, views, downloads, shares, last_viewed\\n\\t\\tFROM photo_analytics WHERE photo_id = ?\\n\\t`\\n\\n\\tanalytics := &models.PhotoAnalytics{}\\n\\terr := s.db.QueryRow(query, photoID).Scan(\\n\\t\\t&analytics.PhotoID, &analytics.Views, &analytics.Downloads,\\n\\t\\t&analytics.Shares, &analytics.LastViewed,\\n\\t)\\n\\n\\tif err != nil {\\n\\t\\tif err == sql.ErrNoRows {\\n\\t\\t\\t// Create default analytics if not exists\\n\\t\\t\\tanalytics = &models.PhotoAnalytics{\\n\\t\\t\\t\\tPhotoID:   photoID,\\n\\t\\t\\t\\tViews:     0,\\n\\t\\t\\t\\tDownloads: 0,\\n\\t\\t\\t\\tShares:    0,\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\treturn nil, fmt.Errorf(\\\"failed to get analytics: %v\\\", err)\\n\\t\\t}\\n\\t}\\n\\n\\treturn analytics, nil\\n}\\n\\n// GetPartnerDashboard returns dashboard data for partner\\nfunc (s *PhotoService) GetPartnerDashboard(partnerID string) (map[string]interface{}, error) {\\n\\tdashboard := make(map[string]interface{})\\n\\n\\t// Total photos\\n\\tvar totalPhotos int\\n\\terr := s.db.QueryRow(\\\"SELECT COUNT(*) FROM photos WHERE partner_id = ?\\\", partnerID).Scan(&totalPhotos)\\n\\tif err != nil {\\n\\t\\treturn nil, err\\n\\t}\\n\\n\\t// Total views\\n\\tvar totalViews int\\n\\terr = s.db.QueryRow(\\\"SELECT COALESCE(SUM(view_count), 0) FROM photos WHERE partner_id = ?\\\", partnerID).Scan(&totalViews)\\n\\tif err != nil {\\n\\t\\treturn nil, err\\n\\t}\\n\\n\\t// Total shares\\n\\tvar totalShares int\\n\\terr = s.db.QueryRow(\\\"SELECT COALESCE(SUM(share_count), 0) FROM photos WHERE partner_id = ?\\\", partnerID).Scan(&totalShares)\\n\\tif err != nil {\\n\\t\\treturn nil, err\\n\\t}\\n\\n\\t// Recent uploads (last 7 days)\\n\\tvar recentUploads int\\n\\terr = s.db.QueryRow(`\\n\\t\\tSELECT COUNT(*) FROM photos\\n\\t\\tWHERE partner_id = ? AND created_at > datetime('now', '-7 days')\\n\\t`, partnerID).Scan(&recentUploads)\\n\\tif err != nil {\\n\\t\\treturn nil, err\\n\\t}\\n\\n\\tdashboard[\\\"total_photos\\\"] = totalPhotos\\n\\tdashboard[\\\"total_views\\\"] = totalViews\\n\\tdashboard[\\\"total_shares\\\"] = totalShares\\n\\tdashboard[\\\"recent_uploads\\\"] = recentUploads\\n\\n\\treturn dashboard, nil\\n}\\n\\n// GetPartnerAnalytics returns comprehensive analytics for partner\\nfunc (s *PhotoService) GetPartnerAnalytics(partnerID string, from, to *time.Time) (map[string]interface{}, error) {\\n\\tanalytics := make(map[string]interface{})\\n\\n\\t// Build date filter\\n\\tdateFilter := \\\"\\\"\\n\\targs := []interface{}{partnerID}\\n\\tif from != nil && to != nil {\\n\\t\\tdateFilter = \\\" AND created_at BETWEEN ? AND ?\\\"\\n\\t\\targs = append(args, from, to)\\n\\t}\\n\\n\\t// Upload trends (daily)\\n\\tquery := fmt.Sprintf(`\\n\\t\\tSELECT DATE(created_at) as date, COUNT(*) as count\\n\\t\\tFROM photos WHERE partner_id = ?%s\\n\\t\\tGROUP BY DATE(created_at)\\n\\t\\tORDER BY date DESC\\n\\t\\tLIMIT 30\\n\\t`, dateFilter)\\n\\n\\trows, err := s.db.Query(query, args...)\\n\\tif err != nil {\\n\\t\\treturn nil, err\\n\\t}\\n\\tdefer rows.Close()\\n\\n\\tvar uploadTrends []map[string]interface{}\\n\\tfor rows.Next() {\\n\\t\\tvar date string\\n\\t\\tvar count int\\n\\t\\tif err := rows.Scan(&date, &count); err != nil {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tuploadTrends = append(uploadTrends, map[string]interface{}{\\n\\t\\t\\t\\\"date\\\":  date,\\n\\t\\t\\t\\\"count\\\": count,\\n\\t\\t})\\n\\t}\\n\\n\\tanalytics[\\\"upload_trends\\\"] = uploadTrends\\n\\n\\treturn analytics, nil\\n}\"\n            }\n          ]\n        },\n        {\n          \"name\": \"internal\",\n          \"type\": \"directory\",\n          \"path\": \"media-vault-backend-backup-20250530110754/internal\",\n          \"children\": [\n            {\n              \"name\": \"auth\",\n              \"type\": \"directory\",\n              \"path\": \"media-vault-backend-backup-20250530110754/internal/auth\",\n              \"children\": [\n                {\n                  \"name\": \"keycloak.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/auth/keycloak.go\",\n                  \"size\": 334,\n                  \"content\": \"package auth\\n\\n// InitKeycloak initializes the Keycloak client\\nfunc InitKeycloak() error {\\n\\t// TODO: Implement Keycloak client initialization\\n\\treturn nil\\n}\\n\\n// VerifyToken verifies a JWT token from Keycloak\\nfunc VerifyToken(tokenString string) (map[string]interface{}, error) {\\n\\t// TODO: Implement token verification\\n\\treturn nil, nil\\n}\"\n                },\n                {\n                  \"name\": \"middleware.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/auth/middleware.go\",\n                  \"size\": 1710,\n                  \"content\": \"package auth\\n\\nimport (\\n\\t\\\"github.com/gofiber/fiber/v2\\\"\\n\\t\\\"github.com/golang-jwt/jwt/v5\\\"\\n)\\n\\n// JWTConfig defines the configuration for JWT middleware\\ntype JWTConfig struct {\\n\\tSigningKey []byte\\n}\\n\\n// NewAuthMiddleware creates a new JWT authentication middleware\\nfunc NewAuthMiddleware(config JWTConfig) fiber.Handler {\\n\\treturn func(c *fiber.Ctx) error {\\n\\t\\tauthHeader := c.Get(\\\"Authorization\\\")\\n\\t\\tif authHeader == \\\"\\\" {\\n\\t\\t\\treturn c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{\\n\\t\\t\\t\\t\\\"error\\\": \\\"Missing Authorization header\\\",\\n\\t\\t\\t})\\n\\t\\t}\\n\\n\\t\\ttokenString := authHeader[len(\\\"Bearer \\\"):]\\n\\t\\ttoken, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {\\n\\t\\t\\tif _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {\\n\\t\\t\\t\\treturn nil, fiber.NewError(fiber.StatusUnauthorized, \\\"Invalid token\\\")\\n\\t\\t\\t}\\n\\t\\t\\treturn config.SigningKey, nil\\n\\t\\t})\\n\\n\\t\\tif err != nil || !token.Valid {\\n\\t\\t\\treturn c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{\\n\\t\\t\\t\\t\\\"error\\\": \\\"Invalid or expired token\\\",\\n\\t\\t\\t})\\n\\t\\t}\\n\\n\\t\\t// Add user info to context\\n\\t\\tif claims, ok := token.Claims.(jwt.MapClaims); ok {\\n\\t\\t\\tc.Locals(\\\"userID\\\", claims[\\\"sub\\\"])\\n\\t\\t\\tc.Locals(\\\"roles\\\", claims[\\\"realm_access\\\"].(map[string]interface{})[\\\"roles\\\"])\\n\\t\\t}\\n\\n\\t\\treturn c.Next()\\n\\t}\\n}\\n\\n// RequireRole checks if the user has the required role\\nfunc RequireRole(role string) fiber.Handler {\\n\\treturn func(c *fiber.Ctx) error {\\n\\t\\tuserRoles, ok := c.Locals(\\\"roles\\\").([]interface{})\\n\\t\\tif !ok {\\n\\t\\t\\treturn c.Status(fiber.StatusForbidden).JSON(fiber.Map{\\n\\t\\t\\t\\t\\\"error\\\": \\\"No roles found in token\\\",\\n\\t\\t\\t})\\n\\t\\t}\\n\\n\\t\\tfor _, r := range userRoles {\\n\\t\\t\\tif r == role {\\n\\t\\t\\t\\treturn c.Next()\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn c.Status(fiber.StatusForbidden).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Insufficient permissions\\\",\\n\\t\\t})\\n\\t}\\n}\"\n                },\n                {\n                  \"name\": \"roles.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/auth/roles.go\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                }\n              ]\n            },\n            {\n              \"name\": \"database\",\n              \"type\": \"directory\",\n              \"path\": \"media-vault-backend-backup-20250530110754/internal/database\",\n              \"children\": [\n                {\n                  \"name\": \"migrations.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/database/migrations.go\",\n                  \"size\": 156,\n                  \"content\": \"package database\\n\\n// RunMigrations runs all database migrations\\nfunc RunMigrations(db *sql.DB) error {\\n\\t// TODO: Implement database migrations\\n\\treturn nil\\n}\"\n                },\n                {\n                  \"name\": \"sqlite.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/database/sqlite.go\",\n                  \"size\": 3396,\n                  \"content\": \"package database\\n\\nimport (\\n    \\\"database/sql\\\"\\n    \\\"os\\\"\\n    \\\"path/filepath\\\"\\n\\n    _ \\\"github.com/mattn/go-sqlite3\\\"\\n)\\n\\nfunc Initialize() (*sql.DB, error) {\\n    dbPath := os.Getenv(\\\"DATABASE_PATH\\\")\\n    if dbPath == \\\"\\\" {\\n        dbPath = \\\"./data/media.db\\\"\\n    }\\n\\n    // Ensure directory exists\\n    dir := filepath.Dir(dbPath)\\n    if err := os.MkdirAll(dir, 0755); err != nil {\\n        return nil, err\\n    }\\n\\n    db, err := sql.Open(\\\"sqlite3\\\", dbPath)\\n    if err != nil {\\n        return nil, err\\n    }\\n\\n    // Enable foreign keys\\n    if _, err := db.Exec(\\\"PRAGMA foreign_keys = ON\\\"); err != nil {\\n        return nil, err\\n    }\\n\\n    // Run migrations\\n    if err := runMigrations(db); err != nil {\\n        return nil, err\\n    }\\n\\n    return db, nil\\n}\\n\\nfunc runMigrations(db *sql.DB) error {\\n    migrations := []string{\\n        `CREATE TABLE IF NOT EXISTS photos (\\n            id TEXT PRIMARY KEY,\\n            user_id TEXT NOT NULL,\\n            partner_id TEXT,\\n            filename TEXT NOT NULL,\\n            original_name TEXT NOT NULL,\\n            file_path TEXT NOT NULL,\\n            thumbnail_path TEXT,\\n            file_size INTEGER NOT NULL,\\n            mime_type TEXT NOT NULL,\\n            width INTEGER,\\n            height INTEGER,\\n            hash TEXT NOT NULL,\\n            description TEXT,\\n            ai_description TEXT,\\n            tags TEXT,\\n            ai_confidence REAL,\\n            is_nsfw BOOLEAN,\\n            nsfw_confidence REAL,\\n            moderation_status TEXT DEFAULT 'pending',\\n            exif_data TEXT,\\n            location TEXT,\\n            camera_make TEXT,\\n            camera_model TEXT,\\n            taken_at DATETIME,\\n            is_shared BOOLEAN DEFAULT FALSE,\\n            share_count INTEGER DEFAULT 0,\\n            view_count INTEGER DEFAULT 0,\\n            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\\n            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\\n            processed_at DATETIME\\n        )`,\\n\\n        `CREATE TABLE IF NOT EXISTS photo_sharing (\\n            id TEXT PRIMARY KEY,\\n            photo_id TEXT NOT NULL,\\n            shared_by TEXT NOT NULL,\\n            shared_with TEXT NOT NULL,\\n            permission TEXT NOT NULL DEFAULT 'view',\\n            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\\n            expires_at DATETIME,\\n            FOREIGN KEY (photo_id) REFERENCES photos (id) ON DELETE CASCADE\\n        )`,\\n\\n        `CREATE TABLE IF NOT EXISTS photo_analytics (\\n            photo_id TEXT PRIMARY KEY,\\n            views INTEGER DEFAULT 0,\\n            downloads INTEGER DEFAULT 0,\\n            shares INTEGER DEFAULT 0,\\n            last_viewed DATETIME,\\n            FOREIGN KEY (photo_id) REFERENCES photos (id) ON DELETE CASCADE\\n        )`,\\n\\n        `CREATE INDEX IF NOT EXISTS idx_photos_user_id ON photos (user_id)`,\\n        `CREATE INDEX IF NOT EXISTS idx_photos_partner_id ON photos (partner_id)`,\\n        `CREATE INDEX IF NOT EXISTS idx_photos_created_at ON photos (created_at)`,\\n        `CREATE INDEX IF NOT EXISTS idx_photos_moderation_status ON photos (moderation_status)`,\\n        `CREATE INDEX IF NOT EXISTS idx_photo_sharing_photo_id ON photo_sharing (photo_id)`,\\n        `CREATE INDEX IF NOT EXISTS idx_photo_sharing_shared_with ON photo_sharing (shared_with)`,\\n    }\\n\\n    for _, migration := range migrations {\\n        if _, err := db.Exec(migration); err != nil {\\n            return err\\n        }\\n    }\\n\\n    return nil\\n}\\n\\n\"\n                }\n              ]\n            },\n            {\n              \"name\": \"handlers\",\n              \"type\": \"directory\",\n              \"path\": \"media-vault-backend-backup-20250530110754/internal/handlers\",\n              \"children\": [\n                {\n                  \"name\": \"admin.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/handlers/admin.go\",\n                  \"size\": 470,\n                  \"content\": \"package handlers\\n\\nimport \\\"github.com/gofiber/fiber/v2\\\"\\n\\n// AdminHandler handles admin-related HTTP requests\\ntype AdminHandler struct {\\n\\t// Add any dependencies here\\n}\\n\\n// NewAdminHandler creates a new AdminHandler\\nfunc NewAdminHandler() *AdminHandler {\\n\\treturn &AdminHandler{}\\n}\\n\\n// GetSystemStats returns system statistics\\nfunc (h *AdminHandler) GetSystemStats(c *fiber.Ctx) error {\\n\\t// TODO: Implement system stats retrieval\\n\\treturn c.JSON(fiber.Map{\\\"status\\\": \\\"ok\\\"})\\n}\"\n                },\n                {\n                  \"name\": \"partner.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/handlers/partner.go\",\n                  \"size\": 1384,\n                  \"content\": \"package handlers\\n\\nimport (\\n\\t\\\"github.com/gofiber/fiber/v2\\\"\\n)\\n\\n// PartnerHandler handles partner-related HTTP requests\\ntype PartnerHandler struct {\\n\\t// Add any dependencies here (e.g., services, repositories)\\n}\\n\\n// NewPartnerHandler creates a new PartnerHandler\\nfunc NewPartnerHandler() *PartnerHandler {\\n\\treturn &PartnerHandler{}\\n}\\n\\n// RegisterRoutes registers partner routes\\nfunc (h *PartnerHandler) RegisterRoutes(router fiber.Router) {\\n\\tpartnerGroup := router.Group(\\\"/api/partners\\\")\\n\\t\\n\\t// Public routes\\n\\t// partnerGroup.Get(\\\"/\\\", h.ListPartners)\\n\\t// partnerGroup.Get(\\\"/:id\\\", h.GetPartner)\\n\\n\\n\\t// Protected routes (require authentication)\\n\\t// partnerGroup.Use(auth.RequireRole(\\\"partner\\\"))\\n\\t// partnerGroup.Post(\\\"/\\\", h.CreatePartner)\\n\\t// partnerGroup.Put(\\\"/:id\\\", h.UpdatePartner)\\n\\t// partnerGroup.Delete(\\\"/:id\\\", h.DeletePartner)\\n}\\n\\n// ListPartners handles GET /api/partners\\n// func (h *PartnerHandler) ListPartners(c *fiber.Ctx) error {\\n// \\t// Implementation here\\n// \\treturn c.JSON(fiber.Map{\\n// \\t\\t\\\"message\\\": \\\"List of partners\\\",\\n// \\t})\\n// }\\n\\n\\n// GetPartner handles GET /api/partners/:id\\n// func (h *PartnerHandler) GetPartner(c *fiber.Ctx) error {\\n// \\t// Implementation here\\n// \\tpartnerID := c.Params(\\\"id\\\")\\n// \\treturn c.JSON(fiber.Map{\\n// \\t\\t\\\"message\\\": \\\"Get partner with ID: \\\" + partnerID,\\n// \\t})\\n// }\\n\\n// Add other handler methods (CreatePartner, UpdatePartner, DeletePartner) as needed\"\n                },\n                {\n                  \"name\": \"photos.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/handlers/photos.go\",\n                  \"size\": 3136,\n                  \"content\": \"package handlers\\n\\nimport (\\n\\t\\\"github.com/gofiber/fiber/v2\\\"\\n\\t\\\"media-vault/internal/services\\\"\\n)\\n\\n// PhotoHandler handles photo-related HTTP requests\\ntype PhotoHandler struct {\\n\\tphotoService *services.PhotoService\\n}\\n\\n// NewPhotoHandler creates a new PhotoHandler\\nfunc NewPhotoHandler(photoService *services.PhotoService) *PhotoHandler {\\n\\treturn &PhotoHandler{\\n\\t\\tphotoService: photoService,\\n\\t}\\n}\\n\\n// UploadPhoto handles photo uploads\\nfunc (h *PhotoHandler) UploadPhoto(c *fiber.Ctx) error {\\n\\t// Get the file from the form data\\n\\tfile, err := c.FormFile(\\\"photo\\\")\\n\\tif err != nil {\\n\\t\\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"No file uploaded\\\",\\n\\t\\t})\\n\\t}\\n\\n\\t// Get user ID from context (set by auth middleware)\\n\\tuserID := c.Locals(\\\"userID\\\").(string)\\n\\n\\t// Upload the photo\\n\\tphoto, err := h.photoService.UploadPhoto(c.Context(), userID, file, nil)\\n\\tif err != nil {\\n\\t\\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Failed to upload photo: \\\" + err.Error(),\\n\\t\\t})\\n\\t}\\n\\n\\treturn c.Status(fiber.StatusCreated).JSON(photo)\\n}\\n\\n// GetPhoto handles retrieving a photo by ID\\nfunc (h *PhotoHandler) GetPhoto(c *fiber.Ctx) error {\\n\\tphotoID := c.Params(\\\"id\\\")\\n\\tif photoID == \\\"\\\" {\\n\\t\\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Photo ID is required\\\",\\n\\t\\t})\\n\\t}\\n\\n\\t// Get photo from service\\n\\tphoto, err := h.photoService.GetPhoto(c.Context(), photoID)\\n\\tif err != nil {\\n\\t\\treturn c.Status(fiber.StatusNotFound).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Photo not found\\\",\\n\\t\\t})\\n\\t}\\n\\n\\t// Check if user has permission to view this photo\\n\\t// (Implementation depends on your auth system)\\n\\n\\n\\treturn c.JSON(photo)\\n}\\n\\n// ListPhotos handles listing photos with pagination\\nfunc (h *PhotoHandler) ListPhotos(c *fiber.Ctx) error {\\n\\t// Get pagination parameters\\n\\tpage := c.QueryInt(\\\"page\\\", 1)\\n\\tlimit := c.QueryInt(\\\"limit\\\", 20)\\n\\n\\t// Get user ID from context\\n\\tuserID := c.Locals(\\\"userID\\\").(string)\\n\\n\\t// Get photos from service\\n\\tphotos, total, err := h.photoService.ListPhotos(c.Context(), userID, page, limit)\\n\\tif err != nil {\\n\\t\\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Failed to fetch photos\\\",\\n\\t\\t})\\n\\t}\\n\\n\\treturn c.JSON(fiber.Map{\\n\\t\\t\\\"data\\\":  photos,\\n\\t\\t\\\"total\\\": total,\\n\\t\\t\\\"page\\\":  page,\\n\\t\\t\\\"limit\\\": limit,\\n\\t})\\n}\\n\\n// DeletePhoto handles deleting a photo\\nfunc (h *PhotoHandler) DeletePhoto(c *fiber.Ctx) error {\\n\\tphotoID := c.Params(\\\"id\\\")\\n\\tif photoID == \\\"\\\" {\\n\\t\\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Photo ID is required\\\",\\n\\t\\t})\\n\\t}\\n\\n\\t// Get user ID from context\\n\\tuserID := c.Locals(\\\"userID\\\").(string)\\n\\n\\t// Delete the photo\\n\\terr := h.photoService.DeletePhoto(c.Context(), userID, photoID)\\n\\tif err != nil {\\n\\t\\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\\n\\t\\t\\t\\\"error\\\": \\\"Failed to delete photo: \\\" + err.Error(),\\n\\t\\t})\\n\\t}\\n\\n\\treturn c.SendStatus(fiber.StatusNoContent)\\n}\\n\\n// RegisterRoutes registers photo-related routes\\nfunc (h *PhotoHandler) RegisterRoutes(router fiber.Router) {\\n\\tphotos := router.Group(\\\"/photos\\\")\\n\\tphotos.Post(\\\"/\\\", h.UploadPhoto)\\n\\tphotos.Get(\\\"/\\\", h.ListPhotos)\\n\\tphotos.Get(\\\"/:id\\\", h.GetPhoto)\\n\\tphotos.Delete(\\\"/:id\\\", h.DeletePhoto)\\n}\"\n                },\n                {\n                  \"name\": \"upload.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/handlers/upload.go\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"vault.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/handlers/vault.go\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                }\n              ]\n            },\n            {\n              \"name\": \"models\",\n              \"type\": \"directory\",\n              \"path\": \"media-vault-backend-backup-20250530110754/internal/models\",\n              \"children\": [\n                {\n                  \"name\": \"description.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/models/description.dart\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"description.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/models/description.go\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"nsfw_mobilenet.h5\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/models/nsfw_mobilenet.h5\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"nsfw_model.h5\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/models/nsfw_model.h5\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"photo.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/models/photo.dart\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"photo.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/models/photo.go\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"user.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/models/user.dart\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"user.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/models/user.go\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"vault_file.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/models/vault_file.dart\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"vault_file.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/models/vault_file.go\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                }\n              ]\n            },\n            {\n              \"name\": \"services\",\n              \"type\": \"directory\",\n              \"path\": \"media-vault-backend-backup-20250530110754/internal/services\",\n              \"children\": [\n                {\n                  \"name\": \"auth_service.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/services/auth_service.dart\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"description_service.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/services/description_service.dart\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"description_service.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/services/description_service.go\",\n                  \"size\": 679,\n                  \"content\": \"package services\\n\\n// DescriptionService handles AI-generated descriptions for media\\n// TODO: Implement the description service functionality\\n\\n// DescriptionService provides methods for generating and managing descriptions\\ntype DescriptionService struct {\\n\\t// Add any dependencies here\\n}\\n\\n// NewDescriptionService creates a new DescriptionService\\nfunc NewDescriptionService() *DescriptionService {\\n\\treturn &DescriptionService{}\\n}\\n\\n// GenerateDescription generates a description for the given content\\nfunc (s *DescriptionService) GenerateDescription(content string) (string, error) {\\n\\t// TODO: Implement description generation\\n\\treturn \\\"Generated description for: \\\" + content, nil\\n}\"\n                },\n                {\n                  \"name\": \"media_vault_service.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/services/media_vault_service.dart\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"photo_service.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/services/photo_service.dart\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"photo_service.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/services/photo_service.go\",\n                  \"size\": 3084,\n                  \"content\": \"package services\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"mime/multipart\\\"\\n)\\n\\n// Photo represents a photo in the system\\ntype Photo struct {\\n\\tID          string `json:\\\"id\\\"`\\n\\tUserID      string `json:\\\"user_id\\\"`\\n\\tTitle       string `json:\\\"title\\\"`\\n\\tDescription string `json:\\\"description\\\"`\\n\\tURL         string `json:\\\"url\\\"`\\n\\tThumbnailURL string `json:\\\"thumbnail_url\\\"`\\n\\tIsPublic    bool   `json:\\\"is_public\\\"`\\n\\tCreatedAt   int64  `json:\\\"created_at\\\"`\\n\\tUpdatedAt   int64  `json:\\\"updated_at\\\"`\\n}\\n\\n// PhotoService defines the interface for photo operations\\ntype PhotoService interface {\\n\\t// UploadPhoto uploads a new photo\\n\\tUploadPhoto(ctx context.Context, userID string, fileHeader *multipart.FileHeader, metadata map[string]interface{}) (*Photo, error)\\n\\t\\n\\t// GetPhoto retrieves a photo by ID\\n\\tGetPhoto(ctx context.Context, photoID string) (*Photo, error)\\n\\t\\n\\t// ListPhotos lists photos with pagination and filtering\\n\\tListPhotos(ctx context.Context, filter map[string]interface{}, offset, limit int) ([]*Photo, int64, error)\\n\\t\\n\\t// UpdatePhoto updates photo metadata\\n\\tUpdatePhoto(ctx context.Context, photoID string, updates map[string]interface{}) (*Photo, error)\\n\\t\\n\\t// DeletePhoto removes a photo\\n\\tDeletePhoto(ctx context.Context, photoID string) error\\n\\t\\n\\t// GenerateThumbnail generates a thumbnail for a photo\\n\\tGenerateThumbnail(photoURL string) (string, error)\\n}\\n\\n// photoService implements PhotoService\\ntype photoService struct {\\n\\t// Add dependencies like storage client, database, etc.\\n}\\n\\n// NewPhotoService creates a new photo service\\nfunc NewPhotoService() PhotoService {\\n\\treturn &photoService{}\\n}\\n\\n// UploadPhoto implements PhotoService\\nfunc (s *photoService) UploadPhoto(ctx context.Context, userID string, fileHeader *multipart.FileHeader, metadata map[string]interface{}) (*Photo, error) {\\n\\t// TODO: Implement photo upload logic\\n\\t// 1. Validate file type and size\\n\\t// 2. Generate unique filename\\n\\t// 3. Upload to storage (S3, local filesystem, etc.)\\n\\t// 4. Generate thumbnail\\n\\t// 5. Save metadata to database\\n\\treturn nil, nil\\n}\\n\\n// GetPhoto implements PhotoService\\nfunc (s *photoService) GetPhoto(ctx context.Context, photoID string) (*Photo, error) {\\n\\t// TODO: Implement photo retrieval\\n\\treturn nil, nil\\n}\\n\\n// ListPhotos implements PhotoService\\nfunc (s *photoService) ListPhotos(ctx context.Context, filter map[string]interface{}, offset, limit int) ([]*Photo, int64, error) {\\n\\t// TODO: Implement photo listing with filtering and pagination\\n\\treturn nil, 0, nil\\n}\\n\\n// UpdatePhoto implements PhotoService\\nfunc (s *photoService) UpdatePhoto(ctx context.Context, photoID string, updates map[string]interface{}) (*Photo, error) {\\n\\t// TODO: Implement photo metadata update\\n\\treturn nil, nil\\n}\\n\\n// DeletePhoto implements PhotoService\\nfunc (s *photoService) DeletePhoto(ctx context.Context, photoID string) error {\\n\\t// TODO: Implement photo deletion\\n\\treturn nil\\n}\\n\\n// GenerateThumbnail implements PhotoService\\nfunc (s *photoService) GenerateThumbnail(photoURL string) (string, error) {\\n\\t// TODO: Implement thumbnail generation\\n\\t// This could use a library like imaging or call an external service\\n\\treturn \\\"\\\", nil\\n}\"\n                },\n                {\n                  \"name\": \"sharing_service.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/services/sharing_service.go\",\n                  \"size\": 4366,\n                  \"content\": \"package services\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"database/sql\\\"\\n\\t\\\"errors\\\"\\n\\t\\\"time\\\"\\n\\n\\t\\\"github.com/google/uuid\\\"\\n)\\n\\n// Share represents a shared photo with permissions\\ntype Share struct {\\n\\tID          string    `json:\\\"id\\\"`\\n\\tPhotoID     string    `json:\\\"photo_id\\\"`\\n\\tSharedBy    string    `json:\\\"shared_by\\\"`\\n\\tSharedWith  string    `json:\\\"shared_with\\\"`\\n\\tPermission  string    `json:\\\"permission\\\"` // \\\"view\\\" or \\\"download\\\"\\n\\tExpiresAt   time.Time `json:\\\"expires_at,omitempty\\\"`\\n\\tCreatedAt   time.Time `json:\\\"created_at\\\"`\\n}\\n\\n// SharingService handles photo sharing operations\\ntype SharingService struct {\\n\\tdb *sql.DB\\n}\\n\\n// NewSharingService creates a new SharingService\\nfunc NewSharingService(db *sql.DB) *SharingService {\\n\\treturn &SharingService{\\n\\t\\tdb: db,\\n\\t}\\n}\\n\\n// SharePhoto shares a photo with another user\\nfunc (s *SharingService) SharePhoto(ctx context.Context, share *Share) error {\\n\\t// Validate input\\n\\tif share.PhotoID == \\\"\\\" || share.SharedBy == \\\"\\\" || share.SharedWith == \\\"\\\" {\\n\\t\\treturn errors.New(\\\"photo ID, shared_by, and shared_with are required\\\")\\n\\t}\\n\\n\\t// Set default permission if not provided\\n\\tif share.Permission == \\\"\\\" {\\n\\t\\tshare.Permission = \\\"view\\\"\\n\\t}\\n\\n\\t// Generate a new share ID if not provided\\n\\tif share.ID == \\\"\\\" {\\n\\t\\tshare.ID = uuid.New().String()\\n\\t}\\n\\n\\t// Set created at time\\n\\tshare.CreatedAt = time.Now()\\n\\n\\t// Insert the share record\\n\\t_, err := s.db.ExecContext(ctx, `\\n\\t\\tINSERT INTO photo_shares (id, photo_id, shared_by, shared_with, permission, expires_at, created_at)\\n\\t\\tVALUES ($1, $2, $3, $4, $5, $6, $7)\\n\\t`,\\n\\t\\tshare.ID,\\n\\t\\tshare.PhotoID,\\n\\t\\tshare.SharedBy,\\n\\t\\tshare.SharedWith,\\n\\t\\tshare.Permission,\\n\\t\\tshare.ExpiresAt,\\n\\t\\tshare.CreatedAt,\\n\\t)\\n\\n\\treturn err\\n}\\n\\n// GetShare retrieves a share by ID\\nfunc (s *SharingService) GetShare(ctx context.Context, shareID string) (*Share, error) {\\n\\tvar share Share\\n\\terr := s.db.QueryRowContext(ctx, `\\n\\t\\tSELECT id, photo_id, shared_by, shared_with, permission, expires_at, created_at\\n\\t\\tFROM photo_shares\\n\\t\\tWHERE id = $1\\n\\t`, shareID).Scan(\\n\\t\\t&share.ID,\\n\\t\\t&share.PhotoID,\\n\\t\\t&share.SharedBy,\\n\\t\\t&share.SharedWith,\\n\\t\\t&share.Permission,\\n\\t\\t&share.ExpiresAt,\\n\\t\\t&share.CreatedAt,\\n\\t)\\n\\n\\tif err != nil {\\n\\t\\tif err == sql.ErrNoRows {\\n\\t\\t\\treturn nil, errors.New(\\\"share not found\\\")\\n\\t\\t}\\n\\t\\treturn nil, err\\n\\t}\\n\\n\\treturn &share, nil\\n}\\n\\n// ListSharesForPhoto lists all shares for a specific photo\\nfunc (s *SharingService) ListSharesForPhoto(ctx context.Context, photoID string) ([]*Share, error) {\\n\\trows, err := s.db.QueryContext(ctx, `\\n\\t\\tSELECT id, photo_id, shared_by, shared_with, permission, expires_at, created_at\\n\\t\\tFROM photo_shares\\n\\t\\tWHERE photo_id = $1\\n\\t`, photoID)\\n\\tif err != nil {\\n\\t\\treturn nil, err\\n\\t}\\n\\tdefer rows.Close()\\n\\n\\tvar shares []*Share\\n\\tfor rows.Next() {\\n\\t\\tvar share Share\\n\\t\\tif err := rows.Scan(\\n\\t\\t\\t&share.ID,\\n\\t\\t\\t&share.PhotoID,\\n\\t\\t\\t&share.SharedBy,\\n\\t\\t\\t&share.SharedWith,\\n\\t\\t\\t&share.Permission,\\n\\t\\t\\t&share.ExpiresAt,\\n\\t\\t\\t&share.CreatedAt,\\n\\t\\t); err != nil {\\n\\t\\t\\treturn nil, err\\n\\t\\t}\\n\\t\\tshares = append(shares, &share)\\n\\t}\\n\\n\\tif err = rows.Err(); err != nil {\\n\\t\\treturn nil, err\\n\\t}\\n\\n\\treturn shares, nil\\n}\\n\\n// RevokeShare removes a share\\nfunc (s *SharingService) RevokeShare(ctx context.Context, shareID string) error {\\n\\tresult, err := s.db.ExecContext(ctx, `\\n\\t\\tDELETE FROM photo_shares\\n\\t\\tWHERE id = $1\\n\\t`, shareID)\\n\\n\\tif err != nil {\\n\\t\\treturn err\\n\\t}\\n\\n\\trowsAffected, err := result.RowsAffected()\\n\\tif err != nil {\\n\\t\\treturn err\\n\\t}\\n\\n\\tif rowsAffected == 0 {\\n\\t\\treturn errors.New(\\\"share not found\\\")\\n\\t}\\n\\n\\treturn nil\\n}\\n\\n// HasPermission checks if a user has permission to access a photo\\nfunc (s *SharingService) HasPermission(ctx context.Context, photoID, userID, requiredPermission string) (bool, error) {\\n\\t// Check if the user is the owner of the photo\\n\\tvar ownerID string\\n\\terr := s.db.QueryRowContext(ctx, `\\n\\t\\tSELECT user_id FROM photos WHERE id = $1\\n\\t`, photoID).Scan(&ownerID)\\n\\n\\tif err != nil {\\n\\t\\tif err == sql.ErrNoRows {\\n\\t\\t\\treturn false, errors.New(\\\"photo not found\\\")\\n\\t\\t}\\n\\t\\treturn false, err\\n\\t}\\n\\n\\t// If the user is the owner, they have all permissions\\n\\tif ownerID == userID {\\n\\t\\treturn true, nil\\n\\t}\\n\\n\\t// Check for an active share\\n\\tvar count int\\n\\terr = s.db.QueryRowContext(ctx, `\\n\\t\\tSELECT COUNT(*)\\n\\t\\tFROM photo_shares\\n\\t\\tWHERE photo_id = $1\\n\\t\\t  AND shared_with = $2\\n\\t\\t  AND (expires_at IS NULL OR expires_at > NOW())\\n\\t\\t  AND permission = $3\\n\\t`, photoID, userID, requiredPermission).Scan(&count)\\n\\n\\tif err != nil {\\n\\t\\treturn false, err\\n\\t}\\n\\n\\treturn count > 0, nil\\n}\"\n                },\n                {\n                  \"name\": \"vault_service.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/services/vault_service.go\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                }\n              ]\n            },\n            {\n              \"name\": \"utils\",\n              \"type\": \"directory\",\n              \"path\": \"media-vault-backend-backup-20250530110754/internal/utils\",\n              \"children\": [\n                {\n                  \"name\": \"constants.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/utils/constants.dart\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"image_processing.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/utils/image_processing.go\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"metadata.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/utils/metadata.go\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"permissions.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/utils/permissions.dart\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"theme.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/utils/theme.dart\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"thumbnails.go\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/utils/thumbnails.go\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"validators.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"media-vault-backend-backup-20250530110754/internal/utils/validators.dart\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"name\": \"migrations\",\n          \"type\": \"directory\",\n          \"path\": \"media-vault-backend-backup-20250530110754/migrations\",\n          \"children\": [\n            {\n              \"name\": \"001_initial.sql\",\n              \"type\": \"file\",\n              \"path\": \"media-vault-backend-backup-20250530110754/migrations/001_initial.sql\",\n              \"size\": 0,\n              \"content\": \"\"\n            },\n            {\n              \"name\": \"002_photos.sql\",\n              \"type\": \"file\",\n              \"path\": \"media-vault-backend-backup-20250530110754/migrations/002_photos.sql\",\n              \"size\": 0,\n              \"content\": \"\"\n            },\n            {\n              \"name\": \"003_descriptions.sql\",\n              \"type\": \"file\",\n              \"path\": \"media-vault-backend-backup-20250530110754/migrations/003_descriptions.sql\",\n              \"size\": 0,\n              \"content\": \"\"\n            }\n          ]\n        },\n        {\n          \"name\": \"Dockerfile\",\n          \"type\": \"file\",\n          \"path\": \"media-vault-backend-backup-20250530110754/Dockerfile\",\n          \"size\": 846,\n          \"content\": \"# Build stage\\nFROM golang:1.21-alpine AS builder\\n\\n# Set the working directory\\nWORKDIR /app\\n\\n# Copy go mod and sum files\\nCOPY go.mod go.sum ./\\n\\n# Initialize the Go module if not already done\\nRUN go mod init media-vault 2>/dev/null || true\\n\\n# Download all dependencies\\nRUN go mod download\\n\\n# Copy the source code\\nCOPY . .\\n\\n# Tidy up the module dependencies\\nRUN go mod tidy\\n\\n# Build the application\\nRUN CGO_ENABLED=0 GOOS=linux go build -o media-vault-api ./cmd\\n\\n# Final stage\\nFROM alpine:3.18\\n\\n# Install required packages\\nRUN apk --no-cache add ca-certificates\\n\\n# Set the working directory\\nWORKDIR /app\\n\\n# Copy the binary from builder\\nCOPY --from=builder /app/media-vault-api .\\n\\n# Copy migrations\\nCOPY --from=builder /app/migrations ./migrations\\n\\n# Expose the application port\\nEXPOSE 8080\\n\\n# Command to run the application\\nCMD [\\\"./media-vault-api\\\"]\"\n        },\n        {\n          \"name\": \"Dockerfile.bak\",\n          \"type\": \"file\",\n          \"path\": \"media-vault-backend-backup-20250530110754/Dockerfile.bak\",\n          \"size\": 846,\n          \"content\": \"# Build stage\\nFROM golang:1.21-alpine AS builder\\n\\n# Set the working directory\\nWORKDIR /app\\n\\n# Copy go mod and sum files\\nCOPY go.mod go.sum ./\\n\\n# Initialize the Go module if not already done\\nRUN go mod init media-vault 2>/dev/null || true\\n\\n# Download all dependencies\\nRUN go mod download\\n\\n# Copy the source code\\nCOPY . .\\n\\n# Tidy up the module dependencies\\nRUN go mod tidy\\n\\n# Build the application\\nRUN CGO_ENABLED=0 GOOS=linux go build -o media-vault-api ./cmd\\n\\n# Final stage\\nFROM alpine:3.18\\n\\n# Install required packages\\nRUN apk --no-cache add ca-certificates\\n\\n# Set the working directory\\nWORKDIR /app\\n\\n# Copy the binary from builder\\nCOPY --from=builder /app/media-vault-api .\\n\\n# Copy migrations\\nCOPY --from=builder /app/migrations ./migrations\\n\\n# Expose the application port\\nEXPOSE 8080\\n\\n# Command to run the application\\nCMD [\\\"./media-vault-api\\\"]\"\n        },\n        {\n          \"name\": \"go.mod\",\n          \"type\": \"file\",\n          \"path\": \"media-vault-backend-backup-20250530110754/go.mod\",\n          \"size\": 724,\n          \"content\": \"module media-vault\\n\\ngo 1.21\\n\\nrequire (\\n    github.com/gofiber/fiber/v2 v2.50.0\\n    github.com/golang-jwt/jwt/v5 v5.0.0\\n    github.com/google/uuid v1.3.1\\n    github.com/mattn/go-sqlite3 v1.14.17\\n)\\n\\nrequire (\\n    github.com/andybalholm/brotli v1.0.5 // indirect\\n    github.com/klauspost/compress v1.16.7 // indirect\\n    github.com/mattn/go-colorable v0.1.13 // indirect\\n    github.com/mattn/go-isatty v0.0.19 // indirect\\n    github.com/mattn/go-runewidth v0.0.15 // indirect\\n    github.com/rivo/uniseg v0.2.0 // indirect\\n    github.com/valyala/bytebufferpool v1.0.0 // indirect\\n    github.com/valyala/fasthttp v1.50.0 // indirect\\n    github.com/valyala/tcplisten v1.0.0 // indirect\\n    golang.org/x/sys v0.12.0 // indirect\\n)\\n\\n\"\n        },\n        {\n          \"name\": \"go.sum\",\n          \"type\": \"file\",\n          \"path\": \"media-vault-backend-backup-20250530110754/go.sum\",\n          \"size\": 0,\n          \"content\": \"\"\n        }\n      ]\n    },\n    {\n      \"name\": \"monitoring\",\n      \"type\": \"directory\",\n      \"path\": \"monitoring\",\n      \"children\": [\n        {\n          \"name\": \"alertmanager\",\n          \"type\": \"directory\",\n          \"path\": \"monitoring/alertmanager\",\n          \"children\": [\n            {\n              \"name\": \"alertmanager.yml\",\n              \"type\": \"file\",\n              \"path\": \"monitoring/alertmanager/alertmanager.yml\",\n              \"size\": 1297,\n              \"content\": \"global:\\n  smtp_smarthost: '${SMTP_HOST}:${SMTP_PORT}'\\n  smtp_from: '${SMTP_USER}'\\n  smtp_auth_username: '${SMTP_USER}'\\n  smtp_auth_password: '${SMTP_PASSWORD}'\\n  smtp_require_tls: true\\n\\ntemplates:\\n  - '/etc/alertmanager/templates/*.tmpl'\\n\\nroute:\\n  group_by: ['alertname', 'cluster', 'service']\\n  group_wait: 10s\\n  group_interval: 10s\\n  repeat_interval: 12h\\n  receiver: 'default'\\n  routes:\\n    # Critical alerts\\n    - match:\\n        severity: critical\\n      receiver: 'critical-alerts'\\n      group_wait: 0s\\n      repeat_interval: 5m\\n\\n    # Warning alerts\\n    - match:\\n        severity: warning\\n      receiver: 'warning-alerts'\\n      repeat_interval: 30m\\n\\n    # Security alerts\\n    - match:\\n        category: security\\n      receiver: 'security-alerts'\\n      group_wait: 0s\\n      repeat_interval: 15m\\n\\nreceivers:\\n  - name: 'default'\\n    email_configs:\\n      - to: '${ADMIN_EMAIL}'\\n        subject: '[Media Vault] Alert: {{ .GroupLabels.alertname }}'\\n        headers:\\n          From: 'Media Vault Monitoring <${SMTP_USER}>'\\n          To: '${ADMIN_EMAIL}'\\n        body: |\\n          {{ range .Alerts }}\\n          **Alert:** {{ .Annotations.summary }}\\n          **Description:** {{ .Annotations.description }}\\n          **Severity:** {{ .Labels.severity }}\\n          **Instance:** {{ .Labels.instance }}\\n\"\n            }\n          ]\n        },\n        {\n          \"name\": \"blackbox\",\n          \"type\": \"directory\",\n          \"path\": \"monitoring/blackbox\",\n          \"children\": [\n            {\n              \"name\": \"blackbox.yml\",\n              \"type\": \"file\",\n              \"path\": \"monitoring/blackbox/blackbox.yml\",\n              \"size\": 737,\n              \"content\": \"modules:\\n  http_2xx:\\n    prober: http\\n    timeout: 5s\\n    http:\\n      valid_http_versions: [\\\"HTTP/1.1\\\", \\\"HTTP/2.0\\\"]\\n      valid_status_codes: [200, 201, 202]\\n      method: GET\\n      headers:\\n        Host: \\\"media-vault.local\\\"\\n        User-Agent: \\\"Prometheus-Blackbox-Exporter\\\"\\n      preferred_ip_protocol: \\\"ip4\\\"\\n      ip_protocol_fallback: false\\n\\n  http_post_2xx:\\n    prober: http\\n    timeout: 5s\\n    http:\\n      method: POST\\n      headers:\\n        Content-Type: \\\"application/json\\\"\\n      body: '{\\\"health\\\": \\\"check\\\"}'\\n      valid_status_codes: [200, 201, 202]\\n\\n  tcp_connect:\\n    prober: tcp\\n    timeout: 5s\\n    tcp:\\n      preferred_ip_protocol: \\\"ip4\\\"\\n\\n  icmp:\\n    prober: icmp\\n    timeout: 5s\\n    icmp:\\n      preferred_ip_protocol: \\\"ip4\\\"\\n\\n\"\n            }\n          ]\n        },\n        {\n          \"name\": \"grafana\",\n          \"type\": \"directory\",\n          \"path\": \"monitoring/grafana\",\n          \"children\": [\n            {\n              \"name\": \"provisioning\",\n              \"type\": \"directory\",\n              \"path\": \"monitoring/grafana/provisioning\",\n              \"children\": [\n                {\n                  \"name\": \"dashboards\",\n                  \"type\": \"directory\",\n                  \"path\": \"monitoring/grafana/provisioning/dashboards\",\n                  \"children\": [\n                    {\n                      \"name\": \"application.json\",\n                      \"type\": \"file\",\n                      \"path\": \"monitoring/grafana/provisioning/dashboards/application.json\",\n                      \"size\": 0,\n                      \"content\": \"\"\n                    },\n                    {\n                      \"name\": \"business.json\",\n                      \"type\": \"file\",\n                      \"path\": \"monitoring/grafana/provisioning/dashboards/business.json\",\n                      \"size\": 0,\n                      \"content\": \"\"\n                    },\n                    {\n                      \"name\": \"dashboard.yml\",\n                      \"type\": \"file\",\n                      \"path\": \"monitoring/grafana/provisioning/dashboards/dashboard.yml\",\n                      \"size\": 225,\n                      \"content\": \"apiVersion: 1\\n\\nproviders:\\n  - name: 'default'\\n    orgId: 1\\n    folder: ''\\n    type: file\\n    disableDeletion: false\\n    updateIntervalSeconds: 10\\n    allowUiUpdates: true\\n    options:\\n      path: /var/lib/grafana/dashboards\\n\\n\"\n                    },\n                    {\n                      \"name\": \"infrastructure.json\",\n                      \"type\": \"file\",\n                      \"path\": \"monitoring/grafana/provisioning/dashboards/infrastructure.json\",\n                      \"size\": 0,\n                      \"content\": \"\"\n                    },\n                    {\n                      \"name\": \"security.json\",\n                      \"type\": \"file\",\n                      \"path\": \"monitoring/grafana/provisioning/dashboards/security.json\",\n                      \"size\": 0,\n                      \"content\": \"\"\n                    }\n                  ]\n                },\n                {\n                  \"name\": \"datasources\",\n                  \"type\": \"directory\",\n                  \"path\": \"monitoring/grafana/provisioning/datasources\",\n                  \"children\": [\n                    {\n                      \"name\": \"prometheus.yml\",\n                      \"type\": \"file\",\n                      \"path\": \"monitoring/grafana/provisioning/datasources/prometheus.yml\",\n                      \"size\": 560,\n                      \"content\": \"apiVersion: 1\\n\\ndatasources:\\n  - name: Prometheus\\n    type: prometheus\\n    access: proxy\\n    url: http://prometheus:9090\\n    isDefault: true\\n    editable: true\\n    jsonData:\\n      timeInterval: \\\"5s\\\"\\n      queryTimeout: \\\"60s\\\"\\n      httpMethod: \\\"POST\\\"\\n    secureJsonData: {}\\n\\n  - name: Loki\\n    type: loki\\n    access: proxy\\n    url: http://loki:3100\\n    editable: true\\n    jsonData:\\n      maxLines: 1000\\n      derivedFields:\\n        - datasourceUid: \\\"prometheus\\\"\\n          matcherRegex: \\\"traceID=(\\\\\\\\w+)\\\"\\n          name: \\\"TraceID\\\"\\n          url: \\\"$${__value.raw}\\\"\\n\"\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"name\": \"loki\",\n          \"type\": \"directory\",\n          \"path\": \"monitoring/loki\",\n          \"children\": [\n            {\n              \"name\": \"loki.yml\",\n              \"type\": \"file\",\n              \"path\": \"monitoring/loki/loki.yml\",\n              \"size\": 703,\n              \"content\": \"auth_enabled: false\\n\\nserver:\\n  http_listen_port: 3100\\n  grpc_listen_port: 9096\\n\\ncommon:\\n  path_prefix: /tmp/loki\\n  storage:\\n    filesystem:\\n      chunks_directory: /tmp/loki/chunks\\n      rules_directory: /tmp/loki/rules\\n  replication_factor: 1\\n  ring:\\n    instance_addr: 127.0.0.1\\n    kvstore:\\n      store: inmemory\\n\\nquery_range:\\n  results_cache:\\n    cache:\\n      embedded_cache:\\n        enabled: true\\n        max_size_mb: 100\\n\\nschema_config:\\n  configs:\\n    - from: 2020-10-24\\n      store: boltdb-shipper\\n      object_store: filesystem\\n      schema: v11\\n      index:\\n        prefix: index_\\n        period: 24h\\n\\nruler:\\n  alertmanager_url: http://alertmanager:9093\\n\\nanalytics:\\n  reporting_enabled: false\\n\\n\"\n            }\n          ]\n        },\n        {\n          \"name\": \"prometheus\",\n          \"type\": \"directory\",\n          \"path\": \"monitoring/prometheus\",\n          \"children\": [\n            {\n              \"name\": \"rules\",\n              \"type\": \"directory\",\n              \"path\": \"monitoring/prometheus/rules\",\n              \"children\": [\n                {\n                  \"name\": \"advanced-alerts.yml\",\n                  \"type\": \"file\",\n                  \"path\": \"monitoring/prometheus/rules/advanced-alerts.yml\",\n                  \"size\": 5335,\n                  \"content\": \"groups:\\n  - name: media-vault-critical\\n    rules:\\n      # Critical Infrastructure Alerts\\n      - alert: ServiceCompletleyDown\\n        expr: up == 0\\n        for: 1m\\n        labels:\\n          severity: critical\\n          team: infrastructure\\n        annotations:\\n          summary: \\\"Service {{ $labels.job }} is completely down\\\"\\n          description: \\\"{{ $labels.job }} has been down for more than 1 minute\\\"\\n          runbook_url: \\\"https://wiki.mediavault.com/runbooks/service-down\\\"\\n          action: \\\"Immediate investigation required\\\"\\n\\n      - alert: DiskWillFillIn4Hours\\n        expr: predict_linear(node_filesystem_avail_bytes{mountpoint=\\\"/\\\"}[1h], 4*3600) < 0\\n        for: 5m\\n        labels:\\n          severity: critical\\n          team: infrastructure\\n        annotations:\\n          summary: \\\"Disk will fill up in 4 hours\\\"\\n          description: \\\"Disk space will be exhausted in approximately 4 hours\\\"\\n          action: \\\"Clean up space or expand storage immediately\\\"\\n\\n      - alert: DatabaseConnectionExhaustion\\n        expr: sum(pg_stat_activity_count) > 80\\n        for: 2m\\n        labels:\\n          severity: critical\\n          team: database\\n        annotations:\\n          summary: \\\"Database connection pool near exhaustion\\\"\\n          description: \\\"PostgreSQL has {{ $value }} active connections (limit ~100)\\\"\\n          action: \\\"Check for connection leaks or scale database\\\"\\n\\n      # Security Alerts\\n      - alert: SuspiciousLoginActivity\\n        expr: increase(keycloak_failed_login_attempts[5m]) > 20\\n        for: 1m\\n        labels:\\n          severity: warning\\n          team: security\\n        annotations:\\n          summary: \\\"Unusual login activity detected\\\"\\n          description: \\\"{{ $value }} failed login attempts in 5 minutes\\\"\\n          action: \\\"Check for brute force attacks, consider IP blocking\\\"\\n\\n      - alert: UnauthorizedAPIAccess\\n        expr: increase(http_requests_total{code=~\\\"401|403\\\"}[5m]) > 50\\n        for: 2m\\n        labels:\\n          severity: warning\\n          team: security\\n        annotations:\\n          summary: \\\"High number of unauthorized API requests\\\"\\n          description: \\\"{{ $value }} unauthorized requests in 5 minutes\\\"\\n          action: \\\"Investigate potential security breach\\\"\\n\\n  - name: media-vault-performance\\n    rules:\\n      # Performance Degradation\\n      - alert: APIResponseTimeDegraded\\n        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 5\\n        for: 5m\\n        labels:\\n          severity: warning\\n          team: backend\\n        annotations:\\n          summary: \\\"API response time degraded\\\"\\n          description: \\\"95th percentile response time is {{ $value }}s\\\"\\n          action: \\\"Investigate performance bottlenecks\\\"\\n\\n      - alert: HighMemoryPressure\\n        expr: (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes > 0.9\\n        for: 10m\\n        labels:\\n          severity: warning\\n          team: infrastructure\\n        annotations:\\n          summary: \\\"High memory pressure detected\\\"\\n          description: \\\"Memory usage is {{ $value | humanizePercentage }}\\\"\\n          action: \\\"Consider scaling or optimizing memory usage\\\"\\n\\n      - alert: SwapUsageHigh\\n        expr: (node_memory_SwapTotal_bytes - node_memory_SwapFree_bytes) / node_memory_SwapTotal_bytes > 0.5\\n        for: 5m\\n        labels:\\n          severity: warning\\n          team: infrastructure\\n        annotations:\\n          summary: \\\"High swap usage detected\\\"\\n          description: \\\"Swap usage is {{ $value | humanizePercentage }}\\\"\\n          action: \\\"Investigate memory pressure and optimize\\\"\\n\\n      # Network Issues\\n      - alert: HighNetworkErrors\\n        expr: rate(node_network_receive_errs_total[5m]) + rate(node_network_transmit_errs_total[5m]) > 10\\n        for: 3m\\n        labels:\\n          severity: warning\\n          team: infrastructure\\n        annotations:\\n          summary: \\\"High network error rate\\\"\\n          description: \\\"Network errors: {{ $value }} errors/second\\\"\\n          action: \\\"Check network configuration and hardware\\\"\\n\\n  - name: media-vault-business\\n    rules:\\n      # Business Logic Alerts\\n      - alert: UploadFailureRateHigh\\n        expr: (rate(vault_upload_failures_total[5m]) / rate(vault_upload_attempts_total[5m])) > 0.1\\n        for: 5m\\n        labels:\\n          severity: warning\\n          team: application\\n        annotations:\\n          summary: \\\"High upload failure rate\\\"\\n          description: \\\"{{ $value | humanizePercentage }} of uploads are failing\\\"\\n          action: \\\"Check storage capacity and upload service health\\\"\\n\\n      - alert: NSFWDetectionServiceDown\\n        expr: up{job=\\\"nsfw-analyzer\\\"} == 0\\n        for: 1m\\n        labels:\\n          severity: warning\\n          team: ml\\n        annotations:\\n          summary: \\\"NSFW detection service is down\\\"\\n          description: \\\"Content moderation is not functioning\\\"\\n          action: \\\"Restart NSFW analyzer service\\\"\\n\\n      - alert: VaultStorageUtilizationHigh\\n        expr: (vault_storage_used_bytes / vault_storage_total_bytes) > 0.85\\n        for: 5m\\n        labels:\\n          severity: warning\\n          team: infrastructure\\n        annotations:\\n          summary: \\\"Vault storage utilization high\\\"\\n          description: \\\"Storage is {{ $value | humanizePercentage }} full\\\"\\n          action: \\\"Plan storage expansion or implement cleanup policies\\\"\\n\\n\"\n                },\n                {\n                  \"name\": \"media-vault.yml\",\n                  \"type\": \"file\",\n                  \"path\": \"monitoring/prometheus/rules/media-vault.yml\",\n                  \"size\": 2359,\n                  \"content\": \"groups:\\n  - name: media-vault-alerts\\n    rules:\\n      # High CPU Usage\\n      - alert: HighCPUUsage\\n        expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode=\\\"idle\\\"}[5m])) * 100) > 80\\n        for: 5m\\n        labels:\\n          severity: warning\\n        annotations:\\n          summary: \\\"High CPU usage detected\\\"\\n          description: \\\"CPU usage is above 80% for more than 5 minutes\\\"\\n\\n      # High Memory Usage\\n      - alert: HighMemoryUsage\\n        expr: (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100 > 85\\n        for: 5m\\n        labels:\\n          severity: warning\\n        annotations:\\n          summary: \\\"High memory usage detected\\\"\\n          description: \\\"Memory usage is above 85%\\\"\\n\\n      # Disk Space Low\\n      - alert: DiskSpaceLow\\n        expr: node_filesystem_avail_bytes{mountpoint=\\\"/\\\"} / node_filesystem_size_bytes{mountpoint=\\\"/\\\"} * 100 < 10\\n        for: 1m\\n        labels:\\n          severity: critical\\n        annotations:\\n          summary: \\\"Disk space is running low\\\"\\n          description: \\\"Less than 10% disk space remaining\\\"\\n\\n      # Service Down\\n      - alert: MediaVaultAPIDown\\n        expr: up{job=\\\"media-vault-api\\\"} == 0\\n        for: 1m\\n        labels:\\n          severity: critical\\n        annotations:\\n          summary: \\\"Media Vault API is down\\\"\\n          description: \\\"Media Vault API has been down for more than 1 minute\\\"\\n\\n      # Keycloak Down\\n      - alert: KeycloakDown\\n        expr: up{job=\\\"keycloak\\\"} == 0\\n        for: 1m\\n        labels:\\n          severity: critical\\n        annotations:\\n          summary: \\\"Keycloak is down\\\"\\n          description: \\\"Keycloak has been down for more than 1 minute\\\"\\n\\n      # High Response Time\\n      - alert: HighResponseTime\\n        expr: http_request_duration_seconds{quantile=\\\"0.95\\\"} > 2\\n        for: 5m\\n        labels:\\n          severity: warning\\n        annotations:\\n          summary: \\\"High response time detected\\\"\\n          description: \\\"95th percentile response time is above 2 seconds\\\"\\n\\n      # Failed Login Attempts\\n      - alert: HighFailedLogins\\n        expr: increase(keycloak_failed_login_attempts[5m]) > 10\\n        for: 1m\\n        labels:\\n          severity: warning\\n        annotations:\\n          summary: \\\"High number of failed login attempts\\\"\\n          description: \\\"More than 10 failed login attempts in 5 minutes\\\"\\n\\n\"\n                }\n              ]\n            },\n            {\n              \"name\": \"prometheus.yml\",\n              \"type\": \"file\",\n              \"path\": \"monitoring/prometheus/prometheus.yml\",\n              \"size\": 1868,\n              \"content\": \"# monitoring/prometheus/prometheus.yml\\nglobal:\\n  scrape_interval: 15s\\n  evaluation_interval: 15s\\n  external_labels:\\n    cluster: 'media-vault'\\n    environment: 'production'\\n\\nrule_files:\\n  - \\\"rules/*.yml\\\"\\n\\nalerting:\\n  alertmanagers:\\n    - static_configs:\\n        - targets:\\n          - alertmanager:9093\\n\\nscrape_configs:\\n  # Prometheus itself\\n  - job_name: 'prometheus'\\n    static_configs:\\n      - targets: ['localhost:9090']\\n    scrape_interval: 30s\\n\\n  # Node Exporter - Host metrics\\n  - job_name: 'node-exporter'\\n    static_configs:\\n      - targets: ['node-exporter:9100']\\n    scrape_interval: 30s\\n\\n  # cAdvisor - Container metrics\\n  - job_name: 'cadvisor'\\n    static_configs:\\n      - targets: ['cadvisor:8080']\\n    scrape_interval: 30s\\n\\n  # Media Vault API\\n  - job_name: 'media-vault-api'\\n    static_configs:\\n      - targets: ['media-vault-api:8080']\\n    metrics_path: '/metrics'\\n    scrape_interval: 15s\\n\\n  # Keycloak\\n  - job_name: 'keycloak'\\n    static_configs:\\n      - targets: ['keycloak:8080']\\n    metrics_path: '/metrics'\\n    scrape_interval: 30s\\n\\n  # PostgreSQL Exporter\\n  - job_name: 'postgres-exporter'\\n    static_configs:\\n      - targets: ['postgres-exporter:9187']\\n    scrape_interval: 30s\\n\\n  # Redis Exporter\\n  - job_name: 'redis-exporter'\\n    static_configs:\\n      - targets: ['redis-exporter:9121']\\n    scrape_interval: 30s\\n\\n  # Blackbox Exporter - External monitoring\\n  - job_name: 'blackbox'\\n    metrics_path: /probe\\n    params:\\n      module: [http_2xx]\\n    static_configs:\\n      - targets:\\n        - http://media-vault-api:8080/health\\n        - http://keycloak:8080/health\\n        - http://flutter-web:80\\n    relabel_configs:\\n      - source_labels: [__address__]\\n        target_label: __param_target\\n      - source_labels: [__param_target]\\n        target_label: instance\\n      - target_label: __address__\\n        replacement: blackbox-exporter:9115\\n\"\n            }\n          ]\n        },\n        {\n          \"name\": \"promtail\",\n          \"type\": \"directory\",\n          \"path\": \"monitoring/promtail\",\n          \"children\": [\n            {\n              \"name\": \"promtail.yml\",\n              \"type\": \"file\",\n              \"path\": \"monitoring/promtail/promtail.yml\",\n              \"size\": 1729,\n              \"content\": \"server:\\n  http_listen_port: 9080\\n  grpc_listen_port: 0\\n\\npositions:\\n  filename: /tmp/positions.yaml\\n\\nclients:\\n  - url: http://loki:3100/loki/api/v1/push\\n\\nscrape_configs:\\n  # Docker container logs\\n  - job_name: container-logs\\n    static_configs:\\n      - targets:\\n          - localhost\\n        labels:\\n          job: containerlogs\\n          __path__: /var/lib/docker/containers/*/*log\\n\\n    pipeline_stages:\\n      - json:\\n          expressions:\\n            output: log\\n            stream: stream\\n            attrs:\\n      - json:\\n          expressions:\\n            tag:\\n          source: attrs\\n      - regex:\\n          expression: (?P<container_name>(?:[^|]*))\\\\|\\n          source: tag\\n      - timestamp:\\n          format: RFC3339Nano\\n          source: time\\n      - labels:\\n          stream:\\n          container_name:\\n      - output:\\n          source: output\\n\\n  # Media Vault API logs\\n  - job_name: media-vault-api\\n    static_configs:\\n      - targets:\\n          - localhost\\n        labels:\\n          job: media-vault-api\\n          __path__: /var/log/media-vault-api.log\\n\\n  # Keycloak logs\\n  - job_name: keycloak\\n    static_configs:\\n      - targets:\\n          - localhost\\n        labels:\\n          job: keycloak\\n          __path__: /var/log/keycloak.log\\n\\n  # System logs\\n  - job_name: syslog\\n    static_configs:\\n      - targets:\\n          - localhost\\n        labels:\\n          job: syslog\\n          __path__: /var/log/syslog\\n\\n    pipeline_stages:\\n      - regex:\\n          expression: '^(?P<timestamp>\\\\S+\\\\s+\\\\d+\\\\s+\\\\d+:\\\\d+:\\\\d+)\\\\s+(?P<hostname>\\\\S+)\\\\s+(?P<service>\\\\S+?)(\\\\[\\\\d+\\\\])?\\\\s*:\\\\s+(?P<message>.*)\\n      - timestamp:\\n          format: 'Jan 02 15:04:05'\\n          source: timestamp\\n      - labels:\\n          hostname:\\n          service:\\n\\n\"\n            }\n          ]\n        },\n        {\n          \"name\": \"TODO.md\",\n          \"type\": \"file\",\n          \"path\": \"monitoring/TODO.md\",\n          \"size\": 313,\n          \"content\": \"# Monitoring - TODO\\n\\n## High Priority\\n- [ ] Set up Prometheus metrics collection\\n- [ ] Configure Grafana dashboards\\n- [ ] Implement alerting rules\\n\\n## Medium Priority\\n- [ ] Add logging infrastructure\\n- [ ] Set up service health checks\\n- [ ] Configure log rotation\\n\\n## Completed\\n- [x] Basic monitoring stack setup\\n\"\n        }\n      ]\n    },\n    {\n      \"name\": \"nsfw-analyzer\",\n      \"type\": \"directory\",\n      \"path\": \"nsfw-analyzer\",\n      \"children\": [\n        {\n          \"name\": \"analyzer.py\",\n          \"type\": \"file\",\n          \"path\": \"nsfw-analyzer/analyzer.py\",\n          \"size\": 4790,\n          \"content\": \"import os\\nimport requests\\nimport numpy as np\\nimport tensorflow as tf\\nfrom PIL import Image\\nfrom flask import Flask, request, jsonify\\nimport logging\\n\\nlogging.basicConfig(level=logging.INFO)\\nlogger = logging.getLogger(__name__)\\n\\napp = Flask(__name__)\\n\\nclass NSFWAnalyzer:\\n    def __init__(self):\\n        self.model_path = os.getenv('MODEL_PATH', '/models')\\n        self.confidence_threshold = float(os.getenv('CONFIDENCE_THRESHOLD', '0.8'))\\n        self.model = None\\n        self.load_model()\\n\\n    def load_model(self):\\n        \\\"\\\"\\\"Load NSFW detection model\\\"\\\"\\\"\\n        try:\\n            # Try to load pre-trained model\\n            model_file = os.path.join(self.model_path, 'nsfw_mobilenet.h5')\\n            if os.path.exists(model_file):\\n                self.model = tf.keras.models.load_model(model_file)\\n                logger.info(\\\"NSFW model loaded successfully\\\")\\n            else:\\n                logger.warning(\\\"NSFW model not found, using mock detection\\\")\\n                self.model = None\\n        except Exception as e:\\n            logger.error(f\\\"Failed to load NSFW model: {e}\\\")\\n            self.model = None\\n\\n    def preprocess_image(self, image_path):\\n        \\\"\\\"\\\"Preprocess image for NSFW detection\\\"\\\"\\\"\\n        try:\\n            image = Image.open(image_path).convert('RGB')\\n            image = image.resize((224, 224))\\n            image_array = np.array(image) / 255.0\\n            image_array = np.expand_dims(image_array, axis=0)\\n            return image_array\\n        except Exception as e:\\n            logger.error(f\\\"Failed to preprocess image: {e}\\\")\\n            return None\\n\\n    def detect_nsfw(self, image_path):\\n        \\\"\\\"\\\"Detect NSFW content in image\\\"\\\"\\\"\\n        if not self.model:\\n            # Mock detection for development\\n            return {\\n                'is_nsfw': False,\\n                'confidence': 0.1,\\n                'categories': {\\n                    'safe': 0.9,\\n                    'suggestive': 0.05,\\n                    'explicit': 0.05\\n                }\\n            }\\n\\n        try:\\n            # Preprocess image\\n            image_array = self.preprocess_image(image_path)\\n            if image_array is None:\\n                return None\\n\\n            # Run prediction\\n            predictions = self.model.predict(image_array)\\n\\n            # Parse results (assuming model outputs probabilities for each category)\\n            categories = {\\n                'safe': float(predictions[0][0]),\\n                'suggestive': float(predictions[0][1]),\\n                'explicit': float(predictions[0][2])\\n            }\\n\\n            # Determine if NSFW\\n            nsfw_confidence = categories['suggestive'] + categories['explicit']\\n            is_nsfw = nsfw_confidence > self.confidence_threshold\\n\\n            return {\\n                'is_nsfw': is_nsfw,\\n                'confidence': nsfw_confidence,\\n                'categories': categories\\n            }\\n\\n        except Exception as e:\\n            logger.error(f\\\"NSFW detection failed: {e}\\\")\\n            return None\\n\\n# Global analyzer instance\\nanalyzer = NSFWAnalyzer()\\n\\n@app.route('/health', methods=['GET'])\\ndef health_check():\\n    return jsonify({'status': 'healthy', 'model_loaded': analyzer.model is not None})\\n\\n@app.route('/analyze', methods=['POST'])\\ndef analyze_image():\\n    \\\"\\\"\\\"Analyze image for NSFW content\\\"\\\"\\\"\\n    try:\\n        data = request.get_json()\\n        image_path = data.get('image_path')\\n\\n        if not image_path or not os.path.exists(image_path):\\n            return jsonify({'error': 'Invalid image path'}), 400\\n\\n        # Run NSFW detection\\n        result = analyzer.detect_nsfw(image_path)\\n\\n        if result is None:\\n            return jsonify({'error': 'Analysis failed'}), 500\\n\\n        return jsonify(result)\\n\\n    except Exception as e:\\n        logger.error(f\\\"Analysis request failed: {e}\\\")\\n        return jsonify({'error': 'Internal server error'}), 500\\n\\n@app.route('/batch-analyze', methods=['POST'])\\ndef batch_analyze():\\n    \\\"\\\"\\\"Analyze multiple images\\\"\\\"\\\"\\n    try:\\n        data = request.get_json()\\n        image_paths = data.get('image_paths', [])\\n\\n        results = []\\n        for image_path in image_paths:\\n            if os.path.exists(image_path):\\n                result = analyzer.detect_nsfw(image_path)\\n                results.append({\\n                    'image_path': image_path,\\n                    'result': result\\n                })\\n            else:\\n                results.append({\\n                    'image_path': image_path,\\n                    'error': 'File not found'\\n                })\\n\\n        return jsonify({'results': results})\\n\\n    except Exception as e:\\n        logger.error(f\\\"Batch analysis failed: {e}\\\")\\n        return jsonify({'error': 'Internal server error'}), 500\\n\\nif __name__ == '__main__':\\n    app.run(host='0.0.0.0', port=8501, debug=False)\\n\\n\\n\"\n        },\n        {\n          \"name\": \"Dockerfile\",\n          \"type\": \"file\",\n          \"path\": \"nsfw-analyzer/Dockerfile\",\n          \"size\": 0,\n          \"content\": \"\"\n        },\n        {\n          \"name\": \"model_loader.py\",\n          \"type\": \"file\",\n          \"path\": \"nsfw-analyzer/model_loader.py\",\n          \"size\": 25,\n          \"content\": \"\\\"\\\"\\\"\\nmodel_loader.py\\n\\\"\\\"\\\"\\n\\n\"\n        },\n        {\n          \"name\": \"requirements.txt\",\n          \"type\": \"file\",\n          \"path\": \"nsfw-analyzer/requirements.txt\",\n          \"size\": 93,\n          \"content\": \"tensorflow==2.13.0\\npillow==10.1.0\\nnumpy==1.24.3\\nrequests==2.31.0\\nflask==2.3.3\\nwerkzeug==2.3.7\"\n        }\n      ]\n    },\n    {\n      \"name\": \"photovault\",\n      \"type\": \"directory\",\n      \"path\": \"photovault\",\n      \"children\": [\n        {\n          \"name\": \"accounts\",\n          \"type\": \"directory\",\n          \"path\": \"photovault/accounts\",\n          \"children\": [\n            {\n              \"name\": \"migrations\",\n              \"type\": \"directory\",\n              \"path\": \"photovault/accounts/migrations\",\n              \"children\": [\n                {\n                  \"name\": \"__init__.py\",\n                  \"type\": \"file\",\n                  \"path\": \"photovault/accounts/migrations/__init__.py\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                }\n              ]\n            },\n            {\n              \"name\": \"__init__.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/accounts/__init__.py\",\n              \"size\": 0,\n              \"content\": \"\"\n            },\n            {\n              \"name\": \"admin.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/accounts/admin.py\",\n              \"size\": 1781,\n              \"content\": \"from django.contrib import admin\\nfrom django.contrib.auth.admin import UserAdmin\\nfrom django.utils.html import format_html\\nfrom django.urls import reverse\\nfrom django.utils.safestring import mark_safe\\nfrom django.contrib.auth import get_user_model\\nfrom .models import UserProfile, AuditLog\\n\\nUser = get_user_model()\\n\\n\\nclass UserProfileInline(admin.StackedInline):\\n    model = UserProfile\\n    can_delete = False\\n    verbose_name_plural = 'Profile'\\n    fk_name = 'user'\\n    readonly_fields = ('created_at', 'updated_at')\\n\\n\\n@admin.register(User)\\nclass CustomUserAdmin(UserAdmin):\\n    list_display = ('email', 'first_name', 'last_name', 'is_staff', 'is_active')\\n    list_filter = ('is_staff', 'is_active', 'is_partner', 'is_admin')\\n    search_fields = ('email', 'first_name', 'last_name')\\n    ordering = ('email',)\\n    fieldsets = (\\n        (None, {'fields': ('email', 'password')}),\\n        ('Personal Info', {'fields': ('first_name', 'last_name')}),\\n        ('Permissions', {\\n            'fields': ('is_active', 'is_staff', 'is_superuser', 'is_partner', 'is_admin', 'groups', 'user_permissions'),\\n        }),\\n        ('Important dates', {'fields': ('last_login', 'date_joined')}),\\n    )\\n    add_fieldsets = (\\n        (None, {\\n            'classes': ('wide',),\\n            'fields': ('email', 'password1', 'password2', 'is_staff', 'is_active')}\\n        ),\\n    )\\n\\n@admin.register(UserProfile)\\nclass UserProfileAdmin(admin.ModelAdmin):\\n    list_display = ('user', 'phone')\\n    search_fields = ('user__email', 'phone')\\n\\n@admin.register(AuditLog)\\nclass AuditLogAdmin(admin.ModelAdmin):\\n    list_display = ('user', 'action', 'timestamp', 'ip_address')\\n    list_filter = ('action', 'timestamp')\\n    search_fields = ('user__email', 'action', 'ip_address')\\n    readonly_fields = ('timestamp',)\"\n            },\n            {\n              \"name\": \"apps.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/accounts/apps.py\",\n              \"size\": 148,\n              \"content\": \"from django.apps import AppConfig\\n\\n\\nclass AccountsConfig(AppConfig):\\n    default_auto_field = \\\"django.db.models.BigAutoField\\\"\\n    name = \\\"accounts\\\"\\n\"\n            },\n            {\n              \"name\": \"models.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/accounts/models.py\",\n              \"size\": 4011,\n              \"content\": \"from django.contrib.auth.models import AbstractUser, BaseUserManager, Group, Permission\\nfrom django.db import models\\nfrom django.utils.translation import gettext_lazy as _\\nfrom django.utils import timezone\\n\\n\\nclass CustomUserManager(BaseUserManager):\\n    \\\"\\\"\\\"Custom user model manager where email is the unique identifier.\\\"\\\"\\\"\\n    \\n    def create_user(self, email, password=None, **extra_fields):\\n        \\\"\\\"\\\"Create and save a user with the given email and password.\\\"\\\"\\\"\\n        if not email:\\n            raise ValueError(_('The Email must be set'))\\n        email = self.normalize_email(email)\\n        user = self.model(email=email, **extra_fields)\\n        user.set_password(password)\\n        user.save(using=self._db)\\n        return user\\n\\n    def create_superuser(self, email, password=None, **extra_fields):\\n        \\\"\\\"\\\"Create and save a SuperUser with the given email and password.\\\"\\\"\\\"\\n        extra_fields.setdefault('is_staff', True)\\n        extra_fields.setdefault('is_superuser', True)\\n        extra_fields.setdefault('is_active', True)\\n\\n        if extra_fields.get('is_staff') is not True:\\n            raise ValueError(_('Superuser must have is_staff=True.'))\\n        if extra_fields.get('is_superuser') is not True:\\n            raise ValueError(_('Superuser must have is_superuser=True.'))\\n        return self.create_user(email, password, **extra_fields)\\n\\n\\nclass CustomUser(AbstractUser):\\n    \\\"\\\"\\\"Custom user model that uses email as the unique identifier.\\\"\\\"\\\"\\n    username = None\\n    email = models.EmailField(_('email address'), unique=True)\\n    first_name = models.CharField(_('first name'), max_length=150)\\n    last_name = models.CharField(_('last name'), max_length=150)\\n    is_partner = models.BooleanField(default=False)\\n    is_admin = models.BooleanField(default=False)\\n    date_joined = models.DateTimeField(default=timezone.now)\\n    last_login = models.DateTimeField(blank=True, null=True)\\n    \\n    USERNAME_FIELD = 'email'\\n    REQUIRED_FIELDS = ['first_name', 'last_name']\\n    \\n    objects = CustomUserManager()\\n    \\n    def __str__(self):\\n        return self.email\\n    \\n    def get_full_name(self):\\n        return f\\\"{self.first_name} {self.last_name}\\\"\\n    \\n    def has_perm(self, perm, obj=None):\\n        \\\"\\\"\\\"Does the user have a specific permission?\\\"\\\"\\\"\\n        return True\\n    \\n    def has_module_perms(self, app_label):\\n        \\\"\\\"\\\"Does the user have permissions to view the app `app_label`?\\\"\\\"\\\"\\n        return True\\n    \\n    class Meta:\\n        verbose_name = _('user')\\n        verbose_name_plural = _('users')\\n\\n\\nclass UserProfile(models.Model):\\n    \\\"\\\"\\\"Extended user profile information.\\\"\\\"\\\"\\n    user = models.OneToOneField(CustomUser, on_delete=models.CASCADE, related_name='profile')\\n    phone = models.CharField(max_length=20, blank=True, null=True)\\n    address = models.TextField(blank=True, null=True)\\n    profile_picture = models.ImageField(upload_to='profile_pics/', blank=True, null=True)\\n    bio = models.TextField(blank=True, null=True)\\n    \\n    def __str__(self):\\n        return f\\\"{self.user.email}'s Profile\\\"\\n\\n\\nclass AuditLog(models.Model):\\n    \\\"\\\"\\\"Model to track user actions for auditing.\\\"\\\"\\\"\\n    ACTION_CHOICES = [\\n        ('login', 'User Login'),\\n        ('logout', 'User Logout'),\\n        ('password_change', 'Password Changed'),\\n        ('profile_update', 'Profile Updated'),\\n        ('user_created', 'User Created'),\\n        ('user_updated', 'User Updated'),\\n        ('user_deleted', 'User Deleted'),\\n    ]\\n    \\n    user = models.ForeignKey(CustomUser, on_delete=models.SET_NULL, null=True, blank=True)\\n    action = models.CharField(max_length=50, choices=ACTION_CHOICES)\\n    ip_address = models.GenericIPAddressField(blank=True, null=True)\\n    user_agent = models.TextField(blank=True, null=True)\\n    timestamp = models.DateTimeField(auto_now_add=True)\\n    details = models.JSONField(blank=True, null=True)\\n    \\n    class Meta:\\n        ordering = ['-timestamp']\\n    \\n    def __str__(self):\\n        return f\\\"{self.get_action_display()} - {self.user.email if self.user else 'System'}\\\"\\n\"\n            },\n            {\n              \"name\": \"tests.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/accounts/tests.py\",\n              \"size\": 60,\n              \"content\": \"from django.test import TestCase\\n\\n# Create your tests here.\\n\"\n            },\n            {\n              \"name\": \"urls.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/accounts/urls.py\",\n              \"size\": 1664,\n              \"content\": \"from django.urls import path\\nfrom django.contrib.auth import views as auth_views\\nfrom . import views\\nfrom .views import (\\n    UserProfileView, UserProfileUpdateView, \\n    UserPasswordChangeView, UserNotificationSettingsView,\\n    UserActivityLogView, UserDeleteView\\n)\\n\\napp_name = 'accounts'\\n\\nurlpatterns = [\\n    # User profile\\n    path('profile/', UserProfileView.as_view(), name='profile'),\\n    path('profile/edit/', UserProfileUpdateView.as_view(), name='profile_edit'),\\n    \\n    # Authentication\\n    path('login/', auth_views.LoginView.as_view(template_name='accounts/login.html'), name='login'),\\n    path('logout/', auth_views.LogoutView.as_view(next_page='home'), name='logout'),\\n    \\n    # Password management\\n    path('password/change/', UserPasswordChangeView.as_view(), name='password_change'),\\n    path('password/change/done/', \\n         auth_views.PasswordChangeDoneView.as_view(\\n             template_name='accounts/password_change_done.html'\\n         ), \\n         name='password_change_done'\\n    ),\\n    \\n    # Account settings\\n    path('settings/notifications/', \\n         UserNotificationSettingsView.as_view(), \\n         name='notification_settings'\\n    ),\\n    path('settings/security/', views.SecuritySettingsView.as_view(), name='security_settings'),\\n    \\n    # Activity and audit logs\\n    path('activity/', UserActivityLogView.as_view(), name='activity_log'),\\n    \\n    # Account deletion\\n    path('delete/', UserDeleteView.as_view(), name='delete_account'),\\n    \\n    # API endpoints\\n    path('api/profile/', views.ProfileAPIView.as_view(), name='api_profile'),\\n    path('api/activity/', views.ActivityLogAPIView.as_view(), name='api_activity'),\\n]\\n\"\n            },\n            {\n              \"name\": \"views.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/accounts/views.py\",\n              \"size\": 63,\n              \"content\": \"from django.shortcuts import render\\n\\n# Create your views here.\\n\"\n            }\n          ]\n        },\n        {\n          \"name\": \"admin_panel\",\n          \"type\": \"directory\",\n          \"path\": \"photovault/admin_panel\",\n          \"children\": [\n            {\n              \"name\": \"migrations\",\n              \"type\": \"directory\",\n              \"path\": \"photovault/admin_panel/migrations\",\n              \"children\": [\n                {\n                  \"name\": \"__init__.py\",\n                  \"type\": \"file\",\n                  \"path\": \"photovault/admin_panel/migrations/__init__.py\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                }\n              ]\n            },\n            {\n              \"name\": \"__init__.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/admin_panel/__init__.py\",\n              \"size\": 0,\n              \"content\": \"\"\n            },\n            {\n              \"name\": \"admin.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/admin_panel/admin.py\",\n              \"size\": 2575,\n              \"content\": \"from django.contrib import admin\\nfrom django.utils.html import format_html\\nfrom .models import (\\n    SystemSetting, SecurityEvent, ContentModeration, \\n    AuditLogEntry, AdminNotification, SystemConfig, AuditLog\\n)\\n\\n\\n@admin.register(SystemSetting)\\nclass SystemSettingAdmin(admin.ModelAdmin):\\n    list_display = ('key', 'value_short', 'is_public', 'updated_at', 'updated_by')\\n    list_filter = ('is_public', 'updated_at')\\n    search_fields = ('key', 'value', 'description')\\n    list_editable = ('is_public',)\\n    readonly_fields = ('updated_at', 'updated_by')\\n    \\n    def value_short(self, obj):\\n        return obj.value[:100] + '...' if len(obj.value) > 100 else obj.value\\n    value_short.short_description = 'Value'\\n    \\n    def save_model(self, request, obj, form, change):\\n        if not obj.pk:\\n            obj.updated_by = request.user\\n        super().save_model(request, obj, form, change)\\n\\n\\n@admin.register(SecurityEvent)\\nclass SecurityEventAdmin(admin.ModelAdmin):\\n    list_display = ('event_type', 'user_display', 'ip_address', 'created_at')\\n    list_filter = ('event_type', 'created_at')\\n    search_fields = ('user__email', 'ip_address', 'details')\\n    readonly_fields = ('created_at', 'details_formatted')\\n    date_hierarchy = 'created_at'\\n    \\n    def user_display(self, obj):\\n        return obj.user.email if obj.user else 'System'\\n    user_display.short_description = 'User'\\n    \\n    def details_formatted(self, obj):\\n        if not obj.details:\\n            return \\\"No details available\\\"\\n        return format_html('<pre>{}</pre>', str(obj.details))\\n    details_formatted.short_description = 'Event Details'\\n\\n\\nclass ContentModerationInline(admin.TabularInline):\\n    model = ContentModeration\\n    extra = 0\\n    readonly_fields = ('created_at', 'updated_at', 'reported_by', 'reviewed_by')\\n    can_delete = False\\n\\n\\n@admin.register(ContentModeration)\\nclass ContentModerationAdmin(admin.ModelAdmin):\\n    list_display = ('content_type', 'object_id', 'status', 'moderated_by', 'moderated_at')\\n    list_filter = ('status', 'content_type')\\n    search_fields = ('object_id', 'moderated_by__email', 'notes')\\n    readonly_fields = ('moderated_at',)\\n    actions = ['approve_content', 'reject_content']\\n\\n    def approve_content(self, request, queryset):\\n        queryset.update(status='approved', moderated_by=request.user)\\n    approve_content.short_description = \\\"Approve selected content\\\"\\n\\n    def reject_content(self, request, queryset):\\n        queryset.update(status='rejected', moderated_by=request.user)\\n    reject_content.short_description = \\\"Reject selected content\\\"\"\n            },\n            {\n              \"name\": \"apps.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/admin_panel/apps.py\",\n              \"size\": 153,\n              \"content\": \"from django.apps import AppConfig\\n\\n\\nclass AdminPanelConfig(AppConfig):\\n    default_auto_field = \\\"django.db.models.BigAutoField\\\"\\n    name = \\\"admin_panel\\\"\\n\"\n            },\n            {\n              \"name\": \"models.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/admin_panel/models.py\",\n              \"size\": 4964,\n              \"content\": \"from django.db import models\\nfrom django.conf import settings\\nfrom django.utils.translation import gettext_lazy as _\\nfrom django.utils import timezone\\nfrom accounts.models import CustomUser\\n\\n\\nclass SystemSetting(models.Model):\\n    \\\"\\\"\\\"System-wide settings and configurations.\\\"\\\"\\\"\\n    key = models.CharField(max_length=100, unique=True)\\n    value = models.TextField()\\n    description = models.TextField(blank=True, null=True)\\n    is_public = models.BooleanField(default=False)\\n    updated_at = models.DateTimeField(auto_now=True)\\n    updated_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True)\\n    \\n    def __str__(self):\\n        return f\\\"{self.key}: {self.value[:50]}\\\"\\n\\n\\nclass SecurityEvent(models.Model):\\n    \\\"\\\"\\\"Track security-related events and potential threats.\\\"\\\"\\\"\\n    EVENT_TYPES = [\\n        ('login_attempt', 'Login Attempt'),\\n        ('failed_login', 'Failed Login'),\\n        ('password_reset', 'Password Reset'),\\n        ('suspicious_activity', 'Suspicious Activity'),\\n        ('brute_force', 'Brute Force Attempt'),\\n        ('account_lockout', 'Account Lockout'),\\n    ]\\n    \\n    event_type = models.CharField(max_length=50, choices=EVENT_TYPES)\\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True)\\n    ip_address = models.GenericIPAddressField()\\n    user_agent = models.TextField(blank=True, null=True)\\n    details = models.JSONField(blank=True, null=True)\\n    created_at = models.DateTimeField(auto_now_add=True)\\n    \\n    class Meta:\\n        ordering = ['-created_at']\\n    \\n    def __str__(self):\\n        return f\\\"{self.get_event_type_display()} - {self.ip_address} - {self.created_at}\\\"\\n\\n\\nclass ContentModeration(models.Model):\\n    \\\"\\\"\\\"Track content that needs moderation.\\\"\\\"\\\"\\n    STATUS_CHOICES = [\\n        ('pending', 'Pending Review'),\\n        ('approved', 'Approved'),\\n        ('rejected', 'Rejected'),\\n        ('flagged', 'Flagged for Review'),\\n    ]\\n    \\n    content_type = models.CharField(max_length=100)  # e.g., 'photo', 'comment', 'user_profile'\\n    content_id = models.PositiveIntegerField()\\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')\\n    reported_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True, related_name='reported_content')\\n    reviewed_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True, related_name='moderated_content')\\n    report_reason = models.TextField(blank=True, null=True)\\n    moderator_notes = models.TextField(blank=True, null=True)\\n    created_at = models.DateTimeField(auto_now_add=True)\\n    updated_at = models.DateTimeField(auto_now=True)\\n    \\n    class Meta:\\n        ordering = ['-created_at']\\n        unique_together = ['content_type', 'content_id']\\n    \\n    def __str__(self):\\n        return f\\\"{self.content_type} #{self.content_id} - {self.get_status_display()}\\\"\\n\\n\\nclass AuditLogEntry(models.Model):\\n    \\\"\\\"\\\"Detailed audit log for admin actions.\\\"\\\"\\\"\\n    ACTION_TYPES = [\\n        ('create', 'Create'),\\n        ('update', 'Update'),\\n        ('delete', 'Delete'),\\n        ('login', 'Login'),\\n        ('logout', 'Logout'),\\n        ('permission_change', 'Permission Change'),\\n        ('setting_change', 'Setting Change'),\\n    ]\\n    \\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True)\\n    action = models.CharField(max_length=50, choices=ACTION_TYPES)\\n    model = models.CharField(max_length=100)\\n    object_id = models.CharField(max_length=100, blank=True, null=True)\\n    changes = models.JSONField(blank=True, null=True)\\n    ip_address = models.GenericIPAddressField(blank=True, null=True)\\n    user_agent = models.TextField(blank=True, null=True)\\n    timestamp = models.DateTimeField(auto_now_add=True)\\n    \\n    class Meta:\\n        ordering = ['-timestamp']\\n        verbose_name_plural = 'Audit Log Entries'\\n    \\n    def __str__(self):\\n        return f\\\"{self.get_action_display()} {self.model} by {self.user}\\\"\\n\\n\\nclass AdminNotification(models.Model):\\n    \\\"\\\"\\\"Notifications for admin users.\\\"\\\"\\\"\\n    NOTIFICATION_TYPES = [\\n        ('system_alert', 'System Alert'),\\n        ('user_report', 'User Report'),\\n        ('content_flagged', 'Content Flagged'),\\n        ('security_alert', 'Security Alert'),\\n        ('system_update', 'System Update'),\\n    ]\\n    \\n    notification_type = models.CharField(max_length=50, choices=NOTIFICATION_TYPES)\\n    title = models.CharField(max_length=200)\\n    message = models.TextField()\\n    is_read = models.BooleanField(default=False)\\n    related_content_type = models.CharField(max_length=100, blank=True, null=True)\\n    related_object_id = models.PositiveIntegerField(blank=True, null=True)\\n    created_at = models.DateTimeField(auto_now_add=True)\\n    \\n    class Meta:\\n        ordering = ['-created_at']\\n    \\n    def __str__(self):\\n        return f\\\"{self.get_notification_type_display()}: {self.title}\\\"\\n\"\n            },\n            {\n              \"name\": \"tests.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/admin_panel/tests.py\",\n              \"size\": 60,\n              \"content\": \"from django.test import TestCase\\n\\n# Create your tests here.\\n\"\n            },\n            {\n              \"name\": \"urls.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/admin_panel/urls.py\",\n              \"size\": 2020,\n              \"content\": \"from django.urls import path\\nfrom . import views\\nfrom .views import (\\n    DashboardView, UserListView, UserDetailView, UserCreateView, UserUpdateView,\\n    SystemSettingsView, SecurityLogsView, ContentModerationView, AuditLogsView,\\n    AnalyticsDashboardView, SystemHealthView, BackupRestoreView\\n)\\n\\napp_name = 'admin_panel'\\n\\nurlpatterns = [\\n    # Dashboard\\n    path('', DashboardView.as_view(), name='dashboard'),\\n    \\n    # User Management\\n    path('users/', UserListView.as_view(), name='user_list'),\\n    path('users/create/', UserCreateView.as_view(), name='user_create'),\\n    path('users/<int:pk>/', UserDetailView.as_view(), name='user_detail'),\\n    path('users/<int:pk>/edit/', UserUpdateView.as_view(), name='user_edit'),\\n    \\n    # System Settings\\n    path('settings/', SystemSettingsView.as_view(), name='system_settings'),\\n    \\n    # Security\\n    path('security/logs/', SecurityLogsView.as_view(), name='security_logs'),\\n    \\n    # Content Moderation\\n    path('moderation/', ContentModerationView.as_view(), name='content_moderation'),\\n    path('moderation/<int:pk>/review/', \\n         views.ReviewContent.as_view(), \\n         name='review_content'\\n    ),\\n    \\n    # Audit Logs\\n    path('audit-logs/', AuditLogsView.as_view(), name='audit_logs'),\\n    \\n    # Analytics\\n    path('analytics/', AnalyticsDashboardView.as_view(), name='analytics'),\\n    \\n    # System Health\\n    path('system/health/', SystemHealthView.as_view(), name='system_health'),\\n    \\n    # Backup & Restore\\n    path('backup/', BackupRestoreView.as_view(), name='backup_restore'),\\n    \\n    # API Endpoints\\n    path('api/users/', views.UserListAPIView.as_view(), name='api_users'),\\n    path('api/users/<int:pk>/', views.UserDetailAPIView.as_view(), name='api_user_detail'),\\n    path('api/security-events/', views.SecurityEventAPIView.as_view(), name='api_security_events'),\\n    path('api/audit-logs/', views.AuditLogAPIView.as_view(), name='api_audit_logs'),\\n    path('api/analytics/', views.AnalyticsAPIView.as_view(), name='api_analytics'),\\n]\\n\"\n            },\n            {\n              \"name\": \"views.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/admin_panel/views.py\",\n              \"size\": 63,\n              \"content\": \"from django.shortcuts import render\\n\\n# Create your views here.\\n\"\n            }\n          ]\n        },\n        {\n          \"name\": \"core\",\n          \"type\": \"directory\",\n          \"path\": \"photovault/core\",\n          \"children\": [\n            {\n              \"name\": \"migrations\",\n              \"type\": \"directory\",\n              \"path\": \"photovault/core/migrations\",\n              \"children\": [\n                {\n                  \"name\": \"__init__.py\",\n                  \"type\": \"file\",\n                  \"path\": \"photovault/core/migrations/__init__.py\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                }\n              ]\n            },\n            {\n              \"name\": \"__init__.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/core/__init__.py\",\n              \"size\": 0,\n              \"content\": \"\"\n            },\n            {\n              \"name\": \"admin.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/core/admin.py\",\n              \"size\": 7210,\n              \"content\": \"from django.contrib import admin\\nfrom django.utils.html import format_html\\nfrom django.urls import reverse\\nfrom django.utils.safestring import mark_safe\\nfrom django.conf import settings\\nfrom .models import (\\n    ActivityLog, SystemSetting, FileUpload, Notification\\n)\\n\\n\\n@admin.register(ActivityLog)\\nclass ActivityLogAdmin(admin.ModelAdmin):\\n    list_display = ('action', 'user_display', 'ip_address', 'created_at')\\n    list_filter = ('action', 'created_at')\\n    search_fields = ('user__email', 'ip_address', 'action')\\n    readonly_fields = ('created_at', 'updated_at', 'details_formatted')\\n    date_hierarchy = 'created_at'\\n    \\n    def user_display(self, obj):\\n        if obj.user:\\n            url = reverse('admin:accounts_customuser_change', args=[obj.user.id])\\n            return mark_safe(f'<a href=\\\"{url}\\\">{obj.user.email}</a>')\\n        return 'System'\\n    user_display.short_description = 'User'\\n    \\n    def details_formatted(self, obj):\\n        if not obj.details:\\n            return \\\"No details available\\\"\\n        return format_html('<pre>{}</pre>', str(obj.details))\\n    details_formatted.short_description = 'Details'\\n    \\n    def has_add_permission(self, request):\\n        return False\\n    \\n    def has_change_permission(self, request, obj=None):\\n        return False\\n\\n\\n@admin.register(SystemSetting)\\nclass SystemSettingAdmin(admin.ModelAdmin):\\n    list_display = ('key', 'value_short', 'setting_type', 'is_public', 'updated_at')\\n    list_filter = ('setting_type', 'is_public')\\n    search_fields = ('key', 'value', 'description')\\n    list_editable = ('is_public',)\\n    readonly_fields = ('created_at', 'updated_at', 'updated_by_display', 'value_type_info')\\n    fieldsets = (\\n        ('Basic Information', {\\n            'fields': ('key', 'description', 'is_public')\\n        }),\\n        ('Value', {\\n            'fields': ('setting_type', 'value', 'value_type_info')\\n        }),\\n        ('Metadata', {\\n            'fields': ('updated_by_display', 'created_at', 'updated_at'),\\n            'classes': ('collapse',)\\n        }),\\n    )\\n    \\n    def value_short(self, obj):\\n        value = str(obj.value)\\n        return value[:100] + '...' if len(value) > 100 else value\\n    value_short.short_description = 'Value'\\n    \\n    def updated_by_display(self, obj):\\n        if obj.updated_by:\\n            url = reverse('admin:accounts_customuser_change', args=[obj.updated_by.id])\\n            return mark_safe(f'<a href=\\\"{url}\\\">{obj.updated_by.email}</a>')\\n        return 'System'\\n    updated_by_display.short_description = 'Updated By'\\n    \\n    def value_type_info(self, obj):\\n        if obj.setting_type == 'boolean':\\n            return \\\"Enter 'true' or 'false' (case insensitive)\\\"\\n        elif obj.setting_type == 'integer':\\n            return \\\"Enter a whole number\\\"\\n        elif obj.setting_type == 'json':\\n            return \\\"Enter valid JSON (e.g., {\\\\\\\"key\\\\\\\": \\\\\\\"value\\\\\\\"})\\\"\\n        return \\\"Text value\\\"\\n    value_type_info.short_description = 'Format Hint'\\n    \\n    def save_model(self, request, obj, form, change):\\n        if not obj.pk:\\n            obj.updated_by = request.user\\n        super().save_model(request, obj, form, change)\\n\\n\\n@admin.register(FileUpload)\\nclass FileUploadAdmin(admin.ModelAdmin):\\n    list_display = ('preview_thumbnail', 'original_filename', 'file_type', 'user_display', 'file_size_display', 'created_at')\\n    list_filter = ('file_type', 'created_at')\\n    search_fields = ('original_filename', 'user__email')\\n    readonly_fields = ('created_at', 'updated_at', 'preview_large', 'file_size_display', 'metadata_formatted')\\n    list_select_related = ('user',)\\n    \\n    fieldsets = (\\n        ('File Information', {\\n            'fields': ('preview_large', 'original_filename', 'file', 'file_type', 'is_public')\\n        }),\\n        ('Metadata', {\\n            'fields': ('mime_type', 'file_size_display', 'metadata_formatted'),\\n            'classes': ('collapse',)\\n        }),\\n        ('Ownership', {\\n            'fields': ('user',)\\n        }),\\n        ('Timestamps', {\\n            'fields': ('created_at', 'updated_at'),\\n            'classes': ('collapse',)\\n        }),\\n    )\\n    \\n    def preview_thumbnail(self, obj):\\n        if obj.file and obj.file_type == 'image':\\n            return mark_safe(f'<img src=\\\"{obj.file.url}\\\" style=\\\"max-height: 50px; max-width: 50px;\\\" />')\\n        return \\\"\\\"\\n    preview_thumbnail.short_description = 'Preview'\\n    \\n    def preview_large(self, obj):\\n        if obj.file and obj.file_type == 'image':\\n            return mark_safe(f'<img src=\\\"{obj.file.url}\\\" style=\\\"max-height: 300px; max-width: 100%;\\\" />')\\n        return \\\"No preview available\\\"\\n    preview_large.short_description = 'Preview'\\n    \\n    def file_size_display(self, obj):\\n        return obj.get_file_size_display()\\n    file_size_display.short_description = 'File Size'\\n    \\n    def user_display(self, obj):\\n        if obj.user:\\n            url = reverse('admin:accounts_customuser_change', args=[obj.user.id])\\n            return mark_safe(f'<a href=\\\"{url}\\\">{obj.user.email}</a>')\\n        return 'System'\\n    user_display.short_description = 'User'\\n    \\n    def metadata_formatted(self, obj):\\n        if not obj.metadata:\\n            return \\\"No metadata available\\\"\\n        return format_html('<pre>{}</pre>', str(obj.metadata))\\n    metadata_formatted.short_description = 'Metadata'\\n\\n\\n@admin.register(Notification)\\nclass NotificationAdmin(admin.ModelAdmin):\\n    list_display = ('title', 'user_display', 'notification_type', 'is_read', 'created_at')\\n    list_filter = ('notification_type', 'is_read', 'created_at')\\n    search_fields = ('title', 'message', 'user__email')\\n    list_editable = ('is_read',)\\n    readonly_fields = ('created_at', 'updated_at', 'read_at_display')\\n    actions = ['mark_as_read', 'mark_as_unread']\\n    \\n    fieldsets = (\\n        ('Notification', {\\n            'fields': ('user', 'title', 'message', 'notification_type')\\n        }),\\n        ('Actions', {\\n            'fields': ('is_read', 'read_at_display', 'action_url', 'action_text')\\n        }),\\n        ('Timestamps', {\\n            'fields': ('created_at', 'updated_at'),\\n            'classes': ('collapse',)\\n        }),\\n    )\\n    \\n    def user_display(self, obj):\\n        url = reverse('admin:accounts_customuser_change', args=[obj.user.id])\\n        return mark_safe(f'<a href=\\\"{url}\\\">{obj.user.email}</a>')\\n    user_display.short_description = 'User'\\n    \\n    def read_at_display(self, obj):\\n        if obj.read_at:\\n            return obj.read_at.strftime('%Y-%m-%d %H:%M:%S')\\n        return 'Not read'\\n    read_at_display.short_description = 'Read At'\\n    \\n    def mark_as_read(self, request, queryset):\\n        updated = queryset.update(is_read=True, read_at=timezone.now())\\n        self.message_user(request, f\\\"Marked {updated} notifications as read.\\\")\\n    mark_as_read.short_description = \\\"Mark selected notifications as read\\\"\\n    \\n    def mark_as_unread(self, request, queryset):\\n        updated = queryset.update(is_read=False, read_at=None)\\n        self.message_user(request, f\\\"Marked {updated} notifications as unread.\\\")\\n    mark_as_unread.short_description = \\\"Mark selected notifications as unread\\\"\\n    \\n    def get_queryset(self, request):\\n        return super().get_queryset(request).select_related('user')\\n\"\n            },\n            {\n              \"name\": \"apps.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/core/apps.py\",\n              \"size\": 140,\n              \"content\": \"from django.apps import AppConfig\\n\\n\\nclass CoreConfig(AppConfig):\\n    default_auto_field = \\\"django.db.models.BigAutoField\\\"\\n    name = \\\"core\\\"\\n\"\n            },\n            {\n              \"name\": \"models.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/core/models.py\",\n              \"size\": 6208,\n              \"content\": \"from django.db import models\\nfrom django.conf import settings\\nfrom django.utils import timezone\\nfrom django.utils.translation import gettext_lazy as _\\n\\n\\nclass TimeStampedModel(models.Model):\\n    \\\"\\\"\\\"Abstract base class with self-updating created and modified fields.\\\"\\\"\\\"\\n    created_at = models.DateTimeField(auto_now_add=True, db_index=True)\\n    updated_at = models.DateTimeField(auto_now=True, db_index=True)\\n\\n    class Meta:\\n        abstract = True\\n        ordering = ['-created_at']\\n\\n\\nclass ActivityLog(TimeStampedModel):\\n    \\\"\\\"\\\"System-wide activity log\\\"\\\"\\\"\\n    ACTION_TYPES = [\\n        ('login', 'User Login'),\\n        ('logout', 'User Logout'),\\n        ('password_change', 'Password Changed'),\\n        ('profile_update', 'Profile Updated'),\\n        ('content_create', 'Content Created'),\\n        ('content_update', 'Content Updated'),\\n        ('content_delete', 'Content Deleted'),\\n        ('settings_update', 'Settings Updated'),\\n    ]\\n    \\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True)\\n    action = models.CharField(max_length=50, choices=ACTION_TYPES)\\n    ip_address = models.GenericIPAddressField(blank=True, null=True)\\n    user_agent = models.TextField(blank=True, null=True)\\n    details = models.JSONField(blank=True, null=True)\\n    \\n    class Meta:\\n        verbose_name = _('Activity Log')\\n        verbose_name_plural = _('Activity Logs')\\n        ordering = ['-created_at']\\n    \\n    def __str__(self):\\n        return f\\\"{self.get_action_display()} - {self.user or 'System'}\\\"\\n\\n\\nclass SystemSetting(TimeStampedModel):\\n    \\\"\\\"\\\"System-wide settings and configurations\\\"\\\"\\\"\\n    SETTING_TYPES = [\\n        ('string', 'String'),\\n        ('integer', 'Integer'),\\n        ('boolean', 'Boolean'),\\n        ('json', 'JSON'),\\n    ]\\n    \\n    key = models.CharField(max_length=100, unique=True, help_text=\\\"Setting key (snake_case)\\\")\\n    value = models.TextField(blank=True, null=True, help_text=\\\"Setting value\\\")\\n    setting_type = models.CharField(max_length=20, choices=SETTING_TYPES, default='string')\\n    is_public = models.BooleanField(default=False, help_text=\\\"If True, this setting can be exposed via API\\\")\\n    description = models.TextField(blank=True, null=True, help_text=\\\"Description of the setting\\\")\\n    updated_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True, \\n                                 related_name='updated_settings')\\n    \\n    class Meta:\\n        verbose_name = _('System Setting')\\n        verbose_name_plural = _('System Settings')\\n        ordering = ['key']\\n    \\n    def __str__(self):\\n        return f\\\"{self.key}: {self.value}\\\"\\n    \\n    def get_typed_value(self):\\n        \\\"\\\"\\\"Return the value cast to the appropriate type\\\"\\\"\\\"\\n        if not self.value:\\n            return None\\n            \\n        if self.setting_type == 'integer':\\n            try:\\n                return int(self.value)\\n            except (ValueError, TypeError):\\n                return 0\\n        elif self.setting_type == 'boolean':\\n            return self.value.lower() in ('true', '1', 't', 'y', 'yes')\\n        elif self.setting_type == 'json':\\n            import json\\n            try:\\n                return json.loads(self.value)\\n            except (json.JSONDecodeError, TypeError):\\n                return {}\\n        return self.value\\n\\n\\nclass FileUpload(TimeStampedModel):\\n    \\\"\\\"\\\"Generic file upload model\\\"\\\"\\\"\\n    UPLOAD_TYPES = [\\n        ('image', 'Image'),\\n        ('document', 'Document'),\\n        ('video', 'Video'),\\n        ('audio', 'Audio'),\\n        ('other', 'Other'),\\n    ]\\n    \\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True)\\n    file = models.FileField(upload_to='uploads/%Y/%m/%d/')\\n    file_type = models.CharField(max_length=20, choices=UPLOAD_TYPES)\\n    original_filename = models.CharField(max_length=255)\\n    mime_type = models.CharField(max_length=100, blank=True, null=True)\\n    file_size = models.PositiveIntegerField(help_text=\\\"File size in bytes\\\")\\n    is_public = models.BooleanField(default=False)\\n    metadata = models.JSONField(blank=True, null=True)\\n    \\n    class Meta:\\n        verbose_name = _('File Upload')\\n        verbose_name_plural = _('File Uploads')\\n        ordering = ['-created_at']\\n    \\n    def __str__(self):\\n        return self.original_filename\\n    \\n    def get_file_size_display(self):\\n        \\\"\\\"\\\"Return human-readable file size\\\"\\\"\\\"\\n        if self.file_size < 1024:\\n            return f\\\"{self.file_size} B\\\"\\n        elif self.file_size < 1024 * 1024:\\n            return f\\\"{self.file_size / 1024:.1f} KB\\\"\\n        elif self.file_size < 1024 * 1024 * 1024:\\n            return f\\\"{self.file_size / (1024 * 1024):.1f} MB\\\"\\n        return f\\\"{self.file_size / (1024 * 1024 * 1024):.1f} GB\\\"\\n    \\n    def get_absolute_url(self):\\n        return self.file.url if self.file else ''\\n\\n\\nclass Notification(TimeStampedModel):\\n    \\\"\\\"\\\"System notifications for users\\\"\\\"\\\"\\n    NOTIFICATION_TYPES = [\\n        ('info', 'Information'),\\n        ('success', 'Success'),\\n        ('warning', 'Warning'),\\n        ('error', 'Error'),\\n        ('system', 'System'),\\n    ]\\n    \\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='notifications')\\n    notification_type = models.CharField(max_length=20, choices=NOTIFICATION_TYPES, default='info')\\n    title = models.CharField(max_length=200)\\n    message = models.TextField()\\n    is_read = models.BooleanField(default=False)\\n    read_at = models.DateTimeField(blank=True, null=True)\\n    action_url = models.URLField(blank=True, null=True)\\n    action_text = models.CharField(max_length=100, blank=True, null=True)\\n    \\n    class Meta:\\n        verbose_name = _('Notification')\\n        verbose_name_plural = _('Notifications')\\n        ordering = ['-created_at']\\n    \\n    def __str__(self):\\n        return f\\\"{self.get_notification_type_display()}: {self.title}\\\"\\n    \\n    def mark_as_read(self, commit=True):\\n        self.is_read = True\\n        self.read_at = timezone.now()\\n        if commit:\\n            self.save()\\n    \\n    def mark_as_unread(self, commit=True):\\n        self.is_read = False\\n        self.read_at = None\\n        if commit:\\n            self.save()\\n\"\n            },\n            {\n              \"name\": \"tests.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/core/tests.py\",\n              \"size\": 60,\n              \"content\": \"from django.test import TestCase\\n\\n# Create your tests here.\\n\"\n            },\n            {\n              \"name\": \"views.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/core/views.py\",\n              \"size\": 63,\n              \"content\": \"from django.shortcuts import render\\n\\n# Create your views here.\\n\"\n            }\n          ]\n        },\n        {\n          \"name\": \"partner_panel\",\n          \"type\": \"directory\",\n          \"path\": \"photovault/partner_panel\",\n          \"children\": [\n            {\n              \"name\": \"migrations\",\n              \"type\": \"directory\",\n              \"path\": \"photovault/partner_panel/migrations\",\n              \"children\": [\n                {\n                  \"name\": \"__init__.py\",\n                  \"type\": \"file\",\n                  \"path\": \"photovault/partner_panel/migrations/__init__.py\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                }\n              ]\n            },\n            {\n              \"name\": \"__init__.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/partner_panel/__init__.py\",\n              \"size\": 0,\n              \"content\": \"\"\n            },\n            {\n              \"name\": \"admin.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/partner_panel/admin.py\",\n              \"size\": 2294,\n              \"content\": \"from django.contrib import admin\\nfrom django.utils.html import format_html\\nfrom django.urls import reverse\\nfrom django.utils.safestring import mark_safe\\nfrom .models import (\\n    PhotoBatch, Photo, PhotoShare, PhotoAccessLog, \\n    PhotoCollection, PhotoComment\\n)\\n\\n\\nclass PhotoInline(admin.TabularInline):\\n    model = Photo\\n    extra = 0\\n    readonly_fields = ('preview_thumbnail', 'file_size_display', 'status')\\n    fields = ('preview_thumbnail', 'title', 'status', 'is_featured', 'created_at')\\n    \\n    def preview_thumbnail(self, obj):\\n        if obj.image:\\n            return mark_safe(f'<img src=\\\"{obj.image.url}\\\" style=\\\"max-height: 100px; max-width: 100px;\\\" />')\\n        return \\\"No Image\\\"\\n    preview_thumbnail.short_description = 'Preview'\\n    \\n    def file_size_display(self, obj):\\n        if obj.file_size < 1024:\\n            return f\\\"{obj.file_size} B\\\"\\n        elif obj.file_size < 1024 * 1024:\\n            return f\\\"{obj.file_size / 1024:.1f} KB\\\"\\n        return f\\\"{obj.file_size / (1024 * 1024):.1f} MB\\\"\\n    file_size_display.short_description = 'File Size'\\n    \\n    def has_change_permission(self, request, obj=None):\\n        return False\\n\\n\\n@admin.register(PhotoBatch)\\nclass PhotoBatchAdmin(admin.ModelAdmin):\\n    list_display = ('id', 'user', 'created_at', 'status')\\n    list_filter = ('status', 'created_at')\\n    search_fields = ('user__email', 'id')\\n    inlines = [PhotoInline]\\n    readonly_fields = ('created_at', 'updated_at')\\n\\n@admin.register(Photo)\\nclass PhotoAdmin(admin.ModelAdmin):\\n    list_display = ('id', 'batch', 'user', 'created_at', 'is_approved')\\n    list_filter = ('is_approved', 'created_at')\\n    search_fields = ('description', 'user__email', 'batch__id')\\n    readonly_fields = ('created_at', 'updated_at')\\n    list_editable = ('is_approved',)\\n\\n@admin.register(PhotoShare)\\nclass PhotoShareAdmin(admin.ModelAdmin):\\n    list_display = ('id', 'photo', 'shared_by', 'shared_with', 'can_edit', 'created_at')\\n    list_filter = ('can_edit', 'created_at')\\n    search_fields = ('photo__id', 'shared_by__email', 'shared_with__email')\\n\\n@admin.register(PhotoAccess)\\nclass PhotoAccessAdmin(admin.ModelAdmin):\\n    list_display = ('id', 'user', 'photo', 'access_type', 'granted_at')\\n    list_filter = ('access_type', 'granted_at')\\n    search_fields = ('user__email', 'photo__id')\"\n            },\n            {\n              \"name\": \"apps.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/partner_panel/apps.py\",\n              \"size\": 157,\n              \"content\": \"from django.apps import AppConfig\\n\\n\\nclass PartnerPanelConfig(AppConfig):\\n    default_auto_field = \\\"django.db.models.BigAutoField\\\"\\n    name = \\\"partner_panel\\\"\\n\"\n            },\n            {\n              \"name\": \"models.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/partner_panel/models.py\",\n              \"size\": 1046,\n              \"content\": \"from django.db import models\\nfrom django.conf import settings\\nfrom django.utils import timezone\\nfrom django.utils.translation import gettext_lazy as _\\nfrom django.core.validators import FileExtensionValidator\\nimport os\\nimport uuid\\n\\ndef photo_upload_path(instance, filename):\\n    \\\"\\\"\\\"Generate upload path for photos\\\"\\\"\\\"\\n    ext = filename.split('.')[-1]\\n    filename = f\\\"{uuid.uuid4()}.{ext}\\\"\\n    return f\\\"photos/{instance.user.id}/{filename}\\\"\\n\\n\\nclass PhotoBatch(models.Model):\\n    \\\"\\\"\\\"Batch of photos uploaded together\\\"\\\"\\\"\\n    STATUS_CHOICES = [\\n        ('draft', 'Draft'),\\n        ('uploading', 'Uploading'),\\n        ('processing', 'Processing'),\\n        ('completed', 'Completed'),\\n        ('processed', 'Processed'),\\n        ('failed', 'Failed'),\\n    ]\\n    \\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)\\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='uploading')\\n    created_at = models.DateTimeField(auto_now_add=True)\\n    updated_at = models.DateTimeField(auto_now=True)\\n        \"\n            },\n            {\n              \"name\": \"tests.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/partner_panel/tests.py\",\n              \"size\": 60,\n              \"content\": \"from django.test import TestCase\\n\\n# Create your tests here.\\n\"\n            },\n            {\n              \"name\": \"urls.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/partner_panel/urls.py\",\n              \"size\": 2357,\n              \"content\": \"from django.urls import path\\nfrom . import views\\nfrom .views import (\\n    PartnerDashboardView, PhotoBatchListView, PhotoBatchCreateView,\\n    PhotoBatchDetailView, PhotoBatchUpdateView, PhotoUploadView,\\n    PhotoEditView, BatchShareView, BatchAnalyticsView, BatchExportView,\\n    BatchSettingsView, BatchMetadataView, BatchActionsView, BatchShareSettingsView\\n)\\n\\napp_name = 'partner_panel'\\n\\nurlpatterns = [\\n    # Dashboard\\n    path('', PartnerDashboardView.as_view(), name='dashboard'),\\n    \\n    # Photo Batches\\n    path('batches/', PhotoBatchListView.as_view(), name='batch_list'),\\n    path('batches/create/', PhotoBatchCreateView.as_view(), name='batch_create'),\\n    path('batches/<int:pk>/', PhotoBatchDetailView.as_view(), name='batch_detail'),\\n    path('batches/<int:pk>/edit/', PhotoBatchUpdateView.as_view(), name='batch_edit'),\\n    path('batches/<int:pk>/upload/', PhotoUploadView.as_view(), name='batch_upload'),\\n    \\n    # Batch Actions\\n    path('batches/<int:pk>/share/', BatchShareView.as_view(), name='batch_share'),\\n    path('batches/<int:pk>/analytics/', BatchAnalyticsView.as_view(), name='batch_analytics'),\\n    path('batches/<int:pk>/export/', BatchExportView.as_view(), name='batch_export'),\\n    path('batches/<int:pk>/settings/', BatchSettingsView.as_view(), name='batch_settings'),\\n    path('batches/<int:pk>/metadata/', BatchMetadataView.as_view(), name='batch_metadata'),\\n    path('batches/<int:pk>/actions/', BatchActionsView.as_view(), name='batch_actions'),\\n    path('batches/<int:pk>/share-settings/', \\n         BatchShareSettingsView.as_view(), \\n         name='batch_share_settings'\\n    ),\\n    \\n    # Photos\\n    path('photos/<int:pk>/edit/', PhotoEditView.as_view(), name='photo_edit'),\\n    \\n    # API Endpoints\\n    path('api/batches/', views.BatchListAPIView.as_view(), name='api_batch_list'),\\n    path('api/batches/<int:pk>/', views.BatchDetailAPIView.as_view(), name='api_batch_detail'),\\n    path('api/batches/<int:batch_id>/photos/', views.PhotoListAPIView.as_view(), name='api_photo_list'),\\n    path('api/batches/<int:batch_id>/photos/<int:pk>/', \\n         views.PhotoDetailAPIView.as_view(), \\n         name='api_photo_detail'\\n    ),\\n    path('api/shared-links/', views.SharedLinkAPIView.as_view(), name='api_shared_links'),\\n    path('api/analytics/', views.PartnerAnalyticsAPIView.as_view(), name='api_partner_analytics'),\\n]\\n\"\n            },\n            {\n              \"name\": \"views.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/partner_panel/views.py\",\n              \"size\": 63,\n              \"content\": \"from django.shortcuts import render\\n\\n# Create your views here.\\n\"\n            }\n          ]\n        },\n        {\n          \"name\": \"photovault\",\n          \"type\": \"directory\",\n          \"path\": \"photovault/photovault\",\n          \"children\": [\n            {\n              \"name\": \"__init__.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/photovault/__init__.py\",\n              \"size\": 0,\n              \"content\": \"\"\n            },\n            {\n              \"name\": \"asgi.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/photovault/asgi.py\",\n              \"size\": 397,\n              \"content\": \"\\\"\\\"\\\"\\nASGI config for photovault project.\\n\\nIt exposes the ASGI callable as a module-level variable named ``application``.\\n\\nFor more information on this file, see\\nhttps://docs.djangoproject.com/en/4.2/howto/deployment/asgi/\\n\\\"\\\"\\\"\\n\\nimport os\\n\\nfrom django.core.asgi import get_asgi_application\\n\\nos.environ.setdefault(\\\"DJANGO_SETTINGS_MODULE\\\", \\\"photovault.settings\\\")\\n\\napplication = get_asgi_application()\\n\"\n            },\n            {\n              \"name\": \"settings.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/photovault/settings.py\",\n              \"size\": 7425,\n              \"content\": \"\\\"\\\"\\\"\\nDjango settings for photovault project.\\n\\nGenerated by 'django-admin startproject' using Django 4.2.4.\\n\\nFor more information on this file, see\\nhttps://docs.djangoproject.com/en/4.2/topics/settings/\\n\\nFor the full list of settings and their values, see\\nhttps://docs.djangoproject.com/en/4.2/ref/settings/\\n\\\"\\\"\\\"\\n\\nfrom pathlib import Path\\nimport os\\nfrom datetime import timedelta\\n\\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\\nBASE_DIR = Path(__file__).resolve().parent.parent\\n\\n# Quick-start development settings - unsuitable for production\\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\\n\\n# SECURITY WARNING: keep the secret key used in production secret!\\nSECRET_KEY = 'django-insecure-your-secret-key-here'\\n\\n# SECURITY WARNING: don't run with debug turned on in production!\\nDEBUG = True\\n\\nALLOWED_HOSTS = []\\n\\n# Application definition\\nINSTALLED_APPS = [\\n    'django.contrib.admin',\\n    'django.contrib.auth',\\n    'django.contrib.contenttypes',\\n    'django.contrib.sessions',\\n    'django.contrib.messages',\\n    'django.contrib.staticfiles',\\n    'django.contrib.sites',\\n    \\n    # Third-party apps\\n    'crispy_forms',\\n    'crispy_bootstrap5',\\n    'django_filters',\\n    'django_tables2',\\n    'widget_tweaks',\\n    'allauth',\\n    'allauth.account',\\n    'allauth.socialaccount',\\n    \\n    # Local apps\\n    'accounts.apps.AccountsConfig',\\n    'admin_panel.apps.AdminPanelConfig',\\n    'partner_panel.apps.PartnerPanelConfig',\\n    'core.apps.CoreConfig',\\n]\\n\\nMIDDLEWARE = [\\n    'django.middleware.security.SecurityMiddleware',\\n    'django.contrib.sessions.middleware.SessionMiddleware',\\n    'django.middleware.common.CommonMiddleware',\\n    'django.middleware.csrf.CsrfViewMiddleware',\\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\\n    'django.contrib.messages.middleware.MessageMiddleware',\\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\\n    'allauth.account.middleware.AccountMiddleware',\\n]\\n\\nROOT_URLCONF = 'photovault.urls'\\n\\nTEMPLATES = [\\n    {\\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\\n        'APP_DIRS': True,\\n        'OPTIONS': {\\n            'context_processors': [\\n                'django.template.context_processors.debug',\\n                'django.template.context_processors.request',\\n                'django.contrib.auth.context_processors.auth',\\n                'django.contrib.messages.context_processors.messages',\\n                'django.template.context_processors.request',\\n            ],\\n        },\\n    },\\n]\\n\\nWSGI_APPLICATION = 'photovault.wsgi.application'\\n\\n# Database\\nDATABASES = {\\n    'default': {\\n        'ENGINE': 'django.db.backends.sqlite3',\\n        'NAME': BASE_DIR / 'db.sqlite3',\\n    }\\n}\\n\\n# Password validation\\nAUTH_PASSWORD_VALIDATORS = [\\n    {\\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\\n    },\\n    {\\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\\n    },\\n    {\\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\\n    },\\n    {\\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\\n    },\\n]\\n\\n# Internationalization\\nLANGUAGE_CODE = 'en-us'\\nTIME_ZONE = 'UTC'\\nUSE_I18N = True\\nUSE_TZ = True\\n\\n# Static files (CSS, JavaScript, Images)\\nSTATIC_URL = 'static/'\\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\\n\\n# Media files\\nMEDIA_URL = '/media/'\\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\\n\\n# Default primary key field type\\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\\n\\n# Authentication\\nAUTH_USER_MODEL = 'accounts.CustomUser'\\nLOGIN_REDIRECT_URL = 'home'\\nLOGOUT_REDIRECT_URL = 'home'\\nLOGIN_URL = 'account_login'\\n\\n# Crispy Forms\\nCRISPY_ALLOWED_TEMPLATE_PACKS = 'bootstrap5'\\nCRISPY_TEMPLATE_PACK = 'bootstrap5'\\n\\n# Django AllAuth Settings\\nAUTHENTICATION_BACKENDS = (\\n    'django.contrib.auth.backends.ModelBackend',\\n    'allauth.account.auth_backends.AuthenticationBackend',\\n)\\n\\nSITE_ID = 1\\nACCOUNT_EMAIL_REQUIRED = True\\nACCOUNT_USERNAME_REQUIRED = False\\nACCOUNT_AUTHENTICATION_METHOD = 'email'\\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'\\nACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = True\\nACCOUNT_SESSION_REMEMBER = True\\n\\n# Email settings (for development)\\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\\n\\n# File upload settings\\nFILE_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10MB\\nDATA_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10MB\\n\\n# Security settings (for development, update for production)\\nSESSION_COOKIE_SECURE = False\\nCSRF_COOKIE_SECURE = False\\nSECURE_SSL_REDIRECT = False\\n\\n\\n# Quick-start development settings - unsuitable for production\\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\\n\\n# SECURITY WARNING: keep the secret key used in production secret!\\nSECRET_KEY = \\\"django-insecure-lpala*z1(+_de+jra&hv37yx3%*$%k_t&lhcgzv51sz0td+1%(\\\"\\n\\n# SECURITY WARNING: don't run with debug turned on in production!\\nDEBUG = True\\n\\nALLOWED_HOSTS = []\\n\\n\\n# Application definition\\n\\nINSTALLED_APPS = [\\n    \\\"django.contrib.admin\\\",\\n    \\\"django.contrib.auth\\\",\\n    \\\"django.contrib.contenttypes\\\",\\n    \\\"django.contrib.sessions\\\",\\n    \\\"django.contrib.messages\\\",\\n    \\\"django.contrib.staticfiles\\\",\\n]\\n\\nMIDDLEWARE = [\\n    \\\"django.middleware.security.SecurityMiddleware\\\",\\n    \\\"django.contrib.sessions.middleware.SessionMiddleware\\\",\\n    \\\"django.middleware.common.CommonMiddleware\\\",\\n    \\\"django.middleware.csrf.CsrfViewMiddleware\\\",\\n    \\\"django.contrib.auth.middleware.AuthenticationMiddleware\\\",\\n    \\\"django.contrib.messages.middleware.MessageMiddleware\\\",\\n    \\\"django.middleware.clickjacking.XFrameOptionsMiddleware\\\",\\n]\\n\\nROOT_URLCONF = \\\"photovault.urls\\\"\\n\\nTEMPLATES = [\\n    {\\n        \\\"BACKEND\\\": \\\"django.template.backends.django.DjangoTemplates\\\",\\n        \\\"DIRS\\\": [],\\n        \\\"APP_DIRS\\\": True,\\n        \\\"OPTIONS\\\": {\\n            \\\"context_processors\\\": [\\n                \\\"django.template.context_processors.debug\\\",\\n                \\\"django.template.context_processors.request\\\",\\n                \\\"django.contrib.auth.context_processors.auth\\\",\\n                \\\"django.contrib.messages.context_processors.messages\\\",\\n            ],\\n        },\\n    },\\n]\\n\\nWSGI_APPLICATION = \\\"photovault.wsgi.application\\\"\\n\\n\\n# Database\\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\\n\\nDATABASES = {\\n    \\\"default\\\": {\\n        \\\"ENGINE\\\": \\\"django.db.backends.sqlite3\\\",\\n        \\\"NAME\\\": BASE_DIR / \\\"db.sqlite3\\\",\\n    }\\n}\\n\\n\\n# Password validation\\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\\n\\nAUTH_PASSWORD_VALIDATORS = [\\n    {\\n        \\\"NAME\\\": \\\"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\\\",\\n    },\\n    {\\n        \\\"NAME\\\": \\\"django.contrib.auth.password_validation.MinimumLengthValidator\\\",\\n    },\\n    {\\n        \\\"NAME\\\": \\\"django.contrib.auth.password_validation.CommonPasswordValidator\\\",\\n    },\\n    {\\n        \\\"NAME\\\": \\\"django.contrib.auth.password_validation.NumericPasswordValidator\\\",\\n    },\\n]\\n\\n\\n# Internationalization\\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\\n\\nLANGUAGE_CODE = \\\"en-us\\\"\\n\\nTIME_ZONE = \\\"UTC\\\"\\n\\nUSE_I18N = True\\n\\nUSE_TZ = True\\n\\n\\n# Static files (CSS, JavaScript, Images)\\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\\n\\nSTATIC_URL = \\\"static/\\\"\\n\\n# Default primary key field type\\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\\n\\nDEFAULT_AUTO_FIELD = \\\"django.db.models.BigAutoField\\\"\\n\"\n            },\n            {\n              \"name\": \"urls.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/photovault/urls.py\",\n              \"size\": 2014,\n              \"content\": \"\\\"\\\"\\\"\\nURL configuration for photovault URL Configuration\\n\\\"\\\"\\\"\\nfrom django.conf import settings\\nfrom django.conf.urls.static import static\\nfrom django.contrib import admin\\nfrom django.urls import path, include\\nfrom django.views.generic import TemplateView\\nfrom django.contrib.auth import views as auth_views\\n\\n# Admin site customization\\nadmin.site.site_header = 'PhotoVault Administration'\\nadmin.site.site_title = 'PhotoVault Admin'\\nadmin.site.index_title = 'Welcome to PhotoVault Admin'\\n\\nurlpatterns = [\\n    # Admin URLs\\n    path('admin/', admin.site.urls),\\n    \\n    # Authentication URLs (using Django Allauth)\\n    path('accounts/', include('allauth.urls')),\\n    \\n    # Custom account URLs\\n    path('accounts/', include('accounts.urls')),\\n    \\n    # Admin Panel URLs\\n    path('admin-panel/', include('admin_panel.urls', namespace='admin_panel')),\\n    \\n    # Partner Panel URLs\\n    path('partner/', include('partner_panel.urls', namespace='partner')),\\n    \\n    # Core URLs (API, etc.)\\n    path('api/', include('core.api.urls', namespace='api')),\\n    \\n    # Home page\\n    path('', TemplateView.as_view(template_name='home.html'), name='home'),\\n    \\n    # Password reset URLs (if not using Allauth's)\\n    path('password_reset/', auth_views.PasswordResetView.as_view(), name='password_reset'),\\n    path('password_reset/done/', auth_views.PasswordResetDoneView.as_view(), name='password_reset_done'),\\n    path('reset/<uidb64>/<token>/', auth_views.PasswordResetConfirmView.as_view(), name='password_reset_confirm'),\\n    path('reset/done/', auth_views.PasswordResetCompleteView.as_view(), name='password_reset_complete'),\\n]\\n\\n# Serve media files in development\\nif settings.DEBUG:\\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\\n    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\\n\\n# Add debug toolbar if in development\\nif settings.DEBUG:\\n    import debug_toolbar\\n    urlpatterns = [\\n        path('__debug__/', include(debug_toolbar.urls)),\\n    ] + urlpatterns\\n\"\n            },\n            {\n              \"name\": \"wsgi.py\",\n              \"type\": \"file\",\n              \"path\": \"photovault/photovault/wsgi.py\",\n              \"size\": 397,\n              \"content\": \"\\\"\\\"\\\"\\nWSGI config for photovault project.\\n\\nIt exposes the WSGI callable as a module-level variable named ``application``.\\n\\nFor more information on this file, see\\nhttps://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/\\n\\\"\\\"\\\"\\n\\nimport os\\n\\nfrom django.core.wsgi import get_wsgi_application\\n\\nos.environ.setdefault(\\\"DJANGO_SETTINGS_MODULE\\\", \\\"photovault.settings\\\")\\n\\napplication = get_wsgi_application()\\n\"\n            }\n          ]\n        },\n        {\n          \"name\": \"manage.py\",\n          \"type\": \"file\",\n          \"path\": \"photovault/manage.py\",\n          \"size\": 666,\n          \"content\": \"#!/usr/bin/env python\\n\\\"\\\"\\\"Django's command-line utility for administrative tasks.\\\"\\\"\\\"\\nimport os\\nimport sys\\n\\n\\ndef main():\\n    \\\"\\\"\\\"Run administrative tasks.\\\"\\\"\\\"\\n    os.environ.setdefault(\\\"DJANGO_SETTINGS_MODULE\\\", \\\"photovault.settings\\\")\\n    try:\\n        from django.core.management import execute_from_command_line\\n    except ImportError as exc:\\n        raise ImportError(\\n            \\\"Couldn't import Django. Are you sure it's installed and \\\"\\n            \\\"available on your PYTHONPATH environment variable? Did you \\\"\\n            \\\"forget to activate a virtual environment?\\\"\\n        ) from exc\\n    execute_from_command_line(sys.argv)\\n\\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\"\n        }\n      ]\n    },\n    {\n      \"name\": \"processing\",\n      \"type\": \"directory\",\n      \"path\": \"processing\",\n      \"children\": []\n    },\n    {\n      \"name\": \"scripts\",\n      \"type\": \"directory\",\n      \"path\": \"scripts\",\n      \"children\": [\n        {\n          \"name\": \"automation\",\n          \"type\": \"directory\",\n          \"path\": \"scripts/automation\",\n          \"children\": [\n            {\n              \"name\": \"auto-scaling.sh\",\n              \"type\": \"file\",\n              \"path\": \"scripts/automation/auto-scaling.sh\",\n              \"size\": 0,\n              \"content\": \"\"\n            },\n            {\n              \"name\": \"incident-handler.sh\",\n              \"type\": \"file\",\n              \"path\": \"scripts/automation/incident-handler.sh\",\n              \"size\": 4917,\n              \"content\": \"#!/bin/bash\\n\\n# Automated Incident Response Handler\\nPROMETHEUS_URL=\\\"http://prometheus:9090\\\"\\nALERTMANAGER_URL=\\\"http://alertmanager:9093\\\"\\n\\n# Get active alerts\\nget_alerts() {\\n    curl -s \\\"$ALERTMANAGER_URL/api/v1/alerts\\\" | jq -r '.data[] | select(.status.state == \\\"active\\\")'\\n}\\n\\n# Handle service down alert\\nhandle_service_down() {\\n    local service=$1\\n    echo \\\"🚨 Handling service down: $service\\\"\\n\\n    # Try automatic restart\\n    docker restart \\\"$service\\\" 2>/dev/null\\n\\n    # Wait and check if service is back up\\n    sleep 30\\n    if docker ps | grep -q \\\"$service.*Up\\\"; then\\n        send_notification \\\"✅ Service $service automatically recovered\\\"\\n        return 0\\n    else\\n        send_notification \\\"❌ Service $service failed to restart - manual intervention required\\\"\\n        return 1\\n    fi\\n}\\n\\n# Handle high resource usage\\nhandle_high_resource_usage() {\\n    local resource=$1\\n    local threshold=$2\\n\\n    echo \\\"⚠️ Handling high $resource usage: $threshold%\\\"\\n\\n    case $resource in\\n        \\\"memory\\\")\\n            # Clear system caches\\n            sync && echo 3 > /proc/sys/vm/drop_caches\\n            # Restart non-critical services\\n            docker restart media-vault-analyzer || true\\n            ;;\\n        \\\"disk\\\")\\n            # Clean old logs and temporary files\\n            docker system prune -f\\n            find /tmp -type f -atime +7 -delete 2>/dev/null || true\\n            ;;\\n        \\\"cpu\\\")\\n            # Scale down resource-intensive services temporarily\\n            docker update --cpus=\\\"0.5\\\" media-vault-analyzer || true\\n            ;;\\n    esac\\n\\n    send_notification \\\"🔧 Automated remediation applied for high $resource usage\\\"\\n}\\n\\n# Handle security incidents\\nhandle_security_incident() {\\n    local incident_type=$1\\n    local details=$2\\n\\n    echo \\\"🛡️ Handling security incident: $incident_type\\\"\\n\\n    case $incident_type in\\n        \\\"failed_logins\\\")\\n            # Enable additional security measures\\n            # This would integrate with Keycloak API to increase security\\n            send_notification \\\"🔒 Enhanced security measures activated due to failed login attempts\\\"\\n            ;;\\n        \\\"unauthorized_access\\\")\\n            # Log the incident for analysis\\n            echo \\\"$(date): Unauthorized access detected - $details\\\" >> /var/log/security-incidents.log\\n            send_notification \\\"🚨 SECURITY ALERT: Unauthorized access detected - details logged\\\"\\n            ;;\\n    esac\\n}\\n\\n# Send notification to various channels\\nsend_notification() {\\n    local message=$1\\n    local timestamp=$(date -u +\\\"%Y-%m-%dT%H:%M:%SZ\\\")\\n\\n    # Slack notification\\n    if [ -n \\\"$SLACK_WEBHOOK_URL\\\" ]; then\\n        curl -X POST -H 'Content-type: application/json' \\\\\\n            --data \\\"{\\\\\\\"text\\\\\\\":\\\\\\\"[$timestamp] Media Vault: $message\\\\\\\"}\\\" \\\\\\n            \\\"$SLACK_WEBHOOK_URL\\\" 2>/dev/null || true\\n    fi\\n\\n    # PagerDuty notification (for critical alerts)\\n    if [ -n \\\"$PAGERDUTY_API_KEY\\\" ] && [[ $message == *\\\"❌\\\"* ]]; then\\n        curl -X POST \\\"https://events.pagerduty.com/v2/enqueue\\\" \\\\\\n            -H \\\"Content-Type: application/json\\\" \\\\\\n            -d \\\"{\\n                \\\\\\\"routing_key\\\\\\\": \\\\\\\"$PAGERDUTY_API_KEY\\\\\\\",\\n                \\\\\\\"event_action\\\\\\\": \\\\\\\"trigger\\\\\\\",\\n                \\\\\\\"payload\\\\\\\": {\\n                    \\\\\\\"summary\\\\\\\": \\\\\\\"Media Vault Alert: $message\\\\\\\",\\n                    \\\\\\\"source\\\\\\\": \\\\\\\"media-vault-automation\\\\\\\",\\n                    \\\\\\\"severity\\\\\\\": \\\\\\\"critical\\\\\\\"\\n                }\\n            }\\\" 2>/dev/null || true\\n    fi\\n\\n    # Local logging\\n    echo \\\"[$timestamp] $message\\\" >> /var/log/automation.log\\n}\\n\\n# Main incident processing loop\\nprocess_incidents() {\\n    local alerts=$(get_alerts)\\n\\n    if [ -z \\\"$alerts\\\" ]; then\\n        return 0\\n    fi\\n\\n    echo \\\"$alerts\\\" | while IFS= read -r alert; do\\n        local alert_name=$(echo \\\"$alert\\\" | jq -r '.labels.alertname // \\\"unknown\\\"')\\n        local severity=$(echo \\\"$alert\\\" | jq -r '.labels.severity // \\\"unknown\\\"')\\n\\n        echo \\\"Processing alert: $alert_name (severity: $severity)\\\"\\n\\n        case $alert_name in\\n            \\\"ServiceCompletleyDown\\\")\\n                local service=$(echo \\\"$alert\\\" | jq -r '.labels.job // \\\"unknown\\\"')\\n                handle_service_down \\\"$service\\\"\\n                ;;\\n            \\\"HighMemoryUsage\\\"|\\\"HighCPUUsage\\\"|\\\"DiskSpaceLow\\\")\\n                local resource=$(echo \\\"$alert_name\\\" | sed 's/High\\\\|Low//g' | tr '[:upper:]' '[:lower:]')\\n                handle_high_resource_usage \\\"$resource\\\" \\\"85\\\"\\n                ;;\\n            \\\"SuspiciousLoginActivity\\\")\\n                handle_security_incident \\\"failed_logins\\\" \\\"$alert\\\"\\n                ;;\\n            \\\"UnauthorizedAPIAccess\\\")\\n                handle_security_incident \\\"unauthorized_access\\\" \\\"$alert\\\"\\n                ;;\\n            *)\\n                send_notification \\\"⚠️ Unhandled alert: $alert_name\\\"\\n                ;;\\n        esac\\n    done\\n}\\n\\n# Run the incident handler\\nmain() {\\n    echo \\\"🤖 Starting automated incident response system...\\\"\\n    process_incidents\\n}\\n\\nmain \\\"$@\\\"\\n\\n\"\n            }\n          ]\n        },\n        {\n          \"name\": \"backup\",\n          \"type\": \"directory\",\n          \"path\": \"scripts/backup\",\n          \"children\": [\n            {\n              \"name\": \"backup.sh\",\n              \"type\": \"file\",\n              \"path\": \"scripts/backup/backup.sh\",\n              \"size\": 1776,\n              \"content\": \"#!/bin/bash\\n\\n# Enhanced backup script with S3 support\\nset -e\\n\\nBACKUP_DIR=\\\"/backups\\\"\\nSOURCE_DATA=\\\"/backup-source/data\\\"\\nSOURCE_UPLOADS=\\\"/backup-source/uploads\\\"\\nTIMESTAMP=$(date +%Y%m%d_%H%M%S)\\nBACKUP_NAME=\\\"media-vault-backup-${TIMESTAMP}\\\"\\n\\necho \\\"🗄️  Starting backup: $BACKUP_NAME\\\"\\n\\n# Create backup directory\\nmkdir -p \\\"$BACKUP_DIR/$BACKUP_NAME\\\"\\n\\n# Backup SQLite database\\necho \\\"📄 Backing up database...\\\"\\nif [ -f \\\"$SOURCE_DATA/media.db\\\" ]; then\\n    sqlite3 \\\"$SOURCE_DATA/media.db\\\" \\\".backup $BACKUP_DIR/$BACKUP_NAME/media.db\\\"\\n    echo \\\"✅ Database backup completed\\\"\\nelse\\n    echo \\\"⚠️  Database not found\\\"\\nfi\\n\\n# Backup uploads\\necho \\\"📁 Backing up uploads...\\\"\\nif [ -d \\\"$SOURCE_UPLOADS\\\" ]; then\\n    cp -r \\\"$SOURCE_UPLOADS\\\" \\\"$BACKUP_DIR/$BACKUP_NAME/\\\"\\n    echo \\\"✅ Uploads backup completed\\\"\\nelse\\n    echo \\\"⚠️  Uploads directory not found\\\"\\nfi\\n\\n# Create metadata\\ncat > \\\"$BACKUP_DIR/$BACKUP_NAME/metadata.json\\\" << EOF\\n{\\n  \\\"backup_date\\\": \\\"$(date -u +%Y-%m-%dT%H:%M:%SZ)\\\",\\n  \\\"version\\\": \\\"1.0\\\",\\n  \\\"components\\\": [\\\"database\\\", \\\"uploads\\\"],\\n  \\\"size_bytes\\\": $(du -sb \\\"$BACKUP_DIR/$BACKUP_NAME\\\" | cut -f1)\\n}\\nEOF\\n\\n# Compress backup\\necho \\\"🗜️  Compressing backup...\\\"\\ncd \\\"$BACKUP_DIR\\\"\\ntar -czf \\\"${BACKUP_NAME}.tar.gz\\\" \\\"$BACKUP_NAME\\\"\\nrm -rf \\\"$BACKUP_NAME\\\"\\n\\n# Upload to S3 if configured\\nif [ -n \\\"$S3_BUCKET\\\" ] && [ -n \\\"$AWS_ACCESS_KEY_ID\\\" ]; then\\n    echo \\\"☁️  Uploading to S3...\\\"\\n    aws s3 cp \\\"${BACKUP_NAME}.tar.gz\\\" \\\"s3://$S3_BUCKET/media-vault-backups/\\\"\\n    echo \\\"✅ S3 upload completed\\\"\\nfi\\n\\n# Cleanup old backups\\nif [ -n \\\"$RETENTION_DAYS\\\" ]; then\\n    echo \\\"🧹 Cleaning up old backups...\\\"\\n    find \\\"$BACKUP_DIR\\\" -name \\\"media-vault-backup-*.tar.gz\\\" -mtime +$RETENTION_DAYS -delete\\n    echo \\\"✅ Cleanup completed\\\"\\nfi\\n\\necho \\\"🎉 Backup completed: ${BACKUP_NAME}.tar.gz\\\"\\n\\n\"\n            },\n            {\n              \"name\": \"restore.sh\",\n              \"type\": \"file\",\n              \"path\": \"scripts/backup/restore.sh\",\n              \"size\": 0,\n              \"content\": \"\"\n            }\n          ]\n        },\n        {\n          \"name\": \"capacity\",\n          \"type\": \"directory\",\n          \"path\": \"scripts/capacity\",\n          \"children\": [\n            {\n              \"name\": \"capacity_planner.py\",\n              \"type\": \"file\",\n              \"path\": \"scripts/capacity/capacity_planner.py\",\n              \"size\": 6485,\n              \"content\": \"import requests\\nimport json\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime, timedelta\\nimport os\\n\\nclass CapacityPlanner:\\n    def __init__(self):\\n        self.prometheus_url = os.getenv('PROMETHEUS_URL', 'http://prometheus:9090')\\n        self.prediction_days = int(os.getenv('PREDICTION_DAYS', '30'))\\n        self.alert_threshold = float(os.getenv('ALERT_THRESHOLD', '0.8'))\\n\\n    def query_prometheus(self, query, start_time, end_time, step='1h'):\\n        \\\"\\\"\\\"Query Prometheus for range data\\\"\\\"\\\"\\n        params = {\\n            'query': query,\\n            'start': start_time.isoformat() + 'Z',\\n            'end': end_time.isoformat() + 'Z',\\n            'step': step\\n        }\\n\\n        response = requests.get(f'{self.prometheus_url}/api/v1/query_range', params=params)\\n        return response.json()\\n\\n    def predict_resource_usage(self, metric_name, query):\\n        \\\"\\\"\\\"Predict future resource usage using linear regression\\\"\\\"\\\"\\n        end_time = datetime.utcnow()\\n        start_time = end_time - timedelta(days=7)  # Use last 7 days for prediction\\n\\n        data = self.query_prometheus(query, start_time, end_time)\\n\\n        if not data['data']['result']:\\n            return None\\n\\n        # Extract time series data\\n        values = data['data']['result'][0]['values']\\n        timestamps = [float(v[0]) for v in values]\\n        metrics = [float(v[1]) for v in values if v[1] != 'NaN']\\n\\n        if len(metrics) < 2:\\n            return None\\n\\n        # Simple linear regression\\n        x = np.array(range(len(metrics)))\\n        y = np.array(metrics)\\n\\n        # Calculate trend\\n        slope = np.polyfit(x, y, 1)[0]\\n        current_value = metrics[-1]\\n\\n        # Predict future values\\n        future_hours = self.prediction_days * 24\\n        predicted_value = current_value + (slope * future_hours)\\n\\n        return {\\n            'metric': metric_name,\\n            'current_value': current_value,\\n            'predicted_value': predicted_value,\\n            'trend_slope': slope,\\n            'prediction_days': self.prediction_days,\\n            'will_exceed_threshold': predicted_value > self.alert_threshold\\n        }\\n\\n    def generate_capacity_report(self):\\n        \\\"\\\"\\\"Generate comprehensive capacity planning report\\\"\\\"\\\"\\n        metrics = [\\n            {\\n                'name': 'CPU Usage',\\n                'query': '100 - (avg(irate(node_cpu_seconds_total{mode=\\\"idle\\\"}[5m])) * 100)',\\n                'unit': '%',\\n                'threshold': 80\\n            },\\n            {\\n                'name': 'Memory Usage',\\n                'query': '(node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100',\\n                'unit': '%',\\n                'threshold': 85\\n            },\\n            {\\n                'name': 'Disk Usage',\\n                'query': '(node_filesystem_size_bytes{mountpoint=\\\"/\\\"} - node_filesystem_avail_bytes{mountpoint=\\\"/\\\"}) / node_filesystem_size_bytes{mountpoint=\\\"/\\\"} * 100',\\n                'unit': '%',\\n                'threshold': 90\\n            },\\n            {\\n                'name': 'API Request Rate',\\n                'query': 'rate(http_requests_total[5m])',\\n                'unit': 'req/s',\\n                'threshold': 1000\\n            }\\n        ]\\n\\n        report = {\\n            'generated_at': datetime.utcnow().isoformat(),\\n            'prediction_period_days': self.prediction_days,\\n            'predictions': [],\\n            'recommendations': []\\n        }\\n\\n        for metric in metrics:\\n            prediction = self.predict_resource_usage(metric['name'], metric['query'])\\n\\n            if prediction:\\n                prediction['unit'] = metric['unit']\\n                prediction['threshold'] = metric['threshold']\\n                report['predictions'].append(prediction)\\n\\n                # Generate recommendations\\n                if prediction['will_exceed_threshold']:\\n                    if 'CPU' in metric['name']:\\n                        report['recommendations'].append({\\n                            'metric': metric['name'],\\n                            'action': 'Scale horizontally or optimize CPU-intensive processes',\\n                            'priority': 'high' if prediction['predicted_value'] > 90 else 'medium'\\n                        })\\n                    elif 'Memory' in metric['name']:\\n                        report['recommendations'].append({\\n                            'metric': metric['name'],\\n                            'action': 'Increase memory allocation or optimize memory usage',\\n                            'priority': 'high' if prediction['predicted_value'] > 95 else 'medium'\\n                        })\\n                    elif 'Disk' in metric['name']:\\n                        report['recommendations'].append({\\n                            'metric': metric['name'],\\n                            'action': 'Expand storage or implement cleanup policies',\\n                            'priority': 'critical' if prediction['predicted_value'] > 95 else 'high'\\n                        })\\n\\n        return report\\n\\n    def save_report(self, report):\\n        \\\"\\\"\\\"Save capacity planning report\\\"\\\"\\\"\\n        os.makedirs('/data', exist_ok=True)\\n\\n        timestamp = datetime.utcnow().strftime('%Y%m%d_%H%M%S')\\n        filename = f'/data/capacity_report_{timestamp}.json'\\n\\n        with open(filename, 'w') as f:\\n            json.dump(report, f, indent=2)\\n\\n        # Also save as latest\\n        with open('/data/capacity_report_latest.json', 'w') as f:\\n            json.dump(report, f, indent=2)\\n\\n        return filename\\n\\ndef main():\\n    planner = CapacityPlanner()\\n\\n    print(\\\"🔮 Generating capacity planning report...\\\")\\n    report = planner.generate_capacity_report()\\n\\n    filename = planner.save_report(report)\\n    print(f\\\"📊 Report saved: {filename}\\\")\\n\\n    # Print summary\\n    print(\\\"\\\\n📋 Capacity Planning Summary:\\\")\\n    print(\\\"=\\\" * 40)\\n\\n    for prediction in report['predictions']:\\n        status = \\\"⚠️ ALERT\\\" if prediction['will_exceed_threshold'] else \\\"✅ OK\\\"\\n        print(f\\\"{prediction['metric']}: {prediction['current_value']:.1f}{prediction.get('unit', '')} → {prediction['predicted_value']:.1f}{prediction.get('unit', '')} {status}\\\")\\n\\n    if report['recommendations']:\\n        print(f\\\"\\\\n🎯 Recommendations ({len(report['recommendations'])}):\\\")\\n        for rec in report['recommendations']:\\n            priority = rec['priority'].upper()\\n            print(f\\\"[{priority}] {rec['metric']}: {rec['action']}\\\")\\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\\n\"\n            }\n          ]\n        },\n        {\n          \"name\": \"optimization\",\n          \"type\": \"directory\",\n          \"path\": \"scripts/optimization\",\n          \"children\": [\n            {\n              \"name\": \"optimize.sh\",\n              \"type\": \"file\",\n              \"path\": \"scripts/optimization/optimize.sh\",\n              \"size\": 4021,\n              \"content\": \"#!/bin/bash\\n\\n# Performance Optimization Script\\necho \\\"⚡ Starting performance optimization...\\\"\\n\\n# Get current metrics\\nget_metric() {\\n    local query=$1\\n    curl -s \\\"http://prometheus:9090/api/v1/query?query=${query}\\\" | \\\\\\n        jq -r '.data.result[0].value[1] // \\\"0\\\"' 2>/dev/null || echo \\\"0\\\"\\n}\\n\\n# CPU optimization\\noptimize_cpu() {\\n    local cpu_usage=$(get_metric \\\"100 - (avg(irate(node_cpu_seconds_total{mode=\\\\\\\"idle\\\\\\\"}[5m])) * 100)\\\")\\n\\n    if (( $(echo \\\"$cpu_usage > 70\\\" | bc -l) )); then\\n        echo \\\"🔧 High CPU usage detected: ${cpu_usage}%\\\"\\n\\n        # Reduce CPU limits for non-critical services\\n        docker update --cpus=\\\"0.5\\\" media-vault-analyzer 2>/dev/null || true\\n        docker update --cpus=\\\"0.3\\\" nsfw-analyzer 2>/dev/null || true\\n\\n        echo \\\"✅ CPU limits reduced for non-critical services\\\"\\n    fi\\n}\\n\\n# Memory optimization\\noptimize_memory() {\\n    local mem_usage=$(get_metric \\\"(node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100\\\")\\n\\n    if (( $(echo \\\"$mem_usage > 80\\\" | bc -l) )); then\\n        echo \\\"🔧 High memory usage detected: ${mem_usage}%\\\"\\n\\n        # Clear system caches\\n        sync && echo 3 > /proc/sys/vm/drop_caches 2>/dev/null || true\\n\\n        # Restart memory-intensive services\\n        docker restart media-vault-analyzer 2>/dev/null || true\\n\\n        echo \\\"✅ Memory optimization applied\\\"\\n    fi\\n}\\n\\n# Disk optimization\\noptimize_disk() {\\n    echo \\\"🗃️ Running disk optimization...\\\"\\n\\n    # Clean Docker system\\n    docker system prune -f\\n\\n    # Clean old logs\\n    find /var/log -name \\\"*.log\\\" -type f -mtime +7 -exec truncate -s 0 {} \\\\; 2>/dev/null || true\\n\\n    # Clean temporary files\\n    find /tmp -type f -atime +1 -delete 2>/dev/null || true\\n\\n    echo \\\"✅ Disk cleanup completed\\\"\\n}\\n\\n# Database optimization\\noptimize_database() {\\n    echo \\\"🗄️ Running database optimization...\\\"\\n\\n    # SQLite optimization\\n    if [ -f \\\"/data/media.db\\\" ]; then\\n        sqlite3 /data/media.db \\\"VACUUM; PRAGMA optimize;\\\" 2>/dev/null || true\\n        echo \\\"✅ SQLite database optimized\\\"\\n    fi\\n\\n    # PostgreSQL optimization (if available)\\n    if docker ps | grep -q keycloak-db; then\\n        docker exec keycloak-db psql -U keycloak -d keycloak -c \\\"VACUUM ANALYZE;\\\" 2>/dev/null || true\\n        echo \\\"✅ PostgreSQL database optimized\\\"\\n    fi\\n}\\n\\n# Network optimization\\noptimize_network() {\\n    echo \\\"🌐 Running network optimization...\\\"\\n\\n    # Optimize Docker network settings\\n    echo 'net.core.rmem_max = 134217728' >> /etc/sysctl.conf 2>/dev/null || true\\n    echo 'net.core.wmem_max = 134217728' >> /etc/sysctl.conf 2>/dev/null || true\\n\\n    sysctl -p 2>/dev/null || true\\n\\n    echo \\\"✅ Network optimization applied\\\"\\n}\\n\\n# Generate optimization report\\ngenerate_report() {\\n    local timestamp=$(date -u +\\\"%Y-%m-%dT%H:%M:%SZ\\\")\\n\\n    cat > /tmp/optimization_report.json << EOF\\n{\\n    \\\"timestamp\\\": \\\"$timestamp\\\",\\n    \\\"optimizations_applied\\\": [\\n        \\\"CPU limits adjusted\\\",\\n        \\\"Memory caches cleared\\\",\\n        \\\"Disk cleanup performed\\\",\\n        \\\"Database vacuumed\\\",\\n        \\\"Network settings optimized\\\"\\n    ],\\n    \\\"metrics_after\\\": {\\n        \\\"cpu_usage\\\": $(get_metric \\\"100 - (avg(irate(node_cpu_seconds_total{mode=\\\\\\\"idle\\\\\\\"}[5m])) * 100)\\\"),\\n        \\\"memory_usage\\\": $(get_metric \\\"(node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100\\\"),\\n        \\\"disk_usage\\\": $(get_metric \\\"(node_filesystem_size_bytes{mountpoint=\\\\\\\"/\\\\\\\"} - node_filesystem_avail_bytes{mountpoint=\\\\\\\"/\\\\\\\"}) / node_filesystem_size_bytes{mountpoint=\\\\\\\"/\\\\\\\"} * 100\\\")\\n    }\\n}\\nEOF\\n\\n    echo \\\"📊 Optimization report generated: /tmp/optimization_report.json\\\"\\n}\\n\\n# Main optimization workflow\\nmain() {\\n    echo \\\"🚀 Media Vault Performance Optimization\\\"\\n    echo \\\"=======================================\\\"\\n\\n    optimize_cpu\\n    optimize_memory\\n    optimize_disk\\n    optimize_database\\n    optimize_network\\n    generate_report\\n\\n    echo \\\"\\\"\\n    echo \\\"✅ Performance optimization completed!\\\"\\n    echo \\\"📊 Check metrics in Grafana for improvements\\\"\\n}\\n\\nmain \\\"$@\\\"\"\n            }\n          ]\n        },\n        {\n          \"name\": \"security\",\n          \"type\": \"directory\",\n          \"path\": \"scripts/security\",\n          \"children\": [\n            {\n              \"name\": \"audit.sh\",\n              \"type\": \"file\",\n              \"path\": \"scripts/security/audit.sh\",\n              \"size\": 0,\n              \"content\": \"\"\n            },\n            {\n              \"name\": \"security-scan.sh\",\n              \"type\": \"file\",\n              \"path\": \"scripts/security/security-scan.sh\",\n              \"size\": 0,\n              \"content\": \"\"\n            }\n          ]\n        },\n        {\n          \"name\": \"extract_go_files.sh\",\n          \"type\": \"file\",\n          \"path\": \"scripts/extract_go_files.sh\",\n          \"size\": 9409,\n          \"content\": \"#!/bin/bash\\n\\n# Create necessary directories\\nmkdir -p media-vault-backend/internal/auth\\nmkdir -p media-vault-backend/internal/handlers\\nmkdir -p media-vault-backend/internal/models\\nmkdir -p media-vault-backend/internal/services\\nmkdir -p media-vault-backend/internal/utils\\n\\n# Extract models\\ncat > media-vault-backend/internal/models/photo.go << 'EOL'\\npackage models\\n\\nimport \\\"time\\\"\\n\\n// Photo represents a photo in the vault\\ntype Photo struct {\\n    ID                string     `json:\\\"id\\\" db:\\\"id\\\"`\\n    UserID            string     `json:\\\"user_id\\\" db:\\\"user_id\\\"`\\n    PartnerID         *string    `json:\\\"partner_id,omitempty\\\" db:\\\"partner_id\\\"`\\n    Filename          string     `json:\\\"filename\\\" db:\\\"filename\\\"`\\n    OriginalName      string     `json:\\\"original_name\\\" db:\\\"original_name\\\"`\\n    FilePath          string     `json:\\\"file_path\\\" db:\\\"file_path\\\"`\\n    ThumbnailPath     *string    `json:\\\"thumbnail_path,omitempty\\\" db:\\\"thumbnail_path\\\"`\\n    FileSize          int64      `json:\\\"file_size\\\" db:\\\"file_size\\\"`\\n    MimeType          string     `json:\\\"mime_type\\\" db:\\\"mime_type\\\"`\\n    Width             *int       `json:\\\"width,omitempty\\\" db:\\\"width\\\"`\\n    Height            *int       `json:\\\"height,omitempty\\\" db:\\\"height\\\"`\\n    Hash              string     `json:\\\"hash\\\" db:\\\"hash\\\"`\\n    Description       *string    `json:\\\"description,omitempty\\\" db:\\\"description\\\"`\\n    AIDescription     *string    `json:\\\"ai_description,omitempty\\\" db:\\\"ai_description\\\"`\\n    Tags              *string    `json:\\\"tags,omitempty\\\" db:\\\"tags\\\"`\\n    AIConfidence      *float64   `json:\\\"ai_confidence,omitempty\\\" db:\\\"ai_confidence\\\"`\\n    IsNSFW            *bool      `json:\\\"is_nsfw,omitempty\\\" db:\\\"is_nsfw\\\"`\\n    NSFWConfidence    *float64   `json:\\\"nsfw_confidence,omitempty\\\" db:\\\"nsfw_confidence\\\"`\\n    ModerationStatus  string     `json:\\\"moderation_status\\\" db:\\\"moderation_status\\\"`\\n    ExifData          *string    `json:\\\"exif_data,omitempty\\\" db:\\\"exif_data\\\"`\\n    Location          *string    `json:\\\"location,omitempty\\\" db:\\\"location\\\"`\\n    CameraMake        *string    `json:\\\"camera_make,omitempty\\\" db:\\\"camera_make\\\"`\\n    CameraModel       *string    `json:\\\"camera_model,omitempty\\\" db:\\\"camera_model\\\"`\\n    TakenAt           *time.Time `json:\\\"taken_at,omitempty\\\" db:\\\"taken_at\\\"`\\n    IsShared          bool       `json:\\\"is_shared\\\" db:\\\"is_shared\\\"`\\n    SharedWith        []string   `json:\\\"shared_with,omitempty\\\"`\\n    ShareCount        int        `json:\\\"share_count\\\" db:\\\"share_count\\\"`\\n    ViewCount         int        `json:\\\"view_count\\\" db:\\\"view_count\\\"`\\n    CreatedAt         time.Time  `json:\\\"created_at\\\" db:\\\"created_at\\\"`\\n    UpdatedAt         time.Time  `json:\\\"updated_at\\\" db:\\\"updated_at\\\"`\\n    ProcessedAt       *time.Time `json:\\\"processed_at,omitempty\\\" db:\\\"processed_at\\\"`\\n}\\n\\n// PhotoSharing represents photo sharing permissions\\ntype PhotoSharing struct {\\n    ID          string     `json:\\\"id\\\" db:\\\"id\\\"`\\n    PhotoID     string     `json:\\\"photo_id\\\" db:\\\"photo_id\\\"`\\n    SharedBy    string     `json:\\\"shared_by\\\" db:\\\"shared_by\\\"`\\n    SharedWith  string     `json:\\\"shared_with\\\" db:\\\"shared_with\\\"`\\n    Permission  string     `json:\\\"permission\\\" db:\\\"permission\\\"`\\n    CreatedAt   time.Time  `json:\\\"created_at\\\" db:\\\"created_at\\\"`\\n    ExpiresAt   *time.Time `json:\\\"expires_at,omitempty\\\" db:\\\"expires_at\\\"`\\n}\\n\\n// PhotoAnalytics represents photo analytics data\\ntype PhotoAnalytics struct {\\n    PhotoID    string     `json:\\\"photo_id\\\" db:\\\"photo_id\\\"`\\n    Views      int        `json:\\\"views\\\" db:\\\"views\\\"`\\n    Downloads  int        `json:\\\"downloads\\\" db:\\\"downloads\\\"`\\n    Shares     int        `json:\\\"shares\\\" db:\\\"shares\\\"`\\n    LastViewed *time.Time `json:\\\"last_viewed,omitempty\\\" db:\\\"last_viewed\\\"`\\n    ViewerIPs  []string   `json:\\\"viewer_ips,omitempty\\\"`\\n    Countries  []string   `json:\\\"countries,omitempty\\\"`\\n}\\n\\n// BulkUploadRequest represents a bulk upload request\\ntype BulkUploadRequest struct {\\n    Files       []UploadedFile `json:\\\"files\\\"`\\n    DefaultTags string         `json:\\\"default_tags,omitempty\\\"`\\n    ShareWith   []string       `json:\\\"share_with,omitempty\\\"`\\n    AutoDescribe bool          `json:\\\"auto_describe\\\"`\\n}\\n\\n// UploadedFile represents a file in bulk upload\\ntype UploadedFile struct {\\n    Filename    string `json:\\\"filename\\\"`\\n    Data        []byte `json:\\\"data\\\"`\\n    Description string `json:\\\"description,omitempty\\\"`\\n    Tags        string `json:\\\"tags,omitempty\\\"`\\n}\\n\\n// BatchUpdateRequest represents batch description update\\ntype BatchUpdateRequest struct {\\n    PhotoIDs    []string `json:\\\"photo_ids\\\"`\\n    Description string   `json:\\\"description,omitempty\\\"`\\n    Tags        string   `json:\\\"tags,omitempty\\\"`\\n    Operation   string   `json:\\\"operation\\\"`\\n}\\n\\n// ShareRequest represents a photo sharing request\\ntype ShareRequest struct {\\n    PhotoIDs   []string   `json:\\\"photo_ids\\\"`\\n    ShareWith  []string   `json:\\\"share_with\\\"`\\n    Permission string     `json:\\\"permission\\\"`\\n    ExpiresAt  *time.Time `json:\\\"expires_at,omitempty\\\"`\\n    Message    string     `json:\\\"message,omitempty\\\"`\\n}\\nEOL\\n\\n# Extract partner handler\\ncat > media-vault-backend/internal/handlers/partner.go << 'EOL'\\npackage handlers\\n\\nimport (\\n\\t\\\"github.com/gofiber/fiber/v2\\\"\\n\\t\\\"media-vault/internal/services\\\"\\n)\\n\\ntype PartnerHandler struct {\\n    photoService   *services.PhotoService\\n    sharingService *services.SharingService\\n}\\n\\nfunc NewPartnerHandler(photoService *services.PhotoService, sharingService *services.SharingService) *PartnerHandler {\\n    return &PartnerHandler{\\n        photoService:   photoService,\\n        sharingService: sharingService,\\n    }\\n}\\n\\n// BulkUpload handles bulk photo upload for partners\\nfunc (h *PartnerHandler) BulkUpload(c *fiber.Ctx) error {\\n    // Implementation from main.go\\n    return c.SendString(\\\"Bulk upload endpoint\\\")\\n}\\n\\n// GetPartnerPhotos returns photos uploaded by the partner\\nfunc (h *PartnerHandler) GetPartnerPhotos(c *fiber.Ctx) error {\\n    // Implementation from main.go\\n    return c.SendString(\\\"Partner photos endpoint\\\")\\n}\\n\\n// BatchUpdateDescriptions updates descriptions for multiple photos\\nfunc (h *PartnerHandler) BatchUpdateDescriptions(c *fiber.Ctx) error {\\n    // Implementation from main.go\\n    return c.SendString(\\\"Batch update descriptions endpoint\\\")\\n}\\n\\n// BatchSharePhotos shares multiple photos with users\\nfunc (h *PartnerHandler) BatchSharePhotos(c *fiber.Ctx) error {\\n    // Implementation from main.go\\n    return c.SendString(\\\"Batch share photos endpoint\\\")\\n}\\n\\n// GetPhotoAnalytics returns analytics for a specific photo\\nfunc (h *PartnerHandler) GetPhotoAnalytics(c *fiber.Ctx) error {\\n    // Implementation from main.go\\n    return c.SendString(\\\"Photo analytics endpoint\\\")\\n}\\n\\n// GetPartnerDashboard returns dashboard data for partner\\nfunc (h *PartnerHandler) GetPartnerDashboard(c *fiber.Ctx) error {\\n    // Implementation from main.go\\n    return c.SendString(\\\"Partner dashboard endpoint\\\")\\n}\\n\\n// GetPartnerAnalytics returns comprehensive analytics for partner\\nfunc (h *PartnerHandler) GetPartnerAnalytics(c *fiber.Ctx) error {\\n    // Implementation from main.go\\n    return c.SendString(\\\"Partner analytics endpoint\\\")\\n}\\nEOL\\n\\n# Extract photo service\\ncat > media-vault-backend/internal/services/photo_service.go << 'EOL'\\npackage services\\n\\nimport (\\n\\t\\\"database/sql\\\"\\n\\t\\\"mime/multipart\\\"\\n\\t\\\"time\\\"\\n\\t\\\"media-vault/internal/models\\\"\\n)\\n\\ntype PhotoService struct {\\n    db *sql.DB\\n}\\n\\nfunc NewPhotoService(db *sql.DB) *PhotoService {\\n    return &PhotoService{db: db}\\n}\\n\\n// CreatePhotoFromUpload creates a photo record from uploaded file\\nfunc (s *PhotoService) CreatePhotoFromUpload(fileHeader *multipart.FileHeader, userID string, partnerID *string) (*models.Photo, error) {\\n    // Implementation from main.go\\n    return &models.Photo{}, nil\\n}\\n\\n// GetPhoto retrieves a photo by ID\\nfunc (s *PhotoService) GetPhoto(photoID string) (*models.Photo, error) {\\n    // Implementation from main.go\\n    return &models.Photo{}, nil\\n}\\n\\n// UpdatePhoto updates a photo record\\nfunc (s *PhotoService) UpdatePhoto(photo *models.Photo) error {\\n    // Implementation from main.go\\n    return nil\\n}\\n\\n// GetPartnerPhotos retrieves photos for a partner with pagination\\nfunc (s *PhotoService) GetPartnerPhotos(partnerID string, page, limit int, sortBy, sortOrder, search string) ([]*models.Photo, int, error) {\\n    // Implementation from main.go\\n    return []*models.Photo{}, 0, nil\\n}\\n\\n// GenerateAIDescription generates AI description for a photo\\nfunc (s *PhotoService) GenerateAIDescription(photoID string) (string, error) {\\n    // Implementation from main.go\\n    return \\\"\\\", nil\\n}\\n\\n// GetPhotoAnalytics retrieves analytics for a photo\\nfunc (s *PhotoService) GetPhotoAnalytics(photoID string) (*models.PhotoAnalytics, error) {\\n    // Implementation from main.go\\n    return &models.PhotoAnalytics{}, nil\\n}\\n\\n// GetPartnerDashboard returns dashboard data for partner\\nfunc (s *PhotoService) GetPartnerDashboard(partnerID string) (map[string]interface{}, error) {\\n    // Implementation from main.go\\n    return map[string]interface{}{\\n        \\\"total_photos\\\": 0,\\n        \\\"total_views\\\": 0,\\n        \\\"total_shares\\\": 0,\\n    }, nil\\n}\\n\\n// GetPartnerAnalytics returns comprehensive analytics for partner\\nfunc (s *PhotoService) GetPartnerAnalytics(partnerID string, from, to *time.Time) (map[string]interface{}, error) {\\n    // Implementation from main.go\\n    return map[string]interface{}{\\n        \\\"total_photos\\\": 0,\\n        \\\"total_views\\\": 0,\\n        \\\"total_shares\\\": 0,\\n        \\\"views_by_date\\\": []interface{}{},\\n        \\\"top_photos\\\":   []interface{}{},\\n    }, nil\\n}\\nEOL\\n\\necho \\\"Extracted Go files to their respective locations\\\"\\n\"\n        },\n        {\n          \"name\": \"fix-imports.sh\",\n          \"type\": \"file\",\n          \"path\": \"scripts/fix-imports.sh\",\n          \"size\": 302,\n          \"content\": \"#!/bin/bash\\n\\n# Find all Go files and update imports\\nfind /home/tom/github/wronai/docker-platform/media-vault-backend -type f -name \\\"*.go\\\" -exec sed -i 's|media-vault/internal/|github.com/wronai/media-vault-backend/internal/|g' {} \\\\;\\n\\necho \\\"Imports updated to use github.com/wronai/media-vault-backend\\\"\\n\"\n        },\n        {\n          \"name\": \"fix_all_imports.sh\",\n          \"type\": \"file\",\n          \"path\": \"scripts/fix_all_imports.sh\",\n          \"size\": 364,\n          \"content\": \"#!/bin/bash\\n\\n# Fix imports in all Go files\\nfind media-vault-backend -name \\\"*.go\\\" -type f -exec sed -i 's|media-vault/internal/|github.com/wronai/media-vault-backend/internal/|g' {} \\\\;\\nfind media-vault-backend -name \\\"*.go\\\" -type f -exec sed -i 's|media-vault-backend/internal/|github.com/wronai/media-vault-backend/internal/|g' {} \\\\;\\n\\necho \\\"Fixed all import paths\\\"\\n\"\n        },\n        {\n          \"name\": \"fix_go_files.sh\",\n          \"type\": \"file\",\n          \"path\": \"scripts/fix_go_files.sh\",\n          \"size\": 2520,\n          \"content\": \"#!/bin/bash\\n\\n# Fix user.go\\ncat > media-vault-backend/internal/models/user.go << 'EOL'\\npackage models\\n\\nimport \\\"time\\\"\\n\\n// User represents a user in the system\\ntype User struct {\\n    ID        string    `json:\\\"id\\\" db:\\\"id\\\"`\\n    Email     string    `json:\\\"email\\\" db:\\\"email\\\"`\\n    Username  string    `json:\\\"username\\\" db:\\\"username\\\"`\\n    FullName  string    `json:\\\"full_name,omitempty\\\" db:\\\"full_name\\\"`\\n    AvatarURL *string   `json:\\\"avatar_url,omitempty\\\" db:\\\"avatar_url\\\"`\\n    IsAdmin   bool      `json:\\\"is_admin\\\" db:\\\"is_admin\\\"`\\n    IsActive  bool      `json:\\\"is_active\\\" db:\\\"is_active\\\"`\\n    LastLogin *time.Time `json:\\\"last_login,omitempty\\\" db:\\\"last_login\\\"`\\n    CreatedAt time.Time `json:\\\"created_at\\\" db:\\\"created_at\\\"`\\n    UpdatedAt time.Time `json:\\\"updated_at\\\" db:\\\"updated_at\\\"`\\n}\\n\\n// UserSettings represents user preferences and settings\\ntype UserSettings struct {\\n    UserID         string    `json:\\\"user_id\\\" db:\\\"user_id\\\"`\\n    Theme          string    `json:\\\"theme\\\" db:\\\"theme\\\"`\\n    Notifications  bool      `json:\\\"notifications\\\" db:\\\"notifications\\\"`\\n    EmailAlerts    bool      `json:\\\"email_alerts\\\" db:\\\"email_alerts\\\"`\\n    StorageQuota   int64     `json:\\\"storage_quota\\\" db:\\\"storage_quota\\\"`\\n    StorageUsed    int64     `json:\\\"storage_used\\\" db:\\\"storage_used\\\"`\\n    LastBackup     *time.Time `json:\\\"last_backup,omitempty\\\" db:\\\"last_backup\\\"`\\n    AutoSave       bool      `json:\\\"auto_save\\\" db:\\\"auto_save\\\"`\\n    AutoTagging    bool      `json:\\\"auto_tagging\\\" db:\\\"auto_tagging\\\"`\\n    AutoCategorize bool      `json:\\\"auto_categorize\\\" db:\\\"auto_categorize\\\"`\\n    CreatedAt      time.Time `json:\\\"created_at\\\" db:\\\"created_at\\\"`\\n    UpdatedAt      time.Time `json:\\\"updated_at\\\" db:\\\"updated_at\\\"`\\n}\\nEOL\\n\\n# Fix vault_service.go\\ncat > media-vault-backend/internal/services/vault_service.go << 'EOL'\\npackage services\\n\\nimport (\\n\\t\\\"database/sql\\\"\\n\\t\\\"media-vault-backend/internal/models\\\"\\n)\\n\\ntype VaultService struct {\\n    db *sql.DB\\n}\\n\\nfunc NewVaultService(db *sql.DB) *VaultService {\\n    return &VaultService{db: db}\\n}\\n\\n// Add your VaultService methods here\\nEOL\\n\\n# Fix vault.go\\ncat > media-vault-backend/internal/handlers/vault.go << 'EOL'\\npackage handlers\\n\\nimport (\\n\\t\\\"github.com/gofiber/fiber/v2\\\"\\n\\t\\\"media-vault-backend/internal/services\\\"\\n)\\n\\ntype VaultHandler struct {\\n    vaultService *services.VaultService\\n}\\n\\nfunc NewVaultHandler(vaultService *services.VaultService) *VaultHandler {\\n    return &VaultHandler{vaultService: vaultService}\\n}\\n\\n// Add your VaultHandler methods here\\nEOL\\n\\necho \\\"Fixed Go files with proper package declarations and basic structure\\\"\\n\"\n        },\n        {\n          \"name\": \"fix_remaining_files.sh\",\n          \"type\": \"file\",\n          \"path\": \"scripts/fix_remaining_files.sh\",\n          \"size\": 2917,\n          \"content\": \"#!/bin/bash\\n\\n# Fix vault_file.go\\ncat > media-vault-backend/internal/models/vault_file.go << 'EOL'\\npackage models\\n\\nimport \\\"time\\\"\\n\\n// VaultFile represents a file in the vault\\ntype VaultFile struct {\\n    ID          string    `json:\\\"id\\\" db:\\\"id\\\"`\\n    UserID      string    `json:\\\"user_id\\\" db:\\\"user_id\\\"`\\n    Name        string    `json:\\\"name\\\" db:\\\"name\\\"`\\n    Path        string    `json:\\\"path\\\" db:\\\"path\\\"`\\n    Size        int64     `json:\\\"size\\\" db:\\\"size\\\"`\\n    MimeType    string    `json:\\\"mime_type\\\" db:\\\"mime_type\\\"`\\n    IsPublic    bool      `json:\\\"is_public\\\" db:\\\"is_public\\\"`\\n    IsEncrypted bool      `json:\\\"is_encrypted\\\" db:\\\"is_encrypted\\\"`\\n    Metadata    string    `json:\\\"metadata,omitempty\\\" db:\\\"metadata\\\"`\\n    CreatedAt   time.Time `json:\\\"created_at\\\" db:\\\"created_at\\\"`\\n    UpdatedAt   time.Time `json:\\\"updated_at\\\" db:\\\"updated_at\\\"`\\n}\\nEOL\\n\\n# Fix image_processing.go\\ncat > media-vault-backend/internal/utils/image_processing.go << 'EOL'\\npackage utils\\n\\nimport (\\n\\t\\\"image\\\"\\n\\t\\\"io\\\"\\n)\\n\\n// ProcessImage processes an image and returns the processed image\\nfunc ProcessImage(r io.Reader) (image.Image, error) {\\n    // Implementation for image processing\\n    return nil, nil\\n}\\n\\n// GenerateThumbnail generates a thumbnail for the given image\\nfunc GenerateThumbnail(img image.Image, width, height int) (image.Image, error) {\\n    // Implementation for thumbnail generation\\n    return nil, nil\\n}\\n\\n// ConvertImage converts an image to the specified format\\nfunc ConvertImage(img image.Image, format string) ([]byte, error) {\\n    // Implementation for image conversion\\n    return nil, nil\\n}\\nEOL\\n\\n# Fix metadata.go\\ncat > media-vault-backend/internal/utils/metadata.go << 'EOL'\\npackage utils\\n\\n// Metadata represents file metadata\\ntype Metadata map[string]interface{}\\n\\n// ExtractMetadata extracts metadata from a file\\nfunc ExtractMetadata(filePath string) (Metadata, error) {\\n    // Implementation for metadata extraction\\n    return Metadata{}, nil\\n}\\n\\n// CleanMetadata removes sensitive information from metadata\\nfunc CleanMetadata(meta Metadata) Metadata {\\n    // Implementation for metadata cleaning\\n    return meta\\n}\\nEOL\\n\\n# Fix thumbnails.go\\ncat > media-vault-backend/internal/utils/thumbnails.go << 'EOL'\\npackage utils\\n\\nimport \\\"image\\\"\\n\\n// ThumbnailOptions contains options for thumbnail generation\\ntype ThumbnailOptions struct {\\n    Width   int\\n    Height  int\\n    Quality int\\n    Format  string\\n}\\n\\n// GenerateThumbnail generates a thumbnail for the given image\\nfunc GenerateThumbnail(img image.Image, opts ThumbnailOptions) ([]byte, error) {\\n    // Implementation for thumbnail generation\\n    return nil, nil\\n}\\n\\n// GenerateThumbnailFromBytes generates a thumbnail from image bytes\\nfunc GenerateThumbnailFromBytes(data []byte, opts ThumbnailOptions) ([]byte, error) {\\n    // Implementation for thumbnail generation from bytes\\n    return nil, nil\\n}\\nEOL\\n\\necho \\\"Fixed all remaining Go files with proper package declarations and basic structure\\\"\\n\"\n        },\n        {\n          \"name\": \"infrastructure-health.sh\",\n          \"type\": \"file\",\n          \"path\": \"scripts/infrastructure-health.sh\",\n          \"size\": 0,\n          \"content\": \"\"\n        },\n        {\n          \"name\": \"infrastructure-setup.sh\",\n          \"type\": \"file\",\n          \"path\": \"scripts/infrastructure-setup.sh\",\n          \"size\": 857,\n          \"content\": \"#!/bin/bash\\n\\necho \\\"🏗️  Setting up Infrastructure Administration...\\\"\\n\\n# Create monitoring directories\\nmkdir -p monitoring/{prometheus/rules,alertmanager,grafana/{provisioning,dashboards},loki,promtail,filebeat}\\nmkdir -p traefik backups scripts\\n\\n# Set permissions\\nchmod +x scripts/*.sh\\n\\n# Create network if not exists\\ndocker network create media-vault-network 2>/dev/null || true\\n\\necho \\\"✅ Infrastructure setup completed\\\"\\necho \\\"\\\"\\necho \\\"📋 Available profiles:\\\"\\necho \\\"  - default: Basic monitoring (Prometheus, Grafana, AlertManager)\\\"\\necho \\\"  - elk: Elasticsearch, Logstash, Kibana\\\"\\necho \\\"  - traefik: Traefik load balancer\\\"\\necho \\\"  - redis-tools: Redis management tools\\\"\\necho \\\"  - auto-update: Watchtower auto-updates\\\"\\necho \\\"  - nginx-proxy: Nginx Proxy Manager\\\"\\necho \\\"\\\"\\necho \\\"🚀 Start with: docker-compose -f docker-compose.infrastructure.yml up -d\\\"\"\n        },\n        {\n          \"name\": \"performance-report.sh\",\n          \"type\": \"file\",\n          \"path\": \"scripts/performance-report.sh\",\n          \"size\": 0,\n          \"content\": \"\"\n        },\n        {\n          \"name\": \"setup.sh\",\n          \"type\": \"file\",\n          \"path\": \"scripts/setup.sh\",\n          \"size\": 1168,\n          \"content\": \"#!/bin/bash\\n\\n# setup.sh - Complete Media Vault Setup Script\\nset -e\\n\\necho \\\"🔐 Media Vault Complete Setup\\\"\\necho \\\"=============================\\\"\\n\\n# Colors for output\\nGREEN='\\\\033[0;32m'\\nYELLOW='\\\\033[1;33m'\\nRED='\\\\033[0;31m'\\nNC='\\\\033[0m'\\n\\nprint_status() { echo -e \\\"${GREEN}✅ $1${NC}\\\"; }\\nprint_warning() { echo -e \\\"${YELLOW}⚠️  $1${NC}\\\"; }\\nprint_error() { echo -e \\\"${RED}❌ $1${NC}\\\"; }\\n\\n# Check dependencies\\ncheck_dependencies() {\\n    echo \\\"🔍 Checking dependencies...\\\"\\n\\n    if ! command -v docker &> /dev/null; then\\n        print_error \\\"Docker is not installed\\\"\\n        exit 1\\n    fi\\n\\n    if ! command -v docker-compose &> /dev/null; then\\n        print_error \\\"Docker Compose is not installed\\\"\\n        exit 1\\n    fi\\n\\n    print_status \\\"All dependencies are available\\\"\\n}\\n\\n# Create directory structure\\ncreate_directories() {\\n    echo \\\"📁 Creating directory structure...\\\"\\n\\n    directories=(\\n        \\\"data\\\"\\n        \\\"uploads/originals\\\"\\n        \\\"uploads/thumbnails\\\"\\n        \\\"uploads/processed\\\"\\n        \\\"processing/incoming\\\"\\n        \\\"processing/temp\\\"\\n        \\\"backups\\\"\\n        \\\"logs\\\"\\n        \\\"models\\\"\\n    )\\n\\n    for dir in \\\"${directories[@]}\\\"; do\\n        mkdir -p \\\"$dir\\\"\"\n        },\n        {\n          \"name\": \"test-makefile-docker.sh\",\n          \"type\": \"file\",\n          \"path\": \"scripts/test-makefile-docker.sh\",\n          \"size\": 7568,\n          \"content\": \"#!/bin/bash\\n\\n# Exit on any error\\nset -e\\n\\n# Define colors for output\\nGREEN='\\\\033[0;32m'\\nYELLOW='\\\\033[1;33m'\\nRED='\\\\033[0;31m'\\nNC='\\\\033[0m' # No Color\\n\\n# Create a temporary directory for testing\\nTEMP_DIR=$(mktemp -d)\\necho -e \\\"${YELLOW}📁 Created temporary directory: ${TEMP_DIR}${NC}\\\"\\n\\n# Function to clean up\\ntrap_handler() {\\n    echo -e \\\"\\\\n${YELLOW}🧹 Cleaning up...${NC}\\\"\\n    docker-compose -f ${TEMP_DIR}/docker-compose.yml down --volumes --remove-orphans >/dev/null 2>&1 || true\\n    # Don't remove the temp dir for debugging\\n    # rm -rf \\\"${TEMP_DIR}\\\"\\n    echo -e \\\"${GREEN}✅ Cleanup complete${NC}\\n\\\"\\n}\\ntrap trap_handler EXIT\\n\\n# Copy necessary files to temp directory\\necho -e \\\"${YELLOW}📦 Copying project files...${NC}\\\"\\ncp Makefile \\\"${TEMP_DIR}/\\\"\\n\\n# Create a minimal .env file if .env.example doesn't exist\\nif [ ! -f .env.example ]; then\\n    echo -e \\\"${YELLOW}ℹ️  Creating minimal .env file...${NC}\\\"\\n    echo \\\"# Minimal .env file for testing\\\" > \\\"${TEMP_DIR}/.env\\\"\\n    echo \\\"COMPOSE_PROJECT_NAME=makefile-test\\\" >> \\\"${TEMP_DIR}/.env\\\"\\nelse\\n    cp .env.example \\\"${TEMP_DIR}/.env\\\"\\nfi\\n\\n# Copy docker-compose files\\ncp -r docker-compose* \\\"${TEMP_DIR}/\\\" 2>/dev/null || true\\n\\n# Copy Ansible files if they exist\\nif [ -d \\\"ansible\\\" ]; then\\n    echo -e \\\"${YELLOW}📦 Copying Ansible files...${NC}\\\"\\n    mkdir -p \\\"${TEMP_DIR}/ansible\\\"\\n    cp -r ansible/* \\\"${TEMP_DIR}/ansible/\\\"\\n    \\n    # Create a test inventory file\\n    cat > \\\"${TEMP_DIR}/ansible/inventory.ini\\\" << 'EOL'\\n[local]\\nlocalhost ansible_connection=local\\n\\n[all:vars]\\nansible_python_interpreter=/usr/bin/python3\\nEOL\\n    \\n    # Create a test playbook if none exists\\n    if [ ! -f \\\"${TEMP_DIR}/ansible/playbook.yml\\\" ]; then\\n        cat > \\\"${TEMP_DIR}/ansible/playbook.yml\\\" << 'EOL'\\n---\\n- name: Test Playbook\\n  hosts: localhost\\n  connection: local\\n  gather_facts: yes\\n  become: no\\n\\n  tasks:\\n    - name: Check Docker is running\\n      command: docker info\\n      register: docker_info\\n      changed_when: false\\n\\n    - name: Print Docker info\\n      debug:\\n        var: docker_info.stdout_lines\\nEOL\\n    fi\\nfi\\n\\n# Create a test Dockerfile\\ncat > \\\"${TEMP_DIR}/Dockerfile.test\\\" << 'EOL'\\nFROM docker:24.0.7-cli\\n\\n# Install dependencies\\nRUN apk add --no-cache \\\\\\n    bash \\\\\\n    curl \\\\\\n    git \\\\\\n    make \\\\\\n    go \\\\\\n    nodejs \\\\\\n    npm \\\\\\n    python3 \\\\\\n    py3-pip \\\\\\n    docker-compose \\\\\\n    openssh-client \\\\\\n    sshpass\\n\\n# Install Go linter compatible with Go 1.21.10\\nRUN go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.55.2\\n\\n# Create and activate virtual environment for Python packages\\nRUN python3 -m venv /opt/venv\\nENV PATH=\\\"/opt/venv/bin:$PATH\\\"\\n\\n# Install Ansible and dependencies in the virtual environment\\nRUN pip install --no-cache-dir --upgrade pip && \\\\\\n    pip install --no-cache-dir ansible ansible-lint docker && \\\\\\n    ansible --version && \\\\\\n    ansible-lint --version\\n\\n# Set working directory\\nWORKDIR /app\\n\\n# Copy project files\\nCOPY . .\\n\\nEOL\\n\\n# Build test image\\necho -e \\\"${YELLOW}🐳 Building test Docker image...${NC}\\\"\\ndocker build -t makefile-test -f \\\"${TEMP_DIR}/Dockerfile.test\\\" \\\"${TEMP_DIR}\\\"\\n\\n# Function to test Ansible playbook\\ntest_ansible_playbook() {\\n    if [ ! -d \\\"${TEMP_DIR}/ansible\\\" ]; then\\n        echo -e \\\"${YELLOW}ℹ️  No Ansible directory found, skipping Ansible tests${NC}\\\"\\n        return 0\\n    fi\\n    \\n    local failed=0\\n    \\n    echo -e \\\"\\\\n${YELLOW}🔍 Testing Ansible playbook...${NC}\\\"\\n    echo \\\"--------------------------------------------------\\\"\\n    \\n    # Test playbook syntax\\n    echo -e \\\"${YELLOW}🔧 Checking playbook syntax...${NC}\\\"\\n    if ! docker run --rm \\\\\\n        -v /var/run/docker.sock:/var/run/docker.sock \\\\\\n        -v \\\"${TEMP_DIR}/ansible:/ansible\\\" \\\\\\n        -w /ansible \\\\\\n        makefile-test \\\\\\n        ansible-playbook -i inventory.ini --syntax-check playbook.yml; then\\n        echo -e \\\"${RED}❌ Ansible playbook syntax check failed${NC}\\\"\\n        ((failed++))\\n    else\\n        echo -e \\\"${GREEN}✅ Ansible playbook syntax check passed${NC}\\\"\\n    fi\\n    \\n    # Lint the playbook\\n    echo -e \\\"\\\\n${YELLOW}🔍 Linting playbook...${NC}\\\"\\n    if ! docker run --rm \\\\\\n        -v /var/run/docker.sock:/var/run/docker.sock \\\\\\n        -v \\\"${TEMP_DIR}/ansible:/ansible\\\" \\\\\\n        -w /ansible \\\\\\n        makefile-test \\\\\\n        ansible-lint playbook.yml; then\\n        echo -e \\\"${YELLOW}⚠️  Ansible linting found issues (non-fatal)${NC}\\\"\\n    else\\n        echo -e \\\"${GREEN}✅ Ansible linting passed${NC}\\\"\\n    fi\\n    \\n    # Run the playbook in check mode\\n    echo -e \\\"\\\\n${YELLOW}🔍 Running playbook in check mode...${NC}\\\"\\n    if ! docker run --rm \\\\\\n        -v /var/run/docker.sock:/var/run/docker.sock \\\\\\n        -v \\\"${TEMP_DIR}/ansible:/ansible\\\" \\\\\\n        -w /ansible \\\\\\n        makefile-test \\\\\\n        ansible-playbook -i inventory.ini --check playbook.yml; then\\n        echo -e \\\"${RED}❌ Ansible playbook check mode failed${NC}\\\"\\n        ((failed++))\\n    else\\n        echo -e \\\"${GREEN}✅ Ansible playbook check mode passed${NC}\\\"\\n    fi\\n    \\n    return $failed\\n}\\n\\n# Function to run a make target and check its status\\nrun_make_target() {\\n    local target=$1\\n    local description=$2\\n    \\n    echo -e \\\"\\\\n${YELLOW}🔄 Testing: ${target} - ${description}${NC}\\\"\\n    echo \\\"--------------------------------------------------\\\"\\n    \\n    # Run the make target in the container\\n    if docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\\\\n        -v \\\"${TEMP_DIR}:/app\\\" \\\\\\n        -w /app \\\\\\n        makefile-test \\\\\\n        make -n \\\"${target}\\\" >/dev/null 2>&1; then\\n        echo -e \\\"${GREEN}✅ Dry run successful for: ${target}${NC}\\\"\\n        return 0\\n    else\\n        echo -e \\\"${RED}❌ Dry run failed for: ${target}${NC}\\\"\\n        return 1\\n    fi\\n}\\n\\n# Main test function\\nrun_tests() {\\n    local failed_tests=0\\n    local total_tests=0\\n    \\n    # Define the targets to test with their descriptions\\n    declare -A targets=(\\n        [\\\"init\\\"]=\\\"Initialize development environment\\\"\\n        [\\\"up\\\"]=\\\"Start all services\\\"\\n        [\\\"up-build\\\"]=\\\"Rebuild and start all services\\\"\\n        [\\\"down\\\"]=\\\"Stop all services\\\"\\n        [\\\"restart\\\"]=\\\"Restart all services\\\"\\n        [\\\"logs\\\"]=\\\"View logs from all services\\\"\\n        [\\\"test-unit\\\"]=\\\"Run unit tests\\\"\\n        [\\\"test-integration\\\"]=\\\"Run integration tests\\\"\\n        [\\\"lint\\\"]=\\\"Run linters\\\"\\n        [\\\"format\\\"]=\\\"Format code\\\"\\n        [\\\"monitoring\\\"]=\\\"Start monitoring stack\\\"\\n        [\\\"monitoring-down\\\"]=\\\"Stop monitoring stack\\\"\\n        [\\\"clean\\\"]=\\\"Remove all containers and volumes\\\"\\n    )\\n    \\n    # Run tests for each target\\n    for target in \\\"${!targets[@]}\\\"; do\\n        if ! run_make_target \\\"$target\\\" \\\"${targets[$target]}\\\"; then\\n            ((failed_tests++))\\n        fi\\n        ((total_tests++))\\n    done\\n    \\n    # Test Ansible playbook if it exists\\n    if [ -d \\\"${TEMP_DIR}/ansible\\\" ]; then\\n        echo -e \\\"\\\\n${YELLOW}🔍 Running Ansible tests...${NC}\\\"\\n        ((total_tests++))\\n        if ! test_ansible_playbook; then\\n            ((failed_tests++))\\n        fi\\n    fi\\n    \\n    # Print summary\\n    echo -e \\\"\\\\n${YELLOW}📊 Test Summary:${NC}\\\"\\n    echo \\\"--------------------------------------------------\\\"\\n    echo -e \\\"${GREEN}✅ Passed: $((total_tests - failed_tests))${NC}\\\"\\n    echo -e \\\"${RED}❌ Failed: ${failed_tests}${NC}\\\"\\n    echo -e \\\"📊 Total:  ${total_tests}\\\"\\n    \\n    # Exit with appropriate status\\n    if [ $failed_tests -gt 0 ]; then\\n        echo -e \\\"\\\\n❌ Some tests failed. Check the output above for details.\\\"\\n        echo -e \\\"Temporary directory preserved at: ${TEMP_DIR} for debugging\\\"\\n        return 1\\n    else\\n        echo -e \\\"\\\\n🎉 All tests passed successfully!\\\"\\n        return 0\\n    fi\\n}\\n\\n# Run the tests\\nrun_tests\\n\"\n        },\n        {\n          \"name\": \"test-makefile.sh\",\n          \"type\": \"file\",\n          \"path\": \"scripts/test-makefile.sh\",\n          \"size\": 2332,\n          \"content\": \"#!/bin/bash\\n\\n# Exit on any error\\nset -e\\n\\necho \\\"🚀 Starting Makefile test in Docker environment...\\\"\\n\\n# Define colors for output\\nGREEN='\\\\033[0;32m'\\nYELLOW='\\\\033[1;33m'\\nRED='\\\\033[0;31m'\\nNC='\\\\033[0m' # No Color\\n\\n# Function to run a make target and check its status\\nrun_make_target() {\\n    local target=$1\\n    local description=$2\\n    \\n    echo -e \\\"\\\\n${YELLOW}🔄 Testing: ${target} - ${description}${NC}\\\"\\n    echo \\\"--------------------------------------------------\\\"\\n    \\n    # Run the make target and capture output and status\\n    if make -n $target >/dev/null 2>&1; then\\n        echo -e \\\"${GREEN}✅ Dry run successful for: ${target}${NC}\\\"\\n        return 0\\n    else\\n        echo -e \\\"${RED}❌ Dry run failed for: ${target}${NC}\\\"\\n        return 1\\n    fi\\n}\\n\\n# Main test function\\ntest_makefile() {\\n    local failed_tests=0\\n    local total_tests=0\\n    \\n    # Define the targets to test with their descriptions\\n    declare -A targets=(\\n        [\\\"init\\\"]=\\\"Initialize development environment\\\"\\n        [\\\"up\\\"]=\\\"Start all services\\\"\\n        [\\\"up-build\\\"]=\\\"Rebuild and start all services\\\"\\n        [\\\"down\\\"]=\\\"Stop all services\\\"\\n        [\\\"restart\\\"]=\\\"Restart all services\\\"\\n        [\\\"logs\\\"]=\\\"View logs from all services\\\"\\n        [\\\"test-unit\\\"]=\\\"Run unit tests\\\"\\n        [\\\"test-integration\\\"]=\\\"Run integration tests\\\"\\n        [\\\"lint\\\"]=\\\"Run linters\\\"\\n        [\\\"format\\\"]=\\\"Format code\\\"\\n        [\\\"monitoring\\\"]=\\\"Start monitoring stack\\\"\\n        [\\\"monitoring-down\\\"]=\\\"Stop monitoring stack\\\"\\n        [\\\"clean\\\"]=\\\"Remove all containers and volumes\\\"\\n    )\\n    \\n    # Run tests for each target\\n    for target in \\\"${!targets[@]}\\\"; do\\n        if ! run_make_target \\\"$target\\\" \\\"${targets[$target]}\\\"; then\\n            ((failed_tests++))\\n        fi\\n        ((total_tests++))\\n    done\\n    \\n    # Print summary\\n    echo -e \\\"\\\\n${YELLOW}📊 Test Summary:${NC}\\\"\\n    echo \\\"--------------------------------------------------\\\"\\n    echo -e \\\"${GREEN}✅ Passed: $((total_tests - failed_tests))${NC}\\\"\\n    echo -e \\\"${RED}❌ Failed: ${failed_tests}${NC}\\\"\\n    echo -e \\\"📊 Total:  ${total_tests}\\\"\\n    \\n    # Exit with appropriate status\\n    if [ $failed_tests -gt 0 ]; then\\n        echo -e \\\"\\\\n❌ Some tests failed. Check the output above for details.\\\"\\n        exit 1\\n    else\\n        echo -e \\\"\\\\n🎉 All tests passed successfully!\\\"\\n        exit 0\\n    fi\\n}\\n\\n# Run the tests\\ntest_makefile\\n\"\n        },\n        {\n          \"name\": \"TODO.md\",\n          \"type\": \"file\",\n          \"path\": \"scripts/TODO.md\",\n          \"size\": 295,\n          \"content\": \"# Scripts - TODO\\n\\n## High Priority\\n- [ ] Document all scripts\\n- [ ] Add error handling to critical scripts\\n- [ ] Implement input validation\\n\\n## Medium Priority\\n- [ ] Add usage examples\\n- [ ] Create tests for scripts\\n- [ ] Standardize logging format\\n\\n## Completed\\n- [x] Initial script collection\\n\"\n        },\n        {\n          \"name\": \"update_imports.sh\",\n          \"type\": \"file\",\n          \"path\": \"scripts/update_imports.sh\",\n          \"size\": 1005,\n          \"content\": \"#!/bin/bash\\n\\n# Update imports in all Go files\\nfind media-vault-backend -name \\\"*.go\\\" -type f -exec sed -i 's|media-vault-backend|github.com/wronai/media-vault-backend|g' {} \\\\;\\n\\n# Update the module path in go.mod\\ncat > media-vault-backend/go.mod << 'EOL'\\nmodule github.com/wronai/media-vault-backend\\n\\ngo 1.21\\n\\nrequire (\\n    github.com/gofiber/fiber/v2 v2.50.0\\n    github.com/golang-jwt/jwt/v5 v5.0.0\\n    github.com/google/uuid v1.3.1\\n    github.com/mattn/go-sqlite3 v1.14.17\\n)\\n\\nrequire (\\n    github.com/andybalholm/brotli v1.0.5 // indirect\\n    github.com/klauspost/compress v1.16.7 // indirect\\n    github.com/mattn/go-colorable v0.1.13 // indirect\\n    github.com/mattn/go-isatty v0.0.19 // indirect\\n    github.com/mattn/go-runewidth v0.0.15 // indirect\\n    github.com/rivo/uniseg v0.2.0 // indirect\\n    github.com/valyala/bytebufferpool v1.0.0 // indirect\\n    github.com/valyala/fasthttp v1.50.0 // indirect\\n    github.com/valyala/tcplisten v1.0.0 // indirect\\n)\\nEOL\\n\\necho \\\"Updated imports and module path\\\"\\n\"\n        }\n      ]\n    },\n    {\n      \"name\": \"tests\",\n      \"type\": \"directory\",\n      \"path\": \"tests\",\n      \"children\": [\n        {\n          \"name\": \"backend\",\n          \"type\": \"directory\",\n          \"path\": \"tests/backend\",\n          \"children\": [\n            {\n              \"name\": \"auth_test.go\",\n              \"type\": \"file\",\n              \"path\": \"tests/backend/auth_test.go\",\n              \"size\": 0,\n              \"content\": \"\"\n            },\n            {\n              \"name\": \"handlers_test.go\",\n              \"type\": \"file\",\n              \"path\": \"tests/backend/handlers_test.go\",\n              \"size\": 0,\n              \"content\": \"\"\n            },\n            {\n              \"name\": \"services_test.go\",\n              \"type\": \"file\",\n              \"path\": \"tests/backend/services_test.go\",\n              \"size\": 0,\n              \"content\": \"\"\n            }\n          ]\n        },\n        {\n          \"name\": \"e2e\",\n          \"type\": \"directory\",\n          \"path\": \"tests/e2e\",\n          \"children\": [\n            {\n              \"name\": \"admin_flow_test.js\",\n              \"type\": \"file\",\n              \"path\": \"tests/e2e/admin_flow_test.js\",\n              \"size\": 0,\n              \"content\": \"\"\n            },\n            {\n              \"name\": \"user_flow_test.js\",\n              \"type\": \"file\",\n              \"path\": \"tests/e2e/user_flow_test.js\",\n              \"size\": 0,\n              \"content\": \"\"\n            }\n          ]\n        },\n        {\n          \"name\": \"frontend\",\n          \"type\": \"directory\",\n          \"path\": \"tests/frontend\",\n          \"children\": [\n            {\n              \"name\": \"test\",\n              \"type\": \"directory\",\n              \"path\": \"tests/frontend/test\",\n              \"children\": [\n                {\n                  \"name\": \"integration_test.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"tests/frontend/test/integration_test.dart\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                },\n                {\n                  \"name\": \"widget_test.dart\",\n                  \"type\": \"file\",\n                  \"path\": \"tests/frontend/test/widget_test.dart\",\n                  \"size\": 0,\n                  \"content\": \"\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"name\": \"TODO.md\",\n          \"type\": \"file\",\n          \"path\": \"tests/TODO.md\",\n          \"size\": 309,\n          \"content\": \"# Tests - TODO\\n\\n## High Priority\\n- [ ] Set up test framework\\n- [ ] Create unit tests for core functionality\\n- [ ] Implement integration tests\\n\\n## Medium Priority\\n- [ ] Add test coverage reporting\\n- [ ] Create end-to-end tests\\n- [ ] Set up CI test pipeline\\n\\n## Completed\\n- [x] Initial test directory structure\\n\"\n        }\n      ]\n    },\n    {\n      \"name\": \"tools\",\n      \"type\": \"directory\",\n      \"path\": \"tools\",\n      \"children\": [\n        {\n          \"name\": \"build.sh\",\n          \"type\": \"file\",\n          \"path\": \"tools/build.sh\",\n          \"size\": 0,\n          \"content\": \"\"\n        },\n        {\n          \"name\": \"deploy.sh\",\n          \"type\": \"file\",\n          \"path\": \"tools/deploy.sh\",\n          \"size\": 0,\n          \"content\": \"\"\n        },\n        {\n          \"name\": \"format.sh\",\n          \"type\": \"file\",\n          \"path\": \"tools/format.sh\",\n          \"size\": 0,\n          \"content\": \"\"\n        },\n        {\n          \"name\": \"lint.sh\",\n          \"type\": \"file\",\n          \"path\": \"tools/lint.sh\",\n          \"size\": 0,\n          \"content\": \"\"\n        },\n        {\n          \"name\": \"test.sh\",\n          \"type\": \"file\",\n          \"path\": \"tools/test.sh\",\n          \"size\": 0,\n          \"content\": \"\"\n        }\n      ]\n    },\n    {\n      \"name\": \"uploads\",\n      \"type\": \"directory\",\n      \"path\": \"uploads\",\n      \"children\": []\n    },\n    {\n      \"name\": \"CHANGELOG.md\",\n      \"type\": \"file\",\n      \"path\": \"CHANGELOG.md\",\n      \"size\": 675,\n      \"content\": \"# Changelog\\n\\nAll notable changes to this project will be documented in this file.\\n\\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\\n\\n## [Unreleased]\\n### Added\\n- Initial project setup\\n- Basic infrastructure with Docker Compose\\n- Keycloak integration for authentication\\n- File explorer interface\\n- Media vault components\\n- Monitoring stack\\n\\n### Changed\\n- Project structure and organization\\n\\n### Fixed\\n- Various bug fixes and improvements\\n\\n---\\n*Note: This is the initial changelog entry. Future changes should be documented below following the same format.*\\n\"\n    },\n    {\n      \"name\": \"CONTRIBUTING.md\",\n      \"type\": \"file\",\n      \"path\": \"CONTRIBUTING.md\",\n      \"size\": 6706,\n      \"content\": \"# 👋 Welcome Contributors!\\n\\nThank you for your interest in contributing to Media Vault! We're excited to have you on board. This guide will help you get started with contributing to our project.\\n\\n## 📋 Table of Contents\\n\\n- [Code of Conduct](#-code-of-conduct)\\n- [Getting Started](#-getting-started)\\n- [Development Workflow](#-development-workflow)\\n- [Code Style](#-code-style)\\n- [Testing](#-testing)\\n- [Pull Request Process](#-pull-request-process)\\n- [Reporting Bugs](#-reporting-bugs)\\n- [Feature Requests](#-feature-requests)\\n- [Documentation](#-documentation)\\n- [Community](#-community)\\n\\n## 🤝 Code of Conduct\\n\\nPlease read our [Code of Conduct](CODE_OF_CONDUCT.md) before contributing. We are committed to fostering a welcoming and inclusive community.\\n\\n## 🚀 Getting Started\\n\\n### Prerequisites\\n\\n- Git\\n- Docker 20.10+ and Docker Compose\\n- Node.js 16+ (for frontend development)\\n- Go 1.19+ (for backend development)\\n- Make (optional but recommended)\\n\\n### Setting Up the Development Environment\\n\\n1. **Fork the repository**\\n   ```bash\\n   git clone https://github.com/wronai/docker-platform.git\\n   cd docker-platform\\n   ```\\n\\n2. **Set up environment variables**\\n   ```bash\\n   cp .env.example .env\\n   # Edit .env with your configuration\\n   ```\\n\\n3. **Start the development environment**\\n   ```bash\\n   make dev\\n   ```\\n\\n4. **Access the applications**\\n   - Web UI: http://localhost:3000\\n   - API: http://localhost:8080\\n   - Documentation: http://localhost:8080/docs\\n   - Monitoring: http://localhost:9090\\n\\n## 🔄 Development Workflow\\n\\n1. **Create a new branch**\\n   ```bash\\n   git checkout -b feature/your-feature-name\\n   # or\\n   git checkout -b fix/your-bug-fix\\n   ```\\n\\n2. **Make your changes**\\n   - Follow the code style guidelines\\n   - Write tests for new features\\n   - Update documentation as needed\\n\\n3. **Run tests**\\n   ```bash\\n   make test\\n   ```\\n\\n4. **Commit your changes**\\n   ```bash\\n   git add .\\n   git commit -m \\\"feat: add new feature\\\"\\n   ```\\n\\n5. **Push your changes**\\n   ```bash\\n   git push origin your-branch-name\\n   ```\\n\\n6. **Create a Pull Request**\\n   - Go to the [repository](https://github.com/wronai/docker-platform)\\n   - Click \\\"New Pull Request\\\"\\n   - Follow the PR template\\n   - Request reviews from maintainers\\n\\n## 🎨 Code Style\\n\\n### Backend (Go)\\n- Follow the [Effective Go](https://golang.org/doc/effective_go.html) guidelines\\n- Use `gofmt` for formatting\\n- Run `golint` and `go vet` before committing\\n- Write unit tests for new functionality\\n\\n### Frontend (Flutter/Dart)\\n- Follow the [Dart Style Guide](https://dart.dev/guides/language/effective-dart/style)\\n- Use `dart format` for formatting\\n- Follow BLoC pattern for state management\\n- Write widget tests for UI components\\n\\n### Git Commit Messages\\n\\nWe follow the [Conventional Commits](https://www.conventionalcommits.org/) specification:\\n\\n```\\n<type>[optional scope]: <description>\\n\\n[optional body]\\n\\n[optional footer]\\n```\\n\\nTypes:\\n- `feat`: New feature\\n- `fix`: Bug fix\\n- `docs`: Documentation changes\\n- `style`: Code style changes\\n- `refactor`: Code changes that neither fixes a bug nor adds a feature\\n- `perf`: Performance improvements\\n- `test`: Adding tests\\n- `chore`: Changes to the build process or auxiliary tools\\n\\nExample:\\n```\\nfeat(auth): add two-factor authentication\\n\\n- Add TOTP support\\n- Add recovery codes\\n- Update login flow\\n\\nCloses #123\\n```\\n\\n## 🧪 Testing\\n\\n### Running Tests\\n\\n```bash\\n# Run all tests\\nmake test\\n\\n# Run backend tests\\nmake test-backend\\n\\n# Run frontend tests\\nmake test-frontend\\n\\n# Run integration tests\\nmake test-integration\\n\\n# Run linters\\nmake lint\\n```\\n\\n### Writing Tests\\n- Write unit tests for all new functionality\\n- Include integration tests for critical paths\\n- Use descriptive test names\\n- Test edge cases and error conditions\\n\\n## 🔄 Pull Request Process\\n\\n1. Ensure your code passes all tests\\n2. Update documentation if needed\\n3. Ensure your branch is up to date with `main`\\n4. Run linters and fix any issues\\n5. Request reviews from at least one maintainer\\n6. Address all review comments\\n7. Wait for CI to pass\\n8. Squash and merge when approved\\n\\n## 🐛 Reporting Bugs\\n\\nFound a bug? Please let us know by [opening an issue](https://github.com/wronai/docker-platform/issues/new?template=bug_report.md).\\n\\n### Before Submitting a Bug Report\\n1. Check if the issue has already been reported\\n2. Try to reproduce the issue with the latest version\\n3. Collect as much information as possible\\n\\n### Bug Report Template\\n```markdown\\n## Describe the bug\\nA clear and concise description of what the bug is.\\n\\n## To Reproduce\\nSteps to reproduce the behavior:\\n1. Go to '...'\\n2. Click on '....'\\n3. Scroll down to '....'\\n4. See error\\n\\n## Expected behavior\\nA clear and concise description of what you expected to happen.\\n\\n## Screenshots\\nIf applicable, add screenshots to help explain your problem.\\n\\n## Additional context\\nAdd any other context about the problem here.\\n```\\n\\n## 💡 Feature Requests\\n\\nHave an idea for a new feature? [Open a feature request](https://github.com/wronai/docker-platform/issues/new?template=feature_request.md).\\n\\n### Feature Request Template\\n```markdown\\n## Is your feature request related to a problem? Please describe.\\nA clear and concise description of what the problem is.\\n\\n## Describe the solution you'd like\\nA clear and concise description of what you want to happen.\\n\\n## Describe alternatives you've considered\\nA clear and concise description of any alternative solutions or features you've considered.\\n\\n## Additional context\\nAdd any other context or screenshots about the feature request here.\\n```\\n\\n## 📚 Documentation\\n\\nGood documentation is crucial for the success of any project. We appreciate contributions that improve our documentation.\\n\\n### Documentation Guidelines\\n- Keep it clear and concise\\n- Use proper formatting\\n- Include examples where helpful\\n- Keep it up to date\\n\\n### Building Documentation\\n```bash\\n# Build documentation\\nmake docs\\n\\n# Serve documentation locally\\nmake docs-serve\\n```\\n\\n## 🌍 Community\\n\\n### Getting Help\\n- [GitHub Discussions](https://github.com/wronai/docker-platform/discussions)\\n- [Discord Server](https://discord.gg/your-invite-link)\\n- [Community Forum](https://community.mediavault.example.com)\\n\\n### Stay Updated\\n- Follow us on [Twitter](https://twitter.com/yourhandle)\\n- Subscribe to our [blog](https://blog.mediavault.example.com)\\n- Join our [newsletter](https://mediavault.example.com/newsletter)\\n\\n## 🙏 Acknowledgments\\n\\n- Thank you to all our contributors\\n- Special thanks to our core maintainers\\n- Shoutout to all our beta testers\\n\\n---\\n\\n<div align=\\\"center\\\">\\n  <p>Happy coding! 🚀</p>\\n  <p>If you have any questions, feel free to ask in our <a href=\\\"https://github.com/wronai/docker-platform/discussions\\\">Discussions</a>.</p>\\n</div>\\n\"\n    },\n    {\n      \"name\": \"docker-compose.automation.yml\",\n      \"type\": \"file\",\n      \"path\": \"docker-compose.automation.yml\",\n      \"size\": 2898,\n      \"content\": \"version: '3.8'\\n\\nservices:\\n  # Automated Incident Response\\n  incident-response:\\n    image: alpine:3.18\\n    container_name: incident-response\\n    volumes:\\n      - ./scripts/automation:/scripts\\n      - /var/run/docker.sock:/var/run/docker.sock\\n    environment:\\n      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}\\n      - PAGERDUTY_API_KEY=${PAGERDUTY_API_KEY}\\n      - TEAMS_WEBHOOK_URL=${TEAMS_WEBHOOK_URL}\\n    command: |\\n      sh -c \\\"\\n        apk add --no-cache curl jq docker-cli\\n        while true; do\\n          /scripts/incident-handler.sh\\n          sleep 30\\n        done\\n      \\\"\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n\\n  # Capacity Planning Service\\n  capacity-planner:\\n    image: python:3.11-alpine\\n    container_name: capacity-planner\\n    volumes:\\n      - ./scripts/capacity:/app\\n      - ./data/capacity:/data\\n    environment:\\n      - PROMETHEUS_URL=http://prometheus:9090\\n      - PREDICTION_DAYS=30\\n      - ALERT_THRESHOLD=0.8\\n    command: |\\n      sh -c \\\"\\n        pip install requests numpy pandas\\n        cd /app && python capacity_planner.py\\n      \\\"\\n    depends_on:\\n      - prometheus\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n\\n  # Log Analysis & Anomaly Detection\\n  log-analyzer:\\n    image: python:3.11-alpine\\n    container_name: log-analyzer\\n    volumes:\\n      - ./scripts/analysis:/app\\n      - ./logs:/logs:ro\\n    environment:\\n      - ELASTICSEARCH_URL=http://elasticsearch:9200\\n      - ANOMALY_THRESHOLD=3.0\\n      - ALERT_WEBHOOK=${SLACK_WEBHOOK_URL}\\n    command: |\\n      sh -c \\\"\\n        pip install elasticsearch scikit-learn numpy\\n        cd /app && python anomaly_detector.py\\n      \\\"\\n    profiles:\\n      - analytics\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n\\n  # Performance Optimization Service\\n  performance-optimizer:\\n    image: alpine:3.18\\n    container_name: performance-optimizer\\n    volumes:\\n      - ./scripts/optimization:/scripts\\n      - /var/run/docker.sock:/var/run/docker.sock\\n    environment:\\n      - PROMETHEUS_URL=http://prometheus:9090\\n      - OPTIMIZATION_SCHEDULE=0 3 * * *  # Daily at 3 AM\\n    command: |\\n      sh -c \\\"\\n        apk add --no-cache curl jq docker-cli dcron\\n        echo '$OPTIMIZATION_SCHEDULE /scripts/optimize.sh' | crontab -\\n        crond -f\\n      \\\"\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n\\n  # Certificate Management\\n  cert-manager:\\n    image: alpine:3.18\\n    container_name: cert-manager\\n    volumes:\\n      - ./certs:/certs\\n      - ./scripts/certs:/scripts\\n    environment:\\n      - DOMAIN=${PRODUCTION_DOMAIN}\\n      - EMAIL=${ADMIN_EMAIL}\\n      - CERT_RENEWAL_DAYS=30\\n    command: |\\n      sh -c \\\"\\n        apk add --no-cache openssl curl\\n        /scripts/cert-monitor.sh\\n      \\\"\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n    profiles:\\n      - production\\n\\nnetworks:\\n  media-vault-network:\\n    external: true\\n\\n\"\n    },\n    {\n      \"name\": \"docker-compose.infrastructure.yml\",\n      \"type\": \"file\",\n      \"path\": \"docker-compose.infrastructure.yml\",\n      \"size\": 11141,\n      \"content\": \"# docker-compose.infrastructure.yml - Infrastructure Administration\\nversion: '3.8'\\n\\nservices:\\n  # Prometheus - Metrics Collection\\n  prometheus:\\n    image: prom/prometheus:v2.47.0\\n    container_name: prometheus\\n    ports:\\n      - \\\"9090:9090\\\"\\n    volumes:\\n      - ./monitoring/prometheus:/etc/prometheus\\n      - prometheus_data:/prometheus\\n    command:\\n      - '--config.file=/etc/prometheus/prometheus.yml'\\n      - '--storage.tsdb.path=/prometheus'\\n      - '--web.console.libraries=/etc/prometheus/console_libraries'\\n      - '--web.console.templates=/etc/prometheus/consoles'\\n      - '--storage.tsdb.retention.time=30d'\\n      - '--web.enable-lifecycle'\\n      - '--web.enable-admin-api'\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n\\n  # Grafana - Visualization & Dashboards\\n  grafana:\\n    image: grafana/grafana:10.1.0\\n    container_name: grafana\\n    ports:\\n      - \\\"3333:3000\\\"\\n    volumes:\\n      - grafana_data:/var/lib/grafana\\n      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning\\n      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards\\n    environment:\\n      - GF_SECURITY_ADMIN_USER=admin\\n      - GF_SECURITY_ADMIN_PASSWORD=grafana123\\n      - GF_USERS_ALLOW_SIGN_UP=false\\n      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel\\n      - GF_AUTH_GENERIC_OAUTH_ENABLED=true\\n      - GF_AUTH_GENERIC_OAUTH_NAME=Keycloak\\n      - GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP=true\\n      - GF_AUTH_GENERIC_OAUTH_CLIENT_ID=grafana\\n      - GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET=grafana-secret\\n      - GF_AUTH_GENERIC_OAUTH_SCOPES=openid profile email\\n      - GF_AUTH_GENERIC_OAUTH_AUTH_URL=http://localhost:8443/realms/media-vault/protocol/openid_connect/auth\\n      - GF_AUTH_GENERIC_OAUTH_TOKEN_URL=http://keycloak:8080/realms/media-vault/protocol/openid_connect/token\\n      - GF_AUTH_GENERIC_OAUTH_API_URL=http://keycloak:8080/realms/media-vault/protocol/openid_connect/userinfo\\n    depends_on:\\n      - prometheus\\n      - keycloak\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n\\n  # AlertManager - Alert Management\\n  alertmanager:\\n    image: prom/alertmanager:v0.26.0\\n    container_name: alertmanager\\n    ports:\\n      - \\\"9093:9093\\\"\\n    volumes:\\n      - ./monitoring/alertmanager:/etc/alertmanager\\n      - alertmanager_data:/alertmanager\\n    command:\\n      - '--config.file=/etc/alertmanager/alertmanager.yml'\\n      - '--storage.path=/alertmanager'\\n      - '--web.external-url=http://localhost:9093'\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n\\n  # Node Exporter - Host Metrics\\n  node-exporter:\\n    image: prom/node-exporter:v1.6.1\\n    container_name: node-exporter\\n    ports:\\n      - \\\"9100:9100\\\"\\n    volumes:\\n      - /proc:/host/proc:ro\\n      - /sys:/host/sys:ro\\n      - /:/rootfs:ro\\n    command:\\n      - '--path.procfs=/host/proc'\\n      - '--path.rootfs=/rootfs'\\n      - '--path.sysfs=/host/sys'\\n      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n\\n  # cAdvisor - Container Metrics\\n  cadvisor:\\n    image: gcr.io/cadvisor/cadvisor:v0.47.2\\n    container_name: cadvisor\\n    ports:\\n      - \\\"8888:8080\\\"\\n    volumes:\\n      - /:/rootfs:ro\\n      - /var/run:/var/run:rw\\n      - /sys:/sys:ro\\n      - /var/lib/docker/:/var/lib/docker:ro\\n      - /dev/disk/:/dev/disk:ro\\n    privileged: true\\n    devices:\\n      - /dev/kmsg\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n\\n  # Loki - Log Aggregation\\n  loki:\\n    image: grafana/loki:2.9.0\\n    container_name: loki\\n    ports:\\n      - \\\"3100:3100\\\"\\n    volumes:\\n      - ./monitoring/loki:/etc/loki\\n      - loki_data:/tmp/loki\\n    command: -config.file=/etc/loki/loki.yml\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n\\n  # Promtail - Log Shipper\\n  promtail:\\n    image: grafana/promtail:2.9.0\\n    container_name: promtail\\n    volumes:\\n      - ./monitoring/promtail:/etc/promtail\\n      - /var/log:/var/log:ro\\n      - /var/lib/docker/containers:/var/lib/docker/containers:ro\\n    command: -config.file=/etc/promtail/promtail.yml\\n    depends_on:\\n      - loki\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n\\n  # Jaeger - Distributed Tracing\\n  jaeger:\\n    image: jaegertracing/all-in-one:1.49\\n    container_name: jaeger\\n    ports:\\n      - \\\"16686:16686\\\"  # UI\\n      - \\\"14268:14268\\\"  # HTTP collector\\n      - \\\"14250:14250\\\"  # gRPC collector\\n    environment:\\n      - COLLECTOR_OTLP_ENABLED=true\\n    volumes:\\n      - jaeger_data:/badger\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n\\n  # Portainer - Docker Management\\n  portainer:\\n    image: portainer/portainer-ce:2.19.1\\n    container_name: portainer\\n    ports:\\n      - \\\"9000:9000\\\"\\n    volumes:\\n      - /var/run/docker.sock:/var/run/docker.sock\\n      - portainer_data:/data\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n\\n  # Traefik - Advanced Load Balancer (alternative to Caddy)\\n  traefik:\\n    image: traefik:v3.0\\n    container_name: traefik\\n    ports:\\n      - \\\"8080:8080\\\"  # Dashboard\\n      - \\\"80:80\\\"      # HTTP\\n      - \\\"443:443\\\"    # HTTPS\\n    volumes:\\n      - /var/run/docker.sock:/var/run/docker.sock\\n      - ./traefik:/etc/traefik\\n      - traefik_data:/data\\n    command:\\n      - --api.dashboard=true\\n      - --api.insecure=true\\n      - --providers.docker=true\\n      - --providers.docker.exposedbydefault=false\\n      - --entrypoints.web.address=:80\\n      - --entrypoints.websecure.address=:443\\n      - --certificatesresolvers.letsencrypt.acme.email=admin@mediavault.com\\n      - --certificatesresolvers.letsencrypt.acme.storage=/data/acme.json\\n      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web\\n      - --metrics.prometheus=true\\n      - --tracing.jaeger=true\\n      - --tracing.jaeger.samplingServerURL=http://jaeger:14268/api/sampling\\n      - --tracing.jaeger.localAgentHostPort=jaeger:6831\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n    profiles:\\n      - traefik\\n\\n  # Redis Commander - Redis Management\\n  redis-commander:\\n    image: rediscommander/redis-commander:latest\\n    container_name: redis-commander\\n    ports:\\n      - \\\"8081:8081\\\"\\n    environment:\\n      - REDIS_HOSTS=local:redis:6379\\n    depends_on:\\n      - redis\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n    profiles:\\n      - redis-tools\\n\\n  # pgAdmin - PostgreSQL Management\\n  pgadmin:\\n    image: dpage/pgadmin4:7.6\\n    container_name: pgadmin\\n    ports:\\n      - \\\"5050:80\\\"\\n    environment:\\n      - PGADMIN_DEFAULT_EMAIL=admin@mediavault.com\\n      - PGADMIN_DEFAULT_PASSWORD=pgadmin123\\n      - PGADMIN_CONFIG_SERVER_MODE=False\\n    volumes:\\n      - pgadmin_data:/var/lib/pgadmin\\n    depends_on:\\n      - keycloak-db\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n\\n  # Watchtower - Auto Updates\\n  watchtower:\\n    image: containrrr/watchtower:1.6.0\\n    container_name: watchtower\\n    volumes:\\n      - /var/run/docker.sock:/var/run/docker.sock\\n    environment:\\n      - WATCHTOWER_CLEANUP=true\\n      - WATCHTOWER_POLL_INTERVAL=86400  # 24 hours\\n      - WATCHTOWER_INCLUDE_RESTARTING=true\\n      - WATCHTOWER_NOTIFICATIONS=slack\\n      - WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL=${SLACK_WEBHOOK_URL}\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n    profiles:\\n      - auto-update\\n\\n  # Backup Service\\n  backup-service:\\n    image: alpine:3.18\\n    container_name: backup-service\\n    volumes:\\n      - ./data:/backup-source/data:ro\\n      - ./uploads:/backup-source/uploads:ro\\n      - ./backups:/backups\\n      - ./scripts:/scripts\\n    environment:\\n      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM\\n      - RETENTION_DAYS=30\\n      - S3_BUCKET=${S3_BACKUP_BUCKET}\\n      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}\\n      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}\\n    command: |\\n      sh -c \\\"\\n        apk add --no-cache dcron aws-cli sqlite\\n        echo '$$BACKUP_SCHEDULE cd /scripts && ./backup.sh' | crontab -\\n        crond -f\\n      \\\"\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n\\n  # Elasticsearch (for advanced logging)\\n  elasticsearch:\\n    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.1\\n    container_name: elasticsearch\\n    environment:\\n      - discovery.type=single-node\\n      - xpack.security.enabled=false\\n      - \\\"ES_JAVA_OPTS=-Xms512m -Xmx512m\\\"\\n    ports:\\n      - \\\"9200:9200\\\"\\n    volumes:\\n      - elasticsearch_data:/usr/share/elasticsearch/data\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n    profiles:\\n      - elk\\n\\n  # Kibana (for log visualization)\\n  kibana:\\n    image: docker.elastic.co/kibana/kibana:8.9.1\\n    container_name: kibana\\n    ports:\\n      - \\\"5601:5601\\\"\\n    environment:\\n      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200\\n    depends_on:\\n      - elasticsearch\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n    profiles:\\n      - elk\\n\\n  # FileBeat (log shipping to ELK)\\n  filebeat:\\n    image: docker.elastic.co/beats/filebeat:8.9.1\\n    container_name: filebeat\\n    user: root\\n    volumes:\\n      - ./monitoring/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro\\n      - /var/lib/docker/containers:/var/lib/docker/containers:ro\\n      - /var/run/docker.sock:/var/run/docker.sock:ro\\n    depends_on:\\n      - elasticsearch\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n    profiles:\\n      - elk\\n\\n  # Nginx Proxy Manager (alternative to Caddy/Traefik)\\n  nginx-proxy-manager:\\n    image: jc21/nginx-proxy-manager:2.10.4\\n    container_name: nginx-proxy-manager\\n    ports:\\n      - \\\"8080:80\\\"    # Admin UI\\n      - \\\"8443:443\\\"   # HTTPS\\n      - \\\"8181:81\\\"    # Admin Panel\\n    volumes:\\n      - npm_data:/data\\n      - npm_letsencrypt:/etc/letsencrypt\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n    profiles:\\n      - nginx-proxy\\n\\nvolumes:\\n  prometheus_data:\\n  grafana_data:\\n  alertmanager_data:\\n  loki_data:\\n  jaeger_data:\\n  portainer_data:\\n  traefik_data:\\n  pgadmin_data:\\n  elasticsearch_data:\\n  npm_data:\\n  npm_letsencrypt:\\n\\nnetworks:\\n  media-vault-network:\\n    external: true\\n\\n---\\n\\n# monitoring/prometheus/prometheus.yml\\nglobal:\\n  scrape_interval: 15s\\n  evaluation_interval: 15s\\n\\nrule_files:\\n  - \\\"rules/*.yml\\\"\\n\\nalerting:\\n  alertmanagers:\\n    - static_configs:\\n        - targets:\\n          - alertmanager:9093\\n\\nscrape_configs:\\n  # Prometheus itself\\n  - job_name: 'prometheus'\\n    static_configs:\\n      - targets: ['localhost:9090']\\n\\n  # Node Exporter\\n  - job_name: 'node-exporter'\\n    static_configs:\\n      - targets: ['node-exporter:9100']\\n\\n  # cAdvisor\\n  - job_name: 'cadvisor'\\n    static_configs:\\n      - targets: ['cadvisor:8080']\\n\\n  # Media Vault API\\n  - job_name: 'media-vault-api'\\n    static_configs:\\n      - targets: ['media-vault-api:8080']\\n    metrics_path: '/metrics'\\n\\n  # Keycloak\\n  - job_name: 'keycloak'\\n    static_configs:\\n      - targets: ['keycloak:8080']\\n    metrics_path: '/metrics'\\n\\n  # PostgreSQL Exporter\\n  - job_name: 'postgres'\\n    static_configs:\\n      - targets: ['postgres-exporter:9187']\\n\\n  # Traefik\\n  - job_name: 'traefik'\\n    static_configs:\\n      - targets: ['traefik:8080']\\n\\n---\\n\\n\"\n    },\n    {\n      \"name\": \"docker-compose.monitoring.yml\",\n      \"type\": \"file\",\n      \"path\": \"docker-compose.monitoring.yml\",\n      \"size\": 9017,\n      \"content\": \"# docker-compose.monitoring.yml - Media Vault Monitoring Stack\\nversion: '3.8'\\n\\nservices:\\n  # Prometheus - Metrics Collection\\n  prometheus:\\n    image: prom/prometheus:v2.47.0\\n    container_name: prometheus\\n    ports:\\n      - \\\"${PROMETHEUS_PORT:-9090}:9090\\\"\\n    volumes:\\n      - ./monitoring/prometheus:/etc/prometheus\\n      - prometheus_data:/prometheus\\n    command:\\n      - '--config.file=/etc/prometheus/prometheus.yml'\\n      - '--storage.tsdb.path=/prometheus'\\n      - '--storage.tsdb.retention.time=30d'\\n      - '--web.console.libraries=/etc/prometheus/console_libraries'\\n      - '--web.console.templates=/etc/prometheus/consoles'\\n      - '--web.enable-lifecycle'\\n      - '--web.enable-admin-api'\\n      - '--web.external-url=http://localhost:9090'\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n    healthcheck:\\n      test: [\\\"CMD\\\", \\\"wget\\\", \\\"--no-verbose\\\", \\\"--tries=1\\\", \\\"--spider\\\", \\\"http://localhost:9090/-/healthy\\\"]\\n      interval: 30s\\n      timeout: 10s\\n      retries: 3\\n\\n  # Grafana - Visualization & Dashboards\\n  grafana:\\n    image: grafana/grafana:10.1.0\\n    container_name: grafana\\n    ports:\\n      - \\\"${GRAFANA_PORT:-3333}:3000\\\"\\n    volumes:\\n      - grafana_data:/var/lib/grafana\\n      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning\\n      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards\\n    environment:\\n      # Admin Configuration\\n      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}\\n      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-grafana123}\\n      - GF_USERS_ALLOW_SIGN_UP=false\\n      - GF_USERS_DEFAULT_THEME=dark\\n\\n      # Organization\\n      - GF_USERS_AUTO_ASSIGN_ORG=true\\n      - GF_USERS_AUTO_ASSIGN_ORG_ROLE=Viewer\\n\\n      # Plugins\\n      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel\\n\\n      # Keycloak OAuth Integration\\n      - GF_AUTH_GENERIC_OAUTH_ENABLED=true\\n      - GF_AUTH_GENERIC_OAUTH_NAME=Keycloak\\n      - GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP=true\\n      - GF_AUTH_GENERIC_OAUTH_CLIENT_ID=grafana\\n      - GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET=${GRAFANA_OAUTH_SECRET:-grafana-secret}\\n      - GF_AUTH_GENERIC_OAUTH_SCOPES=openid profile email roles\\n      - GF_AUTH_GENERIC_OAUTH_AUTH_URL=http://localhost:8443/realms/media-vault/protocol/openid_connect/auth\\n      - GF_AUTH_GENERIC_OAUTH_TOKEN_URL=http://keycloak:8080/realms/media-vault/protocol/openid_connect/token\\n      - GF_AUTH_GENERIC_OAUTH_API_URL=http://keycloak:8080/realms/media-vault/protocol/openid_connect/userinfo\\n      - GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH=contains(realm_access.roles[*], 'vault-admin') && 'Admin' || 'Viewer'\\n\\n      # Database\\n      - GF_DATABASE_TYPE=sqlite3\\n      - GF_DATABASE_PATH=/var/lib/grafana/grafana.db\\n\\n      # Security\\n      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY:-SW2YcwTIb9zpOOhoPsMm}\\n      - GF_SECURITY_COOKIE_SECURE=false\\n      - GF_SECURITY_COOKIE_SAMESITE=lax\\n\\n      # Analytics\\n      - GF_ANALYTICS_REPORTING_ENABLED=false\\n      - GF_ANALYTICS_CHECK_FOR_UPDATES=false\\n\\n      # Alerting\\n      - GF_ALERTING_ENABLED=true\\n      - GF_UNIFIED_ALERTING_ENABLED=true\\n\\n      # Rendering\\n      - GF_RENDERING_SERVER_URL=http://renderer:8081/render\\n      - GF_RENDERING_CALLBACK_URL=http://grafana:3000/\\n\\n      # Paths\\n      - GF_PATHS_PLUGINS=/var/lib/grafana/plugins\\n      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning\\n    depends_on:\\n      - prometheus\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n    healthcheck:\\n      test: [\\\"CMD-SHELL\\\", \\\"wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1\\\"]\\n      interval: 30s\\n      timeout: 10s\\n      retries: 3\\n\\n  # Grafana Image Renderer\\n  renderer:\\n    image: grafana/grafana-image-renderer:latest\\n    container_name: grafana-renderer\\n    ports:\\n      - \\\"8081:8081\\\"\\n    environment:\\n      ENABLE_METRICS: 'true'\\n      RENDERING_MODE: default\\n      RENDERING_CLUSTERING_MODE: default\\n      BROWSER_TZ: UTC\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n\\n  # AlertManager - Alert Management\\n  alertmanager:\\n    image: prom/alertmanager:v0.26.0\\n    container_name: alertmanager\\n    ports:\\n      - \\\"9093:9093\\\"\\n    volumes:\\n      - ./monitoring/alertmanager:/etc/alertmanager\\n      - alertmanager_data:/alertmanager\\n    command:\\n      - '--config.file=/etc/alertmanager/alertmanager.yml'\\n      - '--storage.path=/alertmanager'\\n      - '--web.external-url=http://localhost:9093'\\n      - '--web.route-prefix=/'\\n    environment:\\n      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}\\n      - SMTP_HOST=${SMTP_HOST}\\n      - SMTP_USER=${SMTP_USER}\\n      - SMTP_PASSWORD=${SMTP_PASSWORD}\\n      - ADMIN_EMAIL=${ADMIN_EMAIL}\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n\\n  # Node Exporter - Host Metrics\\n  node-exporter:\\n    image: prom/node-exporter:v1.6.1\\n    container_name: node-exporter\\n    ports:\\n      - \\\"9100:9100\\\"\\n    volumes:\\n      - /proc:/host/proc:ro\\n      - /sys:/host/sys:ro\\n      - /:/rootfs:ro\\n      - /run/systemd/private:/run/systemd/private:ro\\n    command:\\n      - '--path.procfs=/host/proc'\\n      - '--path.rootfs=/rootfs'\\n      - '--path.sysfs=/host/sys'\\n      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'\\n      - '--collector.systemd'\\n      - '--collector.processes'\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n    pid: host\\n\\n  # cAdvisor - Container Metrics\\n  cadvisor:\\n    image: gcr.io/cadvisor/cadvisor:v0.47.2\\n    container_name: cadvisor\\n    ports:\\n      - \\\"8888:8080\\\"\\n    volumes:\\n      - /:/rootfs:ro\\n      - /var/run:/var/run:rw\\n      - /sys:/sys:ro\\n      - /var/lib/docker/:/var/lib/docker:ro\\n      - /dev/disk/:/dev/disk:ro\\n      - /var/run/docker.sock:/var/run/docker.sock:ro\\n    privileged: true\\n    devices:\\n      - /dev/kmsg:/dev/kmsg\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n    command:\\n      - '--housekeeping_interval=30s'\\n      - '--max_housekeeping_interval=35s'\\n      - '--event_storage_event_limit=default=0'\\n      - '--event_storage_age_limit=default=0'\\n      - '--disable_metrics=percpu,sched,tcp,udp,disk,diskIO,accelerator'\\n      - '--docker_only'\\n\\n  # Postgres Exporter - Database Metrics\\n  postgres-exporter:\\n    image: prometheuscommunity/postgres-exporter:v0.13.2\\n    container_name: postgres-exporter\\n    ports:\\n      - \\\"9187:9187\\\"\\n    environment:\\n      DATA_SOURCE_NAME: \\\"postgresql://keycloak:${KEYCLOAK_DB_PASSWORD:-keycloak_password}@keycloak-db:5432/keycloak?sslmode=disable\\\"\\n      PG_EXPORTER_EXCLUDE_DATABASES: \\\"template0,template1\\\"\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n    profiles:\\n      - full\\n\\n  # Redis Exporter - Redis Metrics\\n  redis-exporter:\\n    image: oliver006/redis_exporter:v1.53.0\\n    container_name: redis-exporter\\n    ports:\\n      - \\\"9121:9121\\\"\\n    environment:\\n      REDIS_ADDR: \\\"redis://redis:6379\\\"\\n      REDIS_EXPORTER_LOG_FORMAT: \\\"json\\\"\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n    profiles:\\n      - full\\n\\n  # Blackbox Exporter - External Monitoring\\n  blackbox-exporter:\\n    image: prom/blackbox-exporter:v0.24.0\\n    container_name: blackbox-exporter\\n    ports:\\n      - \\\"9115:9115\\\"\\n    volumes:\\n      - ./monitoring/blackbox:/etc/blackbox_exporter\\n    command:\\n      - '--config.file=/etc/blackbox_exporter/blackbox.yml'\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n\\n  # Loki - Log Aggregation\\n  loki:\\n    image: grafana/loki:2.9.0\\n    container_name: loki\\n    ports:\\n      - \\\"3100:3100\\\"\\n    volumes:\\n      - ./monitoring/loki:/etc/loki\\n      - loki_data:/tmp/loki\\n    command: -config.file=/etc/loki/loki.yml\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n    profiles:\\n      - logs\\n\\n  # Promtail - Log Shipper\\n  promtail:\\n    image: grafana/promtail:2.9.0\\n    container_name: promtail\\n    volumes:\\n      - ./monitoring/promtail:/etc/promtail\\n      - /var/log:/var/log:ro\\n      - /var/lib/docker/containers:/var/lib/docker/containers:ro\\n      - /var/run/docker.sock:/var/run/docker.sock:ro\\n    command: -config.file=/etc/promtail/promtail.yml\\n    depends_on:\\n      - loki\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n    profiles:\\n      - logs\\n\\n  # Jaeger - Distributed Tracing\\n  jaeger:\\n    image: jaegertracing/all-in-one:1.49\\n    container_name: jaeger\\n    ports:\\n      - \\\"5775:5775/udp\\\"\\n      - \\\"6831:6831/udp\\\"\\n      - \\\"6832:6832/udp\\\"\\n      - \\\"5778:5778\\\"\\n      - \\\"16686:16686\\\"\\n      - \\\"14250:14250\\\"\\n      - \\\"14268:14268\\\"\\n      - \\\"14269:14269\\\"\\n      - \\\"9411:9411\\\"\\n    environment:\\n      - COLLECTOR_OTLP_ENABLED=true\\n      - COLLECTOR_ZIPKIN_HOST_PORT=:9411\\n    volumes:\\n      - jaeger_data:/badger\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n    profiles:\\n      - tracing\\n\\nvolumes:\\n  prometheus_data:\\n    driver: local\\n  grafana_data:\\n    driver: local\\n  alertmanager_data:\\n    driver: local\\n  loki_data:\\n    driver: local\\n  jaeger_data:\\n    driver: local\\n\\nnetworks:\\n  media-vault-network:\\n    external: true\"\n    },\n    {\n      \"name\": \"docker-compose.test.yml\",\n      \"type\": \"file\",\n      \"path\": \"docker-compose.test.yml\",\n      \"size\": 1087,\n      \"content\": \"version: '3.8'\\n\\nservices:\\n  test-db:\\n    image: postgres:15-alpine\\n    environment:\\n      POSTGRES_DB: test_db\\n      POSTGRES_USER: test_user\\n      POSTGRES_PASSWORD: test_password\\n    ports:\\n      - \\\"5433:5432\\\"\\n    healthcheck:\\n      test: [\\\"CMD-SHELL\\\", \\\"pg_isready -U test_user -d test_db\\\"]\\n      interval: 5s\\n      timeout: 5s\\n      retries: 5\\n\\n  test-redis:\\n    image: redis:7-alpine\\n    ports:\\n      - \\\"6379:6379\\\"\\n    healthcheck:\\n      test: [\\\"CMD\\\", \\\"redis-cli\\\", \\\"ping\\\"]\\n      interval: 5s\\n      timeout: 5s\\n      retries: 5\\n\\n  test-runner:\\n    build:\\n      context: .\\n      dockerfile: media-vault-backend/Dockerfile\\n    environment:\\n      - DB_HOST=test-db\\n      - DB_USER=test_user\\n      - DB_PASSWORD=test_password\\n      - DB_NAME=test_db\\n      - REDIS_HOST=test-redis\\n    depends_on:\\n      test-db:\\n        condition: service_healthy\\n      test-redis:\\n        condition: service_healthy\\n    volumes:\\n      - ./media-vault-backend:/app\\n    command: >\\n      sh -c \\\"go test -v ./... -coverprofile=coverage.out && \\\\\\n             go tool cover -html=coverage.out -o coverage.html\\\"\\n\"\n    },\n    {\n      \"name\": \"docker-compose.yml\",\n      \"type\": \"file\",\n      \"path\": \"docker-compose.yml\",\n      \"size\": 5058,\n      \"content\": \"# docker-compose.yml - Media Vault Main Stack\\nversion: '3.8'\\n\\nservices:\\n  # Keycloak Database\\n  keycloak-db:\\n    image: postgres:15\\n    container_name: keycloak-db\\n    env_file:\\n      - ./keycloak/.env\\n    volumes:\\n      - keycloak_db_data:/var/lib/postgresql/data\\n      - ./scripts/backup:/backup-scripts\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n    healthcheck:\\n      test: [\\\"CMD-SHELL\\\", \\\"pg_isready -U keycloak\\\"]\\n      interval: 30s\\n      timeout: 10s\\n      retries: 5\\n\\n  # Keycloak Identity Provider using Bitnami image\\n  keycloak:\\n    image: bitnami/keycloak:26.2.5\\n    container_name: keycloak\\n    env_file:\\n      - ./keycloak/.env\\n      \\n    ports:\\n      - \\\"${KEYCLOAK_HTTP_PORT:-8082}:8080\\\"\\n      - \\\"${KEYCLOAK_HTTPS_PORT:-8445}:8443\\\"\\n    depends_on:\\n      keycloak-db:\\n        condition: service_healthy\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n    healthcheck:\\n      test: [\\\"CMD\\\", \\\"curl\\\", \\\"-f\\\", \\\"http://localhost:8080/health\\\"]\\n      interval: 30s\\n      timeout: 10s\\n      retries: 10\\n      start_period: 60s\\n    volumes:\\n      - ./keycloak/themes:/opt/bitnami/keycloak/themes\\n      - ./keycloak/import:/opt/bitnami/keycloak/data/import\\n      - keycloak_data:/bitnami/keycloak\\n\\n  # Media Vault API Backend\\n  media-vault-api:\\n    build:\\n      context: ./media-vault-backend\\n      dockerfile: Dockerfile\\n    container_name: media-vault-api\\n    ports:\\n      - \\\"${API_PORT:-8080}:8080\\\"\\n    volumes:\\n      - ./data:/data\\n      - ./uploads:/uploads\\n      - ./processing:/processing\\n    env_file:\\n      - ./media-vault-backend/.env\\n    depends_on:\\n      keycloak:\\n        condition: service_healthy\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n    healthcheck:\\n      test: [\\\"CMD\\\", \\\"wget\\\", \\\"--no-verbose\\\", \\\"--tries=1\\\", \\\"--spider\\\", \\\"http://localhost:8080/health\\\"]\\n      timeout: 5s\\n      retries: 5\\n      start_period: 10s\\n\\n  # Media Vault Analyzer (AI Processing)\\n  media-vault-analyzer:\\n    build:\\n      context: ./media-vault-analyzer\\n      dockerfile: Dockerfile\\n    container_name: media-vault-analyzer\\n    env_file:\\n      - ./media-vault-analyzer/.env\\n    volumes:\\n      - ./uploads:/uploads\\n      - ./processing:/processing\\n      - ./models:/models\\n    depends_on:\\n      - media-vault-api\\n      - keycloak\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n    deploy:\\n      resources:\\n        limits:\\n          memory: 2G\\n        reservations:\\n          memory: 1G\\n\\n  # NSFW Content Detection Service\\n  nsfw-analyzer:\\n    build:\\n      context: ./nsfw-analyzer\\n      dockerfile: Dockerfile\\n    container_name: nsfw-analyzer\\n    ports:\\n      - \\\"${NSFW_PORT:-8501}:8501\\\"\\n    env_file:\\n      - ./nsfw-analyzer/.env\\n    volumes:\\n      - ./models:/models\\n      - ./uploads:/uploads:ro\\n    depends_on:\\n      - media-vault-api\\n      - keycloak\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n    deploy:\\n      resources:\\n        limits:\\n          memory: 3G\\n        reservations:\\n          memory: 2G\\n    profiles:\\n      - full\\n\\n  # Flutter Web Frontend\\n  flutter-web:\\n    build:\\n      context: ./flutter_frontend\\n      dockerfile: Dockerfile.web\\n    container_name: flutter-web\\n    ports:\\n      - \\\"${FRONTEND_PORT:-3000}:80\\\"\\n    env_file:\\n      - ./flutter_frontend/.env\\n    depends_on:\\n      - media-vault-api\\n      - keycloak\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n\\n  # Admin Panel (Traditional Web Interface)\\n  media-vault-admin:\\n    build:\\n      context: ./media-vault-admin\\n      dockerfile: Dockerfile\\n    container_name: media-vault-admin\\n    env_file:\\n      - ./media-vault-admin/.env\\n    ports:\\n      - \\\"${ADMIN_PORT:-3001}:80\\\"\\n    depends_on:\\n      - media-vault-api\\n      - keycloak\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n\\n  # Caddy Reverse Proxy\\n  caddy:\\n    image: caddy:2-alpine\\n    container_name: caddy-proxy\\n    ports:\\n      - \\\"${HTTP_PORT:-80}:80\\\"\\n      - \\\"${HTTPS_PORT:-443}:443\\\"\\n    volumes:\\n      - ./caddy/Caddyfile:/etc/caddy/Caddyfile\\n      - caddy_data:/data\\n      - caddy_config:/config\\n    env_file:\\n      - ./caddy/.env\\n    depends_on:\\n      - media-vault-api\\n      - flutter-web\\n      - media-vault-admin\\n      - keycloak\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n\\n  # Redis (for caching and sessions)\\n  redis:\\n    image: redis:7-alpine\\n    container_name: redis\\n    ports:\\n      - \\\"${REDIS_PORT:-6379}:6379\\\"\\n    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru\\n    volumes:\\n      - redis_data:/data\\n    restart: unless-stopped\\n    networks:\\n      - media-vault-network\\n    healthcheck:\\n      test: [\\\"CMD\\\", \\\"redis-cli\\\", \\\"ping\\\"]\\n      interval: 30s\\n      timeout: 10s\\n      retries: 5\\n\\nvolumes:\\n  caddy_data:\\n    driver: local\\n  caddy_config:\\n    driver: local\\n  keycloak_data:\\n    driver: local\\n  keycloak_db_data:\\n    driver: local\\n  redis_data:\\n    driver: local\\n\\nnetworks:\\n  media-vault-network:\\n    driver: bridge\\n    ipam:\\n      config:\\n        - subnet: 172.20.0.0/16\\n\\n\"\n    },\n    {\n      \"name\": \"DOCUMENTATION.md\",\n      \"type\": \"file\",\n      \"path\": \"DOCUMENTATION.md\",\n      \"size\": 3344,\n      \"content\": \"# 📚 Media Vault - Comprehensive Documentation\\n\\n## 📖 Table of Contents\\n1. [Overview](#-overview)\\n2. [Quick Start](#-quick-start)\\n3. [Architecture](#-architecture)\\n4. [API Reference](#-api-reference)\\n5. [Deployment](#-deployment)\\n6. [Development](#-development)\\n7. [Monitoring & Operations](#-monitoring--operations)\\n8. [Security](#-security)\\n9. [Contributing](#-contributing)\\n10. [Troubleshooting](#-troubleshooting)\\n\\n## 🌟 Overview\\n\\nMedia Vault is a secure, scalable media management platform with AI-powered analysis and organization capabilities. It provides:\\n\\n- Secure media storage and sharing\\n- AI-powered media analysis\\n- Role-based access control\\n- Comprehensive monitoring\\n- Scalable architecture\\n\\n## 🚀 Quick Start\\n\\n### Prerequisites\\n- Docker 20.10+\\n- Docker Compose 2.0+\\n- 4GB+ RAM recommended\\n\\n### Local Development Setup\\n\\n```bash\\n# Clone the repository\\ngit clone https://github.com/wronai/docker-platform.git\\ncd docker-platform\\n\\n# Copy example environment file\\ncp .env.example .env\\n\\n# Start all services\\nmake up\\n\\n# Access the application\\nopen http://localhost\\n```\\n\\n## 🏗️ Architecture\\n\\nFor detailed architecture documentation, see [ARCHITECTURE.md](./docs/ARCHITECTURE.md).\\n\\n### Core Components\\n\\n1. **Frontend**: Flutter-based web interface\\n2. **Backend API**: Go-based REST API\\n3. **Authentication**: Keycloak\\n4. **Database**: PostgreSQL\\n5. **Object Storage**: MinIO\\n6. **AI Services**: Media analysis and processing\\n7. **Monitoring**: Prometheus, Grafana, Loki\\n\\n## 📡 API Reference\\n\\nFor complete API documentation, see [API.md](./docs/API.md).\\n\\n### Authentication\\n\\n```http\\nPOST /api/v1/auth/login\\nContent-Type: application/json\\n\\n{\\n  \\\"username\\\": \\\"user@example.com\\\",\\n  \\\"password\\\": \\\"yourpassword\\\"\\n}\\n```\\n\\n## 🚀 Deployment\\n\\nFor production deployment instructions, see [DEPLOYMENT.md](./docs/DEPLOYMENT.md).\\n\\n### Environment Variables\\n\\nKey environment variables:\\n\\n```env\\n# Database\\nPOSTGRES_DB=mediavault\\nPOSTGRES_USER=mediavault\\nPOSTGRES_PASSWORD=changeme\\n\\n# Keycloak\\nKEYCLOAK_ADMIN=admin\\nKEYCLOAK_ADMIN_PASSWORD=changeme\\n\\n# MinIO\\nMINIO_ROOT_USER=minioadmin\\nMINIO_ROOT_PASSWORD=minioadmin\\n```\\n\\n## 💻 Development\\n\\n### Prerequisites\\n- Go 1.21+\\n- Node.js 18+\\n- Flutter 3.0+\\n\\n### Building\\n\\n```bash\\n# Build all services\\nmake build\\n\\n# Run tests\\nmake test\\n\\n# Lint code\\nmake lint\\n```\\n\\n## 📊 Monitoring & Operations\\n\\nFor monitoring setup and operations, see [MONITORING.md](./docs/MONITORING.md).\\n\\n### Accessing Monitoring Tools\\n\\n- **Grafana**: http://localhost:3000\\n- **Prometheus**: http://localhost:9090\\n- **Loki**: http://localhost:3100\\n\\n## 🔒 Security\\n\\nFor security best practices and guidelines, see [SECURITY.md](./docs/SECURITY.md).\\n\\n### Reporting Security Issues\\n\\nPlease report security issues to security@wron.ai.\\n\\n## 🤝 Contributing\\n\\n1. Fork the repository\\n2. Create a feature branch\\n3. Commit your changes\\n4. Push to the branch\\n5. Open a pull request\\n\\n## 🛠️ Troubleshooting\\n\\n### Common Issues\\n\\n1. **Port conflicts**\\n   - Check if ports 80, 443, 5432, 9000, 9090, 3000 are available\\n\\n2. **Database connection issues**\\n   - Verify PostgreSQL is running\\n   - Check database credentials in .env\\n\\n3. **Authentication problems**\\n   - Ensure Keycloak is running\\n   - Verify user credentials in Keycloak\\n\\n### Getting Help\\n\\n- [GitHub Issues](https://github.com/wronai/docker-platform/issues)\\n- support@wron.ai\\n\"\n    },\n    {\n      \"name\": \"generate_structure.py\",\n      \"type\": \"file\",\n      \"path\": \"generate_structure.py\",\n      \"size\": 4902,\n      \"content\": \"#!/usr/bin/env python3\\nimport os\\nimport json\\nfrom pathlib import Path\\nimport re\\n\\ndef get_file_info(file_path, base_path):\\n    \\\"\\\"\\\"Get file information in the required format.\\\"\\\"\\\"\\n    rel_path = os.path.relpath(file_path, base_path)\\n    if os.path.isdir(file_path):\\n        return {\\n            'name': os.path.basename(file_path),\\n            'type': 'directory',\\n            'path': rel_path.replace('\\\\\\\\', '/'),\\n            'children': scan_directory(file_path, base_path)\\n        }\\n    else:\\n        try:\\n            file_size = os.path.getsize(file_path)\\n            content = ''\\n            # Only read text files for content\\n            if file_size < 1024 * 1024:  # Only read files smaller than 1MB\\n                try:\\n                    with open(file_path, 'r', encoding='utf-8') as f:\\n                        content = f.read()\\n                except (UnicodeDecodeError, PermissionError):\\n                    content = f\\\"[Binary file: {os.path.basename(file_path)}]\\\"\\n            \\n            return {\\n                'name': os.path.basename(file_path),\\n                'type': 'file',\\n                'path': rel_path.replace('\\\\\\\\', '/'),\\n                'size': file_size,\\n                'content': content\\n            }\\n        except (PermissionError, OSError) as e:\\n            print(f\\\"Skipping {file_path}: {e}\\\")\\n            return None\\n\\ndef should_skip_directory(dirname):\\n    \\\"\\\"\\\"Check if directory should be skipped.\\\"\\\"\\\"\\n    skip_dirs = {\\n        'node_modules',\\n        '.git',\\n        '.github',\\n        '__pycache__',\\n        'venv',\\n        'env',\\n        '.venv',\\n        'dist',\\n        'build',\\n        'coverage',\\n        '.vscode',\\n        '.idea'\\n    }\\n    return dirname in skip_dirs\\n\\ndef scan_directory(directory, base_path):\\n    \\\"\\\"\\\"Recursively scan a directory and return its structure.\\\"\\\"\\\"\\n    result = []\\n    try:\\n        entries = sorted(os.listdir(directory), key=lambda x: (not os.path.isdir(os.path.join(directory, x)), x.lower()))\\n        for entry in entries:\\n            if entry.startswith('.') or should_skip_directory(entry):\\n                continue\\n                \\n            full_path = os.path.join(directory, entry)\\n            file_info = get_file_info(full_path, base_path)\\n            if file_info:\\n                result.append(file_info)\\n    except PermissionError as e:\\n        print(f\\\"Permission denied: {directory}\\\")\\n    return result\\n\\ndef generate_json_structure(root_dir, output_file):\\n    \\\"\\\"\\\"Generate JSON structure for the given directory.\\\"\\\"\\\"\\n    root_dir = os.path.abspath(root_dir)\\n    structure = {\\n        'name': os.path.basename(root_dir),\\n        'type': 'directory',\\n        'path': '.',\\n        'children': scan_directory(root_dir, root_dir)\\n    }\\n    \\n    with open(output_file, 'w', encoding='utf-8') as f:\\n        json.dump(structure, f, indent=2, ensure_ascii=False)\\n    \\n    print(f\\\"Generated structure saved to {output_file}\\\")\\n    return structure\\n\\ndef update_html_template(html_file, json_file):\\n    # Read the template file\\n    with open('index-new.html', 'r', encoding='utf-8') as f:\\n        content = f.read()\\n    \\n    # Read the JSON file\\n    with open(json_file, 'r', encoding='utf-8') as f:\\n        json_data = f.read()\\n    \\n    # Create a script tag with the file system data\\n    script_tag = f'<script>\\\\n        // This is automatically generated - do not edit manually\\\\n        const FILE_SYSTEM = {json_data};\\\\n    </script>'\\n    \\n    # Replace the placeholder script tag\\n    content = re.sub(\\n        r'<script>\\\\s*// This will be replaced by the actual file system data\\\\s*const FILE_SYSTEM = \\\\{.*?\\\\};?\\\\s*</script>',\\n        script_tag,\\n        content,\\n        flags=re.DOTALL\\n    )\\n    \\n    # Write the updated content back to the HTML file\\n    with open(html_file, 'w', encoding='utf-8') as f:\\n        f.write(content)\\n    \\n    print(f\\\"Updated {html_file} to include the file system data\\\")\\n\\ndef main():\\n    # Configuration\\n    root_dir = os.path.dirname(os.path.abspath(__file__))\\n    output_json = os.path.join(root_dir, 'data', 'file-system.json')\\n    html_file = os.path.join(root_dir, 'index.html')\\n    \\n    # Create data directory if it doesn't exist\\n    os.makedirs(os.path.dirname(output_json), exist_ok=True)\\n    \\n    # Generate the JSON structure\\n    structure = generate_json_structure(root_dir, output_json)\\n    \\n    # Update the HTML file\\n    if os.path.exists(html_file):\\n        update_html_template(html_file, output_json)\\n    \\n    print(\\\"\\\\nFile structure generation complete!\\\")\\n    \\n    # Count directories and files\\n    total_dirs = 0\\n    total_files = 0\\n    for root, dirs, files in os.walk(root_dir):\\n        # Skip hidden directories\\n        dirs[:] = [d for d in dirs if not d.startswith('.')]\\n        total_dirs += len(dirs)\\n        total_files += len(files)\\n    \\n    print(f\\\"Total directories: {total_dirs}\\\")\\n    print(f\\\"Total files: {total_files}\\\")\\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\"\n    },\n    {\n      \"name\": \"index-all.html\",\n      \"type\": \"file\",\n      \"path\": \"index-all.html\",\n      \"size\": 11800,\n      \"content\": \"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>File Explorer</title>\\n    <!-- Highlight.js CSS -->\\n    <link rel=\\\"stylesheet\\\" href=\\\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/github.min.css\\\">\\n    <!-- Load highlight.js -->\\n    <script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\\\"></script>\\n    <!-- Load language support -->\\n    <script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/languages/yaml.min.js\\\"></script>\\n    <script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/languages/json.min.js\\\"></script>\\n    <script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/languages/dockerfile.min.js\\\"></script>\\n    <script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/languages/bash.min.js\\\"></script>\\n    <script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/languages/python.min.js\\\"></script>\\n    <script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/languages/javascript.min.js\\\"></script>\\n    <style>\\n        body { \\n            font-family: Arial, sans-serif; \\n            margin: 0;\\n            padding: 20px;\\n            height: 100vh;\\n            box-sizing: border-box;\\n            display: flex;\\n            flex-direction: column;\\n        }\\n        .container {\\n            display: flex;\\n            flex: 1;\\n            gap: 20px;\\n            height: calc(100% - 80px);\\n            overflow: hidden;\\n        }\\n        .file-list-container {\\n            flex: 1;\\n            border: 1px solid #ddd;\\n            border-radius: 4px;\\n            overflow: hidden;\\n            display: flex;\\n            flex-direction: column;\\n        }\\n        .file-list-header {\\n            padding: 10px;\\n            background: #f8f9fa;\\n            border-bottom: 1px solid #ddd;\\n            font-weight: bold;\\n        }\\n        #file-list {\\n            flex: 1;\\n            overflow-y: auto;\\n            padding: 10px 0;\\n        }\\n        .file { \\n            padding: 8px 15px;\\n            cursor: pointer;\\n            display: flex;\\n            align-items: center;\\n            gap: 8px;\\n        }\\n        .file:hover { \\n            background: #f0f0f0; \\n        }\\n        .dir { \\n            font-weight: bold;\\n        }\\n        .file-content-container {\\n            flex: 2;\\n            border: 1px solid #ddd;\\n            border-radius: 4px;\\n            overflow: hidden;\\n            display: flex;\\n            flex-direction: column;\\n        }\\n        .file-content-header {\\n            padding: 10px;\\n            background: #f8f9fa;\\n            border-bottom: 1px solid #ddd;\\n            font-weight: bold;\\n        }\\n        #file-content {\\n            flex: 1;\\n            padding: 15px;\\n            background: white;\\n            overflow-y: auto;\\n            margin: 0;\\n        }\\n        pre { \\n            margin: 0;\\n            padding: 1em;\\n            white-space: pre-wrap;\\n            font-family: 'Fira Code', 'Consolas', 'Monaco', 'Andale Mono', monospace;\\n            font-size: 14px;\\n            line-height: 1.5;\\n            border-radius: 4px;\\n            background: #f6f8fa !important;\\n            overflow-x: auto;\\n        }\\n        \\n        /* Add some spacing for code blocks */\\n        code {\\n            font-family: 'Fira Code', 'Consolas', 'Monaco', 'Andale Mono', monospace;\\n        }\\n        \\n        /* Fix for JSON syntax highlighting */\\n        .hljs-attr {\\n            color: #d946ef;\\n        }\\n        \\n        /* Make line numbers visible */\\n        .hljs-ln {\\n            padding: 0;\\n        }\\n        \\n        .hljs-ln-n {\\n            padding-right: 1em;\\n            color: #6e7781;\\n            user-select: none;\\n        }\\n        .breadcrumb { \\n            margin-bottom: 15px;\\n            padding: 10px 15px;\\n            background: #f8f9fa;\\n            border-radius: 4px;\\n        }\\n        .breadcrumb a { \\n            color: #007bff; \\n            text-decoration: none;\\n        }\\n        .breadcrumb a:hover {\\n            text-decoration: underline;\\n        }\\n    </style>\\n</head>\\n<body>\\n    <h1>File Explorer</h1>\\n    <div class=\\\"breadcrumb\\\" id=\\\"breadcrumb\\\">\\n        <a href=\\\"#\\\" data-path=\\\"\\\">Root</a>\\n    </div>\\n    <div class=\\\"container\\\">\\n        <div class=\\\"file-list-container\\\">\\n            <div class=\\\"file-list-header\\\">Files</div>\\n            <div id=\\\"file-list\\\">Loading...</div>\\n        </div>\\n        <div class=\\\"file-content-container\\\">\\n            <div class=\\\"file-content-header\\\">File Content</div>\\n            <div id=\\\"file-content\\\">Select a file to view its contents</div>\\n        </div>\\n    </div>\\n\\n    <script>\\n        let fileSystem = null;\\n        let currentPath = [];\\n\\n        // Load file system data\\n        async function loadFileSystem() {\\n            try {\\n                const response = await fetch('data/file-system.json');\\n                fileSystem = await response.json();\\n                renderFileList();\\n            } catch (error) {\\n                document.getElementById('file-list').innerHTML = 'Error loading file system: ' + error.message;\\n            }\\n        }\\n\\n        // Render file list for current path\\n        function renderFileList() {\\n            const fileList = document.getElementById('file-list');\\n            const currentDir = getCurrentDir();\\n            \\n            if (!currentDir || !currentDir.children) {\\n                fileList.innerHTML = 'No files found';\\n                return;\\n            }\\n\\n            let html = '';\\n            currentDir.children.forEach(item => {\\n                const isDir = item.type === 'directory';\\n                html += `\\n                    <div class=\\\"file ${isDir ? 'dir' : ''}\\\" \\n                         data-type=\\\"${item.type}\\\" \\n                         data-path=\\\"${item.path}\\\">\\n                        <span>${isDir ? '[DIR]' : '[FILE]'}</span>\\n                        <span>${item.name}</span>\\n                        ${!isDir ? `<span>${formatFileSize(item.size)}</span>` : ''}\\n                    </div>`;\\n            });\\n            \\n            fileList.innerHTML = html || 'Empty directory';\\n            \\n            // Add click handlers\\n            document.querySelectorAll('.file').forEach(el => {\\n                el.addEventListener('click', handleFileClick);\\n            });\\n        }\\n\\n        // Handle file/directory click\\n        function handleFileClick(e) {\\n            const type = this.getAttribute('data-type');\\n            const path = this.getAttribute('data-path').split('/').filter(Boolean);\\n            \\n            if (type === 'directory') {\\n                currentPath = path;\\n                renderBreadcrumb();\\n                renderFileList();\\n                document.getElementById('file-content').innerHTML = '';\\n            } else {\\n                showFileContent(path[path.length - 1]);\\n            }\\n        }\\n\\n        // Show file content\\n        function getLanguageFromFilename(filename) {\\n            const ext = filename.split('.').pop().toLowerCase();\\n            const languageMap = {\\n                'js': 'javascript',\\n                'jsx': 'javascript',\\n                'ts': 'typescript',\\n                'tsx': 'typescript',\\n                'py': 'python',\\n                'rb': 'ruby',\\n                'java': 'java',\\n                'c': 'c',\\n                'cpp': 'cpp',\\n                'cs': 'csharp',\\n                'php': 'php',\\n                'sh': 'bash',\\n                'json': 'json',\\n                'yaml': 'yaml',\\n                'yml': 'yaml',\\n                'xml': 'xml',\\n                'html': 'html',\\n                'css': 'css',\\n                'scss': 'scss',\\n                'sql': 'sql',\\n                'md': 'markdown',\\n                'dockerfile': 'dockerfile',\\n                'go': 'go',\\n                'rs': 'rust',\\n                'swift': 'swift',\\n                'kt': 'kotlin',\\n                'dart': 'dart'\\n            };\\n            return languageMap[ext] || 'plaintext';\\n        }\\n\\n        function showFileContent(filename) {\\n            const currentDir = getCurrentDir();\\n            const file = currentDir.children.find(f => f.name === filename);\\n            const contentDiv = document.getElementById('file-content');\\n            \\n            if (!file || !file.content) {\\n                contentDiv.innerHTML = 'No content to display';\\n                return;\\n            }\\n            \\n            try {\\n                const language = getLanguageFromFilename(filename);\\n                let content = file.content;\\n                \\n                // Format JSON if needed\\n                if (language === 'json') {\\n                    try {\\n                        content = JSON.stringify(JSON.parse(content), null, 2);\\n                    } catch (e) {\\n                        console.warn('Error parsing JSON:', e);\\n                    }\\n                }\\n                \\n                // Escape HTML and add syntax highlighting\\n                const escaped = escapeHtml(content);\\n                contentDiv.innerHTML = `<pre><code class=\\\"language-${language}\\\">${escaped}</code></pre>`;\\n                \\n                // Apply syntax highlighting\\n                document.querySelectorAll('pre code').forEach((block) => {\\n                    hljs.highlightElement(block);\\n                });\\n                \\n            } catch (error) {\\n                console.error('Error displaying file content:', error);\\n                contentDiv.innerHTML = `<pre>${escapeHtml(file.content)}</pre>`;\\n            }\\n        }\\n\\n        // Render breadcrumb navigation\\n        function renderBreadcrumb() {\\n            const breadcrumb = document.getElementById('breadcrumb');\\n            let html = '<a href=\\\"#\\\" data-path=\\\"\\\">Root</a>';\\n            \\n            currentPath.forEach((segment, index) => {\\n                const path = currentPath.slice(0, index + 1).join('/');\\n                html += ` / <a href=\\\"#\\\" data-path=\\\"${path}\\\">${segment}</a>`;\\n            });\\n            \\n            breadcrumb.innerHTML = html;\\n            \\n            // Add click handlers to breadcrumb links\\n            breadcrumb.querySelectorAll('a').forEach(link => {\\n                link.addEventListener('click', (e) => {\\n                    e.preventDefault();\\n                    const path = link.getAttribute('data-path');\\n                    currentPath = path ? path.split('/') : [];\\n                    renderBreadcrumb();\\n                    renderFileList();\\n                    document.getElementById('file-content').innerHTML = '';\\n                });\\n            });\\n        }\\n\\n        // Get current directory based on path\\n        function getCurrentDir() {\\n            let current = fileSystem;\\n            for (const segment of currentPath) {\\n                if (!current.children) return null;\\n                const found = current.children.find(item => item.name === segment);\\n                if (!found) return null;\\n                current = found;\\n            }\\n            return current;\\n        }\\n\\n        // Helper functions\\n        function formatFileSize(bytes) {\\n            if (!bytes) return '0 B';\\n            const k = 1024;\\n            const sizes = ['B', 'KB', 'MB', 'GB'];\\n            const i = Math.floor(Math.log(bytes) / Math.log(k));\\n            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\\n        }\\n\\n        function escapeHtml(unsafe) {\\n            return unsafe\\n                .replace(/&/g, \\\"&amp;\\\")\\n                .replace(/</g, \\\"&lt;\\\")\\n                .replace(/>/g, \\\"&gt;\\\")\\n                .replace(/\\\"/g, \\\"&quot;\\\")\\n                .replace(/'/g, \\\"&#039;\\\");\\n        }\\n\\n        // Initialize\\n        document.addEventListener('DOMContentLoaded', () => {\\n            loadFileSystem();\\n        });\\n    </script>\\n</body>\\n</html>\\n\"\n    },\n    {\n      \"name\": \"index.html\",\n      \"type\": \"file\",\n      \"path\": \"index.html\",\n      \"size\": 13601,\n      \"content\": \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Documentation Book</title>\\n    <!-- Marked.js for Markdown rendering -->\\n    <script src=\\\"https://cdn.jsdelivr.net/npm/marked/marked.min.js\\\"></script>\\n    <!-- Highlight.js for syntax highlighting -->\\n    <link rel=\\\"stylesheet\\\" href=\\\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/github.min.css\\\">\\n    <script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\\\"></script>\\n    <!-- Table of Contents generator -->\\n    <script src=\\\"https://cdn.jsdelivr.net/npm/markdown-toc@1.2.0/dist/markdown-toc.min.js\\\"></script>\\n    <style>\\n        :root {\\n            --sidebar-width: 280px;\\n            --header-height: 60px;\\n            --primary-color: #0366d6;\\n            --text-color: #24292e;\\n            --border-color: #e1e4e8;\\n            --bg-color: #ffffff;\\n            --sidebar-bg: #f6f8fa;\\n            --code-bg: #f6f8fa;\\n            --font-sans: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Helvetica, Arial, sans-serif;\\n            --font-mono: SFMono-Regular, Consolas, \\\"Liberation Mono\\\", Menlo, monospace;\\n        }\\n\\n        * {\\n            box-sizing: border-box;\\n            margin: 0;\\n            padding: 0;\\n        }\\n\\n        body {\\n            font-family: var(--font-sans);\\n            line-height: 1.6;\\n            color: var(--text-color);\\n            background-color: var(--bg-color);\\n            display: flex;\\n            min-height: 100vh;\\n        }\\n\\n        /* Sidebar */\\n        #sidebar {\\n            width: var(--sidebar-width);\\n            background-color: var(--sidebar-bg);\\n            border-right: 1px solid var(--border-color);\\n            height: 100vh;\\n            position: fixed;\\n            overflow-y: auto;\\n            padding: 20px;\\n            z-index: 100;\\n        }\\n\\n        #sidebar h2 {\\n            font-size: 1.2em;\\n            margin-bottom: 1em;\\n            padding-bottom: 0.5em;\\n            border-bottom: 1px solid var(--border-color);\\n        }\\n\\n        #toc {\\n            font-size: 0.9em;\\n        }\\n\\n        #toc ul {\\n            list-style: none;\\n            padding-left: 1em;\\n        }\\n\\n        #toc a {\\n            color: var(--text-color);\\n            text-decoration: none;\\n            display: block;\\n            padding: 4px 0;\\n            transition: color 0.2s;\\n        }\\n\\n        #toc a:hover {\\n            color: var(--primary-color);\\n        }\\n\\n        #toc .toc-h1 { margin-left: 0; font-weight: 600; }\\n        #toc .toc-h2 { margin-left: 1em; }\\n        #toc .toc-h3 { margin-left: 2em; font-size: 0.9em; }\\n        #toc .toc-h4 { margin-left: 3em; font-size: 0.85em; }\\n        #toc .toc-h5 { margin-left: 4em; font-size: 0.8em; }\\n        #toc .toc-h6 { margin-left: 5em; font-size: 0.75em; }\\n\\n        /* Main content */\\n        #main {\\n            flex: 1;\\n            margin-left: var(--sidebar-width);\\n            max-width: 900px;\\n            padding: 2em 3em;\\n        }\\n\\n        /* Loading indicator */\\n        .loading {\\n            display: flex;\\n            justify-content: center;\\n            align-items: center;\\n            height: 100vh;\\n            font-size: 1.2em;\\n        }\\n\\n        .spinner {\\n            border: 3px solid rgba(0, 0, 0, 0.1);\\n            border-radius: 50%;\\n            border-top: 3px solid var(--primary-color);\\n            width: 24px;\\n            height: 24px;\\n            animation: spin 1s linear infinite;\\n            margin-right: 10px;\\n        }\\n\\n        @keyframes spin {\\n            0% { transform: rotate(0deg); }\\n            100% { transform: rotate(360deg); }\\n        }\\n\\n        /* Markdown content */\\n        .markdown-body {\\n            line-height: 1.8;\\n        }\\n\\n        .markdown-body h1,\\n        .markdown-body h2,\\n        .markdown-body h3,\\n        .markdown-body h4,\\n        .markdown-body h5,\\n        .markdown-body h6 {\\n            margin-top: 1.5em;\\n            margin-bottom: 0.8em;\\n            font-weight: 600;\\n            line-height: 1.25;\\n            position: relative;\\n            padding-top: 1em;\\n        }\\n\\n        .markdown-body h1:not(:first-child) {\\n            border-top: 1px solid var(--border-color);\\n            padding-top: 1.5em;\\n            margin-top: 2em;\\n        }\\n\\n        .markdown-body h1 { font-size: 2em; }\\n        .markdown-body h2 { font-size: 1.5em; }\\n        .markdown-body h3 { font-size: 1.25em; }\\n        .markdown-body h4 { font-size: 1em; }\\n        .markdown-body h5 { font-size: 0.875em; }\\n        .markdown-body h6 { font-size: 0.85em; color: #6a737d; }\\n\\n        .markdown-body p {\\n            margin-top: 0;\\n            margin-bottom: 1em;\\n        }\\n\\n        .markdown-body ul,\\n        .markdown-body ol {\\n            padding-left: 2em;\\n            margin-top: 0;\\n            margin-bottom: 1em;\\n        }\\n\\n        .markdown-body li {\\n            margin-bottom: 0.5em;\\n        }\\n\\n        .markdown-body code {\\n            background-color: var(--code-bg);\\n            border-radius: 3px;\\n            padding: 0.2em 0.4em;\\n            font-family: var(--font-mono);\\n            font-size: 85%;\\n        }\\n\\n        .markdown-body pre {\\n            background-color: var(--code-bg);\\n            border-radius: 6px;\\n            padding: 16px;\\n            overflow: auto;\\n            line-height: 1.45;\\n            margin-bottom: 1.5em;\\n        }\\n\\n        .markdown-body pre code {\\n            background-color: transparent;\\n            padding: 0;\\n            border-radius: 0;\\n        }\\n\\n        .markdown-body blockquote {\\n            border-left: 0.25em solid #dfe2e5;\\n            color: #6a737d;\\n            padding: 0 1em;\\n            margin: 0 0 1.5em 0;\\n        }\\n\\n        .markdown-body table {\\n            border-collapse: collapse;\\n            width: 100%;\\n            margin-bottom: 1.5em;\\n            display: block;\\n            overflow: auto;\\n        }\\n\\n        .markdown-body table th,\\n        .markdown-body table td {\\n            border: 1px solid #dfe2e5;\\n            padding: 6px 13px;\\n        }\\n\\n        .markdown-body table tr {\\n            background-color: #fff;\\n            border-top: 1px solid #c6cbd1;\\n        }\\n\\n        .markdown-body table tr:nth-child(2n) {\\n            background-color: #f6f8fa;\\n        }\\n\\n        /* File indicators */\\n        .file-section {\\n            position: relative;\\n        }\\n\\n        .file-path {\\n            position: absolute;\\n            right: 0;\\n            top: 0.5em;\\n            font-size: 0.7em;\\n            color: #6a737d;\\n            background: #f6f8fa;\\n            padding: 2px 8px;\\n            border-radius: 12px;\\n            font-family: var(--font-mono);\\n        }\\n\\n        /* Responsive design */\\n        @media (max-width: 1024px) {\\n            :root {\\n                --sidebar-width: 250px;\\n            }\\n            \\n            #main {\\n                padding: 1.5em;\\n            }\\n        }\\n\\n        @media (max-width: 768px) {\\n            body {\\n                flex-direction: column;\\n            }\\n            \\n            #sidebar {\\n                position: static;\\n                width: 100%;\\n                height: auto;\\n                max-height: 40vh;\\n                border-right: none;\\n                border-bottom: 1px solid var(--border-color);\\n            }\\n            \\n            #main {\\n                margin-left: 0;\\n                padding: 1em;\\n            }\\n        }\\n    </style>\\n</head>\\n<body>\\n    <div id=\\\"sidebar\\\">\\n        <h2>Table of Contents</h2>\\n        <div id=\\\"toc\\\"></div>\\n    </div>\\n\\n    <div id=\\\"main\\\">\\n        <div class=\\\"loading\\\">\\n            <div class=\\\"spinner\\\"></div>\\n            <span>Loading documentation...</span>\\n        </div>\\n        <div id=\\\"content\\\" class=\\\"markdown-body\\\" style=\\\"display: none;\\\"></div>\\n    </div>\\n\\n    <script>\\n        // Configuration\\n        const API_URL = 'data/file-system.json';\\n        \\n        // DOM Elements\\n        const contentEl = document.getElementById('content');\\n        const loadingEl = document.querySelector('.loading');\\n        const tocEl = document.getElementById('toc');\\n        \\n        // Load and process file system\\n        async function loadDocumentation() {\\n            try {\\n                // Show loading state\\n                contentEl.style.display = 'none';\\n                loadingEl.style.display = 'flex';\\n                \\n                // Load file system\\n                const response = await fetch(API_URL);\\n                const fileSystem = await response.json();\\n                \\n                // Extract and sort markdown files\\n                const markdownFiles = [];\\n                extractMarkdownFiles(fileSystem, markdownFiles);\\n                \\n                // Sort files by path (alphabetical order)\\n                markdownFiles.sort((a, b) => a.path.localeCompare(b.path));\\n                \\n                // Load and render all markdown files\\n                await renderMarkdownFiles(markdownFiles);\\n                \\n                // Generate table of contents\\n                generateTOC();\\n                \\n                // Hide loading state, show content\\n                loadingEl.style.display = 'none';\\n                contentEl.style.display = 'block';\\n                \\n                // Apply syntax highlighting\\n                document.querySelectorAll('pre code').forEach((block) => {\\n                    hljs.highlightElement(block);\\n                });\\n                \\n                // Scroll to hash if present in URL\\n                if (window.location.hash) {\\n                    const id = window.location.hash.substring(1);\\n                    const element = document.getElementById(id);\\n                    if (element) {\\n                        element.scrollIntoView();\\n                    }\\n                }\\n                \\n            } catch (error) {\\n                console.error('Error loading documentation:', error);\\n                loadingEl.innerHTML = `\\n                    <div style=\\\"color: #cb2431; text-align: center; padding: 2em;\\\">\\n                        <h2>Error Loading Documentation</h2>\\n                        <p>${error.message}</p>\\n                        <p>Make sure to run <code>generate_structure.py</code> first.</p>\\n                    </div>\\n                `;\\n            }\\n        }\\n        \\n        // Recursively extract all markdown files from the file system\\n        function extractMarkdownFiles(node, result = []) {\\n            if (!node) return;\\n            \\n            if (node.type === 'file' && node.name.endsWith('.md')) {\\n                result.push({\\n                    name: node.name,\\n                    path: node.path,\\n                    content: node.content || ''\\n                });\\n            } else if (node.children) {\\n                for (const child of node.children) {\\n                    extractMarkdownFiles(child, result);\\n                }\\n            }\\n        }\\n        \\n        // Render all markdown files to the page\\n        async function renderMarkdownFiles(files) {\\n            let html = '';\\n            \\n            for (const file of files) {\\n                try {\\n                    // Add file section with path indicator\\n                    html += `\\n                        <div class=\\\"file-section\\\">\\n                            <div class=\\\"file-path\\\" title=\\\"${file.path}\\\">${file.path}</div>\\n                            ${marked.parse(file.content || '')}\\n                        </div>\\n                        <hr style=\\\"margin: 2em 0; border: 0; border-top: 1px dashed #e1e4e8;\\\">\\n                    `;\\n                } catch (error) {\\n                    console.error(`Error rendering ${file.path}:`, error);\\n                    html += `\\n                        <div class=\\\"file-section\\\">\\n                            <h2>Error Loading: ${file.name}</h2>\\n                            <pre>${error.message}</pre>\\n                        </div>\\n                    `;\\n                }\\n            }\\n            \\n            contentEl.innerHTML = html;\\n        }\\n        \\n        // Generate table of contents from headings\\n        function generateTOC() {\\n            const headings = contentEl.querySelectorAll('h1, h2, h3, h4, h5, h6');\\n            let tocHtml = '<ul>';\\n            let currentLevel = 1;\\n            \\n            headings.forEach((heading, index) => {\\n                // Skip file path indicators\\n                if (heading.classList.contains('file-path')) return;\\n                \\n                const level = parseInt(heading.tagName.substring(1));\\n                const id = `heading-${index}`;\\n                \\n                // Set ID for anchor links\\n                heading.id = id;\\n                \\n                // Add TOC entry\\n                if (level > currentLevel) {\\n                    tocHtml += '<ul>'.repeat(level - currentLevel);\\n                } else if (level < currentLevel) {\\n                    tocHtml += '</li></ul>'.repeat(currentLevel - level);\\n                } else {\\n                    tocHtml += '</li>';\\n                }\\n                \\n                tocHtml += `<li class=\\\"toc-h${level}\\\"><a href=\\\"#${id}\\\">${heading.textContent}</a>`;\\n                currentLevel = level;\\n            });\\n            \\n            // Close any open lists\\n            tocHtml += '</li></ul>'.repeat(currentLevel - 1);\\n            tocHtml += '</ul>';\\n            \\n            tocEl.innerHTML = tocHtml;\\n        }\\n        \\n        // Initialize\\n        document.addEventListener('DOMContentLoaded', loadDocumentation);\\n    </script>\\n</body>\\n</html>\\n\"\n    },\n    {\n      \"name\": \"keycloak.png\",\n      \"type\": \"file\",\n      \"path\": \"keycloak.png\",\n      \"size\": 70922,\n      \"content\": \"[Binary file: keycloak.png]\"\n    },\n    {\n      \"name\": \"LICENSE\",\n      \"type\": \"file\",\n      \"path\": \"LICENSE\",\n      \"size\": 11357,\n      \"content\": \"                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \\\"License\\\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \\\"Licensor\\\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \\\"Legal Entity\\\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \\\"control\\\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \\\"You\\\" (or \\\"Your\\\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \\\"Source\\\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \\\"Object\\\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \\\"Work\\\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \\\"Derivative Works\\\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \\\"Contribution\\\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \\\"submitted\\\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \\\"Not a Contribution.\\\"\\n\\n      \\\"Contributor\\\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \\\"NOTICE\\\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \\\"AS IS\\\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \\\"[]\\\"\\n      replaced with your own identifying information. (Don't include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \\\"printed page\\\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright [yyyy] [name of copyright owner]\\n\\n   Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n\"\n    },\n    {\n      \"name\": \"Makefile\",\n      \"type\": \"file\",\n      \"path\": \"Makefile\",\n      \"size\": 18539,\n      \"content\": \"\\n# Media Vault - Makefile\\n\\n# Color definitions\\nGREEN  := $(shell tput -Txterm setaf 2)\\nYELLOW := $(shell tput -Txterm setaf 3)\\nWHITE  := $(shell tput -Txterm setaf 7)\\nRESET  := $(shell tput -Txterm sgr0)\\n\\n# Default target\\n.DEFAULT_GOAL := help\\n\\n# Phony targets - Keep this list in sync with actual targets\\n.PHONY: help \\\\\\n        init \\\\\\n        up up-build down restart \\\\\\n        build rebuild \\\\\\n        test test-unit test-integration test-e2e \\\\\\n        lint format \\\\\\n        logs \\\\\\n        clean clean-all \\\\\\n        setup-keycloak keycloak-clean keycloak-export \\\\\\n        deploy \\\\\\n        monitoring monitoring-down monitoring-restart monitoring-logs monitoring-status \\\\\\n        grafana prometheus alerts \\\\\\n        status shell-api shell-keycloak \\\\\\n        dev-start prod-setup backup \\\\\\n        keycloak keycloak-db media-vault-api media-vault-analyzer nsfw-analyzer flutter-web media-vault-admin caddy redis\\n\\n## Help\\nhelp: ## Show this help\\n\\t@echo 'Media Vault - Available Commands:'\\n\\t@echo '================================='\\n\\t@echo ''\\n\\t@echo '🚀 Quick Start:'\\n\\t@echo '  make up                     Start basic application stack'\\n\\t@echo '  make up-build              Rebuild and start all services'\\n\\t@echo '  make full-stack            Complete setup with monitoring'\\n\\t@echo '  make dev-start             Quick start for development'\\n\\t@echo ''\\n\\t@echo '📊 Monitoring:'\\n\\t@echo '  make monitoring            Start monitoring stack'\\n\\t@echo '  make monitoring-status     Show monitoring status'\\n\\t@echo '  make monitoring-logs       Show monitoring logs'\\n\\t@echo '  make grafana               Open Grafana (http://localhost:3333)'\\n\\t@echo '  make prometheus            Open Prometheus (http://localhost:9090)'\\n\\t@echo '  make alerts                Open AlertManager (http://localhost:9093)'\\n\\t@echo ''\\n\\t@echo '🔐 Authentication:'\\n\\t@echo '  make setup-keycloak         Configure Keycloak'\\n\\t@echo '  make keycloak-clean        Reset Keycloak config'\\n\\t@echo '  make keycloak-export       Export Keycloak configuration'\\n\\t@echo ''\\n\\t@echo '🛠️  Individual Services:'\\n\\t@echo '  make keycloak              Start Keycloak service'\\n\\t@echo '  make keycloak-db           Start Keycloak database'\\n\\t@echo '  make media-vault-api       Start Media Vault API'\\n\\t@echo '  make media-vault-analyzer  Start AI Processing service'\\n\\t@echo '  make nsfw-analyzer        Start NSFW Analyzer service'\\n\\t@echo '  make flutter-web          Start Flutter Web Frontend'\\n\\t@echo '  make media-vault-admin    Start Admin Panel'\\n\\t@echo '  make caddy                Start Caddy Reverse Proxy'\\n\\t@echo '  make redis                Start Redis Cache'\\n\\t@echo ''\\n\\t@echo '🔧 Management:'\\n\\t@echo '  make down                  Stop all services'\\n\\t@echo '  make restart              Restart all services'\\n\\t@echo '  make clean                Clean up containers and volumes'\\n\\t@echo '  make clean-all            Remove all containers, volumes, and images'\\n\\t@echo '  make logs                 Show application logs'\\n\\t@echo '  make status               Show container status'\\n\\t@echo '  make backup               Create database backup'\\n\\t@echo '  make prod-setup           Configure production settings'\\n\\t@echo ''\\n\\t@echo '🔍 Development:'\\n\\t@echo '  make test                 Run all tests'\\n\\t@echo '  make lint                 Run linters'\\n\\t@echo '  make format               Format code'\\n\\t@echo '  make coverage             Generate test coverage report'\\n\\n## Environment\\ninit: ## Initialize development environment\\n\\t@echo \\\"${GREEN}🚀 Initializing development environment...${RESET}\\\"\\n\\tcp .env.example .env\\n\\t@echo \\\"✅ Created .env file\\\"\\n\\t@echo \\\"${YELLOW}ℹ️  Please edit .env with your configuration${RESET}\\\"\\n\\n## Docker Composee\\nup: ## Start all services\\n\\t@echo \\\"${GREEN}🚀 Starting all services...${RESET}\\\"\\n\\tdocker-compose up -d\\n\\nup-build: ## Rebuild and start all services\\n\\t@echo \\\"${GREEN}🚀 Rebuilding and starting all services...${RESET}\\\"\\n\\tdocker-compose up -d --build\\n\\ndown: ## Stop and remove all services\\n\\t@echo \\\"${YELLOW}🛑 Stopping and removing all services...${RESET}\\\"\\n\\tdocker-compose down\\n\\nstop: ## Stop all services without removing containers\\n\\t@echo \\\"${YELLOW}🛑 Stopping all services (containers will remain)...${RESET}\\\"\\n\\tdocker-compose stop\\n\\nrestart: ## Restart all services\\n\\t@echo \\\"${YELLOW}🔄 Restarting all services...${RESET}\\\"\\n\\tdocker-compose restart\\n\\nlogs: ## View logs from all services\\n\\tdocker-compose logs -f\\n\\nstatus: ## Show container status\\n\\tdocker-compose ps\\n\\nshell-api: ## Open shell in API container\\n\\tdocker-compose exec media-vault-api sh\\n\\nshell-keycloak: ## Open shell in Keycloak container\\n\\tdocker-compose exec keycloak bash\\n\\n## Development\\ndev: up ## Start development environment\\n\\nrun-browse: up ## Start services and open in browser\\n\\t@echo \\\"${GREEN}🌐 Opening application in browser...${RESET}\\\"\\n\\t@if command -v xdg-open > /dev/null; then \\\\\\n\\t\\txdg-open http://localhost; \\\\\\n\\telif command -v open > /dev/null; then \\\\\\n\\t\\topen http://localhost; \\\\\\n\\telse \\\\\\n\\t\\techo \\\"${YELLOW}Could not detect the web browser to use. Please open http://localhost manually${RESET}\\\"; \\\\\\n\\tfi\\n\\n## Testing\\ntest: test-unit test-integration ## Run all tests\\n\\ntest-unit: ## Run unit tests\\n\\t@echo \\\"🧪 Running unit tests...\\\"\\n\\tdocker-compose run --rm media-vault-api go test -v ./... -short\\n\\ntest-integration: ## Run integration tests\\n\\t@echo \\\"${GREEN}🧪 Running integration tests...${RESET}\\\"\\n\\tdocker-compose -f docker-compose.test.yml up --abort-on-container-exit\\n\\ntest-e2e: ## Run end-to-end tests\\n\\t@echo \\\"${GREEN}🧪 Running E2E tests...${RESET}\\\"\\n\\t# TODO: Add E2E test command\\n\\ncoverage: ## Generate test coverage report\\n\\t@echo \\\"${GREEN}📊 Generating test coverage...${RESET}\\\"\\n\\tdocker-compose run --rm media-vault-api go test -coverprofile=coverage.out ./...\\n\\tdocker-compose run --rm media-vault-api go tool cover -html=coverage.out -o coverage.html\\n\\n## Code Quality\\nlint: ## Run linters\\n\\t@echo \\\"${GREEN}🔍 Running linters...${RESET}\\\"\\n\\tdocker-compose run --rm media-vault-api golangci-lint run\\n\\nformat: ## Format code\\n\\t@echo \\\"${GREEN}🎨 Formatting code...${RESET}\\\"\\n\\tdocker-compose run --rm media-vault-api gofmt -w .\\n\\n## Monitoring\\nmonitoring: ## Start monitoring stack\\n\\t@echo \\\"${GREEN}📊 Starting monitoring stack...${RESET}\\\"\\n\\tdocker-compose -f docker-compose.monitoring.yml up -d\\n\\nmonitoring-down: ## Stop monitoring stack\\n\\t@echo \\\"${YELLOW}🛑 Stopping monitoring stack...${RESET}\\\"\\n\\tdocker-compose -f docker-compose.monitoring.yml down\\n\\nmonitoring-restart: ## Restart monitoring stack\\n\\t@echo \\\"🔄 Restarting monitoring stack...\\\"\\n\\tdocker-compose -f docker-compose.monitoring.yml restart\\n\\nmonitoring-logs: ## Show monitoring logs\\n\\t@echo \\\"📜 Showing monitoring logs...\\\"\\n\\tdocker-compose -f docker-compose.monitoring.yml logs -f\\n\\nmonitoring-status: ## Show monitoring status\\n\\t@echo \\\"📊 Monitoring Status:\\\"\\n\\t@echo \\\"====================\\\"\\n\\tdocker-compose -f docker-compose.monitoring.yml ps\\n\\ngrafana: ## Open Grafana dashboard\\n\\t@echo \\\"🌐 Opening Grafana...\\\"\\n\\t@echo \\\"URL: http://localhost:3333\\\"\\n\\t@echo \\\"Login: admin / grafana123\\\"\\n\\nprometheus: ## Open Prometheus dashboard\\n\\t@echo \\\"🌐 Opening Prometheus...\\\"\\n\\t@echo \\\"URL: http://localhost:9090\\\"\\n\\nalerts: ## Open AlertManager\\n\\t@echo \\\"🌐 Opening AlertManager...\\\"\\n\\t@echo \\\"URL: http://localhost:9093\\\"\\n\\n## Keycloak Management\\nsetup-keycloak: ## Set up Keycloak with initial configuration\\n\\t@echo \\\"${GREEN}🔐 Setting up Keycloak...${RESET}\\\"\\n\\t./keycloak/setup-keycloak.sh\\n\\nkeycloak-clean: ## Reset Keycloak configuration\\n\\t@echo \\\"${YELLOW}🧹 Cleaning Keycloak configuration...${RESET}\\\"\\n\\t./setup-keycloak.sh --clean\\n\\nkeycloak-export: ## Export Keycloak configuration\\n\\t@echo \\\"${GREEN}💾 Exporting Keycloak configuration...${RESET}\\\"\\n\\t./setup-keycloak.sh --export-only\\n\\nrestart-keycloak: ## Restart Keycloak service\\n\\t@echo \\\"🔄 Restarting Keycloak...\\\"\\n\\tdocker-compose restart keycloak\\n\\n## Deployment\\ndeploy: ## Deploy to production\\n\\t@echo \\\"${GREEN}🚀 Deploying to production...${RESET}\\\"\\n\\tdocker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --build\\n\\n## Cleanup\\nclean: ## Remove all containers and volumes\\n\\t@echo \\\"${YELLOW}🧹 Cleaning up...${RESET}\\\"\\n\\tdocker-compose down -v\\n\\nclean-all: ## Remove all containers, volumes, and images\\n\\t@echo \\\"${YELLOW}🧹 Deep cleaning (containers, volumes, and images)...${RESET}\\\"\\n\\tdocker-compose down -v --rmi all --remove-orphans\\n\\ndev-clean: clean ## Clean development environment\\n\\t@echo \\\"${YELLOW}🧹 Cleaning development environment...${RESET}\\\"\\n\\trm -rf node_modules\\n\\n## Documentation\\ndocs: ## Generate documentation\\n\\t@echo \\\"${GREEN}📚 Generating documentation...${RESET}\\\"\\n\\t# TODO: Add documentation generation command\\n\\n## Complete Setup\\nfull-stack: setup-keycloak up monitoring ## Start complete stack with monitoring\\n\\t@echo \\\"${GREEN}🎉 Media Vault is ready!${RESET}\\\"\\n\\t@echo \\\"\\\"\\n\\t@echo \\\"${YELLOW}📊 Service URLs:${RESET}\\\"\\n\\t@echo \\\"  🌐 Main App: http://localhost\\\"\\n\\t@echo \\\"  📊 Grafana: http://localhost:3333 (admin/grafana123)\\\"\\n\\t@echo \\\"  📈 Prometheus: http://localhost:9090\\\"\\n\\t@echo \\\"  🔐 Keycloak: http://localhost:8080/admin (admin/admin123)\\\"\\n\\t@echo \\\"  ⚠️  AlertManager: http://localhost:9093\\\"\\n\\n## Service Management\\n# Keycloak Services\\nkeycloak: ## Start Keycloak identity service\\n\\t@echo \\\"${GREEN}🚀 Starting Keycloak service...${RESET}\\\"\\n\\tdocker-compose rm -fsv keycloak 2>/dev/null || true\\n\\tdocker-compose up -d --remove-orphans keycloak\\n\\t@echo \\\"✅ Keycloak service started\\\"\\n\\t@echo \\\"🌐 Access at: http://localhost:8080/admin (admin/admin123)\\\"\\n\\nkeycloak-db: ## Start Keycloak database\\n\\t@echo \\\"${GREEN}🚀 Starting Keycloak database...${RESET}\\\"\\n\\tdocker-compose rm -fsv keycloak-db 2>/dev/null || true\\n\\tdocker-compose up -d --remove-orphans keycloak-db\\n\\t@echo \\\"✅ Keycloak database started\\\"\\n\\n# Media Vault Services\\nmedia-vault-api: ## Start Media Vault API\\n\\t@echo \\\"${GREEN}🚀 Starting Media Vault API...${RESET}\\\"\\n\\tdocker-compose rm -fsv media-vault-api 2>/dev/null || true\\n\\tdocker-compose up -d --remove-orphans media-vault-api\\n\\t@echo \\\"✅ Media Vault API started\\\"\\n\\nmedia-vault-analyzer: ## Start Media Vault Analyzer (AI Processing)\\n\\t@echo \\\"${GREEN}🚀 Starting Media Vault Analyzer...${RESET}\\\"\\n\\tdocker-compose rm -fsv media-vault-analyzer 2>/dev/null || true\\n\\tdocker-compose up -d --remove-orphans media-vault-analyzer\\n\\t@echo \\\"✅ Media Vault Analyzer started\\\"\\n\\nnsfw-analyzer: ## Start NSFW Analyzer Service\\n\\t@echo \\\"${GREEN}🚀 Starting NSFW Analyzer...${RESET}\\\"\\n\\tdocker-compose rm -fsv nsfw-analyzer 2>/dev/null || true\\n\\tdocker-compose up -d --remove-orphans nsfw-analyzer\\n\\t@echo \\\"✅ NSFW Analyzer started\\\"\\n\\n# Frontend Services\\nflutter-web: ## Start Flutter Web Frontend\\n\\t@echo \\\"${GREEN}🚀 Starting Flutter Web Frontend...${RESET}\\\"\\n\\tdocker-compose rm -fsv flutter-web 2>/dev/null || true\\n\\tdocker-compose up -d --remove-orphans flutter-web\\n\\t@echo \\\"✅ Flutter Web Frontend started\\\"\\n\\t@echo \\\"🌐 Access at: http://localhost:3000\\\"\\n\\nmedia-vault-admin: ## Start Media Vault Admin Panel\\n\\t@echo \\\"${GREEN}🚀 Starting Media Vault Admin Panel...${RESET}\\\"\\n\\tdocker-compose rm -fsv media-vault-admin 2>/dev/null || true\\n\\tdocker-compose up -d --remove-orphans media-vault-admin\\n\\t@echo \\\"✅ Media Vault Admin Panel started\\\"\\n\\t@echo \\\"🌐 Access at: http://localhost:3001\\\"\\n\\n# Infrastructure Services\\ncaddy: ## Start Caddy Reverse Proxy\\n\\t@echo \\\"${GREEN}🚀 Starting Caddy Reverse Proxy...${RESET}\\\"\\n\\tdocker-compose rm -fsv caddy 2>/dev/null || true\\n\\tdocker-compose up -d --remove-orphans caddy\\n\\t@echo \\\"✅ Caddy Reverse Proxy started\\\"\\n\\nredis: ## Start Redis Cache\\n\\t@echo \\\"${GREEN}🚀 Starting Redis...${RESET}\\\"\\n\\tdocker-compose rm -fsv redis 2>/dev/null || true\\n\\tdocker-compose up -d --remove-orphans redis\\n\\t@echo \\\"✅ Redis started\\\"\\n\\n## Development\\ndev-start: clean up ## Quick start for development\\n\\t@echo \\\"🚀 Development environment ready!\\\"\\n\\n## Production\\nprod-setup: ## Production setup instructions\\n\\t@echo \\\"🏭 Production setup...\\\"\\n\\t@echo \\\"⚠️  Remember to:\\\"\\n\\t@echo \\\"   1. Change default passwords\\\"\\n\\t@echo \\\"   2. Configure SSL\\\"\\n\\t@echo \\\"   3. Set up backup strategy\\\"\\n\\t@echo \\\"   4. Configure monitoring\\\"\\n\\n## Backup\\nbackup: ## Create database backup\\n\\t@echo \\\"💾 Creating backup...\\\"\\n\\t@mkdir -p backups\\n\\tdocker-compose exec media-vault-api sqlite3 /data/media.db \\\".backup /data/backup_$$(date +%Y%m%d_%H%M%S).db\\\"\\n\\t./setup-keycloak.sh --export-only\\n\\ttar -czf backups/media-vault-backup-$$(date +%Y%m%d).tar.gz data/ uploads/ media-vault-realm-export.json 2>/dev/null || true\\n\\t@echo \\\"✅ Backup created: backups/media-vault-backup-$$(date +%Y%m%d).tar.gz\\\"\\n\\n## Infrastructure\\ninfrastructure: ## Start infrastructure services\\n\\t@echo \\\"${GREEN}🏗️  Starting infrastructure stack...${RESET}\\\"\\n\\tdocker-compose -f docker-compose.infrastructure.yml up -d\\n\\nmonitoring: ## Start monitoring stack\\n\\t@echo \\\"${GREEN}📊 Starting monitoring stack...${RESET}\\\"\\n\\tdocker-compose -f docker-compose.monitoring.yml up -d\\n\\t@echo \\\"✅ Monitoring started\\\"\\n\\t@echo \\\"📊 Grafana: http://localhost:3333\\\"\\n\\t@echo \\\"📈 Prometheus: http://localhost:9090\\\"\\n\\nmonitoring-down:\\n\\t@echo \\\"📊 Stopping monitoring stack...\\\"\\n\\tdocker-compose -f docker-compose.monitoring.yml down\\n\\n# Quick monitoring access\\ngrafana:\\n\\t@echo \\\"🌐 Opening Grafana...\\\"\\n\\t@echo \\\"URL: http://localhost:3333\\\"\\n\\t@echo \\\"Login: admin / grafana123\\\"\\n\\nprometheus:\\n\\t@echo \\\"🌐 Opening Prometheus...\\\"\\n\\t@echo \\\"URL: http://localhost:9090\\\"\\n\\nalerts:\\n\\t@echo \\\"🌐 Opening AlertManager...\\\"\\n\\t@echo \\\"URL: http://localhost:9093\\\"\\n\\n# Monitoring management\\nmonitoring-restart:\\n\\tdocker-compose -f docker-compose.monitoring.yml restart\\n\\nmonitoring-logs:\\n\\tdocker-compose -f docker-compose.monitoring.yml logs -f\\n\\nmonitoring-status:\\n\\t@echo \\\"📊 Monitoring Status:\\\"\\n\\t@echo \\\"====================\\\"\\n\\t@docker-compose -f docker-compose.monitoring.yml ps\\n\\n# Dashboard management\\ndashboard-import:\\n\\t@echo \\\"📊 Importing custom dashboards...\\\"\\n\\t# Custom script to import dashboards via Grafana API\\n\\ndashboard-backup:\\n\\t@echo \\\"💾 Backing up Grafana dashboards...\\\"\\n\\t# Custom script to export dashboards\\n\\n# Alerting management\\ntest-alerts:\\n\\t@echo \\\"🚨 Testing alert system...\\\"\\n\\tcurl -XPOST http://localhost:9093/api/v1/alerts \\\\\\n\\t\\t-H \\\"Content-Type: application/json\\\" \\\\\\n\\t\\t-d '[{\\\"labels\\\":{\\\"alertname\\\":\\\"TestAlert\\\",\\\"severity\\\":\\\"warning\\\",\\\"instance\\\":\\\"test\\\"},\\\"annotations\\\":{\\\"summary\\\":\\\"Test alert\\\"}}]'\\n\\nsilence-alerts:\\n\\t@echo \\\"🔇 Creating alert silence...\\\"\\n\\t# Script to create alert silence via AlertManager API\\n\\n# Performance testing with monitoring\\nload-test-monitored:\\n\\t@echo \\\"⚡ Running monitored load test...\\\"\\n\\tdocker run --rm -i --network media-vault-network \\\\\\n\\t\\tgrafana/k6 run - <<EOF\\n\\t\\timport http from 'k6/http';\\n\\t\\timport { check } from 'k6';\\n\\t\\texport let options = {\\n\\t\\t\\tstages: [\\n\\t\\t\\t\\t{ duration: '2m', target: 50 },\\n\\t\\t\\t\\t{ duration: '5m', target: 50 },\\n\\t\\t\\t\\t{ duration: '2m', target: 100 },\\n\\t\\t\\t\\t{ duration: '5m', target: 100 },\\n\\t\\t\\t\\t{ duration: '2m', target: 0 },\\n\\t\\t\\t],\\n\\t\\t\\tthresholds: {\\n\\t\\t\\t\\thttp_req_duration: ['p(95)<500'],\\n\\t\\t\\t\\thttp_req_failed: ['rate<0.1'],\\n\\t\\t\\t},\\n\\t\\t};\\n\\t\\texport default function() {\\n\\t\\t\\tlet response = http.get('http://media-vault-api:8080/health');\\n\\t\\t\\tcheck(response, {\\n\\t\\t\\t\\t'status is 200': (r) => r.status === 200,\\n\\t\\t\\t\\t'response time < 500ms': (r) => r.timings.duration < 500,\\n\\t\\t\\t});\\n\\t\\t}\\n\\tEOF\\n\\n# System health check\\nhealth-check-full:\\n\\t@echo \\\"🏥 Comprehensive Health Check:\\\"\\n\\t@echo \\\"==============================\\\"\\n\\t@echo \\\"📊 Checking main services...\\\"\\n\\t@curl -s http://localhost:8080/health | jq '.' || echo \\\"❌ API: DOWN\\\"\\n\\t@curl -s http://localhost:8443/health/ready | jq '.' || echo \\\"❌ Keycloak: DOWN\\\"\\n\\t@echo \\\"\\\"\\n\\t@echo \\\"📊 Checking monitoring...\\\"\\n\\t@curl -s http://localhost:9090/-/healthy || echo \\\"❌ Prometheus: DOWN\\\"\\n\\t@curl -s http://localhost:3333/api/health || echo \\\"❌ Grafana: DOWN\\\"\\n\\t@curl -s http://localhost:9093/-/healthy || echo \\\"❌ AlertManager: DOWN\\\"\\n\\t@echo \\\"\\\"\\n\\t@echo \\\"📊 Checking containers...\\\"\\n\\t@docker-compose ps\\n\\t@echo \\\"\\\"\\n\\t@echo \\\"📊 Resource usage:\\\"\\n\\t@docker stats --no-stream --format \\\"table {{.Name}}\\\\t{{.CPUPerc}}\\\\t{{.MemUsage}}\\\"\\n\\n# Backup monitoring data\\nbackup-monitoring:\\n\\t@echo \\\"💾 Backing up monitoring data...\\\"\\n\\tdocker run --rm -v grafana_data:/source -v $(PWD)/backups:/backup alpine tar czf /backup/grafana-backup-$(shell date +%Y%m%d).tar.gz -C /source .\\n\\tdocker run --rm -v prometheus_data:/source -v $(PWD)/backups:/backup alpine tar czf /backup/prometheus-backup-$(shell date +%Y%m%d).tar.gz -C /source .\\n\\n# Podstawowe komendy\\nbuild:\\n\\tdocker-compose build\\n\\nup:\\n\\tdocker-compose up -d\\n\\nup-full:\\n\\tdocker-compose --profile full up -d\\n\\ndown:\\n\\tdocker-compose down\\n\\nlogs:\\n\\tdocker-compose logs -f\\n\\nclean:\\n\\tdocker-compose down -v\\n\\tdocker system prune -f\\n\\n# Keycloak setup\\nsetup-keycloak:\\n\\t@echo \\\"🔐 Konfigurowanie Keycloak...\\\"\\n\\tdocker-compose up -d keycloak keycloak-db\\n\\tsleep 30\\n\\tchmod +x keycloak/setup-keycloak.sh\\n\\t./keycloak/setup-keycloak.sh\\n\\t./update-env.sh\\n\\n# Keycloak management\\nkeycloak-clean:\\n\\t./setup-keycloak.sh --clean\\n\\nkeycloak-export:\\n\\t./setup-keycloak.sh --export-only\\n\\n# Media Vault with Keycloak\\nup-with-auth: setup-keycloak\\n\\tdocker-compose up -d\\n\\t@echo \\\"\\\"\\n\\t@echo \\\"🎉 Media Vault z Keycloak uruchomiony!\\\"\\n\\t@echo \\\"🌐 Aplikacja: http://localhost\\\"\\n\\t@echo \\\"🔐 Keycloak Admin: http://localhost:8443/admin\\\"\\n\\t@echo \\\"👤 Test login: vaultadmin / admin123\\\"\\n\\n# Restart specific services\\nrestart-api:\\n\\tdocker-compose restart media-vault-api\\n\\nrestart-keycloak:\\n\\tdocker-compose restart keycloak\\n\\n# Status and debugging\\nstatus:\\n\\tdocker-compose ps\\n\\nshell-api:\\n\\tdocker-compose exec media-vault-api sh\\n\\nshell-keycloak:\\n\\tdocker-compose exec keycloak bash\\n\\n# Quick start dla development\\ndev-start: clean up-with-auth\\n\\t@echo \\\"🚀 Development environment ready!\\\"\\n\\n## Production Setup\\nprod-setup: ## Configure production settings\\n\\t@echo \\\"${YELLOW}⚠️  Production Setup${RESET}\\\"\\n\\t@echo \\\"Please ensure you have configured:\\\"\\n\\t@echo \\\"  1. Strong passwords in production\\\"\\n\\t@echo \\\"  2. SSL/TLS configuration\\\"\\n\\t@echo \\\"  3. Backup strategy\\\"\\n\\t@echo \\\"  4. Monitoring and alerting\\\"\\n\\n## Backup\\nbackup: ## Create database backup\\n\\t@echo \\\"${GREEN}💾 Creating backup...${RESET}\\n\\t@mkdir -p backups\\n\\tdocker-compose exec media-vault-api sqlite3 /data/media.db \\\".backup /data/backup_$(shell date +%Y%m%d_%H%M%S).db\\\"\\n\\t./setup-keycloak.sh --export-only\\n\\ttar -czf backups/media-vault-backup-$(shell date +%Y%m%d_%H%M%S).tar.gz data/ uploads/ media-vault-realm-export.json\\n\\t@echo \\\"✅ Backup created in backups/ directory\\\"\\n\\n## Health Check\\nhealth-check: ## Run comprehensive health check\\n\\t@echo \\\"🏥 Running health checks...\\\"\\n\\t@echo \\\"📊 Checking main services...\\\"\\n\\t@curl -s http://localhost:8080/health | jq '.' || echo \\\"❌ API: DOWN\\\"\\n\\t@echo \\\"✅ Health check completed\\\"\\n\"\n    },\n    {\n      \"name\": \"md-viewer.html\",\n      \"type\": \"file\",\n      \"path\": \"md-viewer.html\",\n      \"size\": 11472,\n      \"content\": \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Markdown Viewer</title>\\n    <!-- Marked.js for Markdown rendering -->\\n    <script src=\\\"https://cdn.jsdelivr.net/npm/marked/marked.min.js\\\"></script>\\n    <!-- Highlight.js for syntax highlighting -->\\n    <link rel=\\\"stylesheet\\\" href=\\\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/github.min.css\\\">\\n    <script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\\\"></script>\\n    <style>\\n        body {\\n            font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif;\\n            line-height: 1.6;\\n            color: #333;\\n            max-width: 1200px;\\n            margin: 0 auto;\\n            padding: 20px;\\n            display: flex;\\n            min-height: 100vh;\\n        }\\n        \\n        #sidebar {\\n            width: 300px;\\n            padding: 20px;\\n            border-right: 1px solid #e1e4e8;\\n            overflow-y: auto;\\n            max-height: 100vh;\\n            position: sticky;\\n            top: 0;\\n        }\\n        \\n        #content {\\n            flex: 1;\\n            padding: 0 30px;\\n            max-width: 800px;\\n            margin: 0 auto;\\n        }\\n        \\n        .file-item {\\n            padding: 5px 0;\\n            cursor: pointer;\\n            white-space: nowrap;\\n            overflow: hidden;\\n            text-overflow: ellipsis;\\n        }\\n        \\n        .file-item:hover {\\n            color: #0366d6;\\n            text-decoration: underline;\\n        }\\n        \\n        .directory {\\n            margin-top: 10px;\\n        }\\n        \\n        .directory-name {\\n            font-weight: bold;\\n            margin: 15px 0 5px 0;\\n            cursor: pointer;\\n        }\\n        \\n        .directory-contents {\\n            margin-left: 15px;\\n            display: none;\\n        }\\n        \\n        .directory.expanded .directory-contents {\\n            display: block;\\n        }\\n        \\n        /* Markdown styling */\\n        #markdown-content {\\n            line-height: 1.8;\\n        }\\n        \\n        #markdown-content h1, \\n        #markdown-content h2, \\n        #markdown-content h3, \\n        #markdown-content h4, \\n        #markdown-content h5, \\n        #markdown-content h6 {\\n            margin-top: 24px;\\n            margin-bottom: 16px;\\n            font-weight: 600;\\n            line-height: 1.25;\\n        }\\n        \\n        #markdown-content h1 { font-size: 2em; border-bottom: 1px solid #eaecef; padding-bottom: 0.3em; }\\n        #markdown-content h2 { font-size: 1.5em; border-bottom: 1px solid #eaecef; padding-bottom: 0.3em; }\\n        #markdown-content h3 { font-size: 1.25em; }\\n        #markdown-content h4 { font-size: 1em; }\\n        #markdown-content h5 { font-size: 0.875em; }\\n        #markdown-content h6 { font-size: 0.85em; color: #6a737d; }\\n        \\n        #markdown-content p { margin-top: 0; margin-bottom: 16px; }\\n        #markdown-content ul, #markdown-content ol { padding-left: 2em; margin-top: 0; margin-bottom: 16px; }\\n        #markdown-content li { margin-bottom: 0.25em; }\\n        #markdown-content code { \\n            background-color: rgba(27, 31, 35, 0.05);\\n            border-radius: 3px; \\n            padding: 0.2em 0.4em;\\n            font-family: \\\"SFMono-Regular\\\", Consolas, \\\"Liberation Mono\\\", Menlo, monospace;\\n            font-size: 85%;\\n        }\\n        #markdown-content pre {\\n            background-color: #f6f8fa;\\n            border-radius: 6px;\\n            padding: 16px;\\n            overflow: auto;\\n            line-height: 1.45;\\n            margin-bottom: 16px;\\n        }\\n        #markdown-content pre code {\\n            background-color: transparent;\\n            padding: 0;\\n            border-radius: 0;\\n        }\\n        #markdown-content blockquote {\\n            border-left: 0.25em solid #dfe2e5;\\n            color: #6a737d;\\n            padding: 0 1em;\\n            margin: 0 0 16px 0;\\n        }\\n        #markdown-content table {\\n            border-collapse: collapse;\\n            width: 100%;\\n            margin-bottom: 16px;\\n            display: block;\\n            overflow: auto;\\n        }\\n        #markdown-content table th, \\n        #markdown-content table td {\\n            border: 1px solid #dfe2e5;\\n            padding: 6px 13px;\\n        }\\n        #markdown-content table tr {\\n            background-color: #fff;\\n            border-top: 1px solid #c6cbd1;\\n        }\\n        #markdown-content table tr:nth-child(2n) {\\n            background-color: #f6f8fa;\\n        }\\n    </style>\\n</head>\\n<body>\\n    <div id=\\\"sidebar\\\">\\n        <h2>Markdown Files</h2>\\n        <div id=\\\"file-tree\\\">Loading files...</div>\\n    </div>\\n    \\n    <div id=\\\"content\\\">\\n        <div id=\\\"markdown-content\\\">\\n            <h1>Markdown Viewer</h1>\\n            <p>Select a Markdown file from the sidebar to view its contents.</p>\\n        </div>\\n    </div>\\n\\n    <script>\\n        // Configuration\\n        const API_URL = 'data/file-system.json';\\n        \\n        // DOM Elements\\n        const fileTree = document.getElementById('file-tree');\\n        const markdownContent = document.getElementById('markdown-content');\\n        \\n        // Load and process file system\\n        async function loadFileSystem() {\\n            try {\\n                const response = await fetch(API_URL);\\n                const fileSystem = await response.json();\\n                renderFileTree(fileSystem);\\n            } catch (error) {\\n                console.error('Error loading file system:', error);\\n                fileTree.innerHTML = 'Error loading file system. Make sure to run generate_structure.py first.';\\n            }\\n        }\\n        \\n        // Render file tree\\n        function renderFileTree(node, depth = 0) {\\n            if (!node) return '';\\n            \\n            let html = '';\\n            \\n            // Only process directories and markdown files\\n            if (node.type === 'directory') {\\n                const hasMarkdownFiles = node.children && node.children.some(child => \\n                    child.type === 'file' && child.name.endsWith('.md')\\n                );\\n                \\n                if (!hasMarkdownFiles) return '';\\n                \\n                const isRoot = depth === 0;\\n                const isExpanded = isRoot;\\n                \\n                if (!isRoot) {\\n                    html += `<div class=\\\"directory${isExpanded ? ' expanded' : ''}\\\">\\n                        <div class=\\\"directory-name\\\" onclick=\\\"this.parentElement.classList.toggle('expanded')\\\">\\n                            ${node.name}/\\n                        </div>\\n                        <div class=\\\"directory-contents\\\">`;\\n                }\\n                \\n                // Process children\\n                if (node.children) {\\n                    node.children.forEach(child => {\\n                        html += renderFileTree(child, depth + 1);\\n                    });\\n                }\\n                \\n                if (!isRoot) {\\n                    html += `</div></div>`;\\n                }\\n            } else if (node.type === 'file' && node.name.endsWith('.md')) {\\n                html += `<div class=\\\"file-item\\\" data-path=\\\"${node.path}\\\">${node.name}</div>`;\\n            }\\n            \\n            if (depth === 0) {\\n                fileTree.innerHTML = html || 'No Markdown files found.';\\n                \\n                // Add click handlers to file items\\n                document.querySelectorAll('.file-item').forEach(item => {\\n                    item.addEventListener('click', () => loadMarkdownFile(item.getAttribute('data-path')));\\n                });\\n            }\\n            \\n            return html;\\n        }\\n        \\n        // Load and render markdown file\\n        async function loadMarkdownFile(filePath) {\\n            try {\\n                const response = await fetch(`/data/file-system.json`);\\n                const fileSystem = await response.json();\\n                \\n                // Find the file in the file system\\n                const pathSegments = filePath.split('/');\\n                let currentNode = fileSystem;\\n                \\n                for (const segment of pathSegments) {\\n                    if (!currentNode.children) break;\\n                    const found = currentNode.children.find(child => child.name === segment);\\n                    if (!found) break;\\n                    currentNode = found;\\n                }\\n                \\n                if (currentNode.type === 'file' && currentNode.content) {\\n                    // Render markdown\\n                    markdownContent.innerHTML = `\\n                        <div style=\\\"margin-bottom: 20px; color: #586069; font-size: 0.9em;\\\">\\n                            ${filePath}\\n                        </div>\\n                        <div id=\\\"markdown-rendered\\\">\\n                            ${marked.parse(currentNode.content)}\\n                        </div>\\n                    `;\\n                    \\n                    // Apply syntax highlighting\\n                    document.querySelectorAll('pre code').forEach((block) => {\\n                        hljs.highlightElement(block);\\n                    });\\n                    \\n                    // Update URL\\n                    window.history.pushState({}, '', `?file=${encodeURIComponent(filePath)}`);\\n                }\\n            } catch (error) {\\n                console.error('Error loading markdown file:', error);\\n                markdownContent.innerHTML = `\\n                    <div class=\\\"error\\\">\\n                        <h2>Error</h2>\\n                        <p>Could not load the selected file: ${error.message}</p>\\n                    </div>\\n                `;\\n            }\\n        }\\n        \\n        // Handle back/forward navigation\\n        window.addEventListener('popstate', () => {\\n            const urlParams = new URLSearchParams(window.location.search);\\n            const file = urlParams.get('file');\\n            if (file) {\\n                loadMarkdownFile(file);\\n            } else {\\n                markdownContent.innerHTML = `\\n                    <h1>Markdown Viewer</h1>\\n                    <p>Select a Markdown file from the sidebar to view its contents.</p>\\n                `;\\n            }\\n        });\\n        \\n        // Load initial file if specified in URL\\n        document.addEventListener('DOMContentLoaded', () => {\\n            const urlParams = new URLSearchParams(window.location.search);\\n            const file = urlParams.get('file');\\n            \\n            loadFileSystem().then(() => {\\n                if (file) {\\n                    // Find and click the file in the tree\\n                    const fileItem = document.querySelector(`.file-item[data-path=\\\"${file}\\\"]`);\\n                    if (fileItem) {\\n                        // Expand parent directories\\n                        let parent = fileItem.parentElement;\\n                        while (parent && parent.classList.contains('directory-contents')) {\\n                            const dir = parent.previousElementSibling;\\n                            if (dir && dir.classList.contains('directory-name')) {\\n                                dir.click(); // Toggle to expand\\n                            }\\n                            parent = parent.parentElement;\\n                        }\\n                        fileItem.click();\\n                    }\\n                }\\n            });\\n        });\\n    </script>\\n</body>\\n</html>\\n\"\n    },\n    {\n      \"name\": \"media-vault-admin.png\",\n      \"type\": \"file\",\n      \"path\": \"media-vault-admin.png\",\n      \"size\": 67062,\n      \"content\": \"[Binary file: media-vault-admin.png]\"\n    },\n    {\n      \"name\": \"package-lock.json\",\n      \"type\": \"file\",\n      \"path\": \"package-lock.json\",\n      \"size\": 46805,\n      \"content\": \"{\\n  \\\"name\\\": \\\"media-vault-explorer\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"lockfileVersion\\\": 3,\\n  \\\"requires\\\": true,\\n  \\\"packages\\\": {\\n    \\\"\\\": {\\n      \\\"name\\\": \\\"media-vault-explorer\\\",\\n      \\\"version\\\": \\\"1.0.0\\\",\\n      \\\"license\\\": \\\"ISC\\\",\\n      \\\"dependencies\\\": {\\n        \\\"cors\\\": \\\"^2.8.5\\\",\\n        \\\"express\\\": \\\"^4.21.2\\\",\\n        \\\"morgan\\\": \\\"^1.10.0\\\",\\n        \\\"path\\\": \\\"^0.12.7\\\"\\n      },\\n      \\\"devDependencies\\\": {\\n        \\\"nodemon\\\": \\\"^2.0.22\\\"\\n      }\\n    },\\n    \\\"node_modules/accepts\\\": {\\n      \\\"version\\\": \\\"1.3.8\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"mime-types\\\": \\\"~2.1.34\\\",\\n        \\\"negotiator\\\": \\\"0.6.3\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.6\\\"\\n      }\\n    },\\n    \\\"node_modules/anymatch\\\": {\\n      \\\"version\\\": \\\"3.1.3\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"ISC\\\",\\n      \\\"dependencies\\\": {\\n        \\\"normalize-path\\\": \\\"^3.0.0\\\",\\n        \\\"picomatch\\\": \\\"^2.0.4\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 8\\\"\\n      }\\n    },\\n    \\\"node_modules/array-flatten\\\": {\\n      \\\"version\\\": \\\"1.1.1\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==\\\",\\n      \\\"license\\\": \\\"MIT\\\"\\n    },\\n    \\\"node_modules/balanced-match\\\": {\\n      \\\"version\\\": \\\"1.0.2\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"MIT\\\"\\n    },\\n    \\\"node_modules/basic-auth\\\": {\\n      \\\"version\\\": \\\"2.0.1\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/basic-auth/-/basic-auth-2.0.1.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-NF+epuEdnUYVlGuhaxbbq+dvJttwLnGY+YixlXlME5KpQ5W3CnXA5cVTneY3SPbPDRkcjMbifrwmFYcClgOZeg==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"safe-buffer\\\": \\\"5.1.2\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.8\\\"\\n      }\\n    },\\n    \\\"node_modules/basic-auth/node_modules/safe-buffer\\\": {\\n      \\\"version\\\": \\\"5.1.2\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==\\\",\\n      \\\"license\\\": \\\"MIT\\\"\\n    },\\n    \\\"node_modules/binary-extensions\\\": {\\n      \\\"version\\\": \\\"2.3.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">=8\\\"\\n      },\\n      \\\"funding\\\": {\\n        \\\"url\\\": \\\"https://github.com/sponsors/sindresorhus\\\"\\n      }\\n    },\\n    \\\"node_modules/body-parser\\\": {\\n      \\\"version\\\": \\\"1.20.3\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"bytes\\\": \\\"3.1.2\\\",\\n        \\\"content-type\\\": \\\"~1.0.5\\\",\\n        \\\"debug\\\": \\\"2.6.9\\\",\\n        \\\"depd\\\": \\\"2.0.0\\\",\\n        \\\"destroy\\\": \\\"1.2.0\\\",\\n        \\\"http-errors\\\": \\\"2.0.0\\\",\\n        \\\"iconv-lite\\\": \\\"0.4.24\\\",\\n        \\\"on-finished\\\": \\\"2.4.1\\\",\\n        \\\"qs\\\": \\\"6.13.0\\\",\\n        \\\"raw-body\\\": \\\"2.5.2\\\",\\n        \\\"type-is\\\": \\\"~1.6.18\\\",\\n        \\\"unpipe\\\": \\\"1.0.0\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.8\\\",\\n        \\\"npm\\\": \\\"1.2.8000 || >= 1.4.16\\\"\\n      }\\n    },\\n    \\\"node_modules/brace-expansion\\\": {\\n      \\\"version\\\": \\\"1.1.11\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"balanced-match\\\": \\\"^1.0.0\\\",\\n        \\\"concat-map\\\": \\\"0.0.1\\\"\\n      }\\n    },\\n    \\\"node_modules/braces\\\": {\\n      \\\"version\\\": \\\"3.0.3\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/braces/-/braces-3.0.3.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"fill-range\\\": \\\"^7.1.1\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">=8\\\"\\n      }\\n    },\\n    \\\"node_modules/bytes\\\": {\\n      \\\"version\\\": \\\"3.1.2\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.8\\\"\\n      }\\n    },\\n    \\\"node_modules/call-bind-apply-helpers\\\": {\\n      \\\"version\\\": \\\"1.0.2\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"es-errors\\\": \\\"^1.3.0\\\",\\n        \\\"function-bind\\\": \\\"^1.1.2\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.4\\\"\\n      }\\n    },\\n    \\\"node_modules/call-bound\\\": {\\n      \\\"version\\\": \\\"1.0.4\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"call-bind-apply-helpers\\\": \\\"^1.0.2\\\",\\n        \\\"get-intrinsic\\\": \\\"^1.3.0\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.4\\\"\\n      },\\n      \\\"funding\\\": {\\n        \\\"url\\\": \\\"https://github.com/sponsors/ljharb\\\"\\n      }\\n    },\\n    \\\"node_modules/chokidar\\\": {\\n      \\\"version\\\": \\\"3.6.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"anymatch\\\": \\\"~3.1.2\\\",\\n        \\\"braces\\\": \\\"~3.0.2\\\",\\n        \\\"glob-parent\\\": \\\"~5.1.2\\\",\\n        \\\"is-binary-path\\\": \\\"~2.1.0\\\",\\n        \\\"is-glob\\\": \\\"~4.0.1\\\",\\n        \\\"normalize-path\\\": \\\"~3.0.0\\\",\\n        \\\"readdirp\\\": \\\"~3.6.0\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 8.10.0\\\"\\n      },\\n      \\\"funding\\\": {\\n        \\\"url\\\": \\\"https://paulmillr.com/funding/\\\"\\n      },\\n      \\\"optionalDependencies\\\": {\\n        \\\"fsevents\\\": \\\"~2.3.2\\\"\\n      }\\n    },\\n    \\\"node_modules/concat-map\\\": {\\n      \\\"version\\\": \\\"0.0.1\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"MIT\\\"\\n    },\\n    \\\"node_modules/content-disposition\\\": {\\n      \\\"version\\\": \\\"0.5.4\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"safe-buffer\\\": \\\"5.2.1\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.6\\\"\\n      }\\n    },\\n    \\\"node_modules/content-type\\\": {\\n      \\\"version\\\": \\\"1.0.5\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.6\\\"\\n      }\\n    },\\n    \\\"node_modules/cookie\\\": {\\n      \\\"version\\\": \\\"0.7.1\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.6\\\"\\n      }\\n    },\\n    \\\"node_modules/cookie-signature\\\": {\\n      \\\"version\\\": \\\"1.0.6\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==\\\",\\n      \\\"license\\\": \\\"MIT\\\"\\n    },\\n    \\\"node_modules/cors\\\": {\\n      \\\"version\\\": \\\"2.8.5\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/cors/-/cors-2.8.5.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"object-assign\\\": \\\"^4\\\",\\n        \\\"vary\\\": \\\"^1\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.10\\\"\\n      }\\n    },\\n    \\\"node_modules/debug\\\": {\\n      \\\"version\\\": \\\"2.6.9\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/debug/-/debug-2.6.9.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"ms\\\": \\\"2.0.0\\\"\\n      }\\n    },\\n    \\\"node_modules/depd\\\": {\\n      \\\"version\\\": \\\"2.0.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/depd/-/depd-2.0.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.8\\\"\\n      }\\n    },\\n    \\\"node_modules/destroy\\\": {\\n      \\\"version\\\": \\\"1.2.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.8\\\",\\n        \\\"npm\\\": \\\"1.2.8000 || >= 1.4.16\\\"\\n      }\\n    },\\n    \\\"node_modules/dunder-proto\\\": {\\n      \\\"version\\\": \\\"1.0.1\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"call-bind-apply-helpers\\\": \\\"^1.0.1\\\",\\n        \\\"es-errors\\\": \\\"^1.3.0\\\",\\n        \\\"gopd\\\": \\\"^1.2.0\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.4\\\"\\n      }\\n    },\\n    \\\"node_modules/ee-first\\\": {\\n      \\\"version\\\": \\\"1.1.1\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==\\\",\\n      \\\"license\\\": \\\"MIT\\\"\\n    },\\n    \\\"node_modules/encodeurl\\\": {\\n      \\\"version\\\": \\\"2.0.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.8\\\"\\n      }\\n    },\\n    \\\"node_modules/es-define-property\\\": {\\n      \\\"version\\\": \\\"1.0.1\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.4\\\"\\n      }\\n    },\\n    \\\"node_modules/es-errors\\\": {\\n      \\\"version\\\": \\\"1.3.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.4\\\"\\n      }\\n    },\\n    \\\"node_modules/es-object-atoms\\\": {\\n      \\\"version\\\": \\\"1.1.1\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"es-errors\\\": \\\"^1.3.0\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.4\\\"\\n      }\\n    },\\n    \\\"node_modules/escape-html\\\": {\\n      \\\"version\\\": \\\"1.0.3\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==\\\",\\n      \\\"license\\\": \\\"MIT\\\"\\n    },\\n    \\\"node_modules/etag\\\": {\\n      \\\"version\\\": \\\"1.8.1\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/etag/-/etag-1.8.1.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.6\\\"\\n      }\\n    },\\n    \\\"node_modules/express\\\": {\\n      \\\"version\\\": \\\"4.21.2\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/express/-/express-4.21.2.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"accepts\\\": \\\"~1.3.8\\\",\\n        \\\"array-flatten\\\": \\\"1.1.1\\\",\\n        \\\"body-parser\\\": \\\"1.20.3\\\",\\n        \\\"content-disposition\\\": \\\"0.5.4\\\",\\n        \\\"content-type\\\": \\\"~1.0.4\\\",\\n        \\\"cookie\\\": \\\"0.7.1\\\",\\n        \\\"cookie-signature\\\": \\\"1.0.6\\\",\\n        \\\"debug\\\": \\\"2.6.9\\\",\\n        \\\"depd\\\": \\\"2.0.0\\\",\\n        \\\"encodeurl\\\": \\\"~2.0.0\\\",\\n        \\\"escape-html\\\": \\\"~1.0.3\\\",\\n        \\\"etag\\\": \\\"~1.8.1\\\",\\n        \\\"finalhandler\\\": \\\"1.3.1\\\",\\n        \\\"fresh\\\": \\\"0.5.2\\\",\\n        \\\"http-errors\\\": \\\"2.0.0\\\",\\n        \\\"merge-descriptors\\\": \\\"1.0.3\\\",\\n        \\\"methods\\\": \\\"~1.1.2\\\",\\n        \\\"on-finished\\\": \\\"2.4.1\\\",\\n        \\\"parseurl\\\": \\\"~1.3.3\\\",\\n        \\\"path-to-regexp\\\": \\\"0.1.12\\\",\\n        \\\"proxy-addr\\\": \\\"~2.0.7\\\",\\n        \\\"qs\\\": \\\"6.13.0\\\",\\n        \\\"range-parser\\\": \\\"~1.2.1\\\",\\n        \\\"safe-buffer\\\": \\\"5.2.1\\\",\\n        \\\"send\\\": \\\"0.19.0\\\",\\n        \\\"serve-static\\\": \\\"1.16.2\\\",\\n        \\\"setprototypeof\\\": \\\"1.2.0\\\",\\n        \\\"statuses\\\": \\\"2.0.1\\\",\\n        \\\"type-is\\\": \\\"~1.6.18\\\",\\n        \\\"utils-merge\\\": \\\"1.0.1\\\",\\n        \\\"vary\\\": \\\"~1.1.2\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.10.0\\\"\\n      },\\n      \\\"funding\\\": {\\n        \\\"type\\\": \\\"opencollective\\\",\\n        \\\"url\\\": \\\"https://opencollective.com/express\\\"\\n      }\\n    },\\n    \\\"node_modules/fill-range\\\": {\\n      \\\"version\\\": \\\"7.1.1\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"to-regex-range\\\": \\\"^5.0.1\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">=8\\\"\\n      }\\n    },\\n    \\\"node_modules/finalhandler\\\": {\\n      \\\"version\\\": \\\"1.3.1\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"debug\\\": \\\"2.6.9\\\",\\n        \\\"encodeurl\\\": \\\"~2.0.0\\\",\\n        \\\"escape-html\\\": \\\"~1.0.3\\\",\\n        \\\"on-finished\\\": \\\"2.4.1\\\",\\n        \\\"parseurl\\\": \\\"~1.3.3\\\",\\n        \\\"statuses\\\": \\\"2.0.1\\\",\\n        \\\"unpipe\\\": \\\"~1.0.0\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.8\\\"\\n      }\\n    },\\n    \\\"node_modules/forwarded\\\": {\\n      \\\"version\\\": \\\"0.2.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.6\\\"\\n      }\\n    },\\n    \\\"node_modules/fresh\\\": {\\n      \\\"version\\\": \\\"0.5.2\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.6\\\"\\n      }\\n    },\\n    \\\"node_modules/fsevents\\\": {\\n      \\\"version\\\": \\\"2.3.3\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==\\\",\\n      \\\"dev\\\": true,\\n      \\\"hasInstallScript\\\": true,\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"optional\\\": true,\\n      \\\"os\\\": [\\n        \\\"darwin\\\"\\n      ],\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\"^8.16.0 || ^10.6.0 || >=11.0.0\\\"\\n      }\\n    },\\n    \\\"node_modules/function-bind\\\": {\\n      \\\"version\\\": \\\"1.1.2\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"funding\\\": {\\n        \\\"url\\\": \\\"https://github.com/sponsors/ljharb\\\"\\n      }\\n    },\\n    \\\"node_modules/get-intrinsic\\\": {\\n      \\\"version\\\": \\\"1.3.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"call-bind-apply-helpers\\\": \\\"^1.0.2\\\",\\n        \\\"es-define-property\\\": \\\"^1.0.1\\\",\\n        \\\"es-errors\\\": \\\"^1.3.0\\\",\\n        \\\"es-object-atoms\\\": \\\"^1.1.1\\\",\\n        \\\"function-bind\\\": \\\"^1.1.2\\\",\\n        \\\"get-proto\\\": \\\"^1.0.1\\\",\\n        \\\"gopd\\\": \\\"^1.2.0\\\",\\n        \\\"has-symbols\\\": \\\"^1.1.0\\\",\\n        \\\"hasown\\\": \\\"^2.0.2\\\",\\n        \\\"math-intrinsics\\\": \\\"^1.1.0\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.4\\\"\\n      },\\n      \\\"funding\\\": {\\n        \\\"url\\\": \\\"https://github.com/sponsors/ljharb\\\"\\n      }\\n    },\\n    \\\"node_modules/get-proto\\\": {\\n      \\\"version\\\": \\\"1.0.1\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"dunder-proto\\\": \\\"^1.0.1\\\",\\n        \\\"es-object-atoms\\\": \\\"^1.0.0\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.4\\\"\\n      }\\n    },\\n    \\\"node_modules/glob-parent\\\": {\\n      \\\"version\\\": \\\"5.1.2\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"ISC\\\",\\n      \\\"dependencies\\\": {\\n        \\\"is-glob\\\": \\\"^4.0.1\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 6\\\"\\n      }\\n    },\\n    \\\"node_modules/gopd\\\": {\\n      \\\"version\\\": \\\"1.2.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.4\\\"\\n      },\\n      \\\"funding\\\": {\\n        \\\"url\\\": \\\"https://github.com/sponsors/ljharb\\\"\\n      }\\n    },\\n    \\\"node_modules/has-flag\\\": {\\n      \\\"version\\\": \\\"3.0.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">=4\\\"\\n      }\\n    },\\n    \\\"node_modules/has-symbols\\\": {\\n      \\\"version\\\": \\\"1.1.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.4\\\"\\n      },\\n      \\\"funding\\\": {\\n        \\\"url\\\": \\\"https://github.com/sponsors/ljharb\\\"\\n      }\\n    },\\n    \\\"node_modules/hasown\\\": {\\n      \\\"version\\\": \\\"2.0.2\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"function-bind\\\": \\\"^1.1.2\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.4\\\"\\n      }\\n    },\\n    \\\"node_modules/http-errors\\\": {\\n      \\\"version\\\": \\\"2.0.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"depd\\\": \\\"2.0.0\\\",\\n        \\\"inherits\\\": \\\"2.0.4\\\",\\n        \\\"setprototypeof\\\": \\\"1.2.0\\\",\\n        \\\"statuses\\\": \\\"2.0.1\\\",\\n        \\\"toidentifier\\\": \\\"1.0.1\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.8\\\"\\n      }\\n    },\\n    \\\"node_modules/iconv-lite\\\": {\\n      \\\"version\\\": \\\"0.4.24\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"safer-buffer\\\": \\\">= 2.1.2 < 3\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">=0.10.0\\\"\\n      }\\n    },\\n    \\\"node_modules/ignore-by-default\\\": {\\n      \\\"version\\\": \\\"1.0.1\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"ISC\\\"\\n    },\\n    \\\"node_modules/inherits\\\": {\\n      \\\"version\\\": \\\"2.0.4\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==\\\",\\n      \\\"license\\\": \\\"ISC\\\"\\n    },\\n    \\\"node_modules/ipaddr.js\\\": {\\n      \\\"version\\\": \\\"1.9.1\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.10\\\"\\n      }\\n    },\\n    \\\"node_modules/is-binary-path\\\": {\\n      \\\"version\\\": \\\"2.1.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"binary-extensions\\\": \\\"^2.0.0\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">=8\\\"\\n      }\\n    },\\n    \\\"node_modules/is-extglob\\\": {\\n      \\\"version\\\": \\\"2.1.1\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">=0.10.0\\\"\\n      }\\n    },\\n    \\\"node_modules/is-glob\\\": {\\n      \\\"version\\\": \\\"4.0.3\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"is-extglob\\\": \\\"^2.1.1\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">=0.10.0\\\"\\n      }\\n    },\\n    \\\"node_modules/is-number\\\": {\\n      \\\"version\\\": \\\"7.0.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">=0.12.0\\\"\\n      }\\n    },\\n    \\\"node_modules/math-intrinsics\\\": {\\n      \\\"version\\\": \\\"1.1.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.4\\\"\\n      }\\n    },\\n    \\\"node_modules/media-typer\\\": {\\n      \\\"version\\\": \\\"0.3.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.6\\\"\\n      }\\n    },\\n    \\\"node_modules/merge-descriptors\\\": {\\n      \\\"version\\\": \\\"1.0.3\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"funding\\\": {\\n        \\\"url\\\": \\\"https://github.com/sponsors/sindresorhus\\\"\\n      }\\n    },\\n    \\\"node_modules/methods\\\": {\\n      \\\"version\\\": \\\"1.1.2\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/methods/-/methods-1.1.2.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.6\\\"\\n      }\\n    },\\n    \\\"node_modules/mime\\\": {\\n      \\\"version\\\": \\\"1.6.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/mime/-/mime-1.6.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"bin\\\": {\\n        \\\"mime\\\": \\\"cli.js\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">=4\\\"\\n      }\\n    },\\n    \\\"node_modules/mime-db\\\": {\\n      \\\"version\\\": \\\"1.52.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.6\\\"\\n      }\\n    },\\n    \\\"node_modules/mime-types\\\": {\\n      \\\"version\\\": \\\"2.1.35\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"mime-db\\\": \\\"1.52.0\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.6\\\"\\n      }\\n    },\\n    \\\"node_modules/minimatch\\\": {\\n      \\\"version\\\": \\\"3.1.2\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"ISC\\\",\\n      \\\"dependencies\\\": {\\n        \\\"brace-expansion\\\": \\\"^1.1.7\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\"*\\\"\\n      }\\n    },\\n    \\\"node_modules/morgan\\\": {\\n      \\\"version\\\": \\\"1.10.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/morgan/-/morgan-1.10.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-AbegBVI4sh6El+1gNwvD5YIck7nSA36weD7xvIxG4in80j/UoK8AEGaWnnz8v1GxonMCltmlNs5ZKbGvl9b1XQ==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"basic-auth\\\": \\\"~2.0.1\\\",\\n        \\\"debug\\\": \\\"2.6.9\\\",\\n        \\\"depd\\\": \\\"~2.0.0\\\",\\n        \\\"on-finished\\\": \\\"~2.3.0\\\",\\n        \\\"on-headers\\\": \\\"~1.0.2\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.8.0\\\"\\n      }\\n    },\\n    \\\"node_modules/morgan/node_modules/on-finished\\\": {\\n      \\\"version\\\": \\\"2.3.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-ikqdkGAAyf/X/gPhXGvfgAytDZtDbr+bkNUJ0N9h5MI/dmdgCs3l6hoHrcUv41sRKew3jIwrp4qQDXiK99Utww==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"ee-first\\\": \\\"1.1.1\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.8\\\"\\n      }\\n    },\\n    \\\"node_modules/ms\\\": {\\n      \\\"version\\\": \\\"2.0.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/ms/-/ms-2.0.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==\\\",\\n      \\\"license\\\": \\\"MIT\\\"\\n    },\\n    \\\"node_modules/negotiator\\\": {\\n      \\\"version\\\": \\\"0.6.3\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.6\\\"\\n      }\\n    },\\n    \\\"node_modules/nodemon\\\": {\\n      \\\"version\\\": \\\"2.0.22\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/nodemon/-/nodemon-2.0.22.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-B8YqaKMmyuCO7BowF1Z1/mkPqLk6cs/l63Ojtd6otKjMx47Dq1utxfRxcavH1I7VSaL8n5BUaoutadnsX3AAVQ==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"chokidar\\\": \\\"^3.5.2\\\",\\n        \\\"debug\\\": \\\"^3.2.7\\\",\\n        \\\"ignore-by-default\\\": \\\"^1.0.1\\\",\\n        \\\"minimatch\\\": \\\"^3.1.2\\\",\\n        \\\"pstree.remy\\\": \\\"^1.1.8\\\",\\n        \\\"semver\\\": \\\"^5.7.1\\\",\\n        \\\"simple-update-notifier\\\": \\\"^1.0.7\\\",\\n        \\\"supports-color\\\": \\\"^5.5.0\\\",\\n        \\\"touch\\\": \\\"^3.1.0\\\",\\n        \\\"undefsafe\\\": \\\"^2.0.5\\\"\\n      },\\n      \\\"bin\\\": {\\n        \\\"nodemon\\\": \\\"bin/nodemon.js\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">=8.10.0\\\"\\n      },\\n      \\\"funding\\\": {\\n        \\\"type\\\": \\\"opencollective\\\",\\n        \\\"url\\\": \\\"https://opencollective.com/nodemon\\\"\\n      }\\n    },\\n    \\\"node_modules/nodemon/node_modules/debug\\\": {\\n      \\\"version\\\": \\\"3.2.7\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/debug/-/debug-3.2.7.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"ms\\\": \\\"^2.1.1\\\"\\n      }\\n    },\\n    \\\"node_modules/nodemon/node_modules/ms\\\": {\\n      \\\"version\\\": \\\"2.1.3\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/ms/-/ms-2.1.3.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"MIT\\\"\\n    },\\n    \\\"node_modules/normalize-path\\\": {\\n      \\\"version\\\": \\\"3.0.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">=0.10.0\\\"\\n      }\\n    },\\n    \\\"node_modules/object-assign\\\": {\\n      \\\"version\\\": \\\"4.1.1\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">=0.10.0\\\"\\n      }\\n    },\\n    \\\"node_modules/object-inspect\\\": {\\n      \\\"version\\\": \\\"1.13.4\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.4\\\"\\n      },\\n      \\\"funding\\\": {\\n        \\\"url\\\": \\\"https://github.com/sponsors/ljharb\\\"\\n      }\\n    },\\n    \\\"node_modules/on-finished\\\": {\\n      \\\"version\\\": \\\"2.4.1\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"ee-first\\\": \\\"1.1.1\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.8\\\"\\n      }\\n    },\\n    \\\"node_modules/on-headers\\\": {\\n      \\\"version\\\": \\\"1.0.2\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/on-headers/-/on-headers-1.0.2.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.8\\\"\\n      }\\n    },\\n    \\\"node_modules/parseurl\\\": {\\n      \\\"version\\\": \\\"1.3.3\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.8\\\"\\n      }\\n    },\\n    \\\"node_modules/path\\\": {\\n      \\\"version\\\": \\\"0.12.7\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/path/-/path-0.12.7.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-aXXC6s+1w7otVF9UletFkFcDsJeO7lSZBPUQhtb5O0xJe8LtYhj/GxldoL09bBj9+ZmE2hNoHqQSFMN5fikh4Q==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"process\\\": \\\"^0.11.1\\\",\\n        \\\"util\\\": \\\"^0.10.3\\\"\\n      }\\n    },\\n    \\\"node_modules/path-to-regexp\\\": {\\n      \\\"version\\\": \\\"0.1.12\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==\\\",\\n      \\\"license\\\": \\\"MIT\\\"\\n    },\\n    \\\"node_modules/picomatch\\\": {\\n      \\\"version\\\": \\\"2.3.1\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">=8.6\\\"\\n      },\\n      \\\"funding\\\": {\\n        \\\"url\\\": \\\"https://github.com/sponsors/jonschlinkert\\\"\\n      }\\n    },\\n    \\\"node_modules/process\\\": {\\n      \\\"version\\\": \\\"0.11.10\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/process/-/process-0.11.10.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-cdGef/drWFoydD1JsMzuFf8100nZl+GT+yacc2bEced5f9Rjk4z+WtFUTBu9PhOi9j/jfmBPu0mMEY4wIdAF8A==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.6.0\\\"\\n      }\\n    },\\n    \\\"node_modules/proxy-addr\\\": {\\n      \\\"version\\\": \\\"2.0.7\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"forwarded\\\": \\\"0.2.0\\\",\\n        \\\"ipaddr.js\\\": \\\"1.9.1\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.10\\\"\\n      }\\n    },\\n    \\\"node_modules/pstree.remy\\\": {\\n      \\\"version\\\": \\\"1.1.8\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"MIT\\\"\\n    },\\n    \\\"node_modules/qs\\\": {\\n      \\\"version\\\": \\\"6.13.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/qs/-/qs-6.13.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==\\\",\\n      \\\"license\\\": \\\"BSD-3-Clause\\\",\\n      \\\"dependencies\\\": {\\n        \\\"side-channel\\\": \\\"^1.0.6\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">=0.6\\\"\\n      },\\n      \\\"funding\\\": {\\n        \\\"url\\\": \\\"https://github.com/sponsors/ljharb\\\"\\n      }\\n    },\\n    \\\"node_modules/range-parser\\\": {\\n      \\\"version\\\": \\\"1.2.1\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.6\\\"\\n      }\\n    },\\n    \\\"node_modules/raw-body\\\": {\\n      \\\"version\\\": \\\"2.5.2\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"bytes\\\": \\\"3.1.2\\\",\\n        \\\"http-errors\\\": \\\"2.0.0\\\",\\n        \\\"iconv-lite\\\": \\\"0.4.24\\\",\\n        \\\"unpipe\\\": \\\"1.0.0\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.8\\\"\\n      }\\n    },\\n    \\\"node_modules/readdirp\\\": {\\n      \\\"version\\\": \\\"3.6.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"picomatch\\\": \\\"^2.2.1\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">=8.10.0\\\"\\n      }\\n    },\\n    \\\"node_modules/safe-buffer\\\": {\\n      \\\"version\\\": \\\"5.2.1\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==\\\",\\n      \\\"funding\\\": [\\n        {\\n          \\\"type\\\": \\\"github\\\",\\n          \\\"url\\\": \\\"https://github.com/sponsors/feross\\\"\\n        },\\n        {\\n          \\\"type\\\": \\\"patreon\\\",\\n          \\\"url\\\": \\\"https://www.patreon.com/feross\\\"\\n        },\\n        {\\n          \\\"type\\\": \\\"consulting\\\",\\n          \\\"url\\\": \\\"https://feross.org/support\\\"\\n        }\\n      ],\\n      \\\"license\\\": \\\"MIT\\\"\\n    },\\n    \\\"node_modules/safer-buffer\\\": {\\n      \\\"version\\\": \\\"2.1.2\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==\\\",\\n      \\\"license\\\": \\\"MIT\\\"\\n    },\\n    \\\"node_modules/semver\\\": {\\n      \\\"version\\\": \\\"5.7.2\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/semver/-/semver-5.7.2.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"ISC\\\",\\n      \\\"bin\\\": {\\n        \\\"semver\\\": \\\"bin/semver\\\"\\n      }\\n    },\\n    \\\"node_modules/send\\\": {\\n      \\\"version\\\": \\\"0.19.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/send/-/send-0.19.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"debug\\\": \\\"2.6.9\\\",\\n        \\\"depd\\\": \\\"2.0.0\\\",\\n        \\\"destroy\\\": \\\"1.2.0\\\",\\n        \\\"encodeurl\\\": \\\"~1.0.2\\\",\\n        \\\"escape-html\\\": \\\"~1.0.3\\\",\\n        \\\"etag\\\": \\\"~1.8.1\\\",\\n        \\\"fresh\\\": \\\"0.5.2\\\",\\n        \\\"http-errors\\\": \\\"2.0.0\\\",\\n        \\\"mime\\\": \\\"1.6.0\\\",\\n        \\\"ms\\\": \\\"2.1.3\\\",\\n        \\\"on-finished\\\": \\\"2.4.1\\\",\\n        \\\"range-parser\\\": \\\"~1.2.1\\\",\\n        \\\"statuses\\\": \\\"2.0.1\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.8.0\\\"\\n      }\\n    },\\n    \\\"node_modules/send/node_modules/encodeurl\\\": {\\n      \\\"version\\\": \\\"1.0.2\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.8\\\"\\n      }\\n    },\\n    \\\"node_modules/send/node_modules/ms\\\": {\\n      \\\"version\\\": \\\"2.1.3\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/ms/-/ms-2.1.3.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==\\\",\\n      \\\"license\\\": \\\"MIT\\\"\\n    },\\n    \\\"node_modules/serve-static\\\": {\\n      \\\"version\\\": \\\"1.16.2\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"encodeurl\\\": \\\"~2.0.0\\\",\\n        \\\"escape-html\\\": \\\"~1.0.3\\\",\\n        \\\"parseurl\\\": \\\"~1.3.3\\\",\\n        \\\"send\\\": \\\"0.19.0\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.8.0\\\"\\n      }\\n    },\\n    \\\"node_modules/setprototypeof\\\": {\\n      \\\"version\\\": \\\"1.2.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==\\\",\\n      \\\"license\\\": \\\"ISC\\\"\\n    },\\n    \\\"node_modules/side-channel\\\": {\\n      \\\"version\\\": \\\"1.1.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"es-errors\\\": \\\"^1.3.0\\\",\\n        \\\"object-inspect\\\": \\\"^1.13.3\\\",\\n        \\\"side-channel-list\\\": \\\"^1.0.0\\\",\\n        \\\"side-channel-map\\\": \\\"^1.0.1\\\",\\n        \\\"side-channel-weakmap\\\": \\\"^1.0.2\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.4\\\"\\n      },\\n      \\\"funding\\\": {\\n        \\\"url\\\": \\\"https://github.com/sponsors/ljharb\\\"\\n      }\\n    },\\n    \\\"node_modules/side-channel-list\\\": {\\n      \\\"version\\\": \\\"1.0.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"es-errors\\\": \\\"^1.3.0\\\",\\n        \\\"object-inspect\\\": \\\"^1.13.3\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.4\\\"\\n      },\\n      \\\"funding\\\": {\\n        \\\"url\\\": \\\"https://github.com/sponsors/ljharb\\\"\\n      }\\n    },\\n    \\\"node_modules/side-channel-map\\\": {\\n      \\\"version\\\": \\\"1.0.1\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"call-bound\\\": \\\"^1.0.2\\\",\\n        \\\"es-errors\\\": \\\"^1.3.0\\\",\\n        \\\"get-intrinsic\\\": \\\"^1.2.5\\\",\\n        \\\"object-inspect\\\": \\\"^1.13.3\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.4\\\"\\n      },\\n      \\\"funding\\\": {\\n        \\\"url\\\": \\\"https://github.com/sponsors/ljharb\\\"\\n      }\\n    },\\n    \\\"node_modules/side-channel-weakmap\\\": {\\n      \\\"version\\\": \\\"1.0.2\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"call-bound\\\": \\\"^1.0.2\\\",\\n        \\\"es-errors\\\": \\\"^1.3.0\\\",\\n        \\\"get-intrinsic\\\": \\\"^1.2.5\\\",\\n        \\\"object-inspect\\\": \\\"^1.13.3\\\",\\n        \\\"side-channel-map\\\": \\\"^1.0.1\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.4\\\"\\n      },\\n      \\\"funding\\\": {\\n        \\\"url\\\": \\\"https://github.com/sponsors/ljharb\\\"\\n      }\\n    },\\n    \\\"node_modules/simple-update-notifier\\\": {\\n      \\\"version\\\": \\\"1.1.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-1.1.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-VpsrsJSUcJEseSbMHkrsrAVSdvVS5I96Qo1QAQ4FxQ9wXFcB+pjj7FB7/us9+GcgfW4ziHtYMc1J0PLczb55mg==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"semver\\\": \\\"~7.0.0\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">=8.10.0\\\"\\n      }\\n    },\\n    \\\"node_modules/simple-update-notifier/node_modules/semver\\\": {\\n      \\\"version\\\": \\\"7.0.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/semver/-/semver-7.0.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-+GB6zVA9LWh6zovYQLALHwv5rb2PHGlJi3lfiqIHxR0uuwCgefcOJc59v9fv1w8GbStwxuuqqAjI9NMAOOgq1A==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"ISC\\\",\\n      \\\"bin\\\": {\\n        \\\"semver\\\": \\\"bin/semver.js\\\"\\n      }\\n    },\\n    \\\"node_modules/statuses\\\": {\\n      \\\"version\\\": \\\"2.0.1\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.8\\\"\\n      }\\n    },\\n    \\\"node_modules/supports-color\\\": {\\n      \\\"version\\\": \\\"5.5.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"has-flag\\\": \\\"^3.0.0\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">=4\\\"\\n      }\\n    },\\n    \\\"node_modules/to-regex-range\\\": {\\n      \\\"version\\\": \\\"5.0.1\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"is-number\\\": \\\"^7.0.0\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">=8.0\\\"\\n      }\\n    },\\n    \\\"node_modules/toidentifier\\\": {\\n      \\\"version\\\": \\\"1.0.1\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">=0.6\\\"\\n      }\\n    },\\n    \\\"node_modules/touch\\\": {\\n      \\\"version\\\": \\\"3.1.1\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/touch/-/touch-3.1.1.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-r0eojU4bI8MnHr8c5bNo7lJDdI2qXlWWJk6a9EAFG7vbhTjElYhBVS3/miuE0uOuoLdb8Mc/rVfsmm6eo5o9GA==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"ISC\\\",\\n      \\\"bin\\\": {\\n        \\\"nodetouch\\\": \\\"bin/nodetouch.js\\\"\\n      }\\n    },\\n    \\\"node_modules/type-is\\\": {\\n      \\\"version\\\": \\\"1.6.18\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"media-typer\\\": \\\"0.3.0\\\",\\n        \\\"mime-types\\\": \\\"~2.1.24\\\"\\n      },\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.6\\\"\\n      }\\n    },\\n    \\\"node_modules/undefsafe\\\": {\\n      \\\"version\\\": \\\"2.0.5\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==\\\",\\n      \\\"dev\\\": true,\\n      \\\"license\\\": \\\"MIT\\\"\\n    },\\n    \\\"node_modules/unpipe\\\": {\\n      \\\"version\\\": \\\"1.0.0\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.8\\\"\\n      }\\n    },\\n    \\\"node_modules/util\\\": {\\n      \\\"version\\\": \\\"0.10.4\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/util/-/util-0.10.4.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-0Pm9hTQ3se5ll1XihRic3FDIku70C+iHUdT/W926rSgHV5QgXsYbKZN8MSC3tJtSkhuROzvsQjAaFENRXr+19A==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"dependencies\\\": {\\n        \\\"inherits\\\": \\\"2.0.3\\\"\\n      }\\n    },\\n    \\\"node_modules/util/node_modules/inherits\\\": {\\n      \\\"version\\\": \\\"2.0.3\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-x00IRNXNy63jwGkJmzPigoySHbaqpNuzKbBOmzK+g2OdZpQ9w+sxCN+VSB3ja7IAge2OP2qpfxTjeNcyjmW1uw==\\\",\\n      \\\"license\\\": \\\"ISC\\\"\\n    },\\n    \\\"node_modules/utils-merge\\\": {\\n      \\\"version\\\": \\\"1.0.1\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.4.0\\\"\\n      }\\n    },\\n    \\\"node_modules/vary\\\": {\\n      \\\"version\\\": \\\"1.1.2\\\",\\n      \\\"resolved\\\": \\\"https://registry.npmjs.org/vary/-/vary-1.1.2.tgz\\\",\\n      \\\"integrity\\\": \\\"sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==\\\",\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"engines\\\": {\\n        \\\"node\\\": \\\">= 0.8\\\"\\n      }\\n    }\\n  }\\n}\\n\"\n    },\n    {\n      \"name\": \"package.json\",\n      \"type\": \"file\",\n      \"path\": \"package.json\",\n      \"size\": 753,\n      \"content\": \"{\\n  \\\"name\\\": \\\"media-vault-explorer\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"description\\\": \\\"Media Vault Project Explorer\\\",\\n  \\\"main\\\": \\\"server.js\\\",\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"node server.js\\\",\\n    \\\"dev\\\": \\\"nodemon server.js\\\"\\n  },\\n  \\\"dependencies\\\": {\\n    \\\"cors\\\": \\\"^2.8.5\\\",\\n    \\\"express\\\": \\\"^4.21.2\\\",\\n    \\\"morgan\\\": \\\"^1.10.0\\\",\\n    \\\"path\\\": \\\"^0.12.7\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"nodemon\\\": \\\"^2.0.22\\\"\\n  },\\n  \\\"directories\\\": {\\n    \\\"doc\\\": \\\"docs\\\",\\n    \\\"test\\\": \\\"tests\\\"\\n  },\\n  \\\"repository\\\": {\\n    \\\"type\\\": \\\"git\\\",\\n    \\\"url\\\": \\\"git+https://github.com/wronai/docker-platform.git\\\"\\n  },\\n  \\\"keywords\\\": [],\\n  \\\"author\\\": \\\"\\\",\\n  \\\"license\\\": \\\"ISC\\\",\\n  \\\"bugs\\\": {\\n    \\\"url\\\": \\\"https://github.com/wronai/docker-platform/issues\\\"\\n  },\\n  \\\"homepage\\\": \\\"https://github.com/wronai/docker-platform#readme\\\"\\n}\\n\"\n    },\n    {\n      \"name\": \"README-EXPLORER.md\",\n      \"type\": \"file\",\n      \"path\": \"README-EXPLORER.md\",\n      \"size\": 1125,\n      \"content\": \"# Media Vault Project Explorer\\n\\nA web-based file explorer for the Media Vault project that renders markdown files and displays project structure.\\n\\n## Features\\n\\n- Browse project files and directories\\n- View and render markdown files in real-time\\n- Syntax highlighting for code blocks\\n- Responsive design that works on desktop and mobile\\n- File size and modification date information\\n\\n## Getting Started\\n\\n1. Make sure you have Node.js installed (v14 or later)\\n2. Install the dependencies:\\n\\n```bash\\nnpm install\\n```\\n\\n3. Start the development server:\\n\\n```bash\\nnpm start\\n```\\n\\n4. Open your browser and navigate to:\\n\\n```\\nhttp://localhost:3000\\n```\\n\\n## Development\\n\\nFor development with auto-reload:\\n\\n```bash\\nnpm run dev\\n```\\n\\n## Security Notes\\n\\n- The server is configured to only serve files within the project directory\\n- File size is limited to 1MB for display\\n- Hidden files and node_modules are excluded from the file listing\\n\\n## Dependencies\\n\\n- Express.js - Web server framework\\n- Marked - Markdown parser\\n- Highlight.js - Syntax highlighting\\n- Bootstrap 5 - Styling\\n\\n## License\\n\\nThis project is part of the Media Vault platform.\\n\"\n    },\n    {\n      \"name\": \"README.md\",\n      \"type\": \"file\",\n      \"path\": \"README.md\",\n      \"size\": 19220,\n      \"content\": \"# 🔐 Media Vault - Complete Solution\\n\\n**Enterprise-grade secure media storage with AI analysis, role-based access, and comprehensive monitoring.**\\n\\n[![Version](https://img.shields.io/badge/version-1.0.0-blue.svg)](https://github.com/wronai/docker-platform)\\n[![License](https://img.shields.io/badge/license-Apache%202.0-green.svg)](LICENSE)\\n[![Docker](https://img.shields.io/badge/docker-ready-brightgreen.svg)](docker-compose.yml)\\n[![Documentation](https://img.shields.io/badge/docs-📘-blueviolet)](docs/README.md)\\n[![Project Status](https://img.shields.io/badge/status-active%20development-yellowgreen)](#project-status)\\n[![Contributing](https://img.shields.io/badge/contributions-welcome-brightgreen.svg)](CONTRIBUTING.md)\\n[![Go Report Card](https://goreportcard.com/badge/github.com/wronai/media-vault-backend)](https://goreportcard.com/report/github.com/wronai/media-vault-backend)\\n[![GitHub Issues](https://img.shields.io/github/issues/wronai/docker-platform)](https://github.com/wronai/docker-platform/issues)\\n[![GitHub Pull Requests](https://img.shields.io/github/issues-pr/wronai/docker-platform)](https://github.com/wronai/docker-platform/pulls)\\n\\n## 🚀 Quick Start\\n\\n### Prerequisites\\n- Docker 20.10+ and Docker Compose\\n- 4GB RAM minimum (8GB recommended)\\n- Ports 80, 443, 8080, 3000 available\\n\\n### Local Development Setup\\n1. Clone the repository:\\n   ```bash\\n   git clone https://github.com/wronai/docker-platform.git\\n   cd docker-platform\\n   ```\\n\\n2. Copy the example environment file and update as needed:\\n   ```bash\\n   cp .env.example .env\\n   ```\\n\\n3. Start the services:\\n   ```bash\\n   make up\\n   ```\\n\\n### Accessing Services\\n- **Web UI**: https://localhost\\n- **Admin Panel**: https://admin.localhost\\n- **Keycloak**: https://auth.localhost\\n- **Grafana**: http://localhost:3000\\n- **API Documentation**: http://localhost:8080/api/docs\\n\\n## 🛠 Service Management\\n\\n### Individual Service Control\\nYou can start, stop, and manage individual services using the following commands:\\n\\n#### Keycloak Services\\n```bash\\nmake keycloak       # Start Keycloak identity service (http://localhost:8080/admin)\\nmake keycloak-db    # Start Keycloak database\\n```\\n\\n#### Media Vault Services\\n```bash\\nmake media-vault-api         # Start Media Vault API\\nmake media-vault-analyzer    # Start AI Processing service\\nmake nsfw-analyzer          # Start NSFW content detection\\n```\\n\\n#### Frontend Services\\n```bash\\nmake flutter-web          # Start Flutter Web Frontend (http://localhost:3000)\\nmake media-vault-admin    # Start Admin Panel (http://localhost:3001)\\n```\\n\\n#### Infrastructure Services\\n```bash\\nmake caddy    # Start Caddy Reverse Proxy\\nmake redis    # Start Redis Cache\\n```\\n\\n### Common Operations\\n\\n#### Start All Services\\n```bash\\nmake up\\n```\\n\\n#### Stop All Services\\n```bash\\nmake down\\n```\\n\\n#### View Logs\\n```bash\\nmake logs\\n```\\n\\n#### Rebuild and Restart a Service\\n```bash\\ndocker-compose up -d --build <service-name>\\n```\\n\\n## ✨ Key Features\\n\\n### Core Features\\n- **Secure File Storage**: End-to-end encrypted media storage with AES-256 encryption\\n- **AI-Powered Analysis**: Automatic media tagging, face recognition, and content description\\n- **Role-Based Access Control**: Fine-grained permissions with support for custom roles\\n- **Real-time Collaboration**: Share and collaborate on media assets in real-time\\n- **Version Control**: Track changes and revert to previous versions of media files\\n\\n### Technical Highlights\\n- **Containerized Architecture**: Docker-based microservices for easy deployment\\n- **High Availability**: Built with scalability and fault tolerance in mind\\n- **Comprehensive API**: RESTful API with OpenAPI 3.0 documentation\\n- **Event-Driven**: Built on event sourcing for reliable operations\\n- **Multi-tenant**: Support for multiple organizations with data isolation\\n\\n### Monitoring & Analytics\\n- **Real-time Metrics**: Monitor system health and performance\\n- **Audit Logs**: Detailed logs of all system activities\\n- **Usage Analytics**: Track storage usage and user activity\\n- **Alerting**: Configure alerts for important system events\\n\\n## 🏗️ Architecture Overview\\n\\nMedia Vault is built on a modern microservices architecture:\\n\\n- **Frontend**: Flutter-based responsive web interface\\n- **Backend**: High-performance Go services\\n- **Authentication**: Keycloak for identity management\\n- **Database**: PostgreSQL for data persistence\\n- **Monitoring**: Prometheus, Grafana, and more\\n\\n## 👥 User Roles\\n\\n### End User\\n- Upload and manage personal media\\n- Generate AI descriptions\\n- Share media with others\\n- View personal analytics\\n\\n### Partner User\\n- All End User capabilities\\n- Access to shared partner content\\n- Team collaboration features\\n- Advanced analytics\\n\\n### Administrator\\n- System configuration\\n- User and role management\\n- System health monitoring\\n- Backup and recovery\\n\\n```bash\\nmake media-vault-admin\\n```\\nor\\n```bash\\ndocker-compose up -d --remove-orphans media-vault-admin\\n```\\n\\n![media-vault-admin.png](media-vault-admin.png)\\n\\n## 📂 Project Structure\\n\\n```\\ndocker-platform/\\n├── ansible/               # Infrastructure as Code\\n├── caddy/                 # Reverse proxy configuration\\n├── data/                  # Persistent data\\n├── deployment/            # Deployment configurations\\n├── docs/                  # Documentation\\n├── keycloak/             # Authentication service\\n│   ├── themes/           # Custom UI themes\\n│   └── import/           # Initial data import\\n└── scripts/              # Utility scripts\\n```\\n\\n## 🛠️ Configuration\\n\\n### Environment Variables\\nCopy the example environment file and update as needed:\\n```bash\\ncp .env.example .env\\n```\\n\\n### Docker Compose Files\\n- `docker-compose.yml` - Main services\\n- `docker-compose.monitoring.yml` - Monitoring stack\\n- `docker-compose.infrastructure.yml` - Infrastructure services\\n- `docker-compose.automation.yml` - Automation tools\\n\\n## 🔧 Development\\n\\n### Prerequisites\\n- Go 1.21+\\n- Node.js 18+\\n- Flutter 3.10+\\n- Docker & Docker Compose\\n\\n### Development Workflow\\n\\n1. **Start the development environment**\\n   ```bash\\n   make dev-up\\n   ```\\n\\n2. **Run tests**\\n   ```bash\\n   make test              # Unit tests\\n   make test-integration  # Integration tests\\n   make test-e2e          # End-to-end tests\\n   ```\\n\\n3. **View logs**\\n   ```bash\\n   make logs\\n   ```\\n\\n## 📚 Documentation\\n\\nComprehensive documentation is available in the `docs/` directory:\\n\\n- [📘 User Guide](docs/USER_GUIDE.md) - End-user documentation\\n- [🔧 Deployment Guide](docs/DEPLOYMENT.md) - Setup and configuration\\n- [🏗️ Architecture](docs/ARCHITECTURE.md) - System design and components\\n- [🔐 Security](docs/SECURITY.md) - Security best practices\\n- [📊 Monitoring](docs/MONITORING.md) - Observability and alerting\\n- [📝 API Reference](docs/API.md) - API documentation\\n\\n## 🤝 Contributing\\n\\nWe welcome contributions! Please see our [Contributing Guidelines](CONTRIBUTING.md) for details on how to contribute to this project.\\n\\n## 📄 License\\n\\nThis project is licensed under the Apache 2.0 License - see the [LICENSE](LICENSE) file for details.\\n\\n## 🙏 Acknowledgments\\n\\n- [Docker](https://www.docker.com/)\\n- [Keycloak](https://www.keycloak.org/)\\n- [Prometheus](https://prometheus.io/)\\n- [Grafana](https://grafana.com/)\\n- [Flutter](https://flutter.dev/)\\n\\n## 🏗️ Architecture Overview\\n\\nMedia Vault is built using a microservices architecture with the following components:\\n\\n### Core Services\\n- **Frontend**: Flutter-based web interface\\n- **API Gateway**: Request routing and authentication\\n- **Media Service**: File processing and storage\\n- **Metadata Service**: Media metadata management\\n- **AI Service**: Media analysis and description\\n- **Auth Service**: User authentication and authorization\\n\\n### Data Storage\\n- **PostgreSQL**: Relational data\\n- **Object Storage**: Media files\\n- **Redis**: Caching and sessions\\n\\n### Infrastructure\\n- **Docker & Docker Compose**: Containerization\\n- **Caddy**: Reverse proxy with automatic HTTPS\\n- **Keycloak**: Identity and access management\\n- **Monitoring**: Prometheus, Grafana, Loki\\n\\n## 🔧 Development\\n\\n### Prerequisites\\n- Go 1.21+\\n- Node.js 18+\\n- Docker & Docker Compose\\n\\n### Setup Development Environment\\n\\n1. **Start dependencies**\\n   ```bash\\n   make dev-deps\\n   ```\\n\\n2. **Run database migrations**\\n   ```bash\\n   make migrate\\n   ```\\n\\n3. **Start development servers**\\n   ```bash\\n   make dev\\n   ```\\n\\n## 🧪 Testing\\n\\nRun unit tests:\\n```bash\\nmake test\\n```\\n\\nRun integration tests:\\n```bash\\nmake test-integration\\n```\\n\\n## 📚 Documentation\\n\\n- [Architecture](./docs/ARCHITECTURE.md): System design and components\\n- [API Reference](./docs/API.md): Detailed API documentation\\n- [Deployment Guide](./docs/DEPLOYMENT.md): Production deployment instructions\\n- [User Guide](./docs/USER_GUIDE.md): End-user documentation\\n- [Security](./docs/SECURITY.md): Security best practices\\n\\n## 🤝 Contributing\\n\\nWe welcome contributions! Please see our [Contributing Guidelines](CONTRIBUTING.md) for details.\\n\\n## 📄 License\\n\\nThis project is licensed under the Apache 2.0 License - see the [LICENSE](LICENSE) file for details.\\n\\n## 🔑 Key Files\\n\\n### Backend Services\\n\\n#### Core Components\\n- [Main Backend Service](/media-vault-backend/) - Core API and business logic\\n  - [Dockerfile](/media-vault-backend/Dockerfile) - Backend service container definition\\n  - [go.mod](/media-vault-backend/go.mod) - Go module and dependencies\\n  - [main.go](/media-vault-backend/cmd/main.go) - Application entry point\\n\\n#### Internal Packages\\n- [internal/auth/](/media-vault-backend/internal/auth/) - Authentication and authorization\\n  - [roles.go](/media-vault-backend/internal/auth/roles.go) - Role definitions and permissions\\n  - [middleware.go](/media-vault-backend/internal/auth/middleware.go) - Authentication middleware\\n\\n- [internal/handlers/](/media-vault-backend/internal/handlers/) - HTTP request handlers\\n  - [vault.go](/media-vault-backend/internal/handlers/vault.go) - Media vault operations\\n  - [photos.go](/media-vault-backend/internal/handlers/photos.go) - Photo management\\n  - [upload.go](/media-vault-backend/internal/handlers/upload.go) - File upload handling\\n\\n- [internal/models/](/media-vault-backend/internal/models/) - Data models\\n  - [media.go](/media-vault-backend/internal/models/media.go) - Media file model\\n  - [description.go](/media-vault-backend/internal/models/description.go) - AI-generated descriptions\\n  - [photo.go](/media-vault-backend/internal/models/photo.go) - Photo metadata\\n\\n- [internal/services/](/media-vault-backend/internal/services/) - Business logic\\n  - [vault_service.go](/media-vault-backend/internal/services/vault_service.go) - Media vault operations\\n  - [photo_service.go](/media-vault-backend/internal/services/photo_service.go) - Photo processing\\n  - [sharing_service.go](/media-vault-backend/internal/services/sharing_service.go) - Media sharing logic\\n\\n### Configuration\\n- [docker-compose.yml](/docker-compose.yml) - Main Docker Compose configuration\\n- [.env.example](/.env.example) - Example environment configuration\\n- [Makefile](/Makefile) - Common development commands\\n- [scripts/](/scripts/) - Utility scripts for development and deployment\\n\\n### Development Workflow\\n\\n#### Prerequisites\\n- Docker and Docker Compose\\n- Go 1.21+\\n- Node.js 18+ (for frontend development)\\n\\n#### Common Tasks\\n\\n**Starting the development environment:**\\n```bash\\nmake dev-up\\n```\\n\\n**Running tests:**\\n```bash\\nmake test\\n```\\n\\n**Building the application:**\\n```bash\\nmake build\\n```\\n\\n**Viewing logs:**\\n```bash\\nmake logs\\n```\\n\\n#### Scripts\\n- [scripts/dev.sh](/scripts/dev.sh) - Development environment setup\\n- [scripts/test.sh](/scripts/test.sh) - Test runner\\n- [scripts/deploy.sh](/scripts/deploy.sh) - Deployment script\\n- [scripts/backup.sh](/scripts/backup.sh) - Database backup\\n\\n### Documentation\\n- [docs/](/docs/) - Comprehensive documentation\\n  - [API.md](/docs/API.md) - API reference\\n  - [ARCHITECTURE.md](/docs/ARCHITECTURE.md) - System architecture\\n  - [DEPLOYMENT.md](/docs/DEPLOYMENT.md) - Deployment guide\\n  - [SECURITY.md](/docs/SECURITY.md) - Security best practices\\n\\n## 🏗️ Architecture Overview\\n\\nMedia Vault is built on a modern microservices architecture:\\n\\n- **Frontend**: Flutter-based responsive web interface\\n- **Backend**: High-performance Go services\\n- **Authentication**: Keycloak for identity management\\n- **Database**: PostgreSQL for data persistence\\n- **Monitoring**: Prometheus, Grafana, and more\\n\\nFor a complete architecture deep dive, see the [Architecture Documentation](docs/ARCHITECTURE.md).\\n\\n## 📚 Documentation\\n\\nComprehensive documentation is available in the `docs/` directory:\\n\\n- [📘 User Guide](docs/USER_GUIDE.md) - End-user documentation\\n- [🔧 Deployment Guide](docs/DEPLOYMENT.md) - Setup and configuration\\n- [🏗️ Architecture](docs/ARCHITECTURE.md) - System design and components\\n- [🔐 Security](docs/SECURITY.md) - Security best practices\\n- [📊 Monitoring](docs/MONITORING.md) - Observability and alerting\\n- [📝 API Reference](docs/API.md) - API documentation\\n\\n## 🛠️ Configuration Files\\n\\n### Docker Compose Files\\n- [docker-compose.yml](docker-compose.yml) - Main services configuration\\n- [docker-compose.monitoring.yml](docker-compose.monitoring.yml) - Monitoring stack\\n- [docker-compose.infrastructure.yml](docker-compose.infrastructure.yml) - Infrastructure services\\n- [docker-compose.automation.yml](docker-compose.automation.yml) - Automation and CI/CD tools\\n\\n### Environment Configuration\\n- [.env.example](.env.example) - Example environment variables\\n- [.env](.env) - Your local environment configuration (create from .env.example)\\n\\n## 📂 Project Structure\\n\\n```\\ndocker-platform/\\n├── ansible/               # Infrastructure as Code\\n│   └── README.md\\n├── caddy/                 # Reverse proxy configuration\\n├── data/                  # Persistent data\\n├── deployment/            # Deployment configurations\\n├── docs/                  # Documentation\\n│   ├── API.md\\n│   ├── ARCHITECTURE.md\\n│   ├── DEPLOYMENT.md\\n│   ├── MONITORING.md\\n│   ├── README.md\\n│   ├── SECURITY.md\\n│   └── USER_GUIDE.md\\n├── keycloak/             # Authentication service\\n│   ├── themes/           # Custom UI themes\\n│   └── import/           # Initial data import\\n└── scripts/              # Utility scripts\\n```\\n\\n## 🔄 Development Workflow\\n\\n1. **Clone the repository**\\n   ```bash\\n   git clone https://github.com/wronai/docker-platform.git\\n   cd docker-platform\\n   ```\\n\\n2. **Set up environment**\\n   ```bash\\n   cp .env.example .env\\n   # Edit .env with your configuration\\n   ```\\n\\n3. **Start services**\\n   ```bash\\n   make up\\n   ```\\n\\n4. **Access applications**\\n   - Web UI: http://localhost:3000\\n   - API: http://localhost:8080\\n   - Monitoring: http://localhost:9090\\n   - Documentation: http://localhost:8080/docs\\n\\n## 🧪 Testing\\n\\n### Run Tests\\n```bash\\n# Run all tests\\nmake test\\n\\n# Run backend tests\\nmake test-backend\\n\\n# Run frontend tests\\nmake test-frontend\\n\\n# Run linters\\nmake lint\\n\\n# Check code coverage\\nmake coverage\\n```\\n\\n## 🤝 Contributing\\n\\nWe welcome contributions from the community! Here's how you can help:\\n\\n1. **Report Bugs**: File an issue on our [issue tracker](https://github.com/wronai/docker-platform/issues).\\n2. **Submit Fixes**: Fork the repository and submit a pull request.\\n3. **Improve Docs**: Help us enhance our documentation.\\n\\nPlease read our [Contributing Guide](CONTRIBUTING.md) for development setup and contribution guidelines.\\n\\n## 📄 License\\n\\nThis project is licensed under the Apache 2.0 License - see the [LICENSE](LICENSE) file for details.\\n\\n## 🙏 Acknowledgments\\n\\n- [Keycloak](https://www.keycloak.org/) for authentication\\n- [Docker](https://www.docker.com/) for containerization\\n- [Prometheus](https://prometheus.io/) and [Grafana](https://grafana.com/) for monitoring\\n- All our amazing contributors and users!\\n\\n---\\n\\n# Run linters\\nmake lint\\n\\n# Format code\\nmake format\\n\\n# Update dependencies\\nmake deps\\n```\\n\\n## 🧪 Testing\\n\\n### Running Tests\\n\\n```bash\\n# Run unit tests\\nmake test-unit\\n\\n# Run integration tests\\nmake test-integration\\n\\n# Run end-to-end tests\\nmake test-e2e\\n```\\n\\n### Test Coverage\\n\\n```bash\\n# Generate coverage report\\nmake coverage\\n\\n# View HTML coverage report\\nmake coverage-html\\n```\\n\\n## 📊 Monitoring\\n\\n### Access Monitoring Tools\\n\\n- **Grafana**: http://localhost:3000 (admin/admin)\\n- **Prometheus**: http://localhost:9090\\n- **Alertmanager**: http://localhost:9093\\n\\n### Key Metrics\\n\\n- API response times\\n- Error rates\\n- Resource usage\\n- User activity\\n- Storage utilization\\n\\n## 🔐 Authentication\\n\\n### Keycloak Setup\\n\\n1. Access Keycloak admin console: https://auth.localhost/admin\\n2. Log in with admin credentials\\n3. Import realm configuration from `keycloak/import/realm-export.json`\\n4. Configure identity providers and clients as needed\\n\\n![keycloak.png](keycloak.png)\\n```bash\\nadmin\\nadmin123\\n```\\n\\n### User Management\\n\\n- Create users in Keycloak admin console\\n- Assign roles and permissions\\n- Set up password policies\\n- Configure multi-factor authentication\\n\\n## 📚 Documentation\\n\\n### API Documentation\\n\\nAccess the interactive API documentation at:\\n- Swagger UI: https://localhost/api/docs\\n- OpenAPI Spec: https://localhost/api/docs.json\\n\\n### Additional Resources\\n\\n- [Developer Guide](docs/DEVELOPER_GUIDE.md)\\n- [API Reference](docs/API_REFERENCE.md)\\n- [Deployment Guide](docs/DEPLOYMENT.md)\\n- [Troubleshooting](docs/TROUBLESHOOTING.md)\\n\\n## 🤝 Contributing\\n\\n1. Fork the repository\\n2. Create a feature branch (`git checkout -b feature/AmazingFeature`)\\n3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)\\n4. Push to the branch (`git push origin feature/AmazingFeature`)\\n5. Open a Pull Request\\n\\n## 📄 License\\n\\nThis project is licensed under the Apache License 2.0 - see the [LICENSE](LICENSE) file for details.\\n\\n## 🙏 Acknowledgments\\n\\n- [Keycloak](https://www.keycloak.org/) for authentication\\n- [Fiber](https://gofiber.io/) for the Go web framework\\n- [Flutter](https://flutter.dev/) for the frontend\\n- [Prometheus](https://prometheus.io/) and [Grafana](https://grafana.com/) for monitoring\\n\\n## Author\\n\\n**Tom Sapletta** — DevOps Engineer & Systems Architect\\n\\n- 💻 15+ years in DevOps, Software Development, and Systems Architecture\\n- 🏢 Founder & CEO at Telemonit (Portigen - edge computing power solutions)\\n- 🌍 Based in Germany | Open to remote collaboration\\n- 📚 Passionate about edge computing, hypermodularization, and automated SDLC\\n\\n[![GitHub](https://img.shields.io/badge/GitHub-181717?logo=github&logoColor=white)](https://github.com/tom-sapletta-com)\\n[![LinkedIn](https://img.shields.io/badge/LinkedIn-0077B5?logo=linkedin&logoColor=white)](https://linkedin.com/in/tom-sapletta-com)\\n[![ORCID](https://img.shields.io/badge/ORCID-A6CE39?logo=orcid&logoColor=white)](https://orcid.org/0009-0000-6327-2810)\\n[![Portfolio](https://img.shields.io/badge/Portfolio-000000?style=flat&logo=about.me&logoColor=white)](https://www.digitname.com/)\\n\\n## Support This Project\\n\\nIf you find this project useful, please consider supporting it:\\n\\n- [GitHub Sponsors](https://github.com/sponsors/tom-sapletta-com)\\n- [Open Collective](https://opencollective.com/tom-sapletta-com)\\n- [PayPal](https://www.paypal.me/softreck/10.00)\\n\"\n    },\n    {\n      \"name\": \"setup-keycloak.sh\",\n      \"type\": \"file\",\n      \"path\": \"setup-keycloak.sh\",\n      \"size\": 4950,\n      \"content\": \"#!/bin/bash\\n\\n# Exit on error\\nset -e\\n\\n# Configuration\\nKEYCLOAK_URL=\\\"http://localhost:8082\\\"\\nADMIN_USER=\\\"admin\\\"\\nADMIN_PASSWORD=\\\"admin123\\\"\\nREALM=\\\"photovault\\\"\\nCLIENT_ID=\\\"photovault-client\\\"\\nCLIENT_SECRET=\\\"your-client-secret-here\\\"  # Change this in production\\nREDIRECT_URI=\\\"http://localhost:8000/*\\\"\\n\\n# Wait for Keycloak to be ready\\necho \\\"Waiting for Keycloak to be ready...\\\"\\nuntil $(curl --output /dev/null --silent --head --fail ${KEYCLOAK_URL}/auth/realms/master); do\\n    printf '.'\\n    sleep 5\\ndone\\necho \\\"\\\\nKeycloak is ready!\\\"\\n\\n# Get admin token\\nfunction get_admin_token {\\n    curl -s \\\\\\n        -d \\\"client_id=admin-cli\\\" \\\\\\n        -d \\\"username=${ADMIN_USER}\\\" \\\\\\n        -d \\\"password=${ADMIN_PASSWORD}\\\" \\\\\\n        -d \\\"grant_type=password\\\" \\\\\\n        \\\"${KEYCLOAK_URL}/realms/master/protocol/openid-connect/token\\\" | jq -r '.access_token'\\n}\\n\\n# Create realm\\nfunction create_realm {\\n    local token=$1\\n    \\n    echo \\\"Creating realm ${REALM}...\\\"\\n    curl -s -X POST \\\\\\n        -H \\\"Content-Type: application/json\\\" \\\\\\n        -H \\\"Authorization: Bearer ${token}\\\" \\\\\\n        -d \\\"{\\n            \\\\\\\"realm\\\\\\\": \\\\\\\"${REALM}\\\\\\\",\\n            \\\\\\\"enabled\\\\\\\": true,\\n            \\\\\\\"registrationAllowed\\\\\\\": true,\\n            \\\\\\\"registrationEmailAsUsername\\\\\\\": true,\\n            \\\\\\\"verifyEmail\\\\\\\": true,\\n            \\\\\\\"resetPasswordAllowed\\\\\\\": true,\\n            \\\\\\\"editUsernameAllowed\\\\\\\": false,\\n            \\\\\\\"loginWithEmailAllowed\\\\\\\": true,\\n            \\\\\\\"duplicateEmailsAllowed\\\\\\\": false,\\n            \\\\\\\"bruteForceProtected\\\\\\\": true\\n        }\\\" \\\\\\n        \\\"${KEYCLOAK_URL}/admin/realms\\\"\\n}\\n\\n# Create client\\nfunction create_client {\\n    local token=$1\\n    \\n    echo \\\"Creating client ${CLIENT_ID}...\\\"\\n    curl -s -X POST \\\\\\n        -H \\\"Content-Type: application/json\\\" \\\\\\n        -H \\\"Authorization: Bearer ${token}\\\" \\\\\\n        -d \\\"{\\n            \\\\\\\"clientId\\\\\\\": \\\\\\\"${CLIENT_ID}\\\\\\\",\\n            \\\\\\\"enabled\\\\\\\": true,\\n            \\\\\\\"publicClient\\\\\\\": false,\\n            \\\\\\\"redirectUris\\\\\\\": [\\\\\\\"${REDIRECT_URI}\\\\\\\"],\\n            \\\\\\\"webOrigins\\\\\\\": [\\\\\\\"*\\\\\\\"],\\n            \\\\\\\"standardFlowEnabled\\\\\\\": true,\\n            \\\\\\\"implicitFlowEnabled\\\\\\\": false,\\n            \\\\\\\"directAccessGrantsEnabled\\\\\\\": true,\\n            \\\\\\\"serviceAccountsEnabled\\\\\\\": true,\\n            \\\\\\\"authorizationServicesEnabled\\\\\\\": true,\\n            \\\\\\\"secret\\\\\\\": \\\\\\\"${CLIENT_SECRET}\\\\\\\",\\n            \\\\\\\"bearerOnly\\\\\\\": false,\\n            \\\\\\\"consentRequired\\\\\\\": false,\\n            \\\\\\\"fullScopeAllowed\\\\\\\": true\\n        }\\\" \\\\\\n        \\\"${KEYCLOAK_URL}/admin/realms/${REALM}/clients\\\"\\n}\\n\\n# Create roles\\nfunction create_roles {\\n    local token=$1\\n    \\n    local roles=(\\\"admin\\\" \\\"partner\\\" \\\"user\\\")\\n    \\n    for role in \\\"${roles[@]}\\\"; do\\n        echo \\\"Creating role ${role}...\\\"\\n        curl -s -X POST \\\\\\n            -H \\\"Content-Type: application/json\\\" \\\\\\n            -H \\\"Authorization: Bearer ${token}\\\" \\\\\\n            -d \\\"{\\\\\\\"name\\\\\\\": \\\\\\\"${role}\\\\\\\"}\\\" \\\\\\n            \\\"${KEYCLOAK_URL}/admin/realms/${REALM}/roles\\\"\\n    done\\n}\\n\\n# Create admin user\\nfunction create_admin_user {\\n    local token=$1\\n    local username=$2\\n    local password=$3\\n    \\n    echo \\\"Creating admin user ${username}...\\\"\\n    \\n    # Create user\\n    local user_id=$(curl -s -X POST \\\\\\n        -H \\\"Content-Type: application/json\\\" \\\\\\n        -H \\\"Authorization: Bearer ${token}\\\" \\\\\\n        -d \\\"{\\n            \\\\\\\"username\\\\\\\": \\\\\\\"${username}\\\\\\\",\\n            \\\\\\\"email\\\\\\\": \\\\\\\"${username}@example.com\\\\\\\",\\n            \\\\\\\"enabled\\\\\\\": true,\\n            \\\\\\\"emailVerified\\\\\\\": true,\\n            \\\\\\\"credentials\\\\\\\": [{\\n                \\\\\\\"type\\\\\\\": \\\\\\\"password\\\\\\\",\\n                \\\\\\\"value\\\\\\\": \\\\\\\"${password}\\\\\\\",\\n                \\\\\\\"temporary\\\\\\\": false\\n            }]\\n        }\\\" \\\\\\n        \\\"${KEYCLOAK_URL}/admin/realms/${REALM}/users\\\" \\\\\\n        -w \\\"%{http_code}\\\" -o /dev/null)\\n    \\n    # Get user ID\\n    local user_id=$(curl -s \\\\\\n        -H \\\"Authorization: Bearer ${token}\\\" \\\\\\n        \\\"${KEYCLOAK_URL}/admin/realms/${REALM}/users?username=${username}\\\" | jq -r '.[0].id')\\n    \\n    if [ \\\"$user_id\\\" == \\\"null\\\" ] || [ -z \\\"$user_id\\\" ]; then\\n        echo \\\"Failed to get user ID for ${username}\\\"\\n        return 1\\n    fi\\n    \\n    # Assign admin role\\n    curl -s -X POST \\\\\\n        -H \\\"Content-Type: application/json\\\" \\\\\\n        -H \\\"Authorization: Bearer ${token}\\\" \\\\\\n        -d '[{\\\"id\\\":\\\"admin\\\",\\\"name\\\":\\\"admin\\\"}]' \\\\\\n        \\\"${KEYCLOAK_URL}/admin/realms/${REALM}/users/${user_id}/role-mappings/realm\\\"\\n    \\n    echo \\\"Admin user created with ID: ${user_id}\\\"\\n}\\n\\n# Main execution\\necho \\\"Starting Keycloak setup...\\\"\\n\\n# Get admin token\\necho \\\"Getting admin token...\\\"\\nTOKEN=$(get_admin_token)\\n\\nif [ -z \\\"$TOKEN\\\" ] || [ \\\"$TOKEN\\\" == \\\"null\\\" ]; then\\n    echo \\\"Failed to get admin token. Check Keycloak credentials and URL.\\\"\\n    exit 1\\nfi\\n\\n# Create realm\\ncreate_realm \\\"$TOKEN\\\"\\n\\n# Create client\\ncreate_client \\\"$TOKEN\\\"\\n\\n# Create roles\\ncreate_roles \\\"$TOKEN\\\"\\n\\n# Create admin user\\ncreate_admin_user \\\"$TOKEN\\\" \\\"admin@photovault.com\\\" \\\"admin123\\\"\\n\\necho \\\"Keycloak setup completed successfully!\\\"\\necho \\\"Keycloak Admin URL: ${KEYCLOAK_URL}/admin\\\"\\necho \\\"Realm: ${REALM}\\\"\\necho \\\"Client ID: ${CLIENT_ID}\\\"\\necho \\\"Client Secret: ${CLIENT_SECRET}\\\"\\n\"\n    },\n    {\n      \"name\": \"src.txt\",\n      \"type\": \"file\",\n      \"path\": \"src.txt\",\n      \"size\": 8780,\n      \"content\": \"media-vault/\\n├── docker-compose.yml\\n├── docker-compose.monitoring.yml\\n├── docker-compose.infrastructure.yml\\n├── .env\\n├── Makefile\\n├── README.md\\n│\\n├── keycloak/\\n│   ├── keycloak-setup.json\\n│   ├── setup-keycloak.sh\\n│   └── update-env.sh\\n│\\n├── caddy/\\n│   ├── Caddyfile\\n│   └── Caddyfile.prod\\n│\\n├── monitoring/\\n│   ├── prometheus/\\n│   │   ├── prometheus.yml\\n│   │   └── rules/\\n│   │       ├── media-vault.yml\\n│   │       └── advanced-alerts.yml\\n│   ├── grafana/\\n│   │   ├── provisioning/\\n│   │   │   ├── dashboards/\\n│   │   │   │   └── dashboard.yml\\n│   │   │   └── datasources/\\n│   │   │       └── prometheus.yml\\n│   │   └── dashboards/\\n│   │       ├── infrastructure.json\\n│   │       ├── application.json\\n│   │       ├── security.json\\n│   │       └── business.json\\n│   ├── alertmanager/\\n│   │   └── alertmanager.yml\\n│   ├── loki/\\n│   │   └── loki.yml\\n│   └── promtail/\\n│       └── promtail.yml\\n│\\n├── media-vault-backend/\\n│   ├── Dockerfile\\n│   ├── go.mod\\n│   ├── go.sum\\n│   ├── cmd/\\n│   │   └── main.go\\n│   ├── internal/\\n│   │   ├── auth/\\n│   │   │   ├── keycloak.go\\n│   │   │   ├── middleware.go\\n│   │   │   └── roles.go\\n│   │   ├── handlers/\\n│   │   │   ├── vault.go\\n│   │   │   ├── admin.go\\n│   │   │   ├── partner.go\\n│   │   │   ├── upload.go\\n│   │   │   └── photos.go\\n│   │   ├── models/\\n│   │   │   ├── vault_file.go\\n│   │   │   ├── user.go\\n│   │   │   ├── photo.go\\n│   │   │   └── description.go\\n│   │   ├── services/\\n│   │   │   ├── vault_service.go\\n│   │   │   ├── photo_service.go\\n│   │   │   ├── description_service.go\\n│   │   │   └── sharing_service.go\\n│   │   ├── database/\\n│   │   │   ├── sqlite.go\\n│   │   │   └── migrations.go\\n│   │   └── utils/\\n│   │       ├── image_processing.go\\n│   │       ├── thumbnails.go\\n│   │       └── metadata.go\\n│   └── migrations/\\n│       ├── 001_initial.sql\\n│       ├── 002_photos.sql\\n│       └── 003_descriptions.sql\\n│\\n├── media-vault-analyzer/\\n│   ├── Dockerfile\\n│   ├── requirements.txt\\n│   ├── analyzer.py\\n│   ├── processors/\\n│   │   ├── image_analyzer.py\\n│   │   ├── description_generator.py\\n│   │   ├── nsfw_detector.py\\n│   │   └── metadata_extractor.py\\n│   └── models/\\n│       └── nsfw_model.h5\\n│\\n├── flutter_frontend/\\n│   ├── Dockerfile.web\\n│   ├── pubspec.yaml\\n│   ├── analysis_options.yaml\\n│   ├── web/\\n│   │   ├── index.html\\n│   │   ├── manifest.json\\n│   │   ├── favicon.png\\n│   │   └── icons/\\n│   │       ├── Icon-192.png\\n│   │       └── Icon-512.png\\n│   ├── lib/\\n│   │   ├── main.dart\\n│   │   ├── services/\\n│   │   │   ├── auth_service.dart\\n│   │   │   ├── media_vault_service.dart\\n│   │   │   ├── photo_service.dart\\n│   │   │   └── description_service.dart\\n│   │   ├── providers/\\n│   │   │   ├── vault_provider.dart\\n│   │   │   ├── photo_provider.dart\\n│   │   │   └── user_provider.dart\\n│   │   ├── models/\\n│   │   │   ├── vault_file.dart\\n│   │   │   ├── photo.dart\\n│   │   │   ├── user.dart\\n│   │   │   └── description.dart\\n│   │   ├── screens/\\n│   │   │   ├── login_screen.dart\\n│   │   │   ├── vault_home_screen.dart\\n│   │   │   ├── user/\\n│   │   │   │   ├── user_dashboard.dart\\n│   │   │   │   ├── photo_upload.dart\\n│   │   │   │   ├── photo_gallery.dart\\n│   │   │   │   ├── photo_detail.dart\\n│   │   │   │   └── description_editor.dart\\n│   │   │   ├── admin/\\n│   │   │   │   ├── admin_dashboard.dart\\n│   │   │   │   ├── user_management.dart\\n│   │   │   │   ├── system_stats.dart\\n│   │   │   │   ├── content_moderation.dart\\n│   │   │   │   └── security_logs.dart\\n│   │   │   └── partner/\\n│   │   │       ├── partner_dashboard.dart\\n│   │   │       ├── bulk_upload.dart\\n│   │   │       ├── photo_management.dart\\n│   │   │       ├── batch_editor.dart\\n│   │   │       ├── sharing_management.dart\\n│   │   │       └── analytics.dart\\n│   │   ├── widgets/\\n│   │   │   ├── photo_card.dart\\n│   │   │   ├── upload_zone.dart\\n│   │   │   ├── description_panel.dart\\n│   │   │   ├── sharing_dialog.dart\\n│   │   │   ├── bulk_operations.dart\\n│   │   │   └── role_guard.dart\\n│   │   └── utils/\\n│   │       ├── constants.dart\\n│   │       ├── theme.dart\\n│   │       ├── validators.dart\\n│   │       └── permissions.dart\\n│   └── assets/\\n│       ├── images/\\n│       │   ├── logo.png\\n│       │   └── placeholder.png\\n│       └── icons/\\n│           └── app_icon.png\\n│\\n├── media-vault-admin/\\n│   ├── Dockerfile\\n│   ├── nginx.conf\\n│   ├── src/\\n│   │   ├── index.html\\n│   │   ├── users.html\\n│   │   ├── system.html\\n│   │   ├── security.html\\n│   │   ├── js/\\n│   │   │   ├── vault-admin.js\\n│   │   │   ├── keycloak-admin.js\\n│   │   │   ├── user-management.js\\n│   │   │   ├── system-monitoring.js\\n│   │   │   └── charts.js\\n│   │   └── css/\\n│   │       ├── admin.css\\n│   │       └── dashboard.css\\n│   └── config/\\n│       └── admin-config.js\\n│\\n├── nsfw-analyzer/\\n│   ├── Dockerfile\\n│   ├── requirements.txt\\n│   ├── analyzer.py\\n│   ├── model_loader.py\\n│   └── models/\\n│       └── nsfw_mobilenet.h5\\n│\\n├── scripts/\\n│   ├── infrastructure-setup.sh\\n│   ├── infrastructure-health.sh\\n│   ├── performance-report.sh\\n│   ├── automation/\\n│   │   ├── incident-handler.sh\\n│   │   └── auto-scaling.sh\\n│   ├── capacity/\\n│   │   └── capacity_planner.py\\n│   ├── optimization/\\n│   │   └── optimize.sh\\n│   ├── backup/\\n│   │   ├── backup.sh\\n│   │   └── restore.sh\\n│   └── security/\\n│       ├── security-scan.sh\\n│       └── audit.sh\\n│\\n├── data/\\n│   ├── media.db\\n│   ├── backups/\\n│   └── logs/\\n│\\n├── uploads/\\n│   ├── originals/\\n│   ├── thumbnails/\\n│   └── processed/\\n│\\n├── processing/\\n│   ├── incoming/\\n│   └── temp/\\n│\\n├── docs/\\n│   ├── API.md\\n│   ├── DEPLOYMENT.md\\n│   ├── ARCHITECTURE.md\\n│   ├── MONITORING.md\\n│   ├── SECURITY.md\\n│   └── USER_GUIDE.md\\n│\\n├── tests/\\n│   ├── backend/\\n│   │   ├── auth_test.go\\n│   │   ├── handlers_test.go\\n│   │   └── services_test.go\\n│   ├── frontend/\\n│   │   └── test/\\n│   │       ├── widget_test.dart\\n│   │       └── integration_test.dart\\n│   └── e2e/\\n│       ├── user_flow_test.js\\n│       └── admin_flow_test.js\\n│\\n├── deployment/\\n│   ├── kubernetes/\\n│   │   ├── namespace.yaml\\n│   │   ├── configmap.yaml\\n│   │   ├── secrets.yaml\\n│   │   ├── deployments.yaml\\n│   │   ├── services.yaml\\n│   │   ├── ingress.yaml\\n│   │   └── monitoring.yaml\\n│   ├── helm/\\n│   │   ├── Chart.yaml\\n│   │   ├── values.yaml\\n│   │   ├── values-prod.yaml\\n│   │   └── templates/\\n│   └── terraform/\\n│       ├── main.tf\\n│       ├── variables.tf\\n│       └── outputs.tf\\n│\\n└── tools/\\n    ├── format.sh\\n    ├── lint.sh\\n    ├── test.sh\\n    ├── build.sh\\n    └── deploy.sh\"\n    },\n    {\n      \"name\": \"TODO.md\",\n      \"type\": \"file\",\n      \"path\": \"TODO.md\",\n      \"size\": 2165,\n      \"content\": \"# Media Vault - Project Status & TODO List\\n\\n## Current Status (2025-05-30)\\n\\n### ✅ Working Components\\n- Basic Docker Compose setup\\n- Keycloak database (PostgreSQL) is running\\n- Monitoring stack (Prometheus, Grafana, Alertmanager)\\n- Basic backend structure\\n\\n### ⚠️ Known Issues\\n1. Keycloak database connection issue - PostgreSQL driver not properly configured\\n2. Some monitoring services are restarting (cAdvisor, Alertmanager, Grafana)\\n3. Backend services not fully implemented\\n\\n## High Priority\\n- [ ] Fix Keycloak PostgreSQL configuration\\n  - [ ] Add PostgreSQL JDBC driver to Keycloak\\n  - [ ] Verify database connection settings\\n  - [ ] Test authentication flow\\n- [ ] Complete Keycloak authentication implementation\\n- [ ] Implement database migrations\\n- [ ] Set up proper logging and monitoring\\n- [ ] Complete API documentation\\n- [ ] Implement proper error handling and validation\\n\\n## Backend\\n- [ ] Complete authentication middleware\\n- [ ] Implement file storage service\\n- [ ] Add image processing capabilities\\n- [ ] Implement NSFW content detection\\n- [ ] Add API rate limiting\\n\\n## Frontend\\n- [ ] Set up Flutter web interface\\n- [ ] Create admin dashboard\\n- [ ] Implement file upload functionality\\n- [ ] Add user management interface\\n\\n## Infrastructure\\n- [ ] Fix monitoring stack issues\\n  - [ ] Resolve cAdvisor restart issues\\n  - [ ] Configure Grafana dashboards\\n  - [ ] Set up alerts in Alertmanager\\n- [ ] Set up CI/CD pipeline\\n- [ ] Configure production environment\\n- [ ] Implement backup strategy\\n\\n## Testing\\n- [ ] Write unit tests\\n- [ ] Implement integration tests\\n- [ ] Set up E2E testing\\n- [ ] Performance testing\\n\\n## Documentation\\n- [ ] Document Keycloak setup and configuration\\n- [ ] Complete API documentation\\n- [ ] Write deployment guide\\n- [ ] Create user manual\\n- [ ] Document security measures\\n\\n## Immediate Next Steps\\n1. Fix Keycloak PostgreSQL configuration\\n2. Resolve monitoring stack issues\\n3. Implement basic authentication flow\\n4. Set up initial database schema\\n\\n## Blockers\\n- Keycloak database connection needs to be resolved before proceeding with authentication\\n- Monitoring stack stability needs to be addressed for reliable operations\\n\"\n    }\n  ]\n}"
        },
        {
          "name": "media.db",
          "type": "file",
          "path": "data/media.db",
          "size": 0,
          "content": ""
        }
      ]
    },
    {
      "name": "deployment",
      "type": "directory",
      "path": "deployment",
      "children": [
        {
          "name": "helm",
          "type": "directory",
          "path": "deployment/helm",
          "children": [
            {
              "name": "Chart.yaml",
              "type": "file",
              "path": "deployment/helm/Chart.yaml",
              "size": 0,
              "content": ""
            },
            {
              "name": "values-prod.yaml",
              "type": "file",
              "path": "deployment/helm/values-prod.yaml",
              "size": 0,
              "content": ""
            },
            {
              "name": "values.yaml",
              "type": "file",
              "path": "deployment/helm/values.yaml",
              "size": 0,
              "content": ""
            }
          ]
        },
        {
          "name": "kubernetes",
          "type": "directory",
          "path": "deployment/kubernetes",
          "children": [
            {
              "name": "configmap.yaml",
              "type": "file",
              "path": "deployment/kubernetes/configmap.yaml",
              "size": 0,
              "content": ""
            },
            {
              "name": "deployments.yaml",
              "type": "file",
              "path": "deployment/kubernetes/deployments.yaml",
              "size": 0,
              "content": ""
            },
            {
              "name": "ingress.yaml",
              "type": "file",
              "path": "deployment/kubernetes/ingress.yaml",
              "size": 0,
              "content": ""
            },
            {
              "name": "monitoring.yaml",
              "type": "file",
              "path": "deployment/kubernetes/monitoring.yaml",
              "size": 0,
              "content": ""
            },
            {
              "name": "namespace.yaml",
              "type": "file",
              "path": "deployment/kubernetes/namespace.yaml",
              "size": 0,
              "content": ""
            },
            {
              "name": "secrets.yaml",
              "type": "file",
              "path": "deployment/kubernetes/secrets.yaml",
              "size": 0,
              "content": ""
            },
            {
              "name": "services.yaml",
              "type": "file",
              "path": "deployment/kubernetes/services.yaml",
              "size": 0,
              "content": ""
            }
          ]
        },
        {
          "name": "terraform",
          "type": "directory",
          "path": "deployment/terraform",
          "children": [
            {
              "name": "main.tf",
              "type": "file",
              "path": "deployment/terraform/main.tf",
              "size": 0,
              "content": ""
            },
            {
              "name": "outputs.tf",
              "type": "file",
              "path": "deployment/terraform/outputs.tf",
              "size": 0,
              "content": ""
            },
            {
              "name": "variables.tf",
              "type": "file",
              "path": "deployment/terraform/variables.tf",
              "size": 0,
              "content": ""
            }
          ]
        },
        {
          "name": "TODO.md",
          "type": "file",
          "path": "deployment/TODO.md",
          "size": 321,
          "content": "# Deployment - TODO\n\n## High Priority\n- [ ] Document deployment process\n- [ ] Create staging environment configuration\n- [ ] Set up CI/CD pipelines\n\n## Medium Priority\n- [ ] Add rollback procedures\n- [ ] Document environment variables\n- [ ] Create backup/restore procedures\n\n## Completed\n- [x] Initial deployment scripts\n"
        }
      ]
    },
    {
      "name": "docs",
      "type": "directory",
      "path": "docs",
      "children": [
        {
          "name": "API.md",
          "type": "file",
          "path": "docs/API.md",
          "size": 5818,
          "content": "# 📡 Media Vault API Documentation\n\nThis document provides comprehensive documentation for the Media Vault REST API, including endpoints, request/response formats, authentication, and usage examples.\n\n## 🔄 API Version\nCurrent version: `v1`\n\n## 🛠️ Getting Started\n\n### Base URL\nAll API endpoints are relative to the base URL:\n```\nhttps://api.yourdomain.com/v1\n```\n\nFor local development:\n```\nhttp://localhost:8080/api/v1\n```\n\n### Authentication\nAll API requests require authentication using JWT (JSON Web Tokens). Include the token in the `Authorization` header:\n\n```http\nAuthorization: Bearer your-jwt-token\n```\n\n### Request Headers\nInclude these headers with all requests:\n- `Content-Type: application/json`\n- `Accept: application/json`\n- `Authorization: Bearer <token>`\n\n## Table of Contents\n- [Authentication](#-authentication)\n- [Base URL](#-base-url)\n- [Response Format](#-response-format)\n- [Error Handling](#-error-handling)\n- [Endpoints](#-endpoints)\n  - [Authentication](#authentication-1)\n  - [Users](#users)\n  - [Media](#media)\n  - [Collections](#collections)\n  - [Sharing](#sharing)\n  - [Search](#search)\n- [Webhooks](#-webhooks)\n- [Rate Limiting](#-rate-limiting)\n- [Pagination](#-pagination)\n- [WebSocket API](#-websocket-api)\n\n## 🔑 Authentication\n\nAll API endpoints require authentication using JWT (JSON Web Tokens).\n\n### Obtaining a Token\n\n```http\nPOST /api/v1/auth/login\nContent-Type: application/json\n\n{\n  \"username\": \"user@example.com\",\n  \"password\": \"yourpassword\"\n}\n```\n\nResponse:\n```json\n{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"expires_in\": 3600,\n  \"token_type\": \"Bearer\"\n}\n```\n\n### Using the Token\n\nInclude the token in the `Authorization` header:\n```\nAuthorization: Bearer your.jwt.token.here\n```\n\n## 🌐 Base URL\n\nAll API endpoints are relative to the base URL:\n```\nhttps://api.your-mediavault-instance.com/api/v1\n```\n\n## 📦 Response Format\n\nAll successful API responses follow this format:\n\n```json\n{\n  \"success\": true,\n  \"data\": {\n    /* response data */\n  },\n  \"meta\": {\n    \"timestamp\": \"2023-05-30T10:00:00Z\",\n    \"version\": \"1.0.0\"\n  }\n}\n```\n\n## ❌ Error Handling\n\nError responses include an error code and message:\n\n```http\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\n\n{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"validation_error\",\n    \"message\": \"Invalid input data\",\n    \"details\": [\n      {\n        \"field\": \"email\",\n        \"message\": \"Must be a valid email address\"\n      }\n    ]\n  },\n  \"meta\": {\n    \"timestamp\": \"2023-05-30T10:00:00Z\",\n    \"request_id\": \"req_1234567890\"\n  }\n}\n```\n\n### Common Error Codes\n\n| Code | HTTP Status | Description |\n|------|-------------|-------------|\n| `unauthorized` | 401 | Invalid or missing authentication |\n| `forbidden` | 403 | Insufficient permissions |\n| `not_found` | 404 | Resource not found |\n| `validation_error` | 400 | Invalid input data |\n| `rate_limited` | 429 | Too many requests |\n| `internal_error` | 500 | Server error |\n\n## 📡 Endpoints\n\n### Authentication\n\n#### Login\n```http\nPOST /auth/login\n```\n\n#### Refresh Token\n```http\nPOST /auth/refresh\n```\n\n#### Logout\n```http\nPOST /auth/logout\n```\n\n### Users\n\n#### Get Current User\n```http\nGET /users/me\n```\n\n#### Update Profile\n```http\nPATCH /users/me\n```\n\n### Media\n\n#### Upload File\n```http\nPOST /media/upload\nContent-Type: multipart/form-data\n```\n\n#### Get Media Item\n```http\nGET /media/{id}\n```\n\n#### List Media\n```http\nGET /media\n```\n\n### Collections\n\n#### Create Collection\n```http\nPOST /collections\n```\n\n#### Add Media to Collection\n```http\nPOST /collections/{id}/media\n```\n\n## 🔔 Webhooks\n\nMedia Vault can send webhook notifications for various events:\n\n### Available Events\n- `media.uploaded`\n- `media.deleted`\n- `user.registered`\n- `collection.created`\n\n### Webhook Payload\n\n```json\n{\n  \"event\": \"media.uploaded\",\n  \"data\": {\n    \"id\": \"media_123\",\n    \"type\": \"image\",\n    \"user_id\": \"user_123\"\n  },\n  \"timestamp\": \"2023-05-30T10:00:00Z\"\n}\n```\n\n## ⚠️ Rate Limiting\n\n- **Anonymous**: 60 requests per minute\n- **Authenticated**: 1000 requests per minute\n- **API Key**: 5000 requests per minute\n\nHeaders:\n- `X-RateLimit-Limit`: Request limit per time window\n- `X-RateLimit-Remaining`: Remaining requests\n- `X-RateLimit-Reset`: Timestamp when the limit resets\n\n## 📑 Pagination\n\nList endpoints support pagination:\n\n```http\nGET /media?page=2&per_page=20\n```\n\nResponse includes pagination metadata:\n\n```json\n{\n  \"data\": [],\n  \"meta\": {\n    \"pagination\": {\n      \"total\": 150,\n      \"count\": 20,\n      \"per_page\": 20,\n      \"current_page\": 2,\n      \"total_pages\": 8,\n      \"links\": {\n        \"next\": \"/media?page=3\",\n        \"prev\": \"/media?page=1\"\n      }\n    }\n  }\n}\n```\n\n## 🌐 WebSocket API\n\nReal-time updates are available via WebSocket:\n\n```javascript\nconst socket = new WebSocket('wss://api.your-mediavault-instance.com/realtime');\n\n// Authenticate\nsocket.send(JSON.stringify({\n  type: 'auth',\n  token: 'your.jwt.token'\n}));\n\n// Subscribe to events\nsocket.send(JSON.stringify({\n  type: 'subscribe',\n  channel: 'media_updates',\n  resource_id: 'media_123'\n}));\n\n// Handle messages\nsocket.onmessage = (event) => {\n  console.log('Update:', JSON.parse(event.data));\n};\n```\n\n## 📚 SDKs\n\nOfficial SDKs are available for popular languages:\n\n- **JavaScript/TypeScript**: `npm install @mediavault/sdk`\n- **Python**: `pip install mediavault-sdk`\n- **Go**: `go get github.com/wronai/mediavault-go`\n\n## 📅 API Versioning\n\nThe API is versioned in the URL path (e.g., `/api/v1/...`). Breaking changes will result in a new version number.\n\n## 🔒 Security\n\n- All endpoints require HTTPS\n- JWT tokens expire after 1 hour\n- Password hashing with Argon2id\n- Rate limiting to prevent abuse\n- CORS restricted to trusted domains\n\n## 📝 Support\n\nFor API support, please contact api-support@wron.ai or open an issue on GitHub."
        },
        {
          "name": "ARCHITECTURE.md",
          "type": "file",
          "path": "docs/ARCHITECTURE.md",
          "size": 19962,
          "content": "# 🏗️ Media Vault - Architecture Reference\n\n## 🌐 System Architecture\n\nThis document provides a comprehensive overview of the Media Vault system architecture, including its components, data flow, user roles, and design decisions.\n\n## 👥 User Roles\n\n### 1. End User\n- **Permissions**:\n  - Upload and manage personal media\n  - View and edit own media metadata\n  - Share media with other users\n  - Generate AI descriptions for media\n  - View personal analytics\n\n### 2. Partner User\n- **Permissions**:\n  - All End User permissions\n  - Access to partner-specific media\n  - Manage media shared with partner organization\n  - View partner-level analytics\n\n### 3. Administrator\n- **Permissions**:\n  - All Partner User permissions\n  - Manage system users and roles\n  - Configure system settings\n  - Access system-wide analytics\n  - Perform system maintenance\n\n## 🔄 Key User Flows\n\n### 1. Media Upload Flow\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant F as Frontend\n    participant A as API\n    participant S as Storage\n    participant D as Database\n    participant K as Keycloak\n    \n    U->>F: Select files to upload\n    F->>K: Request auth token\n    K-->>F: Return JWT\n    F->>A: Upload files (with JWT)\n    A->>K: Validate token\n    A->>S: Store files\n    A->>D: Save metadata\n    A-->>F: Return success/error\n    F-->>U: Show upload status\n```\n\n### 2. Media Sharing Flow\n```mermaid\nsequenceDiagram\n    participant U as Owner\n    participant F as Frontend\n    participant A as API\n    participant D as Database\n    participant R as Recipient\n    \n    U->>F: Select media to share\n    F->>A: Request share (with permissions)\n    A->>D: Create share record\n    A-->>F: Share link/notification\n    F-->>U: Confirm share\n    A->>R: Send notification (email/in-app)\n    R->>F: Access shared media\n    F->>A: Validate access\n    A-->>F: Return media\n    F-->>R: Display shared media\n```\n\n## 🏗 System Components\n\n### 1. Frontend (Flutter Web)\n- Responsive web interface\n- Media upload and management\n- Real-time updates\n- Authentication flows\n\n### 2. Backend Services\n- **API Gateway**: Request routing and authentication\n- **Media Service**: File processing and storage\n- **Metadata Service**: Media metadata management\n- **AI Service**: Media analysis and description\n- **Sharing Service**: Access control and sharing\n\n### 3. Data Storage\n- **PostgreSQL**: Relational data\n- **Object Storage**: Media files\n- **Redis**: Caching and sessions\n\n### 4. Infrastructure\n- **Docker & Docker Compose**: Containerization\n- **Caddy**: Reverse proxy\n- **Keycloak**: Authentication/Authorization\n- **Monitoring Stack**: Prometheus, Grafana, Loki\n\n## 🚀 Deployment Architecture\n\n### Development Environment\n- Local Docker Compose setup\n- Hot-reload for development\n- Local database instances\n\n### Production Environment\n- Container orchestration (Kubernetes)\n- High availability\n- Automated backups\n- Monitoring and alerting\n\n## 🔄 Data Flow\n\n1. **Authentication**: User authenticates via Keycloak\n2. **Request Processing**: Caddy routes requests to appropriate service\n3. **Business Logic**: Backend services process requests\n4. **Data Persistence**: Data is stored in appropriate storage\n5. **Response**: Results are returned to the frontend\n\n## 🛡️ Security Considerations\n\n- All communications use HTTPS\n- JWT-based authentication\n- Role-based access control (RBAC)\n- Input validation and sanitization\n- Regular security audits\n\n## 📈 Scaling Strategy\n\n- Horizontal scaling for stateless services\n- Database read replicas\n- CDN for media delivery\n- Caching layer for frequent queries\n\n## 🔄 CI/CD Pipeline\n\n1. Code commit triggers build\n2. Run tests\n3. Build Docker images\n4. Deploy to staging\n5. Run integration tests\n6. Deploy to production\n\n## 📋 Compliance\n\n- GDPR compliance for user data\n- Data retention policies\n- Audit logging\n- Regular backups\n\n## 🔄 Error Handling\n\n- Centralized error logging\n- Graceful degradation\n- User-friendly error messages\n- Automatic retries for transient failures\n\n## 📚 API Documentation\n\nSee [API Documentation](./API.md) for detailed API specifications and examples.\n\n### High-Level Architecture\n\n```mermaid\ngraph TD\n    User[👤 User] --> Browser[🌐 Browser]\n    Browser --> Caddy[🔶 Caddy Proxy]\n    \n    %% Authentication Flow\n    Browser -.->|1. Login| Keycloak[🔐 Keycloak Auth]\n    Keycloak -.->|2. JWT Token| Browser\n    \n    %% Application Flow\n    Caddy -->|3. Serve UI| Flutter[🎨 Flutter Web]\n    Caddy -->|4. API Requests| VaultAPI[🔒 Media Vault API]\n    \n    %% Backend Services\n    VaultAPI -->|5. Validate| Keycloak\n    VaultAPI -->|6. Store/Retrieve| Database[(📊 PostgreSQL)]\n    VaultAPI -->|7. Process| Analyzer[🔍 Media Analyzer]\n    VaultAPI -->|8. Scan| NSFW[🤖 NSFW Detector]\n    \n    %% Storage\n    VaultAPI -->|9. Store Files| Storage[💾 Object Storage]\n    \n    %% Monitoring\n    subgraph \"📊 Monitoring\"\n        Prometheus[Prometheus]\n        Grafana[Grafana]\n        Loki[Loki]\n        Promtail[Promtail]\n    end\n    \n    VaultAPI -->|10. Metrics| Prometheus\n    Prometheus -->|11. Visualize| Grafana\n    VaultAPI -->|12. Logs| Loki\n    \n    %% Styling\n    classDef frontend fill:#e3f2fd,stroke:#1976d2\n    classDef backend fill:#4a148c,stroke:#7b1fa2,color:white\n    classDef auth fill:#fff3e0,stroke:#f57c00\n    classDef storage fill:#fff8e1,stroke:#f57c00\n    classDef monitoring fill:#e8f5e9,stroke:#388e3c\n    \n    class Flutter frontend\n    class VaultAPI,Analyzer,NSFW backend\n    class Keycloak auth\n    class Database,Storage storage\n    class Prometheus,Grafana,Loki,Promtail monitoring\n```\n\n## 🧱 Core Components\n\n### 1. Frontend (Flutter Web)\n- **Responsive UI**: Works on all devices\n- **Progressive Web App (PWA)**: Installable on desktop/mobile\n- **State Management**: Provider/Riverpod\n- **Theming**: Light/Dark mode support\n\n### 2. API Layer (Go + Fiber)\n- **RESTful API**: JSON-based endpoints\n- **Authentication**: JWT validation with Keycloak\n- **Rate Limiting**: Protect against abuse\n- **Request Validation**: Input sanitization\n- **Documentation**: OpenAPI/Swagger\n\n### 3. Authentication (Keycloak)\n- **Single Sign-On (SSO)**: Support for OAuth2/OIDC\n- **Multi-Factor Auth**: TOTP, WebAuthn\n- **User Federation**: LDAP, Active Directory\n- **Role-Based Access Control (RBAC)**: Fine-grained permissions\n\n### 4. Media Processing\n- **File Analysis**: Extract metadata\n- **Thumbnail Generation**: For images and videos\n- **Content Moderation**: NSFW detection\n- **Format Conversion**: Transcoding to web-friendly formats\n\n### 5. Storage\n- **Object Storage**: S3-compatible (MinIO)\n- **Encryption**: At-rest and in-transit\n- **Versioning**: File history and rollback\n- **Replication**: Cross-region replication for DR\n\n### 6. Monitoring & Observability\n- **Metrics**: Prometheus\n- **Visualization**: Grafana dashboards\n- **Logging**: Loki + Promtail\n- **Alerting**: Alertmanager\n\n## 🔄 Data Flow\n\n### File Upload Process\n1. User authenticates and gets JWT\n2. Client requests signed upload URL from API\n3. Client uploads file directly to storage\n4. API processes the file asynchronously\n5. Metadata is stored in database\n6. User receives upload confirmation\n\n### Authentication Flow\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant F as Frontend\n    participant K as Keycloak\n    participant A as API\n    \n    U->>F: Access app\n    F->>K: Redirect to login\n    U->>K: Enter credentials\n    K->>F: Return JWT\n    F->>A: Request with JWT\n    A->>K: Validate token\n    K->>A: Token info\n    A->>F: Protected data\n    F->>U: Render UI\n```\n\n## 🚀 Infrastructure Administration\n\nBelow is the detailed infrastructure stack that powers Media Vault:\n\n### 📊 Complete Infrastructure Stack\n\n```ascii\n                    🏗️ INFRASTRUCTURE OVERVIEW\n┌─────────────────────────────────────────────────────────────────────┐\n│                          MONITORING LAYER                          │\n│  ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐   │\n│  │  Prometheus │ │   Grafana   │ │AlertManager │ │   Jaeger    │   │\n│  │ :9090       │ │ :3333       │ │ :9093       │ │ :16686      │   │\n│  │ Metrics     │ │ Dashboards  │ │ Alerts      │ │ Tracing     │   │\n│  └─────────────┘ └─────────────┘ └─────────────┘ └─────────────┘   │\n└─────────────────────────────────────────────────────────────────────┘\n\n## 📊 Complete Infrastructure Stack\n\n```ascii\n                    🏗️ INFRASTRUCTURE OVERVIEW\n┌─────────────────────────────────────────────────────────────────────┐\n│                          MONITORING LAYER                          │\n│  ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐   │\n│  │  Prometheus │ │   Grafana   │ │AlertManager │ │   Jaeger    │   │\n│  │ :9090       │ │ :3333       │ │ :9093       │ │ :16686      │   │\n│  │ Metrics     │ │ Dashboards  │ │ Alerts      │ │ Tracing     │   │\n│  └─────────────┘ └─────────────┘ └─────────────┘ └─────────────┘   │\n└─────────────────────────────────────────────────────────────────────┘\n┌─────────────────────────────────────────────────────────────────────┐\n│                           LOGGING LAYER                            │\n│  ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐   │\n│  │    Loki     │ │  Promtail   │ │    ELK      │ │  FileBeat   │   │\n│  │ :3100       │ │ Log Ship    │ │ :5601       │ │ Log Ship    │   │\n│  │ Log Aggreg  │ │             │ │ Advanced    │ │             │   │\n│  └─────────────┘ └─────────────┘ └─────────────┘ └─────────────┘   │\n└─────────────────────────────────────────────────────────────────────┘\n┌─────────────────────────────────────────────────────────────────────┐\n│                         MANAGEMENT LAYER                           │\n│  ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐   │\n│  │  Portainer  │ │  pgAdmin    │ │Redis Cmd    │ │ Watchtower  │   │\n│  │ :9000       │ │ :5050       │ │ :8081       │ │ Auto Update │   │\n│  │ Docker Mgmt │ │ DB Admin    │ │ Redis Mgmt  │ │             │   │\n│  └─────────────┘ └─────────────┘ └─────────────┘ └─────────────┘   │\n└─────────────────────────────────────────────────────────────────────┘\n┌─────────────────────────────────────────────────────────────────────┐\n│                         SECURITY & BACKUP                          │\n│  ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐   │\n│  │   Traefik   │ │ Nginx Proxy │ │   Backup    │ │  Security   │   │\n│  │ :8080       │ │ :8181       │ │ Service     │ │ Scanner     │   │\n│  │ Load Bal    │ │ Proxy Mgmt  │ │ Automated   │ │ Trivy       │   │\n│  └─────────────┘ └─────────────┘ └─────────────┘ └─────────────┘   │\n└─────────────────────────────────────────────────────────────────────┘\n```\n\n## 🚀 Quick Start Commands\n\n### **Infrastructure Deployment:**\n```bash\n# Full infrastructure stack\nmake infrastructure\n\n# Basic monitoring only\nmake monitoring  \n\n# Everything (Vault + Infrastructure)\nmake full-stack\n\n# Specialized stacks\nmake infra-elk      # Elasticsearch + Kibana\nmake infra-traefik  # Traefik load balancer\nmake infra-nginx    # Nginx Proxy Manager\n```\n\n### **Management Commands:**\n```bash\n# Status and health\nmake infra-status   # Infrastructure status\nmake health-check   # Health check all services\nmake dev-logs       # Development logs\n\n# Performance and security\nmake load-test      # K6 performance testing\nmake security-scan  # Trivy vulnerability scan\nmake performance-report  # Generate report\n\n# Backup and maintenance\nmake backup-now     # Immediate backup\nmake cleanup-all    # Clean unused resources\n```\n\n## 📊 Monitoring & Observability\n\n### **Prometheus Metrics:**\n- ✅ **System metrics** (CPU, Memory, Disk, Network)\n- ✅ **Container metrics** (Docker stats via cAdvisor)\n- ✅ **Application metrics** (API response times, errors)\n- ✅ **Keycloak metrics** (authentication events)\n- ✅ **Custom alerts** (service down, high resource usage)\n\n### **Grafana Dashboards:**\n- 📊 **Infrastructure Overview** - System health\n- 📈 **Application Performance** - API metrics\n- 🔐 **Security Dashboard** - Auth events\n- 💾 **Storage Analytics** - Vault usage\n- 🐳 **Container Monitoring** - Docker stats\n\n### **Alert Definitions:**\n```yaml\nCritical Alerts:\n  - Service Down (> 1 min)\n  - Disk Space < 10%\n  - Memory Usage > 90%\n  - Failed Login Spike\n\nWarning Alerts:\n  - High CPU (> 80%, 5 min)\n  - Response Time > 2s\n  - Memory Usage > 85%\n```\n\n## 🏗️ Infrastructure Components\n\n### **Core Monitoring:**\n| Service | Port | Purpose | Dashboard |\n|---------|------|---------|-----------|\n| **Prometheus** | 9090 | Metrics collection | http://localhost:9090 |\n| **Grafana** | 3333 | Visualization | http://localhost:3333 |\n| **AlertManager** | 9093 | Alert management | http://localhost:9093 |\n| **Node Exporter** | 9100 | Host metrics | http://localhost:9100 |\n| **cAdvisor** | 8888 | Container metrics | http://localhost:8888 |\n\n### **Advanced Logging:**\n| Service | Port | Purpose | Dashboard |\n|---------|------|---------|-----------|\n| **Loki** | 3100 | Log aggregation | via Grafana |\n| **Promtail** | - | Log shipping | - |\n| **Elasticsearch** | 9200 | Search & analytics | http://localhost:9200 |\n| **Kibana** | 5601 | Log visualization | http://localhost:5601 |\n| **Jaeger** | 16686 | Distributed tracing | http://localhost:16686 |\n\n### **Management Tools:**\n| Service | Port | Purpose | Dashboard |\n|---------|------|---------|-----------|\n| **Portainer** | 9000 | Docker management | http://localhost:9000 |\n| **pgAdmin** | 5050 | PostgreSQL admin | http://localhost:5050 |\n| **Redis Commander** | 8081 | Redis management | http://localhost:8081 |\n| **Traefik** | 8080 | Load balancer | http://localhost:8080 |\n\n## 🔒 Security & Compliance\n\n### **Security Features:**\n- 🛡️ **Container scanning** with Trivy\n- 🔐 **Secret management** via Docker secrets\n- 🌐 **Network policies** and segmentation\n- 📝 **Audit logging** for all admin actions\n- 🚨 **Intrusion detection** alerts\n\n### **Backup Strategy:**\n- 📅 **Automated daily backups** at 2 AM\n- ☁️ **S3 upload** for off-site storage\n- 🔄 **30-day retention** policy\n- 🗜️ **Compressed archives** with encryption\n- ✅ **Backup verification** checks\n\n### **Production Security:**\n```yaml\nSecurity Headers:\n  - Strict-Transport-Security\n  - X-Content-Type-Options: nosniff\n  - X-Frame-Options: DENY\n  - Referrer-Policy: strict-origin\n\nRate Limiting:\n  - 100 requests/minute per IP\n  - Admin panel IP restriction\n  - API throttling enabled\n```\n\n## 📈 Performance Optimization\n\n### **Resource Monitoring:**\n- 📊 **Real-time dashboards** \n- ⚡ **Performance alerts**\n- 🎯 **SLA monitoring** (99.9% uptime)\n- 📉 **Trend analysis**\n\n### **Auto-scaling:**\n- 🔄 **HPA** for API services\n- 📈 **Load balancing** with Traefik\n- 🎛️ **Resource limits** per container\n- ⚖️ **Dynamic scaling** based on metrics\n\n### **Performance Testing:**\n```bash\n# K6 load testing\nmake load-test\n\n# Response time monitoring\ncurl -w \"@curl-format.txt\" http://localhost:8080/health\n\n# Resource usage\ndocker stats --format \"table {{.Name}}\\t{{.CPUPerc}}\\t{{.MemUsage}}\"\n```\n\n## 🚨 Incident Response\n\n### **Alert Channels:**\n- 📧 **Email notifications** to admin\n- 💬 **Slack integration** for team alerts\n- 📱 **PagerDuty** for critical issues\n- 📊 **Dashboard notifications**\n\n### **Runbooks:**\n1. **Service Down:**\n   ```bash\n   make health-check     # Identify failed service\n   docker-compose restart <service>\n   make dev-logs        # Check logs\n   ```\n\n2. **High Resource Usage:**\n   ```bash\n   make performance-report  # Generate report\n   docker stats            # Check current usage\n   make cleanup-all        # Clean resources\n   ```\n\n3. **Security Incident:**\n   ```bash\n   make security-scan      # Vulnerability check\n   docker-compose logs     # Review access logs\n   # Block suspicious IPs in Caddy/Traefik\n   ```\n\n## 🎛️ Administration Workflows\n\n### **Daily Operations:**\n- ✅ Check health dashboard\n- 📊 Review performance metrics\n- 🔍 Scan security alerts\n- 💾 Verify backup completion\n\n### **Weekly Tasks:**\n- 📈 Performance report review\n- 🛡️ Security scan execution\n- 🧹 Resource cleanup\n- 📋 Capacity planning review\n\n### **Monthly Maintenance:**\n- 🔄 Update container images\n- 📊 SLA report generation\n- 🗄️ Backup retention cleanup\n- 🔐 Security audit review\n\n## 💡 Pro Tips\n\n### **Optimization:**\n- Use **profiles** for different environments\n- Enable **automatic updates** with Watchtower\n- Set up **custom metrics** for business logic\n- Implement **circuit breakers** for resilience\n\n### **Troubleshooting:**\n- Always check **logs first**: `make dev-logs`\n- Use **health endpoints** for service status\n- Monitor **resource usage** trends\n- Keep **runbooks updated** for common issues\n\nThis infrastructure setup provides **enterprise-grade** monitoring, security, and management capabilities for Media Vault! 🚀"
        },
        {
          "name": "DEPLOYMENT.md",
          "type": "file",
          "path": "docs/DEPLOYMENT.md",
          "size": 4143,
          "content": "# 🚀 Deployment Guide\n\nThis guide provides detailed instructions for deploying the Media Vault platform in various environments.\n\n## Table of Contents\n- [Prerequisites](#-prerequisites)\n- [Quick Start](#-quick-start)\n- [Configuration](#-configuration)\n- [Environment Variables](#-environment-variables)\n- [Service Ports](#-service-ports)\n- [Scaling](#-scaling)\n- [Backup & Recovery](#-backup--recovery)\n- [Troubleshooting](#-troubleshooting)\n\n## 📋 Prerequisites\n\n### System Requirements\n- **Minimum**:\n  - 2 vCPUs\n  - 4GB RAM\n  - 20GB Storage\n- **Recommended**:\n  - 4+ vCPUs\n  - 8GB+ RAM\n  - 100GB+ Storage (SSD recommended)\n\n### Required Software\n- Docker 20.10+\n- Docker Compose 2.0+\n- Git\n- Make (optional but recommended)\n\n## 🚀 Quick Start\n\n### Local Development Setup\n\n1. **Clone the repository**:\n   ```bash\n   git clone https://github.com/wronai/docker-platform.git\n   cd docker-platform\n   ```\n\n2. **Set up environment**:\n   ```bash\n   cp .env.example .env\n   # Edit .env with your configuration\n   ```\n\n3. **Start the stack**:\n   ```bash\n   make up\n   ```\n   \n   Or for development mode:\n   ```bash\n   make dev\n   ```\n\n4. **Verify the installation**:\n   ```bash\n   make status\n   ```\n\n## 🔧 Configuration\n\n### Key Configuration Files\n\n| File | Description |\n|------|-------------|\n| `.env` | Main environment configuration |\n| `docker-compose.yml` | Core services definition |\n| `docker-compose.monitoring.yml` | Monitoring stack |\n| `caddy/Caddyfile` | Reverse proxy configuration |\n| `keycloak/import/realm-export.json` | Keycloak realm settings |\n\n### Environment Variables\n\nKey environment variables to configure:\n\n```bash\n# Application\nAPP_ENV=production\nAPP_SECRET=your-secret-key\nAPP_URL=https://your-domain.com\n\n# Database\nPOSTGRES_USER=mediavault\nPOSTGRES_PASSWORD=secure-password\nPOSTGRES_DB=mediavault\n\n# Keycloak\nKEYCLOAK_ADMIN=admin\nKEYCLOAK_ADMIN_PASSWORD=change-me\nKEYCLOAK_FRONTEND_URL=https://auth.your-domain.com\n\n# Storage\nSTORAGE_PATH=/data/media\nBACKUP_PATH=/data/backups\n```\n\n## 🔌 Service Ports\n\n| Service | Port | Protocol | Description |\n|---------|------|----------|-------------|\n| Web UI | 80/443 | HTTP/HTTPS | Main application interface |\n| Admin | 8081 | HTTPS | Admin dashboard |\n| Keycloak | 8080 | HTTPS | Authentication service |\n| Grafana | 3000 | HTTP | Monitoring dashboards |\n| Prometheus | 9090 | HTTP | Metrics collection |\n| Alertmanager | 9093 | HTTP | Alert management |\n| cAdvisor | 8081 | HTTP | Container metrics |\n| Node Exporter | 9100 | HTTP | Host metrics |\n\n## ⚖️ Scaling\n\n### Horizontal Scaling\n\nTo scale backend services:\n```bash\ndocker-compose up -d --scale backend=3\n```\n\n### Database Scaling\nFor production deployments, consider:\n- Setting up PostgreSQL replication\n- Using a managed database service\n- Implementing connection pooling with PgBouncer\n\n## 💾 Backup & Recovery\n\n### Automated Backups\n\n1. **Database Backups**:\n   ```bash\n   # Create a database backup\n   make backup-db\n   \n   # Restore from backup\n   make restore-db BACKUP_FILE=backup_20230530.sql\n   ```\n\n2. **Media Files**:\n   ```bash\n   # Backup media files\n   make backup-media\n   \n   # Restore media\n   make restore-media BACKUP_FILE=media_backup_20230530.tar.gz\n   ```\n\n### Disaster Recovery\n\n1. **Full System Backup**:\n   ```bash\n   make full-backup\n   ```\n\n2. **Restore from Backup**:\n   ```bash\n   make restore-backup BACKUP_FILE=full_backup_20230530.tar.gz\n   ```\n\n## 🐛 Troubleshooting\n\n### Common Issues\n\n1. **Port Conflicts**\n   - Check for running services: `sudo lsof -i -P -n | grep LISTEN`\n   - Update `docker-compose.yml` with available ports\n\n2. **Permission Issues**\n   ```bash\n   sudo chown -R $USER:$USER .\n   chmod -R 755 data/\n   ```\n\n3. **Service Not Starting**\n   ```bash\n   # Check logs\n   make logs service=backend\n   \n   # Restart services\n   make restart\n   ```\n\n### Getting Help\n\n- Check the [FAQ](docs/FAQ.md)\n- Search [GitHub Issues](https://github.com/wronai/docker-platform/issues)\n- Join our [community forum](#) (coming soon)\n\n## 📝 Next Steps\n\n- [Set up monitoring](MONITORING.md)\n- [Configure authentication](SECURITY.md)\n- [API Documentation](API.md)"
        },
        {
          "name": "MONITORING.md",
          "type": "file",
          "path": "docs/MONITORING.md",
          "size": 5849,
          "content": "# 📊 Monitoring & Observability Guide\n\nThis document provides a comprehensive guide to monitoring the Media Vault platform using the built-in observability stack.\n\n## Table of Contents\n- [Monitoring Stack](#-monitoring-stack)\n- [Accessing Dashboards](#-accessing-dashboards)\n- [Key Metrics](#-key-metrics)\n- [Alerting](#-alerting)\n- [Log Management](#-log-management)\n- [Performance Tuning](#-performance-tuning)\n- [Troubleshooting](#-troubleshooting)\n\n## 🛠️ Monitoring Stack\n\nMedia Vault uses a modern observability stack:\n\n```mermaid\ngraph TD\n    A[Prometheus] -->|Scrape Metrics| B[Node Exporter]\n    A -->|Scrape Metrics| C[cAdvisor]\n    A -->|Scrape Metrics| D[Application Metrics]\n    A -->|Send Alerts| E[Alertmanager]\n    E -->|Notifications| F[Email/Slack]\n    G[Grafana] -->|Query| A\n    G -->|Query| H[Loki]\n    I[Promtail] -->|Ship Logs| H\n    J[Applications] -->|Logs| I\n```\n\n### Components\n\n| Component | Description | Port |\n|-----------|-------------|------|\n| **Prometheus** | Metrics collection and storage | 9090 |\n| **Grafana** | Visualization and dashboards | 3000 |\n| **Alertmanager** | Alert routing and deduplication | 9093 |\n| **Node Exporter** | Host-level metrics | 9100 |\n| **cAdvisor** | Container metrics | 8080 |\n| **Loki** | Log aggregation | 3100 |\n| **Promtail** | Log shipping | - |\n\n\n## 🖥️ Accessing Dashboards\n\n### Grafana\n- **URL**: http://localhost:3000\n- **Default Credentials**:\n  - Username: `admin`\n  - Password: `admin` (change on first login)\n\n### Prometheus\n- **URL**: http://localhost:9090\n- **API**: http://localhost:9090/api/v1/query\n\n### Alertmanager\n- **URL**: http://localhost:9093\n\n## 📈 Key Metrics\n\n### Infrastructure Metrics\n- **CPU Usage**: `rate(node_cpu_seconds_total[5m])`\n- **Memory Usage**: `node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes`\n- **Disk I/O**: `rate(node_disk_read_bytes_total[5m])`\n- **Network Traffic**: `rate(node_network_receive_bytes_total[5m])`\n\n### Application Metrics\n- **Request Rate**: `rate(http_requests_total[5m])`\n- **Error Rate**: `rate(http_requests_total{status=~\"5..\"}[5m])`\n- **Request Duration**: `histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket[5m])) by (le))`\n- **Active Users**: `sum(up{job=~\"app.*\"})`\n\n### Database Metrics\n- **Active Connections**: `pg_stat_activity_count`\n- **Query Performance**: `rate(pg_stat_activity_queries_duration_seconds_sum[5m])`\n- **Cache Hit Ratio**: `sum(rate(pg_stat_database_blks_hit[5m])) / sum(rate(pg_stat_database_blks_hit[5m])) + sum(rate(pg_stat_database_blks_read[5m]))`\n\n## 🚨 Alerting\n\n### Critical Alerts\n\n| Alert | Description | Severity |\n|-------|-------------|----------|\n| HighErrorRate | Error rate > 5% | critical |\n| HighLatency | p95 latency > 1s | critical |\n| InstanceDown | Service down > 5m | critical |\n| DiskSpaceLow | < 10% free space | warning |\n| HighCPU | CPU > 90% for 5m | warning |\n\n### Alert Configuration\n\nAlert rules are defined in `monitoring/prometheus/alert.rules`:\n\n```yaml\ngroups:\n- name: instance\n  rules:\n  - alert: InstanceDown\n    expr: up == 0\n    for: 5m\n    labels:\n      severity: critical\n    annotations:\n      summary: \"Instance {{ $labels.instance }} down\"\n      description: \"{{ $labels.instance }} has been down for more than 5 minutes\"\n```\n\n### Notification Channels\n- Email\n- Slack\n- PagerDuty\n- Webhooks\n\n## 📝 Log Management\n\n### Log Collection\n- **Loki** aggregates logs from all services\n- **Promtail** ships logs to Loki\n- Structured logging in JSON format\n\n### Querying Logs\n\n```sql\n# Find errors in the last hour\n{job=~\"app.+\"} |= \"error\" | json | line_format \"{{.message}}\"\n\n# Slow requests\n{job=\"api\"} | json | duration > 1s\n\n# User activity\n{job=~\"app.+\"} | json | user_id!=\"\"\n```\n\n## ⚡ Performance Tuning\n\n### Prometheus Configuration\n\n```yaml\n# Increase retention period\nretention: 30d\n\n# Configure scrape intervals\nscrape_interval: 15s\nevaluation_interval: 15s\n\n# Enable remote write for long-term storage\nremote_write:\n  - url: http://remote-storage:8086/api/v1/push\n```\n\n### Resource Limits\n\n```yaml\n# docker-compose.override.yml\nservices:\n  prometheus:\n    deploy:\n      resources:\n        limits:\n          cpus: '2'\n          memory: 4G\n```\n\n## 🐛 Troubleshooting\n\n### Common Issues\n\n1. **No Data in Grafana**\n   - Check Prometheus targets: http://localhost:9090/targets\n   - Verify service discovery is working\n   - Check Prometheus logs: `docker-compose logs prometheus`\n\n2. **High Memory Usage**\n   - Increase memory limits\n   - Adjust retention periods\n   - Optimize queries\n\n3. **Alert Notifications Not Working**\n   - Check Alertmanager configuration\n   - Verify notification channels\n   - Check Alertmanager logs\n\n### Useful Commands\n\n```bash\n# Check Prometheus status\ncurl -s http://localhost:9090/-/healthy\n\n# Query metrics directly\ncurl 'http://localhost:9090/api/v1/query?query=up'\n\n# Check Promtail status\ncurl http://localhost:9080/metrics\n```\n\n## 🔄 Maintenance\n\n### Backup & Restore\n\n```bash\n# Backup Prometheus data\ndocker run --rm -v prometheus_data:/source -v $(pwd):/backup alpine tar czf /backup/prometheus_backup.tar.gz -C /source .\n\n# Restore\ndocker run --rm -v prometheus_data:/target -v $(pwd):/backup alpine sh -c \"cd /target && tar xzf /backup/prometheus_backup.tar.gz\"\n```\n\n### Upgrading\n\n1. Backup all data\n2. Check release notes for breaking changes\n3. Update configuration files\n4. Run migrations if needed\n5. Restart services\n\n## 📚 Additional Resources\n\n- [Prometheus Documentation](https://prometheus.io/docs/)\n- [Grafana Documentation](https://grafana.com/docs/)\n- [Loki Documentation](https://grafana.com/docs/loki/latest/)\n- [Alerting Best Practices](https://prometheus.io/docs/practices/alerting/)\n\nFor support, please contact the DevOps team or open an issue in our [GitHub repository](https://github.com/wronai/docker-platform/issues)."
        },
        {
          "name": "NEW_DEPLOYMENT.md",
          "type": "file",
          "path": "docs/NEW_DEPLOYMENT.md",
          "size": 5416,
          "content": "# 🚀 Media Vault Deployment Guide\n\nThis guide provides comprehensive instructions for deploying the Media Vault platform across different environments, from local development to production.\n\n## 📋 Table of Contents\n\n### Getting Started\n- [Prerequisites](#-prerequisites)\n- [Quick Start](#-quick-start)\n- [Configuration](#-configuration)\n\n### Deployment Types\n- [Local Development](#-local-development)\n- [Production Deployment](#-production-deployment)\n- [Kubernetes](#-kubernetes-deployment)\n\n### Configuration\n- [Environment Variables](#-environment-variables)\n- [Service Ports](#-service-ports)\n- [Storage Configuration](#-storage-configuration)\n- [Networking](#-networking)\n\n### Operations\n- [Scaling](#-scaling)\n- [Monitoring](#-monitoring)\n- [Backup & Recovery](#-backup--recovery)\n- [Upgrading](#-upgrading)\n- [Troubleshooting](#-troubleshooting)\n\n## 📋 Prerequisites\n\n### System Requirements\n\n#### Development Environment\n- **Minimum**:\n  - 2 vCPUs\n  - 4GB RAM\n  - 20GB available storage\n  - Docker 20.10+\n  - Docker Compose 2.0+\n  - Git\n  - Make (recommended)\n\n#### Production Environment\n- **Minimum**:\n  - 4 vCPUs\n  - 8GB RAM\n  - 100GB+ SSD storage\n  - Linux-based OS (Ubuntu 20.04 LTS recommended)\n  - Docker 20.10+ and Docker Compose 2.0+\n  - Domain name with valid SSL certificate\n\n#### Kubernetes (Optional)\n- Kubernetes 1.20+\n- Helm 3.0+\n- Ingress controller (Nginx, Traefik, etc.)\n- Persistent Volume provisioner\n\n## 🚀 Quick Start\n\n### Local Development Setup\n\n1. **Clone the repository**:\n   ```bash\n   git clone https://github.com/wronai/docker-platform.git\n   cd docker-platform\n   ```\n\n2. **Set up environment**:\n   ```bash\n   # Copy and edit the environment file\n   cp .env.example .env\n   \n   # Review and update configuration as needed\n   # - Set ADMIN_EMAIL and ADMIN_PASSWORD\n   # - Configure database credentials\n   # - Update hostnames if needed\n   ```\n\n3. **Build and start services**:\n   ```bash\n   # Pull latest images and build containers\n   make build\n   \n   # Start all services in detached mode\n   make up\n   \n   # View logs (optional)\n   make logs\n   ```\n\n4. **Verify the installation**:\n   ```bash\n   # Check running containers\n   docker-compose ps\n   \n   # Check service health\n   curl http://localhost:8080/health\n   ```\n\n5. **Access the application**:\n   - Web UI: https://localhost\n   - Admin Panel: https://admin.localhost\n   - API Documentation: http://localhost:8080/api/docs\n   - Keycloak Admin: https://auth.localhost\n\n## 🔧 Configuration\n\n### Key Configuration Files\n\n| File | Description |\n|------|-------------|\n| `.env` | Main environment configuration |\n| `docker-compose.yml` | Core services definition |\n| `docker-compose.monitoring.yml` | Monitoring stack |\n| `caddy/Caddyfile` | Reverse proxy configuration |\n| `keycloak/import/realm-export.json` | Keycloak realm settings |\n\n### Environment Variables\n\nKey environment variables to configure:\n\n```bash\n# Application\nAPP_ENV=production\nAPP_SECRET=your-secret-key\nAPP_URL=https://your-domain.com\n\n# Database\nPOSTGRES_USER=mediavault\nPOSTGRES_PASSWORD=secure-password\nPOSTGRES_DB=mediavault\n\n# Keycloak\nKEYCLOAK_ADMIN=admin\nKEYCLOAK_ADMIN_PASSWORD=change-me\nKEYCLOAK_FRONTEND_URL=https://auth.your-domain.com\n\n# Storage\nSTORAGE_PATH=/data/media\nBACKUP_PATH=/data/backups\n```\n\n## 🔌 Service Ports\n\n| Service | Port | Protocol | Description |\n|---------|------|----------|-------------|\n| Web UI | 80/443 | HTTP/HTTPS | Main application interface |\n| Admin | 8081 | HTTPS | Admin dashboard |\n| Keycloak | 8080 | HTTPS | Authentication service |\n| Grafana | 3000 | HTTP | Monitoring dashboards |\n| Prometheus | 9090 | HTTP | Metrics collection |\n| Alertmanager | 9093 | HTTP | Alert management |\n| cAdvisor | 8081 | HTTP | Container metrics |\n| Node Exporter | 9100 | HTTP | Host metrics |\n\n## ⚖️ Scaling\n\n### Horizontal Scaling\n\nTo scale backend services:\n```bash\ndocker-compose up -d --scale backend=3\n```\n\n### Database Scaling\nFor production deployments, consider:\n- Setting up PostgreSQL replication\n- Using a managed database service\n- Implementing connection pooling with PgBouncer\n\n## 💾 Backup & Recovery\n\n### Automated Backups\n\n1. **Database Backups**:\n   ```bash\n   # Create a database backup\n   make backup-db\n   \n   # Restore from backup\n   make restore-db BACKUP_FILE=backup_20230530.sql\n   ```\n\n2. **Media Files**:\n   ```bash\n   # Backup media files\n   make backup-media\n   \n   # Restore media\n   make restore-media BACKUP_FILE=media_backup_20230530.tar.gz\n   ```\n\n### Disaster Recovery\n\n1. **Full System Backup**:\n   ```bash\n   make full-backup\n   ```\n\n2. **Restore from Backup**:\n   ```bash\n   make restore-backup BACKUP_FILE=full_backup_20230530.tar.gz\n   ```\n\n## 🐛 Troubleshooting\n\n### Common Issues\n\n1. **Port Conflicts**\n   - Check for running services: `sudo lsof -i -P -n | grep LISTEN`\n   - Update `docker-compose.yml` with available ports\n\n2. **Permission Issues**\n   ```bash\n   sudo chown -R $USER:$USER .\n   chmod -R 755 data/\n   ```\n\n3. **Service Not Starting**\n   ```bash\n   # Check logs\n   make logs service=backend\n   \n   # Restart services\n   make restart\n   ```\n\n### Getting Help\n\n- Check the [FAQ](docs/FAQ.md)\n- Search [GitHub Issues](https://github.com/wronai/docker-platform/issues)\n- Join our [community forum](#) (coming soon)\n\n## 📝 Next Steps\n\n- [Set up monitoring](MONITORING.md)\n- [Configure authentication](SECURITY.md)\n- [API Documentation](API.md)\n"
        },
        {
          "name": "README.md",
          "type": "file",
          "path": "docs/README.md",
          "size": 21909,
          "content": "# 📚 Media Vault Documentation\n\nWelcome to the Media Vault documentation! This directory contains comprehensive guides and references for setting up, configuring, and maintaining your Media Vault instance.\n\n## 📋 Table of Contents\n\n### Getting Started\n- [Quick Start Guide](../README.md) - Get up and running in minutes\n- [Deployment Guide](DEPLOYMENT.md) - Detailed deployment instructions\n- [Architecture](ARCHITECTURE.md) - System design and components\n\n### User Guides\n- [User Guide](USER_GUIDE.md) - End-user documentation\n- [API Reference](API.md) - Complete API documentation\n- [Security Guide](SECURITY.md) - Security best practices\n\n### Administration\n- [Monitoring](MONITORING.md) - Observability and alerting\n- [Backup & Recovery](DEPLOYMENT.md#backup--recovery) - Data protection\n- [Troubleshooting](DEPLOYMENT.md#-troubleshooting) - Common issues and solutions\n\n## 🚀 Quick Links\n\n- [Main Repository](https://github.com/wronai/docker-platform)\n- [Issue Tracker](https://github.com/wronai/docker-platform/issues)\n- [Changelog](../CHANGELOG.md)\n- [Contributing Guide](../CONTRIBUTING.md)\n\n## 📂 Documentation Structure\n\n```\ndocs/\n├── API.md               # REST API reference and usage\n├── ARCHITECTURE.md      # System design and components\n├── DEPLOYMENT.md        # Installation and configuration\n├── MONITORING.md        # Monitoring and observability\n├── README.md            # This file\n├── SECURITY.md          # Security best practices\n└── USER_GUIDE.md        # End-user documentation\n```\n\n## 🛠️ Development\n\n### Prerequisites\n\n- Docker 20.10+\n- Docker Compose 2.0+\n- Make (optional but recommended)\n- Node.js 16+ (for frontend development)\n- Go 1.19+ (for backend development)\n\n### Local Development Setup\n\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/wronai/docker-platform.git\n   cd docker-platform\n   ```\n\n2. Set up environment variables:\n   ```bash\n   cp .env.example .env\n   # Edit .env with your configuration\n   ```\n\n3. Start the development environment:\n   ```bash\n   make dev\n   ```\n\n4. Access the applications:\n   - Web UI: http://localhost:3000\n   - API: http://localhost:8080\n   - Documentation: http://localhost:8080/docs\n   - Monitoring: http://localhost:9090\n\n## 🧪 Testing\n\n### Running Tests\n\n```bash\n# Run all tests\nmake test\n\n# Run backend tests\nmake test-backend\n\n# Run frontend tests\nmake test-frontend\n\n# Run integration tests\nmake test-integration\n```\n\n## 🔄 Maintenance\n\n### Database Migrations\n\n```bash\n# Create a new migration\nmake migration-create name=add_user_preferences\n\n# Run pending migrations\nmake migrate-up\n\n# Rollback last migration\nmake migrate-down\n```\n\n### Monitoring and Logs\n\n```bash\n# View application logs\nmake logs\n\n# View specific service logs\nmake logs service=backend\n\n# Access Prometheus metrics\nopen http://localhost:9090\n\n# Access Grafana dashboards\nopen http://localhost:3000\n```\n\n## 🤝 Contributing\n\nWe welcome contributions from the community! Here's how you can help:\n\n1. **Report Bugs**\n   - Search existing issues first\n   - Create a new issue with detailed reproduction steps\n\n2. **Submit Fixes**\n   - Fork the repository\n   - Create a feature branch\n   - Write tests for your changes\n   - Submit a pull request\n\n3. **Improve Documentation**\n   - Fix typos and clarify text\n   - Add examples or missing information\n   - Improve code comments\n\n### Code Style\n\n- **Backend (Go)**: `gofmt`, `golint`, `go vet`\n- **Frontend (TypeScript)**: ESLint, Prettier\n- **Commit Messages**: Follow [Conventional Commits](https://www.conventionalcommits.org/)\n\n## 📄 License\n\nThis project is licensed under the Apache 2.0 License - see the [LICENSE](../LICENSE) file for details.\n\n---\n\n<div align=\"center\">\n  <p>Need help? Contact us at <a href=\"mailto:support@wron.ai\">support@wron.ai</a></p>\n  <p>© 2023 WRON AI. All rights reserved.</p>\n</div>\n    Exporters-->>Prometheus: Forward metrics\n    Prometheus-->>Grafana: Return data\n    Grafana-->>Admin: Display dashboard\n```\n\n## 🔧 Getting Started\n\n### Prerequisites\n\n- Docker 20.10+ and Docker Compose\n- At least 4GB RAM (8GB recommended)\n- Ports 80, 443, 8080, 8443, 3000 available\n\n### Quick Start\n\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/wronai/docker-platform.git\n   cd docker-platform\n   ```\n\n2. Set up environment variables:\n   ```bash\n   cp .env.example .env\n   # Edit .env with your configuration\n   ```\n\n3. Start the stack:\n   ```bash\n   make up\n   ```\n\n4. Access the applications:\n   - Web UI: https://localhost\n   - Admin Panel: https://admin.localhost\n   - Keycloak: https://auth.localhost\n   - Grafana: http://localhost:3000\n\n## 🧪 Testing\n\n### Running Tests\n\n```bash\n# Run unit tests\nmake test-unit\n\n# Run integration tests\nmake test-integration\n\n# Run end-to-end tests\nmake test-e2e\n```\n\n### Test Coverage\n\n```bash\n# Generate test coverage report\nmake coverage\n\n# View coverage in browser\nmake coverage-html\n```\n\n## 📈 Monitoring\n\n### Access Monitoring Tools\n\n- **Grafana**: http://localhost:3000 (admin/admin)\n- **Prometheus**: http://localhost:9090\n- **Alertmanager**: http://localhost:9093\n\n### Key Metrics\n\n- API response times\n- Error rates\n- Resource usage\n- User activity\n- Storage utilization\n\n## 🛠️ Development\n\n### Project Structure\n\n```\ndocker-platform/\n├── media-vault-backend/    # Backend API service\n├── media-vault-analyzer/   # AI analysis service\n├── media-vault-admin/      # Admin dashboard\n├── flutter-web/           # Frontend application\n├── keycloak/              # Keycloak configuration\n├── monitoring/            # Monitoring stack\n├── docker-compose.yml     # Main compose file\n└── Makefile              # Development commands\n```\n\n### Development Workflow\n\n1. Start development environment:\n   ```bash\n   make dev\n   ```\n\n2. Run services in watch mode:\n   ```bash\n   # Backend\n   make watch-backend\n   \n   # Frontend\n   make watch-frontend\n   ```\n\n3. Run linters and formatters:\n   ```bash\n   make lint\n   make format\n   ```\n\n4. Check for security issues:\n   ```bash\n   make security-scan\n   ```\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## 📄 License\n\nThis project is licensed under the Apache 2.0 License - see the [LICENSE](LICENSE) file for details.\n\n## 🚀 Deployment\n\n### Production Deployment\n\n1. Set up production environment:\n   ```bash\n   make env-prod\n   ```\n\n2. Deploy the stack:\n   ```bash\n   make deploy\n   ```\n\n3. Verify deployment:\n   ```bash\n   make status\n   ```\n\n### Scaling\n\n```bash\n# Scale backend services\nmake scale-backend replicas=3\n\n# Scale frontend\nmake scale-frontend replicas=2\n```\n\n## 📚 Documentation\n\n### API Documentation\n\n- [API Reference](docs/API.md)\n- [Authentication Guide](docs/AUTHENTICATION.md)\n- [Deployment Guide](docs/DEPLOYMENT.md)\n\n### Architecture Decisions\n\n- [Architecture Decision Records](docs/architecture/decisions/)\n- [System Design](docs/architecture/DESIGN.md)\n\n## 🎯 Features Overview\n\n### 👤 **User Features**\n- 🔐 **Keycloak SSO Authentication** - Secure single sign-on\n- 📸 **Photo Upload & Management** - Drag & drop photo uploads\n- 🤖 **AI-Powered Descriptions** - Automatic image content analysis\n- 📝 **Manual Description Editing** - Enhance AI-generated descriptions\n- 🖼️ **Personal Gallery** - Organized photo viewing\n- 🔍 **Smart Search** - Find photos by description or metadata\n- 📱 **Responsive Design** - Works on desktop and mobile\n\n### 👨‍💼 **Admin Features**\n- 👥 **User Management** - Add, edit, and manage users\n- 📊 **System Analytics** - Performance and usage metrics\n- 🛡️ **Security Monitoring** - Login attempts and threat detection\n- 🔒 **Content Moderation** - Review and approve uploaded content\n- ⚙️ **System Configuration** - Manage vault settings\n- 📋 **Audit Logging** - Track all administrative actions\n- 📈 **Grafana Dashboards** - Real-time system monitoring\n\n### 🤝 **Partner Features**\n- 📦 **Bulk Photo Upload** - Import hundreds of photos at once\n- 🏷️ **Batch Description Management** - Edit multiple photo descriptions\n- 📤 **Photo Sharing** - Share photos with specific users\n- 👥 **User Access Control** - Manage photo permissions\n- 📊 **Analytics Dashboard** - Track photo engagement and views\n- 🔄 **Batch Operations** - Mass edit, delete, or share operations\n\n### 🏗️ **Infrastructure Features**\n- 📊 **Prometheus Metrics** - Comprehensive system monitoring\n- 📈 **Grafana Dashboards** - Beautiful visualization\n- 🚨 **AlertManager** - Intelligent alerting system\n- 📝 **Centralized Logging** - Loki log aggregation\n- 🔍 **Distributed Tracing** - Jaeger integration\n- 🐳 **Container Monitoring** - Docker metrics with cAdvisor\n- 🔒 **Security Scanning** - Automated vulnerability detection\n\n---\n\n## 🚀 **Quick Start (3 Commands)**\n\n```bash\n# 1. Clone and setup\ngit clone https://github.com/wronai/docker-platform\ncd docker-platform\n\n# 2. Start everything with monitoring\nmake full-stack-with-monitoring\n\n# 3. Access the application\nopen http://localhost\n```\n\n**🌐 Service URLs:**\n- **Main App**: http://localhost\n- **Grafana**: http://localhost:3333 (admin/grafana123)\n- **Prometheus**: http://localhost:9090\n- **Keycloak**: http://localhost:8443/admin (admin/admin123)\n- **AlertManager**: http://localhost:9093\n\n**👤 Test Accounts:**\n- **Admin**: vaultadmin / admin123\n- **User**: vaultuser / user123\n\n---\n\n## 📋 **System Requirements**\n\n- **Docker**: 20.10+\n- **Docker Compose**: 2.0+\n- **RAM**: 8GB+ recommended\n- **Storage**: 50GB+ for media files\n- **CPU**: 4+ cores recommended\n\n---\n\n## 🏗️ **Architecture Overview**\n\n```mermaid\ngraph TB\n    User[Users] --> Caddy[Caddy Proxy]\n    Caddy --> Flutter[Flutter Web App]\n    Caddy --> API[Media Vault API]\n    Caddy --> Admin[Admin Panel]\n    Caddy --> Keycloak[Keycloak]\n    \n    API --> SQLite[(SQLite)]\n    API --> Storage[File Storage]\n    API --> Analyzer[AI Analyzer]\n    API --> NSFW[NSFW Detector]\n    \n    subgraph \"Monitoring Stack\"\n        Prometheus[Prometheus]\n        Grafana[Grafana]\n        AlertManager[AlertManager]\n        Loki[Loki Logs]\n    end\n    \n    API --> Prometheus\n    Grafana --> Prometheus\n    AlertManager --> Prometheus\n```\n\n\n## 🔧 **Configuration**\n\n### **Environment Variables (.env)**\n\n```bash\n# Vault Configuration\nVAULT_NAME=MediaVault\nENVIRONMENT=production\nDEBUG=false\n\n# Authentication\nKEYCLOAK_ADMIN_USER=admin\nKEYCLOAK_ADMIN_PASSWORD=admin123\nOAUTH2_ENABLED=true\n\n# AI Features\nAI_DESCRIPTION_ENABLED=true\nNSFW_DETECTION_ENABLED=true\n\n# Monitoring\nGRAFANA_ADMIN_PASSWORD=grafana123\nPROMETHEUS_PORT=9090\nGRAFANA_PORT=3333\n\n# Email Alerts\nSMTP_HOST=smtp.gmail.com\nSMTP_USER=alerts@mediavault.com\nADMIN_EMAIL=admin@mediavault.com\n\n# Slack Integration\nSLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK\n```\n\n### **Feature Flags**\n- `AI_DESCRIPTION_ENABLED`: Enable/disable AI photo descriptions\n- `NSFW_DETECTION_ENABLED`: Enable/disable content moderation\n- `BULK_UPLOAD_ENABLED`: Enable/disable partner bulk uploads\n- `PHOTO_SHARING_ENABLED`: Enable/disable photo sharing features\n\n---\n\n## 📊 **Monitoring & Observability**\n\n### **Grafana Dashboards**\n- **Infrastructure Overview** - System health and performance\n- **Application Metrics** - API response times, user activity\n- **Security Dashboard** - Authentication events, failed logins\n- **Business Intelligence** - Photo uploads, user engagement\n\n### **Prometheus Metrics**\n- System metrics (CPU, memory, disk, network)\n- Application metrics (API performance, upload rates)\n- Security metrics (authentication events, threats)\n- Business metrics (user activity, storage usage)\n\n### **Alerting Rules**\n- **Critical**: Service down, disk full, security breaches\n- **Warning**: High resource usage, slow responses\n- **Info**: Successful deployments, maintenance events\n\n### **Access Monitoring**\n```bash\n# View real-time metrics\nmake prometheus           # http://localhost:9090\n\n# Access dashboards\nmake grafana             # http://localhost:3333\n\n# Check alerts\nmake alerts              # http://localhost:9093\n\n# System health\nmake health-check-full   # Comprehensive health check\n```\n\n---\n\n## 🎛️ **Management Commands**\n\n### **Basic Operations**\n```bash\nmake up                  # Start main application\nmake down                # Stop all services\nmake logs                # Show application logs\nmake status              # Show service status\nmake restart-api         # Restart API service\n```\n\n### **Monitoring**\n```bash\nmake monitoring          # Start monitoring stack\nmake monitoring-logs     # Show monitoring logs\nmake backup-monitoring   # Backup monitoring data\nmake test-alerts         # Test alert system\n```\n\n### **Authentication**\n```bash\nmake setup-keycloak      # Configure Keycloak\nmake keycloak-clean      # Reset Keycloak\n```\n\n### **Maintenance**\n```bash\nmake backup-now          # Create system backup\nmake cleanup-all         # Clean unused resources\nmake load-test-monitored # Performance testing\nmake security-scan       # Security vulnerability scan\n```\n\n---\n\n## 🔒 **Security Features**\n\n### **Authentication & Authorization**\n- **Keycloak SSO** - Enterprise-grade identity management\n- **JWT Tokens** - Secure API authentication\n- **Role-based Access** - User, Admin, Partner roles\n- **Session Management** - Secure session handling\n\n### **Content Security**\n- **NSFW Detection** - Automatic content moderation\n- **File Validation** - Type and size restrictions\n- **Virus Scanning** - Malware protection (configurable)\n- **Encryption** - File encryption at rest\n\n### **Infrastructure Security**\n- **Container Security** - Trivy vulnerability scanning\n- **Network Policies** - Segmented container networking\n- **Security Headers** - HTTPS, HSTS, CSP headers\n- **Audit Logging** - Comprehensive activity tracking\n\n### **Monitoring Security**\n- **Failed Login Detection** - Brute force protection\n- **Suspicious Activity Alerts** - Real-time threat detection\n- **IP Blocking** - Automatic threat response\n- **Security Dashboards** - Visual threat monitoring\n\n---\n\n## 🗂️ **Project Structure**\n\n```\nmedia-vault/\n├── 📄 docker-compose.yml                    # Main application stack\n├── 📄 docker-compose.monitoring.yml         # Monitoring stack\n├── 📄 .env                                  # Environment configuration\n├── 📄 Makefile                              # Management commands\n│\n├── 🔒 media-vault-backend/                  # Go API Backend\n├── 🎨 flutter_frontend/                     # Flutter Web Application\n├── ⚙️ media-vault-admin/                    # Admin Panel\n├── 🔍 media-vault-analyzer/                 # AI Processing Service\n├── 🤖 nsfw-analyzer/                        # Content Moderation\n│\n├── 📊 monitoring/                           # Monitoring Configuration\n│   ├── prometheus/                          # Metrics collection\n│   ├── grafana/                             # Dashboards\n│   ├── alertmanager/                        # Alert routing\n│   └── loki/                                # Log aggregation\n│\n├── 🔐 keycloak/                             # Authentication\n├── 🌐 caddy/                                # Reverse proxy\n├── 📝 scripts/                              # Automation scripts\n└── 📋 docs/                                 # Documentation\n```\n\n---\n\n## 🔄 **Development Workflow**\n\n### **Local Development**\n```bash\n# Start development environment\nmake dev-start\n\n# Run tests\nmake test\n\n# Check code quality\nmake lint\n\n# Build all components\nmake build\n```\n\n### **Code Standards**\n- **Go**: gofmt, golint, go vet\n- **Flutter**: dart format, flutter analyze\n- **Docker**: Dockerfile best practices\n- **Security**: Regular vulnerability scans\n\n---\n\n## 🚀 **Production Deployment**\n\n### **Docker Swarm**\n```bash\n# Initialize swarm\ndocker swarm init\n\n# Deploy stack\ndocker stack deploy -c docker-compose.yml media-vault\n```\n\n### **Kubernetes**\n```bash\n# Apply manifests\nkubectl apply -f deployment/kubernetes/\n\n# Check status\nkubectl get pods -n media-vault\n```\n\n### **Production Checklist**\n- [ ] Change default passwords\n- [ ] Configure SSL certificates\n- [ ] Set up external backups\n- [ ] Configure monitoring alerts\n- [ ] Review security settings\n- [ ] Test disaster recovery\n\n---\n\n## 📈 **Performance Optimization**\n\n### **Recommended Settings**\n- **API**: 2-4 replicas, 1GB RAM each\n- **Database**: SSD storage, regular backups\n- **File Storage**: CDN for media delivery\n- **Monitoring**: 30-day retention, efficient queries\n\n### **Scaling Guidelines**\n- **Horizontal Scaling**: Add API replicas for more users\n- **Vertical Scaling**: Increase resources for AI processing\n- **Storage Scaling**: Use external object storage (S3, MinIO)\n- **Database Scaling**: Consider PostgreSQL for large datasets\n\n---\n\n## 🤝 **Contributing**\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit changes (`git commit -m 'Add amazing feature'`)\n4. Push to branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n---\n\n## 📄 **License**\n\nThis project is licensed under the Apache 2.0 License - see the [LICENSE](LICENSE) file for details.\n\n---\n\n## 🆘 **Support**\n\n- **Documentation**: [docs/](docs/)\n- **Issues**: [GitHub Issues](https://github.com/wronai/docker-platform/issues)\n- **Discussions**: [GitHub Discussions](https://github.com/wronai/docker-platform/discussions)\n- **Email**: support@mediavault.com\n\n---\n\n## 🎉 **Acknowledgments**\n\n- **Flutter Team** - Amazing web framework\n- **Keycloak** - Robust authentication\n- **Prometheus/Grafana** - Excellent monitoring\n- **Docker** - Containerization platform\n- **Go Community** - Fast backend development\n\n---\n\n**Media Vault** - *Secure, intelligent, and scalable media management for the modern enterprise.*\n\n\n\n\n# 🏗️ Media Vault - Complete Infrastructure Administration Guide\n\n## 🎯 **Executive Summary**\n\nMedia Vault Infrastructure provides **enterprise-grade** monitoring, alerting, automation, and management capabilities:\n\n- **📊 360° Monitoring** - Metrics, logs, tracing, alerts\n- **🤖 Automated Incident Response** - Self-healing capabilities\n- **🔮 Predictive Analytics** - Capacity planning & forecasting\n- **🛡️ Security & Compliance** - Automated scanning & response\n- **⚡ Performance Optimization** - Automated tuning & scaling\n\n---\n\n## 🚀 **Quick Start (3 Commands)**\n\n```bash\n# 1. Setup infrastructure\nmake infrastructure\n\n# 2. Start with authentication  \nmake full-stack\n\n# 3. Check status\nmake infra-status\n```\n\n**🌐 Access Points:**\n- **Main App**: http://localhost\n- **Grafana**: http://localhost:3333 (admin/grafana123)\n- **Prometheus**: http://localhost:9090\n- **Portainer**: http://localhost:9000\n- **AlertManager**: http://localhost:9093\n\n---\n\n## 📊 **Monitoring Stack**\n\n### **Core Metrics (Prometheus)**\n```yaml\nSystem Metrics:\n  ✅ CPU usage per container and host\n  ✅ Memory utilization and pressure\n  ✅ Disk space and I/O performance\n  ✅ Network traffic and errors\n  ✅ Container lifecycle events\n\nApplication Metrics:\n  ✅ API response times (95th percentile)\n  ✅ Request rates and error rates  \n  ✅ Database query performance\n  ✅ Upload success/failure rates\n  ✅ Authentication events (Keycloak)\n\nBusiness Metrics:\n  ✅ Active users and sessions\n  ✅ Storage utilization trends\n  ✅ Content analysis results\n  ✅ Security incident counts\n```\n\n### **Visualization (Grafana)**\n```yaml\nDashboards Available:\n  📊 Infrastructure Overview - System health\n  📈 Application Performance - API metrics  \n  🔐 Security Dashboard - Auth & threats\n  💾 Storage Analytics - Vault usage\n  🐳 Container Monitoring - Docker stats\n  📡 Network Analysis - Traffic patterns\n  🎯 Business Intelligence - KPIs\n```\n\n### **Advanced Logging**\n```yaml\nLog Aggregation Options:\n  🪵 Loki + Promtail (Lightweight)\n    - Container logs centralization\n    - Grafana integration\n    - Label-based querying\n    \n  📊 ELK Stack (Advanced)\n    - Elasticsearch search\n    - Kibana visualization  \n    - Advanced analytics\n    - Full-text search\n```\n\n---\n\n## 🚨 **Advanced Alerting System**\n\n### **Alert Categories**\n```yaml\n🔴 CRITICAL (Immediate Action):\n  - Service completely down (>1 min)\n  - Disk will fill in 4 hours\n  - Database connection exhaustion\n  - Security breach indicators\n\n🟡 WARNING (Investigation Required):\n  - High resource usage (>80% for 5 min)\n  - API response time degraded (>5s)\n  - Failed login spike (>20 in 5 min)\n  - Memory pressure (>85%)\n\n🔵 INFO (Monitoring):\n  - Scheduled maintenance\n  - Performance optimizations\n  - Backup completion\n  - Certificate renewals\n```\n\n### **Notification Channels**\n```yaml\nAlert Delivery:\n  📧 Email - admin@mediavault.com\n  💬 Slack - #alerts, #warnings channels\n  📱 PagerDuty - Critical issues only\n  📊 Grafana - Dashboard notifications\n  🔔 Teams - Alternative to Slack\n```\n\n### **Automated Responses**\n```yaml\nSelf-Healing Actions:\n  🔄 Service restart for container failures\n  🧹 Automatic cleanup for disk space\n  ⚡ Resource rebalancing for high usage\n  🛡️ Security lockdown for threats\n  📊 Performance optimization triggers\n```\n\n---\n\n## 🤖 **Intelligent Automation**\n\n### **Incident Response Automation**\n```bash\n# Automated actions for common issues:\nService Down → Docker restart → Health check → Notify\nHigh Memory → Clear caches → Restart services → Monitor\nDisk Full → Cleanup logs → Docker prune → Expand if needed\nSecurity"
        },
        {
          "name": "SECURITY.md",
          "type": "file",
          "path": "docs/SECURITY.md",
          "size": 4809,
          "content": "# 🔐 Security Guide\n\nThis document outlines the security measures and best practices for the Media Vault platform.\n\n## Table of Contents\n- [Security Overview](#-security-overview)\n- [Authentication](#-authentication)\n- [Authorization](#-authorization)\n- [Data Protection](#-data-protection)\n- [Network Security](#-network-security)\n- [Vulnerability Management](#-vulnerability-management)\n- [Incident Response](#-incident-response)\n- [Compliance](#-compliance)\n- [Security Best Practices](#-security-best-practices)\n\n## 🛡️ Security Overview\n\nMedia Vault implements a defense-in-depth security strategy with multiple layers of protection:\n\n1. **Perimeter Security**: Firewall, WAF, and DDoS protection\n2. **Identity & Access Management**: Keycloak-based authentication\n3. **Data Protection**: Encryption at rest and in transit\n4. **Network Security**: VPCs, security groups, and network policies\n5. **Monitoring & Logging**: Comprehensive audit trails\n\n## 🔑 Authentication\n\n### Keycloak Integration\n- Centralized identity management\n- Multi-factor authentication (MFA) support\n- Social login (Google, GitHub, etc.)\n- Password policies enforcement\n\n### Session Management\n- Secure, HTTP-only cookies\n- Short-lived access tokens (15-30 minutes)\n- Refresh token rotation\n- Session timeout after 24 hours of inactivity\n\n## 🔐 Authorization\n\n### Role-Based Access Control (RBAC)\n\n| Role | Permissions |\n|------|-------------|\n| Admin | Full system access |\n| Manager | User management, content moderation |\n| User | Upload, view, manage own content |\n| Guest | Read-only access to public content |\n\n### Attribute-Based Access Control (ABAC)\n- Fine-grained permissions based on:\n  - User attributes\n  - Resource attributes\n  - Environment conditions\n  - Action types\n\n## 🔒 Data Protection\n\n### Encryption\n\n| Data State | Encryption Method |\n|------------|-------------------|\n| In Transit | TLS 1.3 |\n| At Rest | AES-256 |\n| Database | TDE (Transparent Data Encryption) |\n| Backups | GPG |\n\n\n### Data Retention\n- User data: Retained until account deletion\n- Audit logs: 1 year\n- System logs: 30 days\n- Backups: 90 days\n\n## 🌐 Network Security\n\n### Network Segmentation\n```mermaid\ngraph LR\n    A[Internet] -->|HTTPS| B[Caddy]\n    B --> C[Frontend]\n    B --> D[Backend API]\n    D --> E[Database]\n    D --> F[Keycloak]\n    D --> G[Storage]\n    \n    subgraph Public Zone\n    C\n    end\n    \n    subgraph Private Zone\n    D\n    E\n    F\n    G\n    end\n```\n\n### Security Groups\n- Restrict access to required ports only\n- Implement IP whitelisting for admin interfaces\n- Use security groups to control traffic between services\n\n## 🕵️ Vulnerability Management\n\n### Scanning\n- **Container Images**: Daily vulnerability scans\n- **Dependencies**: Weekly security updates\n- **Infrastructure**: Monthly security assessments\n\n### Patching\n- Critical patches applied within 24 hours\n- High severity patches within 7 days\n- Regular updates for all dependencies\n\n## 🚨 Incident Response\n\n### Response Plan\n1. **Detection**\n   - Monitor security events\n   - Set up alerts for suspicious activities\n\n2. **Containment**\n   - Isolate affected systems\n   - Preserve evidence\n\n3. **Eradication**\n   - Identify root cause\n   - Apply fixes\n\n4. **Recovery**\n   - Restore from clean backups\n   - Verify system integrity\n\n5. **Post-Mortem**\n   - Document the incident\n   - Implement preventive measures\n\n## 📜 Compliance\n\n### Standards & Regulations\n- GDPR (General Data Protection Regulation)\n- CCPA (California Consumer Privacy Act)\n- SOC 2 Type II\n- ISO 27001\n\n### Security Certifications\n- Regular third-party security audits\n- Penetration testing bi-annually\n- Compliance certification audits annually\n\n## 🛠️ Security Best Practices\n\n### For Developers\n1. **Code Security**\n   - Regular code reviews\n   - Static code analysis\n   - Dependency scanning\n\n2. **Secrets Management**\n   - Never commit secrets to version control\n   - Use environment variables or secret managers\n   - Rotate credentials regularly\n\n3. **Secure Development**\n   - Follow OWASP Top 10\n   - Implement input validation\n   - Use parameterized queries\n\n### For System Administrators\n1. **Hardening**\n   - Disable unused services\n   - Apply OS security patches\n   - Configure firewalls\n\n2. **Monitoring**\n   - Centralized logging\n   - Real-time alerting\n   - Regular security audits\n\n### For Users\n1. **Account Security**\n   - Use strong, unique passwords\n   - Enable MFA\n   - Regularly review account activity\n\n2. **Data Handling**\n   - Share sensitive data only when necessary\n   - Be cautious with public sharing\n   - Report suspicious activities\n\n## 📝 Security Contact\n\nTo report security vulnerabilities, please email:\nsecurity@wron.ai\n\nWe respond to all reports within 24 hours and appreciate your help in keeping Media Vault secure."
        },
        {
          "name": "TODO.md",
          "type": "file",
          "path": "docs/TODO.md",
          "size": 336,
          "content": "# Documentation - TODO\n\n## High Priority\n- [ ] Complete API documentation\n- [ ] Add setup guide for new developers\n- [ ] Document architecture decisions\n\n## Medium Priority\n- [ ] Add troubleshooting guide\n- [ ] Document environment variables\n- [ ] Create user guides for each service\n\n## Completed\n- [x] Initial documentation structure\n"
        },
        {
          "name": "USER_GUIDE.md",
          "type": "file",
          "path": "docs/USER_GUIDE.md",
          "size": 4539,
          "content": "# 📘 User Guide\n\nWelcome to Media Vault! This guide will help you get started with using the platform to securely store, manage, and analyze your media files.\n\n## 📱 Getting Started\n\n### System Requirements\n- Modern web browser (Chrome, Firefox, Safari, or Edge)\n- Internet connection\n- Screen resolution: 1280x720 or higher recommended\n\n### First-Time Setup\n1. **Account Creation**\n   - Contact your administrator to create an account\n   - You'll receive a welcome email with login instructions\n\n2. **Logging In**\n   - Navigate to your Media Vault instance (provided by your administrator)\n   - Click \"Login\" and enter your credentials\n   - If using SSO, click the appropriate provider button\n\n## 🖥️ Dashboard Overview\n\n```mermaid\ngraph LR\n    A[📊 Dashboard] --> B[📁 My Files]\n    A --> C[🔄 Recent Activity]\n    A --> D[📊 Storage Usage]\n    A --> E[🔔 Notifications]\n    \n    style A fill:#4a148c,stroke:#7b1fa2,color:white\n    style B fill:#e3f2fd,stroke:#1976d2\n    style C fill:#e3f2fd,stroke:#1976d2\n    style D fill:#e3f2fd,stroke:#1976d2\n    style E fill:#e3f2fd,stroke:#1976d2\n```\n\n## 📤 Uploading Files\n\n### Basic Upload\n1. Click the \"+\" or \"Upload\" button\n2. Select files from your device\n3. Add metadata (optional)\n4. Click \"Upload\"\n\n### Advanced Options\n- **Drag and Drop**: Simply drag files into the upload area\n- **Folder Upload**: Upload entire folders while preserving structure\n- **Bulk Upload**: Select multiple files at once\n\n### Upload Settings\n- File size limits: 2GB per file\n- Supported formats: JPG, PNG, GIF, MP4, MOV, PDF, and more\n- Automatic virus scanning on upload\n\n## 🗂️ File Management\n\n### Organizing Files\n- **Create Folders**: Click \"New\" → \"Folder\"\n- **Move Files**: Select items and use the \"Move to\" option\n- **Bulk Actions**: Select multiple files for batch operations\n\n### File Actions\n- **Preview**: Click any file to preview\n- **Download**: Click the download button\n- **Share**: Generate shareable links\n- **Delete**: Move to trash (can be restored within 30 days)\n\n## 🔍 Searching and Filtering\n\n### Basic Search\n1. Click the search bar\n2. Type your search term\n3. Press Enter or click \"Search\"\n\n### Advanced Search\n- **Filters**: File type, date range, size\n- **Tags**: Search by custom tags\n- **Metadata**: Search within file metadata\n\n## 🤝 Sharing and Collaboration\n\n### Sharing Files\n1. Select the file(s)\n2. Click \"Share\"\n3. Choose sharing method:\n   - **Link**: Generate a shareable link\n   - **Email**: Send directly to email addresses\n   - **Team**: Share with specific team members\n\n### Permission Levels\n- **Viewer**: Can view only\n- **Commenter**: Can view and comment\n- **Editor**: Can view, edit, and share\n- **Owner**: Full control (including deletion)\n\n## 🔒 Security Features\n\n### Two-Factor Authentication (2FA)\n1. Go to Account Settings → Security\n2. Click \"Enable 2FA\"\n3. Scan the QR code with your authenticator app\n4. Enter the verification code\n\n### File Encryption\n- All files are encrypted at rest and in transit\n- End-to-end encryption for shared links\n- Automatic virus scanning\n\n## 📱 Mobile Access\n\n### Mobile App\n1. Download the Media Vault app from your app store\n2. Log in with your credentials\n3. Enable biometric authentication for quick access\n\n### Mobile Features\n- Camera upload\n- Offline access to favorite files\n- Document scanning\n\n## 🛠️ Customization\n\n### User Preferences\n- Dark/Light theme\n- Notification preferences\n- Default upload folder\n- Keyboard shortcuts\n\n### Integration\n- Connect to third-party apps\n- Set up automated workflows\n- Configure webhooks\n\n## ❓ Getting Help\n\n### Help Center\n- [FAQs](https://help.mediavault.example.com/faq)\n- [Video Tutorials](https://help.mediavault.example.com/tutorials)\n- [Community Forum](https://community.mediavault.example.com)\n\n### Support\n- **Email**: support@wron.ai\n- **Chat**: Available in the web app\n- **Phone**: +1 (555) 123-4567 (Business hours)\n\n## 📜 Appendix\n\n### Keyboard Shortcuts\n| Shortcut | Action |\n|----------|--------|\n| `Ctrl + U` | Upload files |\n| `Ctrl + F` | Search |\n| `Ctrl + N` | New folder |\n| `Ctrl + /` | Show all shortcuts |\n\n### File Type Support\n| Category | Supported Formats |\n|----------|-------------------|\n| Images | JPG, PNG, GIF, WEBP, SVG, RAW |\n| Videos | MP4, MOV, AVI, MKV |\n| Documents | PDF, DOCX, XLSX, PPTX |\n| Archives | ZIP, RAR, 7Z |\n\n---\n\n<div align=\"center\">\n  <p>Need help? Contact us at <a href=\"mailto:support@wron.ai\">support@wron.ai</a></p>\n  <p>© 2023 WRON AI. All rights reserved.</p>\n</div>"
        }
      ]
    },
    {
      "name": "flutter_frontend",
      "type": "directory",
      "path": "flutter_frontend",
      "children": [
        {
          "name": "assets",
          "type": "directory",
          "path": "flutter_frontend/assets",
          "children": [
            {
              "name": "images",
              "type": "directory",
              "path": "flutter_frontend/assets/images",
              "children": [
                {
                  "name": "logo.png",
                  "type": "file",
                  "path": "flutter_frontend/assets/images/logo.png",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "placeholder.png",
                  "type": "file",
                  "path": "flutter_frontend/assets/images/placeholder.png",
                  "size": 0,
                  "content": ""
                }
              ]
            }
          ]
        },
        {
          "name": "lib",
          "type": "directory",
          "path": "flutter_frontend/lib",
          "children": [
            {
              "name": "models",
              "type": "directory",
              "path": "flutter_frontend/lib/models",
              "children": [
                {
                  "name": "vault_item.dart",
                  "type": "file",
                  "path": "flutter_frontend/lib/models/vault_item.dart",
                  "size": 996,
                  "content": "class VaultItem {\n  final String id;\n  final String name;\n  final String type; // 'image', 'video', 'document', etc.\n  final String thumbnailUrl;\n  final DateTime createdAt;\n  final int size;\n  final Map<String, dynamic>? metadata;\n\n  VaultItem({\n    required this.id,\n    required this.name,\n    required this.type,\n    required this.thumbnailUrl,\n    required this.createdAt,\n    required this.size,\n    this.metadata,\n  });\n\n  factory VaultItem.fromJson(Map<String, dynamic> json) {\n    return VaultItem(\n      id: json['id'],\n      name: json['name'],\n      type: json['type'],\n      thumbnailUrl: json['thumbnailUrl'],\n      createdAt: DateTime.parse(json['createdAt']),\n      size: json['size'],\n      metadata: json['metadata'],\n    );\n  }\n\n  Map<String, dynamic> toJson() {\n    return {\n      'id': id,\n      'name': name,\n      'type': type,\n      'thumbnailUrl': thumbnailUrl,\n      'createdAt': createdAt.toIso8601String(),\n      'size': size,\n      'metadata': metadata,\n    };\n  }\n}\n"
                }
              ]
            },
            {
              "name": "providers",
              "type": "directory",
              "path": "flutter_frontend/lib/providers",
              "children": [
                {
                  "name": "vault_provider.dart",
                  "type": "file",
                  "path": "flutter_frontend/lib/providers/vault_provider.dart",
                  "size": 1420,
                  "content": "import 'package:flutter/foundation.dart';\nimport '../models/vault_item.dart';\n\nclass VaultProvider with ChangeNotifier {\n  List<VaultItem> _items = [];\n  bool _isLoading = false;\n  String? _error;\n\n  List<VaultItem> get items => _items;\n  bool get isLoading => _isLoading;\n  String? get error => _error;\n\n  Future<void> loadVaultContents() async {\n    _isLoading = true;\n    _error = null;\n    notifyListeners();\n\n    try {\n      // TODO: Load vault contents from API\n      _items = [];\n    } catch (e) {\n      _error = 'Failed to load vault contents: $e';\n    } finally {\n      _isLoading = false;\n      notifyListeners();\n    }\n  }\n\n  Future<void> uploadFile(String filePath) async {\n    _isLoading = true;\n    _error = null;\n    notifyListeners();\n\n    try {\n      // TODO: Upload file\n      await Future.delayed(const Duration(seconds: 1)); // Simulate upload\n      // TODO: Refresh vault contents\n    } catch (e) {\n      _error = 'Failed to upload file: $e';\n      rethrow;\n    } finally {\n      _isLoading = false;\n      notifyListeners();\n    }\n  }\n\n  Future<void> deleteFile(String fileId) async {\n    _isLoading = true;\n    _error = null;\n    notifyListeners();\n\n    try {\n      // TODO: Delete file\n      _items.removeWhere((item) => item.id == fileId);\n    } catch (e) {\n      _error = 'Failed to delete file: $e';\n      rethrow;\n    } finally {\n      _isLoading = false;\n      notifyListeners();\n    }\n  }\n}\n"
                }
              ]
            },
            {
              "name": "screens",
              "type": "directory",
              "path": "flutter_frontend/lib/screens",
              "children": [
                {
                  "name": "gallery_screen.dart",
                  "type": "file",
                  "path": "flutter_frontend/lib/screens/gallery_screen.dart",
                  "size": 10913,
                  "content": "import 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\nimport '../providers/vault_provider.dart';\n\nclass GalleryScreen extends StatefulWidget {\n  @override\n  _GalleryScreenState createState() => _GalleryScreenState();\n}\n\nclass _GalleryScreenState extends State<GalleryScreen> {\n  @override\n  void initState() {\n    super.initState();\n    // Load gallery items when the screen is first displayed\n    WidgetsBinding.instance.addPostFrameCallback((_) {\n      _loadGalleryItems();\n    });\n  }\n\n  Future<void> _loadGalleryItems() async {\n    try {\n      await Provider.of<VaultProvider>(context, listen: false).loadVaultContents();\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Failed to load gallery: $e')),\n        );\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Gallery'),\n      ),\n      body: Consumer<VaultProvider>(\n        builder: (context, vault, child) {\n          if (vault.isLoading && vault.items.isEmpty) {\n            return Center(child: CircularProgressIndicator());\n          }\n\n          if (vault.error != null) {\n            return Center(\n              child: Column(\n                mainAxisAlignment: MainAxisAlignment.center,\n                children: [\n                  Icon(Icons.error_outline, color: Colors.red, size: 48),\n                  SizedBox(height: 16),\n                  Text(\n                    'Failed to load gallery',\n                    style: Theme.of(context).textTheme.titleMedium,\n                  ),\n                  SizedBox(height: 8),\n                  Text(\n                    vault.error!,\n                    textAlign: TextAlign.center,\n                    style: Theme.of(context).textTheme.bodySmall,\n                  ),\n                  SizedBox(height: 16),\n                  ElevatedButton.icon(\n                    onPressed: _loadGalleryItems,\n                    icon: Icon(Icons.refresh),\n                    label: Text('Retry'),\n                  ),\n                ],\n              ),\n            );\n          }\n\n          if (vault.items.isEmpty) {\n            return Center(\n              child: Column(\n                mainAxisAlignment: MainAxisAlignment.center,\n                children: [\n                  Icon(\n                    Icons.photo_library,\n                    size: 64,\n                    color: Colors.grey[400],\n                  ),\n                  SizedBox(height: 16),\n                  Text(\n                    'No items in gallery',\n                    style: Theme.of(context).textTheme.titleMedium,\n                  ),\n                  SizedBox(height: 8),\n                  Text(\n                    'Upload some files to see them here',\n                    style: Theme.of(context).textTheme.bodyMedium,\n                  ),\n                ],\n              ),\n            );\n          }\n\n          return GridView.builder(\n            padding: const EdgeInsets.all(8.0),\n            gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\n              crossAxisCount: 3,\n              crossAxisSpacing: 4.0,\n              mainAxisSpacing: 4.0,\n              childAspectRatio: 1.0,\n            ),\n            itemCount: vault.items.length,\n            itemBuilder: (context, index) {\n              final item = vault.items[index];\n              return GestureDetector(\n                onTap: () {\n                  // TODO: Show full-screen preview\n                  _showItemDetails(item);\n                },\n                child: Stack(\n                  fit: StackFit.expand,\n                  children: [\n                    item.type == 'image'\n                        ? Image.network(\n                            item.thumbnailUrl,\n                            fit: BoxFit.cover,\n                            loadingBuilder: (context, child, loadingProgress) {\n                              if (loadingProgress == null) return child;\n                              return Center(\n                                child: CircularProgressIndicator(\n                                  value: loadingProgress.expectedTotalBytes != null\n                                      ? loadingProgress.cumulativeBytesLoaded /\n                                          loadingProgress.expectedTotalBytes!\n                                      : null,\n                                ),\n                              );\n                            },\n                            errorBuilder: (context, error, stackTrace) {\n                              return Center(\n                                child: Icon(Icons.broken_image, size: 40),\n                              );\n                            },\n                          )\n                        : Container(\n                            color: Colors.grey[200],\n                            child: Center(\n                              child: Icon(\n                                _getFileTypeIcon(item.type),\n                                size: 40,\n                                color: Colors.grey[600],\n                              ),\n                            ),\n                          ),\n                    if (vault.isLoading && index == vault.items.length - 1)\n                      Positioned(\n                        bottom: 4,\n                        right: 4,\n                        child: Container(\n                          padding: EdgeInsets.all(4),\n                          decoration: BoxDecoration(\n                            color: Colors.black54,\n                            borderRadius: BorderRadius.circular(4),\n                          ),\n                          child: SizedBox(\n                            width: 16,\n                            height: 16,\n                            child: CircularProgressIndicator(\n                              strokeWidth: 2,\n                              valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\n                            ),\n                          ),\n                        ),\n                      ),\n                  ],\n                ),\n              );\n            },\n          );\n        },\n      ),\n    );\n  }\n\n  void _showItemDetails(VaultItem item) {\n    showModalBottomSheet(\n      context: context,\n      builder: (context) {\n        return Container(\n          padding: EdgeInsets.all(16),\n          child: Column(\n            mainAxisSize: MainAxisSize.min,\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              Row(\n                children: [\n                  Icon(\n                    _getFileTypeIcon(item.type),\n                    size: 24,\n                  ),\n                  SizedBox(width: 8),\n                  Expanded(\n                    child: Text(\n                      item.name,\n                      style: Theme.of(context).textTheme.titleMedium,\n                      overflow: TextOverflow.ellipsis,\n                    ),\n                  ),\n                ],\n              ),\n              SizedBox(height: 16),\n              Text('Type: ${item.type}'),\n              Text('Size: ${_formatFileSize(item.size)}'),\n              Text('Uploaded: ${_formatDate(item.createdAt)}'),\n              SizedBox(height: 16),\n              Row(\n                mainAxisAlignment: MainAxisAlignment.end,\n                children: [\n                  TextButton(\n                    onPressed: () => Navigator.pop(context),\n                    child: Text('CANCEL'),\n                  ),\n                  SizedBox(width: 8),\n                  TextButton(\n                    onPressed: () {\n                      // TODO: Implement download\n                      Navigator.pop(context);\n                      ScaffoldMessenger.of(context).showSnackBar(\n                        SnackBar(content: Text('Downloading ${item.name}...')),\n                      );\n                    },\n                    child: Text('DOWNLOAD'),\n                  ),\n                  SizedBox(width: 8),\n                  TextButton(\n                    onPressed: () {\n                      // TODO: Implement delete\n                      Navigator.pop(context);\n                      _confirmDelete(item);\n                    },\n                    style: TextButton.styleFrom(\n                      foregroundColor: Theme.of(context).colorScheme.error,\n                    ),\n                    child: Text('DELETE'),\n                  ),\n                ],\n              ),\n            ],\n          ),\n        );\n      },\n    );\n  }\n\n  void _confirmDelete(VaultItem item) {\n    showDialog(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: Text('Delete file'),\n        content: Text('Are you sure you want to delete ${item.name}? This action cannot be undone.'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.pop(context),\n            child: Text('CANCEL'),\n          ),\n          TextButton(\n            onPressed: () async {\n              Navigator.pop(context);\n              try {\n                await Provider.of<VaultProvider>(context, listen: false)\n                    .deleteFile(item.id);\n                if (mounted) {\n                  ScaffoldMessenger.of(context).showSnackBar(\n                    SnackBar(content: Text('File deleted successfully')),\n                  );\n                }\n              } catch (e) {\n                if (mounted) {\n                  ScaffoldMessenger.of(context).showSnackBar(\n                    SnackBar(content: Text('Failed to delete file: $e')),\n                  );\n                }\n              }\n            },\n            style: TextButton.styleFrom(\n              foregroundColor: Theme.of(context).colorScheme.error,\n            ),\n            child: Text('DELETE'),\n          ),\n        ],\n      ),\n    );\n  }\n\n  IconData _getFileTypeIcon(String type) {\n    switch (type) {\n      case 'image':\n        return Icons.image;\n      case 'video':\n        return Icons.videocam;\n      case 'audio':\n        return Icons.audiotrack;\n      case 'document':\n        return Icons.description;\n      case 'archive':\n        return Icons.archive;\n      default:\n        return Icons.insert_drive_file;\n    }\n  }\n\n  String _formatFileSize(int bytes) {\n    if (bytes < 1024) return '$bytes B';\n    final kb = bytes / 1024;\n    if (kb < 1024) return '${kb.toStringAsFixed(1)} KB';\n    final mb = kb / 1024;\n    if (mb < 1024) return '${mb.toStringAsFixed(1)} MB';\n    final gb = mb / 1024;\n    return '${gb.toStringAsFixed(1)} GB';\n  }\n\n  String _formatDate(DateTime date) {\n    return '${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')} ' +\n           '${date.hour.toString().padLeft(2, '0')}:${date.minute.toString().padLeft(2, '0')}';\n  }\n}\n"
                },
                {
                  "name": "upload_screen.dart",
                  "type": "file",
                  "path": "flutter_frontend/lib/screens/upload_screen.dart",
                  "size": 5450,
                  "content": "import 'dart:io';\nimport 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\nimport 'package:file_picker/file_picker.dart';\nimport '../providers/vault_provider.dart';\n\nclass UploadScreen extends StatefulWidget {\n  @override\n  _UploadScreenState createState() => _UploadScreenState();\n}\n\nclass _UploadScreenState extends State<UploadScreen> {\n  bool _isDragging = false;\n  String? _filePath;\n  String? _fileName;\n  bool _isUploading = false;\n\n  Future<void> _pickFile() async {\n    try {\n      FilePickerResult? result = await FilePicker.platform.pickFiles(\n        type: FileType.any,\n        allowMultiple: false,\n      );\n\n      if (result != null) {\n        setState(() {\n          _filePath = result.files.single.path!;\n          _fileName = result.files.single.name;\n        });\n      }\n    } catch (e) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(content: Text('Error picking file: $e')),\n      );\n    }\n  }\n\n  Future<void> _uploadFile() async {\n    if (_filePath == null) return;\n\n    setState(() {\n      _isUploading = true;\n    });\n\n    try {\n      await Provider.of<VaultProvider>(context, listen: false)\n          .uploadFile(_filePath!);\n      \n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('File uploaded successfully')),\n        );\n        Navigator.pop(context);\n      }\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Error uploading file: $e')),\n        );\n      }\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isUploading = false;\n        });\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Upload File'),\n        leading: IconButton(\n          icon: Icon(Icons.arrow_back),\n          onPressed: _isUploading ? null : () => Navigator.pop(context),\n        ),\n      ),\n      body: Padding(\n        padding: const EdgeInsets.all(16.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.stretch,\n          children: [\n            Expanded(\n              child: GestureDetector(\n                onTap: _pickFile,\n                child: DragTarget<Map<String, dynamic>>(\n                  onWillAccept: (data) {\n                    setState(() => _isDragging = true);\n                    return true;\n                  },\n                  onLeave: (_) {\n                    setState(() => _isDragging = false);\n                  },\n                  onAccept: (data) {\n                    setState(() {\n                      _isDragging = false;\n                      _filePath = data['path'];\n                      _fileName = data['name'];\n                    });\n                  },\n                  builder: (context, candidateData, rejectedData) {\n                    return Container(\n                      decoration: BoxDecoration(\n                        border: Border.all(\n                          color: _isDragging\n                              ? Theme.of(context).primaryColor\n                              : Colors.grey[300]!,\n                          width: 2,\n                          style: BorderStyle.dashed,\n                        ),\n                        borderRadius: BorderRadius.circular(8.0),\n                        color: _isDragging\n                            ? Theme.of(context).primaryColor.withOpacity(0.1)\n                            : Colors.grey[50],\n                      ),\n                      child: Column(\n                        mainAxisAlignment: MainAxisAlignment.center,\n                        children: [\n                          Icon(\n                            Icons.cloud_upload,\n                            size: 64,\n                            color: _isDragging\n                                ? Theme.of(context).primaryColor\n                                : Colors.grey[400],\n                          ),\n                          SizedBox(height: 16),\n                          Text(\n                            _filePath == null\n                                ? 'Tap or drag a file here to upload'\n                                : 'Selected file: $_fileName',\n                            style: Theme.of(context).textTheme.titleMedium,\n                          ),\n                          if (_filePath != null) ...[\n                            SizedBox(height: 8),\n                            Text(\n                              'Tap to select a different file',\n                              style: Theme.of(context).textTheme.bodySmall,\n                            ),\n                          ],\n                        ],\n                      ),\n                    );\n                  },\n                ),\n              ),\n            ),\n            SizedBox(height: 20),\n            ElevatedButton(\n              onPressed: _filePath == null || _isUploading ? null : _uploadFile,\n              child: _isUploading\n                  ? SizedBox(\n                      width: 20,\n                      height: 20,\n                      child: CircularProgressIndicator(\n                        strokeWidth: 2,\n                        valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\n                      ),\n                    )\n                  : Text('Upload File'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"
                },
                {
                  "name": "vault_home_screen.dart",
                  "type": "file",
                  "path": "flutter_frontend/lib/screens/vault_home_screen.dart",
                  "size": 3531,
                  "content": "import 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\nimport '../providers/vault_provider.dart';\n\nclass VaultHomeScreen extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Media Vault'),\n        actions: [\n          IconButton(\n            icon: Icon(Icons.add_photo_alternate),\n            onPressed: () {\n              Navigator.pushNamed(context, '/upload');\n            },\n          ),\n        ],\n      ),\n      body: Consumer<VaultProvider>(\n        builder: (context, vault, child) {\n          if (vault.isLoading) {\n            return Center(child: CircularProgressIndicator());\n          }\n          \n          if (vault.error != null) {\n            return Center(child: Text(vault.error!));\n          }\n          \n          if (vault.items.isEmpty) {\n            return Center(\n              child: Column(\n                mainAxisAlignment: MainAxisAlignment.center,\n                children: [\n                  Icon(\n                    Icons.folder_open,\n                    size: 64,\n                    color: Colors.grey[400],\n                  ),\n                  SizedBox(height: 16),\n                  Text(\n                    'Your vault is empty',\n                    style: Theme.of(context).textTheme.titleLarge,\n                  ),\n                  SizedBox(height: 8),\n                  Text(\n                    'Upload your first file to get started',\n                    style: Theme.of(context).textTheme.bodyMedium,\n                  ),\n                ],\n              ),\n            );\n          }\n          \n          return GridView.builder(\n            padding: const EdgeInsets.all(8.0),\n            gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\n              crossAxisCount: 2,\n              crossAxisSpacing: 8.0,\n              mainAxisSpacing: 8.0,\n              childAspectRatio: 1.0,\n            ),\n            itemCount: vault.items.length,\n            itemBuilder: (context, index) {\n              final item = vault.items[index];\n              return GestureDetector(\n                onTap: () {\n                  // TODO: Show file preview\n                },\n                child: Card(\n                  child: Column(\n                    children: [\n                      Expanded(\n                        child: item.type == 'image'\n                            ? Image.network(\n                                item.thumbnailUrl,\n                                fit: BoxFit.cover,\n                                width: double.infinity,\n                              )\n                            : Icon(\n                                Icons.insert_drive_file,\n                                size: 48,\n                                color: Colors.grey[600],\n                              ),\n                      ),\n                      Padding(\n                        padding: const EdgeInsets.all(8.0),\n                        child: Text(\n                          item.name,\n                          maxLines: 1,\n                          overflow: TextOverflow.ellipsis,\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              );\n            },\n          );\n        },\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: () {\n          Navigator.pushNamed(context, '/upload');\n        },\n        child: Icon(Icons.add),\n      ),\n    );\n  }\n}\n"
                }
              ]
            },
            {
              "name": "services",
              "type": "directory",
              "path": "flutter_frontend/lib/services",
              "children": [
                {
                  "name": "media_vault_service.dart",
                  "type": "file",
                  "path": "flutter_frontend/lib/services/media_vault_service.dart",
                  "size": 835,
                  "content": "import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nclass MediaVaultService {\n  final String baseUrl = 'http://localhost:8080/api/v1';\n  \n  Future<Map<String, dynamic>> uploadFile(String filePath) async {\n    // TODO: Implement file upload\n    throw UnimplementedError('Upload file not implemented');\n  }\n  \n  Future<List<dynamic>> getVaultContents() async {\n    // TODO: Implement getting vault contents\n    throw UnimplementedError('Get vault contents not implemented');\n  }\n  \n  Future<Map<String, dynamic>> getFileMetadata(String fileId) async {\n    // TODO: Implement getting file metadata\n    throw UnimplementedError('Get file metadata not implemented');\n  }\n  \n  Future<void> deleteFile(String fileId) async {\n    // TODO: Implement file deletion\n    throw UnimplementedError('Delete file not implemented');\n  }\n}\n"
                }
              ]
            },
            {
              "name": "main.dart",
              "type": "file",
              "path": "flutter_frontend/lib/main.dart",
              "size": 1160,
              "content": "import 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\nimport 'services/media_vault_service.dart';\nimport 'providers/vault_provider.dart';\nimport 'screens/vault_home_screen.dart';\nimport 'screens/upload_screen.dart';\nimport 'screens/gallery_screen.dart';\n\nvoid main() {\n  runApp(MediaVaultApp());\n}\n\nclass MediaVaultApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MultiProvider(\n      providers: [\n        ChangeNotifierProvider(create: (_) => VaultProvider()),\n        Provider(create: (_) => MediaVaultService()),\n      ],\n      child: MaterialApp(\n        title: 'Media Vault',\n        theme: ThemeData(\n          primarySwatch: Colors.indigo,\n          visualDensity: VisualDensity.adaptivePlatformDensity,\n          appBarTheme: AppBarTheme(\n            backgroundColor: Colors.indigo[800],\n            foregroundColor: Colors.white,\n          ),\n        ),\n        initialRoute: '/',\n        routes: {\n          '/': (context) => VaultHomeScreen(),\n          '/upload': (context) => UploadScreen(),\n          '/gallery': (context) => GalleryScreen(),\n        },\n      ),\n    );\n  }\n}\n"
            }
          ]
        },
        {
          "name": "web",
          "type": "directory",
          "path": "flutter_frontend/web",
          "children": [
            {
              "name": "icons",
              "type": "directory",
              "path": "flutter_frontend/web/icons",
              "children": [
                {
                  "name": "app_icon.png",
                  "type": "file",
                  "path": "flutter_frontend/web/icons/app_icon.png",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "Icon-192.png",
                  "type": "file",
                  "path": "flutter_frontend/web/icons/Icon-192.png",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "Icon-512.png",
                  "type": "file",
                  "path": "flutter_frontend/web/icons/Icon-512.png",
                  "size": 0,
                  "content": ""
                }
              ]
            },
            {
              "name": "favicon.png",
              "type": "file",
              "path": "flutter_frontend/web/favicon.png",
              "size": 0,
              "content": ""
            },
            {
              "name": "index.html",
              "type": "file",
              "path": "flutter_frontend/web/index.html",
              "size": 0,
              "content": ""
            },
            {
              "name": "manifest.json",
              "type": "file",
              "path": "flutter_frontend/web/manifest.json",
              "size": 0,
              "content": ""
            }
          ]
        },
        {
          "name": "analysis_options.yaml",
          "type": "file",
          "path": "flutter_frontend/analysis_options.yaml",
          "size": 0,
          "content": ""
        },
        {
          "name": "Dockerfile.web",
          "type": "file",
          "path": "flutter_frontend/Dockerfile.web",
          "size": 1000,
          "content": "# Stage 1: Build the Flutter web app\nFROM debian:bullseye-slim AS build-env\n\n# Install required tools\nRUN apt-get update && apt-get install -y \\\n    curl \\\n    git \\\n    unzip \\\n    xz-utils \\\n    zip \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Clone the Flutter repository\nRUN git clone --depth 1 --branch stable https://github.com/flutter/flutter.git /usr/local/flutter\n\n# Add Flutter to PATH\nENV PATH=\"${PATH}:/usr/local/flutter/bin:/usr/local/flutter/bin/cache/dart-sdk/bin\"\n\n# Enable web development\nRUN flutter doctor -v\nRUN flutter config --enable-web\n\n# Copy the source code\nWORKDIR /app\nCOPY . .\n\n# Get dependencies\nRUN flutter pub get\n\n# Build the web app\nRUN flutter build web --release\n\n# Stage 2: Serve the built web app with Nginx\nFROM nginx:alpine\n\n# Copy the built web app\nCOPY --from=build-env /app/build/web /usr/share/nginx/html\n\n# Copy the nginx configuration\nCOPY nginx.conf /etc/nginx/conf.d/default.conf\n\n# Expose port 80\nEXPOSE 80\n\n# Start Nginx\nCMD [\"nginx\", \"-g\", \"daemon off;\"]"
        },
        {
          "name": "nginx.conf",
          "type": "file",
          "path": "flutter_frontend/nginx.conf",
          "size": 876,
          "content": "server {\n    listen 80;\n    server_name localhost;\n    root /usr/share/nginx/html;\n    index index.html;\n\n    location / {\n        try_files $uri $uri/ /index.html;\n    }\n\n    # Enable gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_min_length 10240;\n    gzip_proxied expired no-cache no-store private auth;\n    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml;\n    gzip_disable \"MSIE [1-6]\\.\";\n\n    # Cache control for static assets\n    location ~* \\.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc|ttf|woff|woff2)$ {\n        expires 1y;\n        access_log off;\n        add_header Cache-Control \"public\";\n    }\n\n    # Don't cache HTML files\n    location ~* \\.(?:html|json)$ {\n        expires -1;\n        add_header Cache-Control \"no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0\";\n    }\n}\n"
        },
        {
          "name": "pubspec.yaml",
          "type": "file",
          "path": "flutter_frontend/pubspec.yaml",
          "size": 641,
          "content": "name: media_vault_app\ndescription: Media Vault Flutter Web Application\nversion: 1.0.0+1\n\nenvironment:\n  sdk: '>=3.0.0 <4.0.0'\n  flutter: \">=3.10.0\"\n\ndependencies:\n  flutter:\n    sdk: flutter\n  \n  # HTTP client\n  http: ^1.1.0\n  dio: ^5.3.2\n  \n  # State management\n  provider: ^6.0.5\n  \n  # File handling\n  file_picker: ^6.0.0\n  mime: ^1.0.4\n  \n  # UI components\n  material_design_icons_flutter: ^7.0.7296\n  flutter_dropzone: ^4.0.1\n  \n  # Utils\n  path: ^1.8.3\n  intl: ^0.18.1\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n  flutter_lints: ^3.0.0\n\nflutter:\n  uses-material-design: true\n  assets:\n    - assets/images/\n    - assets/icons/\n"
        },
        {
          "name": "TODO.md",
          "type": "file",
          "path": "flutter_frontend/TODO.md",
          "size": 301,
          "content": "# Flutter Frontend - TODO\n\n## High Priority\n- [ ] Implement user authentication flow\n- [ ] Create main dashboard layout\n- [ ] Set up state management\n\n## Medium Priority\n- [ ] Implement media gallery\n- [ ] Add search functionality\n- [ ] Create settings page\n\n## Completed\n- [x] Project initialization\n"
        }
      ]
    },
    {
      "name": "js",
      "type": "directory",
      "path": "js",
      "children": [
        {
          "name": "file-explorer-new.js",
          "type": "file",
          "path": "js/file-explorer-new.js",
          "size": 11267,
          "content": "// Current path stack\nlet currentPath = [];\nlet fileSystem = null;\n\n// DOM Elements\nconst fileExplorer = document.getElementById('file-explorer');\nconst fileContent = document.getElementById('file-content');\nconst fileTitle = document.getElementById('file-title');\nconst breadcrumb = document.getElementById('breadcrumb');\nconst refreshBtn = document.getElementById('refresh-btn');\nconst copyBtn = document.getElementById('copy-btn');\nconst downloadBtn = document.getElementById('download-btn');\nconst fileActions = document.getElementById('file-actions');\n\n// File type icons\nconst FILE_ICONS = {\n    'directory': 'folder',\n    'file': 'file-earmark',\n    'json': 'filetype-json',\n    'js': 'filetype-js',\n    'css': 'filetype-css',\n    'html': 'filetype-html',\n    'md': 'file-earmark-text',\n    'py': 'filetype-py',\n    'jpg': 'file-image',\n    'jpeg': 'file-image',\n    'png': 'file-image',\n    'gif': 'file-image',\n    'svg': 'file-image'\n};\n\n// Get file icon based on file extension\nfunction getFileIcon(name, type) {\n    if (type === 'directory') return 'folder';\n    const ext = name.split('.').pop().toLowerCase();\n    return FILE_ICONS[ext] || 'file-earmark';\n}\n\n// Format file size\nfunction formatFileSize(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\n// Render breadcrumb\nfunction renderBreadcrumb() {\n    breadcrumb.innerHTML = '';\n    \n    // Add root/home\n    const homeItem = document.createElement('li');\n    homeItem.className = 'breadcrumb-item' + (currentPath.length === 0 ? ' active' : '');\n    const homeLink = document.createElement('a');\n    homeLink.href = '#';\n    homeLink.textContent = 'Home';\n    homeLink.addEventListener('click', (e) => {\n        e.preventDefault();\n        navigateTo([]);\n    });\n    homeItem.appendChild(homeLink);\n    breadcrumb.appendChild(homeItem);\n    \n    // Add path segments\n    let currentPathStr = '';\n    currentPath.forEach((segment, index) => {\n        currentPathStr += (currentPathStr ? '/' : '') + segment;\n        const isLast = index === currentPath.length - 1;\n        \n        const item = document.createElement('li');\n        item.className = 'breadcrumb-item' + (isLast ? ' active' : '');\n        \n        if (!isLast) {\n            const link = document.createElement('a');\n            link.href = '#';\n            link.textContent = segment;\n            const pathToNavigate = currentPath.slice(0, index + 1);\n            link.addEventListener('click', (e) => {\n                e.preventDefault();\n                navigateTo(pathToNavigate);\n            });\n            item.appendChild(link);\n        } else {\n            item.textContent = segment;\n        }\n        \n        breadcrumb.appendChild(item);\n    });\n}\n\n// Find item by path\nfunction findItemByPath(pathArray, root = fileSystem) {\n    let current = root;\n    \n    for (const segment of pathArray) {\n        if (!current.children) return null;\n        const found = current.children.find(item => item.name === segment);\n        if (!found) return null;\n        current = found;\n    }\n    \n    return current;\n}\n\n// Render file explorer\nfunction renderFileExplorer() {\n    fileExplorer.innerHTML = '';\n    \n    // Get current directory\n    const currentDir = currentPath.length === 0 ? fileSystem : findItemByPath(currentPath);\n    if (!currentDir || !currentDir.children) return;\n    \n    // Sort: directories first, then files, both alphabetically\n    const sortedItems = [...currentDir.children].sort((a, b) => {\n        if (a.type === b.type) {\n            return a.name.localeCompare(b.name);\n        }\n        return a.type === 'directory' ? -1 : 1;\n    });\n    \n    // Render each item\n    sortedItems.forEach(item => {\n        const itemElement = document.createElement('div');\n        itemElement.className = `file-item ${item.type === 'directory' ? 'dir-item' : ''}`;\n        \n        const icon = document.createElement('i');\n        icon.className = `bi bi-${getFileIcon(item.name, item.type)}`;\n        \n        const name = document.createElement('span');\n        name.textContent = item.name;\n        \n        const size = document.createElement('span');\n        size.className = 'file-size';\n        size.textContent = item.type === 'file' ? formatFileSize(item.size || 0) : '';\n        \n        itemElement.appendChild(icon);\n        itemElement.appendChild(name);\n        itemElement.appendChild(size);\n        \n        itemElement.addEventListener('click', (e) => {\n            e.stopPropagation();\n            if (item.type === 'directory') {\n                navigateTo([...currentPath, item.name]);\n            } else {\n                showFileContent(item);\n            }\n        });\n        \n        fileExplorer.appendChild(itemElement);\n    });\n    \n    // Show empty state if no items\n    if (sortedItems.length === 0) {\n        const emptyState = document.createElement('div');\n        emptyState.className = 'empty-state';\n        emptyState.innerHTML = `\n            <i class=\"bi bi-folder-x\"></i>\n            <p class=\"mb-0\">This directory is empty</p>\n        `;\n        fileExplorer.appendChild(emptyState);\n    }\n}\n\n// Show file content\nfunction showFileContent(file) {\n    fileTitle.textContent = file.name;\n    fileActions.style.display = 'block';\n    \n    // Set up copy button\n    copyBtn.onclick = () => {\n        navigator.clipboard.writeText(file.content || '');\n        const originalText = copyBtn.innerHTML;\n        copyBtn.innerHTML = '<i class=\"bi bi-check\"></i>';\n        setTimeout(() => {\n            copyBtn.innerHTML = originalText;\n        }, 2000);\n    };\n    \n    // Set up download button\n    downloadBtn.onclick = () => {\n        const blob = new Blob([file.content || ''], { type: 'text/plain' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = file.name;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n    };\n    \n    // Determine content type and render accordingly\n    let content = '';\n    const ext = file.name.split('.').pop().toLowerCase();\n    \n    if (['jpg', 'jpeg', 'png', 'gif', 'svg'].includes(ext)) {\n        // For images, create an image element\n        content = `<div class=\"text-center\"><img src=\"${file.path}\" class=\"img-fluid\" alt=\"${file.name}\" onerror=\"this.parentElement.innerHTML='<i class=\\'bi bi-file-earmark-image\\'></i> <span>Cannot display image</span>';\"></div>`;\n    } else if (file.content) {\n        // For text files, use highlight.js\n        let codeClass = '';\n        let codeContent = file.content;\n        \n        switch(ext) {\n            case 'js':\n                codeClass = 'javascript';\n                break;\n            case 'json':\n                codeClass = 'json';\n                try { codeContent = JSON.stringify(JSON.parse(file.content), null, 2); } catch(e) {}\n                break;\n            case 'html':\n                codeClass = 'html';\n                break;\n            case 'css':\n                codeClass = 'css';\n                break;\n            case 'md':\n                // Render markdown\n                content = `<div class=\"markdown-body\">${window.marked.parse(file.content)}</div>`;\n                break;\n            default:\n                codeClass = '';\n        }\n        \n        if (content === '') {\n            content = `<pre><code class=\"${codeClass}\">${escapeHtml(codeContent)}</code></pre>`;\n        }\n    } else {\n        content = '<div class=\"empty-state\"><i class=\"bi bi-file-earmark\"></i><p class=\"mb-0\">No content to display</p></div>';\n    }\n    \n    fileContent.innerHTML = content;\n    \n    // Apply syntax highlighting\n    if (file.content && !['md', 'jpg', 'jpeg', 'png', 'gif', 'svg'].includes(ext)) {\n        document.querySelectorAll('pre code').forEach((block) => {\n            hljs.highlightElement(block);\n        });\n    }\n    \n    // Update active state\n    document.querySelectorAll('.file-item').forEach(el => el.classList.remove('active'));\n    const activeItem = Array.from(document.querySelectorAll('.file-item')).find(el => \n        el.textContent.trim().startsWith(file.name)\n    );\n    if (activeItem) activeItem.classList.add('active');\n}\n\n// Helper to escape HTML\nfunction escapeHtml(unsafe) {\n    return unsafe\n        .replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#039;\");\n}\n\n// Navigate to path\nfunction navigateTo(pathArray) {\n    currentPath = pathArray;\n    renderBreadcrumb();\n    renderFileExplorer();\n    \n    // Hide file content when navigating directories\n    fileContent.innerHTML = '<div class=\"empty-state\"><i class=\"bi bi-file-earmark-text\"></i><p class=\"mb-0\">Select a file to view its contents</p></div>';\n    fileTitle.textContent = 'Select a file';\n    fileActions.style.display = 'none';\n    \n    // Update URL hash\n    const hash = currentPath.length > 0 ? '#' + currentPath.join('/') : '';\n    window.history.pushState(null, '', window.location.pathname + hash);\n}\n\n// Handle back/forward navigation\nwindow.addEventListener('popstate', () => {\n    const hash = window.location.hash.slice(1);\n    currentPath = hash ? hash.split('/') : [];\n    renderBreadcrumb();\n    renderFileExplorer();\n});\n\n// Initialize\nasync function init() {\n    try {\n        // Load file system from inline script or fallback to fetch\n        if (typeof FILE_SYSTEM !== 'undefined') {\n            fileSystem = FILE_SYSTEM;\n        } else {\n            const response = await fetch('data/file-system.json');\n            if (!response.ok) throw new Error('Failed to load file system');\n            fileSystem = await response.json();\n        }\n        \n        // Handle initial navigation based on URL hash\n        const hash = window.location.hash.slice(1);\n        if (hash) {\n            currentPath = hash.split('/').filter(Boolean);\n            // Check if the path exists\n            const item = findItemByPath(currentPath);\n            if (!item) {\n                currentPath = [];\n                window.location.hash = '';\n            } else if (item.type === 'file') {\n                const dirPath = currentPath.slice(0, -1);\n                currentPath = dirPath;\n                renderBreadcrumb();\n                renderFileExplorer();\n                showFileContent(item);\n                return;\n            }\n        }\n        \n        renderBreadcrumb();\n        renderFileExplorer();\n        \n        // Set up refresh button\n        refreshBtn.addEventListener('click', () => {\n            window.location.reload();\n        });\n        \n    } catch (error) {\n        console.error('Error initializing file explorer:', error);\n        fileExplorer.innerHTML = `\n            <div class=\"alert alert-danger m-3\">\n                <i class=\"bi bi-exclamation-triangle-fill\"></i>\n                Failed to load file system: ${error.message}\n            </div>\n        `;\n    }\n}\n\n// Start the application\ndocument.addEventListener('DOMContentLoaded', init);\n"
        },
        {
          "name": "file-explorer.js",
          "type": "file",
          "path": "js/file-explorer.js",
          "size": 20995,
          "content": "// Current path stack\nlet currentPath = [];\nlet fileSystem = null;\n\n// DOM Elements\nconst fileExplorer = document.getElementById('file-explorer');\nconst fileContent = document.getElementById('file-content');\nconst fileTitle = document.getElementById('file-title');\nconst breadcrumb = document.getElementById('breadcrumb');\nconst refreshBtn = document.getElementById('refresh-btn');\nconst copyBtn = document.getElementById('copy-btn');\nconst downloadBtn = document.getElementById('download-btn');\nconst fileActions = document.getElementById('file-actions');\n\n// File type icons\nconst FILE_ICONS = {\n    'directory': 'folder',\n    'file': 'file-earmark',\n    'json': 'filetype-json',\n    'js': 'filetype-js',\n    'css': 'filetype-css',\n    'html': 'filetype-html',\n    'md': 'file-earmark-text',\n    'py': 'filetype-py',\n    'jpg': 'file-image',\n    'jpeg': 'file-image',\n    'png': 'file-image',\n    'gif': 'file-image',\n    'svg': 'file-image'\n};\n\n// Get file icon based on file extension\nfunction getFileIcon(name, type) {\n    if (type === 'directory') return 'folder';\n    const ext = name.split('.').pop().toLowerCase();\n    return FILE_ICONS[ext] || 'file-earmark';\n}\n\n// Format file size\nfunction formatFileSize(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\n// Render breadcrumb\nfunction renderBreadcrumb() {\n    breadcrumb.innerHTML = '';\n    \n    // Add root/home\n    const homeItem = document.createElement('li');\n    homeItem.className = 'breadcrumb-item' + (currentPath.length === 0 ? ' active' : '');\n    const homeLink = document.createElement('a');\n    homeLink.href = '#';\n    homeLink.textContent = 'Home';\n    homeLink.addEventListener('click', (e) => {\n        e.preventDefault();\n        navigateTo([]);\n    });\n    homeItem.appendChild(homeLink);\n    breadcrumb.appendChild(homeItem);\n    \n    // Add path segments\n    let currentPathStr = '';\n    currentPath.forEach((segment, index) => {\n        currentPathStr += (currentPathStr ? '/' : '') + segment;\n        const isLast = index === currentPath.length - 1;\n        \n        const item = document.createElement('li');\n        item.className = 'breadcrumb-item' + (isLast ? ' active' : '');\n        \n        if (!isLast) {\n            const link = document.createElement('a');\n            link.href = '#';\n            link.textContent = segment;\n            const pathToNavigate = currentPath.slice(0, index + 1);\n            link.addEventListener('click', (e) => {\n                e.preventDefault();\n                navigateTo(pathToNavigate);\n            });\n            item.appendChild(link);\n        } else {\n            item.textContent = segment;\n        }\n        \n        breadcrumb.appendChild(item);\n    });\n}\n\n// Find item by path\nfunction findItemByPath(pathArray, root = fileSystem) {\n    let current = root;\n    \n    for (const segment of pathArray) {\n        if (!current.children) return null;\n        const found = current.children.find(item => item.name === segment);\n        if (!found) return null;\n        current = found;\n    }\n    \n    return current;\n}\n\n// Render file explorer\nfunction renderFileExplorer() {\n    fileExplorer.innerHTML = '';\n    \n    // Get current directory\n    const currentDir = currentPath.length === 0 ? fileSystem : findItemByPath(currentPath);\n    if (!currentDir || !currentDir.children) return;\n    \n    // Sort: directories first, then files, both alphabetically\n    const sortedItems = [...currentDir.children].sort((a, b) => {\n        if (a.type === b.type) {\n            return a.name.localeCompare(b.name);\n        }\n        return a.type === 'directory' ? -1 : 1;\n    });\n    \n    // Render each item\n    sortedItems.forEach(item => {\n        const itemElement = document.createElement('div');\n        itemElement.className = `file-item ${item.type === 'directory' ? 'dir-item' : ''}`;\n        \n        const icon = document.createElement('i');\n        icon.className = `bi bi-${getFileIcon(item.name, item.type)}`;\n        \n        const name = document.createElement('span');\n        name.textContent = item.name;\n        \n        const size = document.createElement('span');\n        size.className = 'file-size';\n        size.textContent = item.type === 'file' ? formatFileSize(item.size || 0) : '';\n        \n        itemElement.appendChild(icon);\n        itemElement.appendChild(name);\n        itemElement.appendChild(size);\n        \n        itemElement.addEventListener('click', (e) => {\n            e.stopPropagation();\n            if (item.type === 'directory') {\n                navigateTo([...currentPath, item.name]);\n            } else {\n                showFileContent(item);\n            }\n        });\n        \n        fileExplorer.appendChild(itemElement);\n    });\n    \n    // Show empty state if no items\n    if (sortedItems.length === 0) {\n        const emptyState = document.createElement('div');\n        emptyState.className = 'empty-state';\n        emptyState.innerHTML = `\n            <i class=\"bi bi-folder-x\"></i>\n            <p class=\"mb-0\">This directory is empty</p>\n        `;\n        fileExplorer.appendChild(emptyState);\n    }\n}\n\n// Show file content\nfunction showFileContent(file) {\n    fileTitle.textContent = file.name;\n    fileActions.style.display = 'block';\n    \n    // Set up copy button\n    copyBtn.onclick = () => {\n        navigator.clipboard.writeText(file.content || '');\n        const originalText = copyBtn.innerHTML;\n        copyBtn.innerHTML = '<i class=\"bi bi-check\"></i>';\n        setTimeout(() => {\n            copyBtn.innerHTML = originalText;\n        }, 2000);\n    };\n    \n    // Set up download button\n    downloadBtn.onclick = () => {\n        const blob = new Blob([file.content || ''], { type: 'text/plain' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = file.name;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n    };\n    \n    // Determine content type and render accordingly\n    let content = '';\n    const ext = file.name.split('.').pop().toLowerCase();\n    \n    if (['jpg', 'jpeg', 'png', 'gif', 'svg'].includes(ext)) {\n        // For images, create an image element\n        content = `<div class=\"text-center\"><img src=\"${file.path}\" class=\"img-fluid\" alt=\"${file.name}\" onerror=\"this.parentElement.innerHTML='<i class=\\'bi bi-file-earmark-image\\'></i> <span>Cannot display image</span>';\"></div>`;\n    } else if (file.content) {\n        // For text files, use highlight.js\n        let codeClass = '';\n        let codeContent = file.content;\n        \n        switch(ext) {\n            case 'js':\n                codeClass = 'javascript';\n                break;\n            case 'json':\n                codeClass = 'json';\n                try { codeContent = JSON.stringify(JSON.parse(file.content), null, 2); } catch(e) {}\n                break;\n            case 'html':\n                codeClass = 'html';\n                break;\n            case 'css':\n                codeClass = 'css';\n                break;\n            case 'md':\n                // Render markdown\n                content = `<div class=\"markdown-body\">${window.marked.parse(file.content)}</div>`;\n                break;\n            default:\n                codeClass = '';\n        }\n        \n        if (content === '') {\n            content = `<pre><code class=\"${codeClass}\">${escapeHtml(codeContent)}</code></pre>`;\n        }\n    } else {\n        content = '<div class=\"empty-state\"><i class=\"bi bi-file-earmark\"></i><p class=\"mb-0\">No content to display</p></div>';\n    }\n    \n    fileContent.innerHTML = content;\n    \n    // Apply syntax highlighting\n    if (file.content && !['md', 'jpg', 'jpeg', 'png', 'gif', 'svg'].includes(ext)) {\n        document.querySelectorAll('pre code').forEach((block) => {\n            hljs.highlightElement(block);\n        });\n    }\n    \n    // Update active state\n    document.querySelectorAll('.file-item').forEach(el => el.classList.remove('active'));\n    const activeItem = Array.from(document.querySelectorAll('.file-item')).find(el => \n        el.textContent.trim().startsWith(file.name)\n    );\n    if (activeItem) activeItem.classList.add('active');\n}\n\n// Helper to escape HTML\nfunction escapeHtml(unsafe) {\n    return unsafe\n        .replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#039;\");\n}\n\n// Navigate to path\nfunction navigateTo(pathArray) {\n    currentPath = pathArray;\n    renderBreadcrumb();\n    renderFileExplorer();\n    \n    // Hide file content when navigating directories\n    fileContent.innerHTML = '<div class=\"empty-state\"><i class=\"bi bi-file-earmark-text\"></i><p class=\"mb-0\">Select a file to view its contents</p></div>';\n    fileTitle.textContent = 'Select a file';\n    fileActions.style.display = 'none';\n    \n    // Update URL hash\n    const hash = currentPath.length > 0 ? '#' + currentPath.join('/') : '';\n    window.history.pushState(null, '', window.location.pathname + hash);\n}\n\n// Handle back/forward navigation\nwindow.addEventListener('popstate', () => {\n    const hash = window.location.hash.slice(1);\n    currentPath = hash ? hash.split('/') : [];\n    renderBreadcrumb();\n    renderFileExplorer();\n});\n\n// Initialize\nasync function init() {\n    try {\n        // Load file system from inline script or fallback to fetch\n        if (typeof FILE_SYSTEM !== 'undefined') {\n            fileSystem = FILE_SYSTEM;\n        } else {\n            const response = await fetch('data/file-system.json');\n            if (!response.ok) throw new Error('Failed to load file system');\n            fileSystem = await response.json();\n        }\n        \n        // Handle initial navigation based on URL hash\n        const hash = window.location.hash.slice(1);\n        if (hash) {\n            currentPath = hash.split('/').filter(Boolean);\n            // Check if the path exists\n            const item = findItemByPath(currentPath);\n            if (!item) {\n                currentPath = [];\n                window.location.hash = '';\n            } else if (item.type === 'file') {\n                const dirPath = currentPath.slice(0, -1);\n                currentPath = dirPath;\n                renderBreadcrumb();\n                renderFileExplorer();\n                showFileContent(item);\n                return;\n            }\n        }\n        \n        renderBreadcrumb();\n        renderFileExplorer();\n        \n        // Set up refresh button\n        refreshBtn.addEventListener('click', () => {\n            window.location.reload();\n        });\n        \n    } catch (error) {\n        console.error('Error initializing file explorer:', error);\n        fileExplorer.innerHTML = `\n            <div class=\"alert alert-danger m-3\">\n                <i class=\"bi bi-exclamation-triangle-fill\"></i>\n                Failed to load file system: ${error.message}\n            </div>\n        `;\n    }\n}\n\n// Start the application\ndocument.addEventListener('DOMContentLoaded', init);\n\n    const fileContent = document.getElementById('file-content');\n    if (fileContent) {\n        fileContent.innerHTML = `\n            <div class=\"p-4 text-center text-danger\">\n                <i class=\"bi bi-exclamation-triangle-fill\" style=\"font-size: 3rem;\"></i>\n                <h4 class=\"mt-3\">Error</h4>\n                <p class=\"mb-0\">${message}</p>\n            </div>`;\n    }\n}\n\n// State\nlet currentPath = '';\nlet currentFile = null;\n\n// Format file size\nfunction formatFileSize(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\n// Get file icon based on extension\nfunction getFileIcon(filename) {\n    const extension = filename.split('.').pop().toLowerCase();\n    \n    if (['jpg', 'jpeg', 'png', 'gif', 'svg'].includes(extension)) {\n        return 'file-image';\n    } else if (['js', 'jsx', 'ts', 'tsx', 'py', 'java', 'c', 'cpp', 'go', 'rs'].includes(extension)) {\n        return 'file-code';\n    } else if (['md', 'txt'].includes(extension)) {\n        return 'file-text';\n    } else if (['json', 'yaml', 'yml', 'xml'].includes(extension)) {\n        return 'file-code';\n    } else if (['pdf'].includes(extension)) {\n        return 'file-pdf';\n    } else if (['zip', 'tar', 'gz', 'rar'].includes(extension)) {\n        return 'file-zip';\n    } else {\n        return 'file-earmark';\n    }\n}\n\n// Render file content\nfunction renderFileContent(content, filename) {\n    const fileContent = document.getElementById('file-content');\n    const extension = filename.split('.').pop().toLowerCase();\n    \n    if (extension === 'md') {\n        fileContent.innerHTML = `\n            <div class=\"p-4\">\n                <div class=\"markdown-body\">\n                    ${marked(content || 'No content available')}\n                </div>\n            </div>`;\n    } else if (['js', 'jsx', 'ts', 'tsx', 'py', 'java', 'c', 'cpp', 'go', 'rs', 'css', 'html', 'json', 'yaml', 'yml', 'xml'].includes(extension)) {\n        fileContent.innerHTML = `\n            <div class=\"p-3\">\n                <pre><code class=\"language-${extension}\">${content || ''}</code></pre>\n            </div>`;\n        hljs.highlightAll();\n    } else {\n        fileContent.innerHTML = `\n            <div class=\"p-4\">\n                <pre class=\"mb-0\">${content || 'No content available'}</pre>\n            </div>`;\n    }\n}\n\n// Update breadcrumb navigation\nfunction updateBreadcrumb(path) {\n    const breadcrumb = document.getElementById('breadcrumb');\n    const parts = path ? path.split('/').filter(p => p) : [];\n    \n    let breadcrumbHtml = '<li class=\"breadcrumb-item\"><a href=\"#\" onclick=\"navigateTo(\\'\\')\">Root</a></li>';\n    \n    let currentPath = '';\n    parts.forEach((part, index) => {\n        currentPath += (currentPath ? '/' : '') + part;\n        const isLast = index === parts.length - 1;\n        \n        if (isLast) {\n            breadcrumbHtml += `\n                <li class=\"breadcrumb-item active\" aria-current=\"page\">${part}</li>`;\n        } else {\n            breadcrumbHtml += `\n                <li class=\"breadcrumb-item\"><a href=\"#\" onclick=\"navigateTo('${currentPath}')\">${part}</a></li>`;\n        }\n    });\n    \n    breadcrumb.innerHTML = breadcrumbHtml;\n}\n\n// Find node by path\nfunction findNodeByPath(path) {\n    if (!path) return FILE_SYSTEM;\n    \n    const parts = path.split('/').filter(p => p);\n    let node = FILE_SYSTEM;\n    \n    for (const part of parts) {\n        const found = node.children?.find(child => child.name === part);\n        if (!found) return null;\n        node = found;\n    }\n    \n    return node;\n}\n\n// Render file explorer\nfunction renderFileExplorer(path) {\n    const explorer = document.getElementById('file-explorer');\n    const node = findNodeByPath(path);\n    \n    if (!node || node.type !== 'directory') {\n        explorer.innerHTML = `\n            <div class=\"list-group-item text-center py-4 text-muted\">\n                <i class=\"bi bi-exclamation-triangle\"></i>\n                <div class=\"mt-2\">Directory not found</div>\n            </div>`;\n        return;\n    }\n    \n    let content = '';\n    const dirs = [];\n    const files = [];\n    \n    // Separate directories and files\n    (node.children || []).forEach(child => {\n        if (child.type === 'directory') {\n            dirs.push(child);\n        } else {\n            files.push(child);\n        }\n    });\n    \n    // Sort directories and files\n    dirs.sort((a, b) => a.name.localeCompare(b.name));\n    files.sort((a, b) => a.name.localeCompare(b.name));\n    \n    // Add parent directory link if not in root\n    if (path) {\n        const parentPath = path.split('/').slice(0, -1).join('/');\n        content += `\n            <div class=\"list-group-item list-group-item-action\" onclick=\"navigateTo('${parentPath}')\">\n                <i class=\"bi bi-folder2\"></i> ..\n            </div>`;\n    }\n    \n    // Add directories\n    dirs.forEach(dir => {\n        content += `\n            <div class=\"list-group-item list-group-item-action dir-item\" \n                 onclick=\"navigateTo('${dir.path}')\">\n                <i class=\"bi bi-folder2\"></i> ${dir.name}\n            </div>`;\n    });\n    \n    // Add files\n    files.forEach(file => {\n        const icon = getFileIcon(file.name);\n        const isActive = currentFile === file.path ? 'active' : '';\n        content += `\n            <div class=\"list-group-item list-group-item-action ${isActive}\" \n                 onclick=\"openFile('${file.path}')\" \n                 data-path=\"${file.path}\">\n                <i class=\"bi bi-${icon}\"></i> ${file.name}\n                <span class=\"float-end text-muted small\">${formatFileSize(file.size)}</span>\n            </div>`;\n    });\n    \n    explorer.innerHTML = content || `\n        <div class=\"list-group-item text-center py-4 text-muted\">\n            <i class=\"bi bi-folder-x\"></i>\n            <div class=\"mt-2\">Directory is empty</div>\n        </div>`;\n    \n    // Update file count\n    const fileCount = document.getElementById('file-count');\n    if (dirs.length === 0 && files.length === 0) {\n        fileCount.textContent = 'Empty';\n    } else {\n        fileCount.textContent = `${dirs.length} ${dirs.length === 1 ? 'folder' : 'folders'}, ${files.length} ${files.length === 1 ? 'file' : 'files'}`;\n    }\n}\n\n// Navigate to directory\nfunction navigateTo(path) {\n    currentPath = path;\n    currentFile = null;\n    renderFileExplorer(path);\n    updateBreadcrumb(path);\n    \n    // Update file content view\n    const fileContent = document.getElementById('file-content');\n    fileContent.innerHTML = `\n        <div class=\"p-4 text-center text-muted\">\n            <i class=\"bi bi-folder2-open\" style=\"font-size: 3rem; opacity: 0.5;\"></i>\n            <h4 class=\"mt-3\">${path ? path.split('/').pop() || 'Root' : 'Root'}</h4>\n            <p class=\"mb-0\">Select a file to view its contents</p>\n        </div>`;\n}\n\n// Open file\nfunction openFile(path) {\n    const node = findNodeByPath(path);\n    if (!node || node.type !== 'file') return;\n    \n    currentFile = path;\n    \n    // Update active state in file list\n    document.querySelectorAll('.file-item').forEach(item => {\n        item.classList.remove('active');\n        if (item.getAttribute('data-path') === path) {\n            item.classList.add('active');\n        }\n    });\n    \n    // Render file content\n    renderFileContent(node.content, node.name);\n}\n\n// Initialize file explorer\nasync function initFileExplorer() {\n    // Show loading state\n    const explorer = document.getElementById('file-explorer');\n    if (explorer) {\n        explorer.innerHTML = `\n            <div class=\"list-group-item text-center py-4\">\n                <div class=\"spinner-border text-primary\" role=\"status\">\n                    <span class=\"visually-hidden\">Loading...</span>\n                </div>\n                <div class=\"mt-2 text-muted\">Loading file system...</div>\n            </div>`;\n    }\n\n    // Load file system\n    await loadFileSystem();\n    \n    if (!FILE_SYSTEM) {\n        return; // Error already shown by loadFileSystem\n    }\n    \n    // Make functions available globally\n    window.navigateTo = navigateTo;\n    window.openFile = openFile;\n    \n    // Set up download button\n    document.getElementById('download-btn').addEventListener('click', function() {\n        if (currentFile) {\n            const node = findNodeByPath(currentFile);\n            if (node && node.type === 'file') {\n                const blob = new Blob([node.content || ''], { type: 'text/plain' });\n                const url = URL.createObjectURL(blob);\n                const a = document.createElement('a');\n                a.href = url;\n                a.download = node.name;\n                document.body.appendChild(a);\n                a.click();\n                document.body.removeChild(a);\n                URL.revokeObjectURL(url);\n            }\n        }\n    });\n    \n    // Set up copy button\n    document.getElementById('copy-btn').addEventListener('click', function() {\n        if (currentFile) {\n            const node = findNodeByPath(currentFile);\n            if (node && node.type === 'file') {\n                navigator.clipboard.writeText(node.content || '');\n                const btn = this;\n                const originalHTML = btn.innerHTML;\n                btn.innerHTML = '<i class=\"bi bi-check\"></i>';\n                setTimeout(() => {\n                    btn.innerHTML = originalHTML;\n                }, 2000);\n            }\n        }\n    });\n    \n    // Initial render\n    navigateTo('');\n}\n\n// Start the application when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', initFileExplorer);\n"
        }
      ]
    },
    {
      "name": "keycloak",
      "type": "directory",
      "path": "keycloak",
      "children": [
        {
          "name": "certs",
          "type": "directory",
          "path": "keycloak/certs",
          "children": []
        },
        {
          "name": "conf",
          "type": "directory",
          "path": "keycloak/conf",
          "children": [
            {
              "name": "cache-ispn.xml",
              "type": "file",
              "path": "keycloak/conf/cache-ispn.xml",
              "size": 2301,
              "content": "<infinispan\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"urn:infinispan:config:12.1\"\n    xmlns=\"urn:infinispan:config:12.1\">\n\n    <jgroups>\n        <stack name=\"tcp\" extends=\"tcp\">\n            <TCP bind_port=\"7800\" port_range=\"30\" recv_buf_size=\"20000000\" send_buf_size=\"640000\"/>\n            <JDBC_PING connection_url=\"jdbc:postgresql://keycloak-db:5432/keycloak\"\n                      connection_username=\"${env.KEYCLOAK_DATABASE_USER}\"\n                      connection_password=\"${env.KEYCLOAK_DATABASE_PASSWORD}\"\n                      initialize_sql=\"CREATE TABLE IF NOT EXISTS JGROUPSPING (own_addr VARCHAR(200) NOT NULL, cluster_name VARCHAR(200) NOT NULL, updated TIMESTAMP, ping_data BYTEA, CONSTRAINT pk_jgroupsping PRIMARY KEY (own_addr, cluster_name))\"/>\n            <MERGE3 min_interval=\"10000\" max_interval=\"30000\"/>\n            <FD_SOCK/>\n            <FD_ALL timeout=\"30000\" interval=\"5000\" />\n            <VERIFY_SUSPECT timeout=\"1500\" />\n            <pbcast.NAKACK2 xmit_interval=\"500\" xmit_table_num_rows=\"100\" xmit_msgs_min_size=\"5000\" use_mcast_xmit=\"false\" discard_delivered_msgs=\"true\"/>\n            <UNICAST3 xmit_interval=\"500\" xmit_table_num_rows=\"10\" xmit_table_max_compaction_time=\"10000\" conn_close_timeout=\"5000\" />\n            <pbcast.STABLE stability_delay=\"500\" desired_avg_gossip=\"5000\" max_bytes=\"400000\"/>\n            <pbcast.GMS print_local_addr=\"true\" join_timeout=\"3000\" max_bundling_time=\"500\"/>\n            <UFC max_credits=\"2000000\" min_threshold=\"0.4\"/>\n            <MFC max_credits=\"2000000\" min_threshold=\"0.4\"/>\n            <FRAG3/>\n        </stack>\n    </jgroups>\n\n    <cache-container name=\"keycloak\">\n        <transport stack=\"tcp\" node-name=\"${jboss.node.name:keycloak}\"/>\n        <local-cache name=\"realms\"/>\n        <local-cache name=\"users\"/>\n        <local-cache name=\"sessions\"/>\n        <local-cache name=\"offlineSessions\"/>\n        <local-cache name=\"loginFailures\"/>\n        <local-cache name=\"work\"/>\n        <local-cache name=\"authorization\"/>\n        <local-cache name=\"keys\">\n            <expiration max-idle=\"3600000\"/>\n        </local-cache>\n        <local-cache name=\"actionTokens\">\n            <expiration max-idle=\"-1\" interval=\"300000\"/>\n        </local-cache>\n    </cache-container>\n</infinispan>\n"
            }
          ]
        },
        {
          "name": "import",
          "type": "directory",
          "path": "keycloak/import",
          "children": []
        },
        {
          "name": "themes",
          "type": "directory",
          "path": "keycloak/themes",
          "children": []
        },
        {
          "name": "cache-local.xml",
          "type": "file",
          "path": "keycloak/cache-local.xml",
          "size": 1473,
          "content": "<infinispan\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"urn:infinispan:server:14.0\n    https://infinispan.org/schemas/infinispan-server-14.0.xsd\"\n    xmlns=\"urn:infinispan:server:14.0\">\n\n    <cache-container name=\"keycloak\">\n        <local-cache name=\"realms\">\n            <encoding>\n                <key media-type=\"application/x-java-object\"/>\n                <value media-type=\"application/x-java-object\"/>\n            </encoding>\n            <memory max-count=\"10000\" when-full=\"REMOVE\"/>\n        </local-cache>\n        <local-cache name=\"users\">\n            <encoding>\n                <key media-type=\"application/x-java-object\"/>\n                <value media-type=\"application/x-java-object\"/>\n            </encoding>\n            <memory max-count=\"10000\" when-full=\"REMOVE\"/>\n        </local-cache>\n        <local-cache name=\"sessions\">\n            <encoding>\n                <key media-type=\"application/x-java-object\"/>\n                <value media-type=\"application/x-java-object\"/>\n            </encoding>\n            <memory max-count=\"10000\" when-full=\"REMOVE\"/>\n        </local-cache>\n        <local-cache name=\"login-failures\">\n            <encoding>\n                <key media-type=\"application/x-java-object\"/>\n                <value media-type=\"application/x-java-object\"/>\n            </encoding>\n            <memory max-count=\"10000\" when-full=\"REMOVE\"/>\n        </local-cache>\n    </cache-container>\n</infinispan>\n"
        },
        {
          "name": "keycloak-setup.json",
          "type": "file",
          "path": "keycloak/keycloak-setup.json",
          "size": 0,
          "content": ""
        },
        {
          "name": "setup-keycloak.sh",
          "type": "file",
          "path": "keycloak/setup-keycloak.sh",
          "size": 15104,
          "content": "#!/bin/bash\n\n# setup-keycloak.sh - Automatyczne skonfigurowanie Keycloak dla Media Vault\n\nset -e\n\necho \"🔐 Konfigurowanie Keycloak dla Media Vault...\"\n\n# Kolory dla output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nNC='\\033[0m' # No Color\n\n# Konfiguracja\nKEYCLOAK_URL=\"https://localhost:8445\"\nADMIN_USER=\"admin\"\nADMIN_PASS=\"admin123\"\nREALM_NAME=\"media-vault\"\n\n# Funkcje pomocnicze\nprint_status() {\n    echo -e \"${GREEN}✅ $1${NC}\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}⚠️  $1${NC}\"\n}\n\nprint_error() {\n    echo -e \"${RED}❌ $1${NC}\"\n}\n\n# Sprawdź czy Keycloak jest dostępny\nwait_for_keycloak() {\n    echo \"⏳ Oczekiwanie na uruchomienie Keycloak...\"\n    for i in {1..60}; do\n        if curl -f -s \"$KEYCLOAK_URL/health/ready\" > /dev/null 2>&1; then\n            print_status \"Keycloak jest gotowy\"\n            return 0\n        fi\n        echo \"Próba $i/60 - Keycloak nie jest jeszcze gotowy...\"\n        sleep 5\n    done\n    print_error \"Keycloak nie uruchomił się w czasie 5 minut\"\n    return 1\n}\n\n# Uzyskaj access token\nget_admin_token() {\n    echo \"🔑 Uzyskiwanie tokenu administratora...\"\n\n    RESPONSE=$(curl -s -X POST \"$KEYCLOAK_URL/realms/master/protocol/openid_connect/token\" \\\n        -H \"Content-Type: application/x-www-form-urlencoded\" \\\n        -d \"username=$ADMIN_USER\" \\\n        -d \"password=$ADMIN_PASS\" \\\n        -d \"grant_type=password\" \\\n        -d \"client_id=admin-cli\")\n\n    TOKEN=$(echo $RESPONSE | jq -r '.access_token')\n\n    if [ \"$TOKEN\" == \"null\" ] || [ -z \"$TOKEN\" ]; then\n        print_error \"Nie udało się uzyskać tokenu administratora\"\n        echo \"Response: $RESPONSE\"\n        return 1\n    fi\n\n    print_status \"Token administratora uzyskany\"\n    export ADMIN_TOKEN=\"$TOKEN\"\n}\n\n# Stwórz realm Media Vault\ncreate_realm() {\n    echo \"🏰 Tworzenie realm 'media-vault'...\"\n\n    # Sprawdź czy realm już istnieje\n    REALM_CHECK=$(curl -s -H \"Authorization: Bearer $ADMIN_TOKEN\" \\\n        \"$KEYCLOAK_URL/admin/realms/$REALM_NAME\" \\\n        -w \"%{http_code}\" -o /dev/null)\n\n    if [ \"$REALM_CHECK\" == \"200\" ]; then\n        print_warning \"Realm '$REALM_NAME' już istnieje\"\n        return 0\n    fi\n\n    # Stwórz realm\n    curl -s -X POST \"$KEYCLOAK_URL/admin/realms\" \\\n        -H \"Authorization: Bearer $ADMIN_TOKEN\" \\\n        -H \"Content-Type: application/json\" \\\n        -d '{\n            \"realm\": \"media-vault\",\n            \"enabled\": true,\n            \"displayName\": \"Media Vault\",\n            \"registrationAllowed\": true,\n            \"registrationEmailAsUsername\": true,\n            \"rememberMe\": true,\n            \"verifyEmail\": false,\n            \"loginWithEmailAllowed\": true,\n            \"duplicateEmailsAllowed\": false,\n            \"resetPasswordAllowed\": true,\n            \"editUsernameAllowed\": false,\n            \"bruteForceProtected\": true\n        }'\n\n    print_status \"Realm '$REALM_NAME' utworzony\"\n}\n\n# Stwórz role\ncreate_roles() {\n    echo \"👥 Tworzenie ról...\"\n\n    # Role do utworzenia\n    ROLES=(\"vault-user\" \"vault-admin\" \"vault-analyzer\")\n\n    for role in \"${ROLES[@]}\"; do\n        curl -s -X POST \"$KEYCLOAK_URL/admin/realms/$REALM_NAME/roles\" \\\n            -H \"Authorization: Bearer $ADMIN_TOKEN\" \\\n            -H \"Content-Type: application/json\" \\\n            -d \"{\n                \\\"name\\\": \\\"$role\\\",\n                \\\"description\\\": \\\"$role role for Media Vault\\\"\n            }\"\n        print_status \"Rola '$role' utworzona\"\n    done\n}\n\n# Stwórz klientów\ncreate_clients() {\n    echo \"📱 Tworzenie klientów...\"\n\n    # Frontend Client (public)\n    curl -s -X POST \"$KEYCLOAK_URL/admin/realms/$REALM_NAME/clients\" \\\n        -H \"Authorization: Bearer $ADMIN_TOKEN\" \\\n        -H \"Content-Type: application/json\" \\\n        -d '{\n            \"clientId\": \"media-vault-frontend\",\n            \"name\": \"Media Vault Frontend\",\n            \"enabled\": true,\n            \"publicClient\": true,\n            \"standardFlowEnabled\": true,\n            \"implicitFlowEnabled\": false,\n            \"directAccessGrantsEnabled\": false,\n            \"serviceAccountsEnabled\": false,\n            \"protocol\": \"openid-connect\",\n            \"fullScopeAllowed\": true,\n            \"redirectUris\": [\n                \"http://localhost:3000/*\",\n                \"http://localhost/*\"\n            ],\n            \"webOrigins\": [\n                \"http://localhost:3000\",\n                \"http://localhost\"\n            ],\n            \"defaultClientScopes\": [\n                \"web-origins\",\n                \"profile\",\n                \"roles\",\n                \"email\"\n            ]\n        }'\n\n    print_status \"Klient 'media-vault-frontend' utworzony\"\n\n    # API Client (confidential)\n    curl -s -X POST \"$KEYCLOAK_URL/admin/realms/$REALM_NAME/clients\" \\\n        -H \"Authorization: Bearer $ADMIN_TOKEN\" \\\n        -H \"Content-Type: application/json\" \\\n        -d '{\n            \"clientId\": \"media-vault-api\",\n            \"name\": \"Media Vault API\",\n            \"enabled\": true,\n            \"publicClient\": false,\n            \"standardFlowEnabled\": true,\n            \"implicitFlowEnabled\": false,\n            \"directAccessGrantsEnabled\": true,\n            \"serviceAccountsEnabled\": true,\n            \"protocol\": \"openid-connect\",\n            \"secret\": \"vault-api-secret-123\",\n            \"redirectUris\": [\"*\"],\n            \"webOrigins\": [\"*\"],\n            \"defaultClientScopes\": [\n                \"web-origins\",\n                \"profile\",\n                \"roles\",\n                \"email\"\n            ]\n        }'\n\n    print_status \"Klient 'media-vault-api' utworzony\"\n\n    # Admin Client (public)\n    curl -s -X POST \"$KEYCLOAK_URL/admin/realms/$REALM_NAME/clients\" \\\n        -H \"Authorization: Bearer $ADMIN_TOKEN\" \\\n        -H \"Content-Type: application/json\" \\\n        -d '{\n            \"clientId\": \"media-vault-admin\",\n            \"name\": \"Media Vault Admin Panel\",\n            \"enabled\": true,\n            \"publicClient\": true,\n            \"standardFlowEnabled\": true,\n            \"implicitFlowEnabled\": false,\n            \"directAccessGrantsEnabled\": false,\n            \"serviceAccountsEnabled\": false,\n            \"protocol\": \"openid-connect\",\n            \"redirectUris\": [\n                \"http://localhost:3001/*\",\n                \"http://localhost/admin/*\"\n            ],\n            \"webOrigins\": [\n                \"http://localhost:3001\",\n                \"http://localhost\"\n            ],\n            \"defaultClientScopes\": [\n                \"web-origins\",\n                \"profile\",\n                \"roles\",\n                \"email\"\n            ]\n        }'\n\n    print_status \"Klient 'media-vault-admin' utworzony\"\n}\n\n# Stwórz użytkowników testowych\ncreate_users() {\n    echo \"👤 Tworzenie użytkowników testowych...\"\n\n    # Admin user\n    USER_ID=$(curl -s -X POST \"$KEYCLOAK_URL/admin/realms/$REALM_NAME/users\" \\\n        -H \"Authorization: Bearer $ADMIN_TOKEN\" \\\n        -H \"Content-Type: application/json\" \\\n        -d '{\n            \"username\": \"vaultadmin\",\n            \"enabled\": true,\n            \"emailVerified\": true,\n            \"firstName\": \"Vault\",\n            \"lastName\": \"Administrator\",\n            \"email\": \"admin@mediavault.local\",\n            \"credentials\": [\n                {\n                    \"type\": \"password\",\n                    \"value\": \"admin123\",\n                    \"temporary\": false\n                }\n            ]\n        }' -D - | grep -i location | cut -d'/' -f8 | tr -d '\\r')\n\n    # Przypisz role admin\n    curl -s -X POST \"$KEYCLOAK_URL/admin/realms/$REALM_NAME/users/$USER_ID/role-mappings/realm\" \\\n        -H \"Authorization: Bearer $ADMIN_TOKEN\" \\\n        -H \"Content-Type: application/json\" \\\n        -d '[\n            {\"name\": \"vault-admin\"},\n            {\"name\": \"vault-user\"}\n        ]'\n\n    print_status \"Użytkownik 'vaultadmin' utworzony z rolą admin\"\n\n    # Regular user\n    USER_ID=$(curl -s -X POST \"$KEYCLOAK_URL/admin/realms/$REALM_NAME/users\" \\\n        -H \"Authorization: Bearer $ADMIN_TOKEN\" \\\n        -H \"Content-Type: application/json\" \\\n        -d '{\n            \"username\": \"vaultuser\",\n            \"enabled\": true,\n            \"emailVerified\": true,\n            \"firstName\": \"Vault\",\n            \"lastName\": \"User\",\n            \"email\": \"user@mediavault.local\",\n            \"credentials\": [\n                {\n                    \"type\": \"password\",\n                    \"value\": \"user123\",\n                    \"temporary\": false\n                }\n            ]\n        }' -D - | grep -i location | cut -d'/' -f8 | tr -d '\\r')\n\n    # Przypisz rolę user\n    curl -s -X POST \"$KEYCLOAK_URL/admin/realms/$REALM_NAME/users/$USER_ID/role-mappings/realm\" \\\n        -H \"Authorization: Bearer $ADMIN_TOKEN\" \\\n        -H \"Content-Type: application/json\" \\\n        -d '[\n            {\"name\": \"vault-user\"}\n        ]'\n\n    print_status \"Użytkownik 'vaultuser' utworzony z rolą user\"\n}\n\n# Konfiguruj ustawienia realm\nconfigure_realm_settings() {\n    echo \"⚙️ Konfigurowanie ustawień realm...\"\n\n    # Update realm settings\n    curl -s -X PUT \"$KEYCLOAK_URL/admin/realms/$REALM_NAME\" \\\n        -H \"Authorization: Bearer $ADMIN_TOKEN\" \\\n        -H \"Content-Type: application/json\" \\\n        -d '{\n            \"realm\": \"media-vault\",\n            \"enabled\": true,\n            \"displayName\": \"Media Vault\",\n            \"registrationAllowed\": true,\n            \"registrationEmailAsUsername\": true,\n            \"rememberMe\": true,\n            \"verifyEmail\": false,\n            \"loginWithEmailAllowed\": true,\n            \"duplicateEmailsAllowed\": false,\n            \"resetPasswordAllowed\": true,\n            \"editUsernameAllowed\": false,\n            \"bruteForceProtected\": true,\n            \"passwordPolicy\": \"length(8) and digits(1) and lowerCase(1) and upperCase(1)\",\n            \"sslRequired\": \"none\",\n            \"loginTheme\": \"keycloak\",\n            \"adminTheme\": \"keycloak\",\n            \"emailTheme\": \"keycloak\",\n            \"accountTheme\": \"keycloak\",\n            \"accessTokenLifespan\": 300,\n            \"accessTokenLifespanForImplicitFlow\": 900,\n            \"ssoSessionIdleTimeout\": 1800,\n            \"ssoSessionMaxLifespan\": 36000,\n            \"offlineSessionIdleTimeout\": 2592000,\n            \"offlineSessionMaxLifespanEnabled\": false,\n            \"accessCodeLifespan\": 60,\n            \"accessCodeLifespanUserAction\": 300,\n            \"accessCodeLifespanLogin\": 1800\n        }'\n\n    print_status \"Ustawienia realm zaktualizowane\"\n}\n\n# Sprawdź czy wymagane narzędzia są zainstalowane\ncheck_dependencies() {\n    echo \"🔍 Sprawdzanie zależności...\"\n\n    if ! command -v curl &> /dev/null; then\n        print_error \"curl nie jest zainstalowany\"\n        exit 1\n    fi\n\n    if ! command -v jq &> /dev/null; then\n        print_warning \"jq nie jest zainstalowany - instalowanie...\"\n        if command -v apt-get &> /dev/null; then\n            sudo apt-get update && sudo apt-get install -y jq\n        elif command -v yum &> /dev/null; then\n            sudo yum install -y jq\n        elif command -v brew &> /dev/null; then\n            brew install jq\n        else\n            print_error \"Nie można zainstalować jq automatycznie. Zainstaluj ręcznie.\"\n            exit 1\n        fi\n    fi\n\n    print_status \"Wszystkie zależności są dostępne\"\n}\n\n# Wyexportuj konfigurację realm\nexport_realm_config() {\n    echo \"📤 Eksportowanie konfiguracji realm...\"\n\n    curl -s -X GET \"$KEYCLOAK_URL/admin/realms/$REALM_NAME\" \\\n        -H \"Authorization: Bearer $ADMIN_TOKEN\" \\\n        > \"media-vault-realm-export.json\"\n\n    print_status \"Konfiguracja realm wyeksportowana do 'media-vault-realm-export.json'\"\n}\n\n# Pokaż podsumowanie\nshow_summary() {\n    echo \"\"\n    echo \"🎉 Konfiguracja Keycloak dla Media Vault zakończona!\"\n    echo \"\"\n    echo \"📋 Podsumowanie:\"\n    echo \"├── Keycloak URL: $KEYCLOAK_URL\"\n    echo \"├── Realm: $REALM_NAME\"\n    echo \"├── Admin Console: $KEYCLOAK_URL/admin/\"\n    echo \"└── User Account: $KEYCLOAK_URL/realms/$REALM_NAME/account/\"\n    echo \"\"\n    echo \"👥 Konta testowe:\"\n    echo \"├── Admin: vaultadmin / admin123 (role: vault-admin, vault-user)\"\n    echo \"└── User:  vaultuser / user123 (role: vault-user)\"\n    echo \"\"\n    echo \"📱 Klienci:\"\n    echo \"├── media-vault-frontend (public)\"\n    echo \"├── media-vault-api (confidential, secret: vault-api-secret-123)\"\n    echo \"└── media-vault-admin (public)\"\n    echo \"\"\n    echo \"🔧 Następne kroki:\"\n    echo \"1. Zaktualizuj .env file z odpowiednimi secretami\"\n    echo \"2. Uruchom Media Vault: docker-compose up -d\"\n    echo \"3. Otwórz http://localhost i zaloguj się\"\n    echo \"\"\n    print_status \"Keycloak jest gotowy do użycia!\"\n}\n\n# Główna funkcja\nmain() {\n    echo \"🔐 Media Vault + Keycloak Setup\"\n    echo \"================================\"\n\n    check_dependencies\n    wait_for_keycloak\n    get_admin_token\n    create_realm\n    create_roles\n    create_clients\n    create_users\n    configure_realm_settings\n    export_realm_config\n    show_summary\n}\n\n# Sprawdź argumenty\nif [ \"$1\" == \"--help\" ] || [ \"$1\" == \"-h\" ]; then\n    echo \"Użycie: $0 [opcje]\"\n    echo \"\"\n    echo \"Opcje:\"\n    echo \"  --help, -h     Pokaż tę pomoc\"\n    echo \"  --clean        Wyczyść istniejący realm przed konfiguracją\"\n    echo \"  --export-only  Tylko wyeksportuj konfigurację\"\n    echo \"\"\n    echo \"Zmienne środowiskowe:\"\n    echo \"  KEYCLOAK_URL   URL do Keycloak (domyślnie: http://localhost:8443)\"\n    echo \"  ADMIN_USER     Admin username (domyślnie: admin)\"\n    echo \"  ADMIN_PASS     Admin password (domyślnie: admin123)\"\n    echo \"  REALM_NAME     Nazwa realm (domyślnie: media-vault)\"\n    exit 0\nfi\n\nif [ \"$1\" == \"--clean\" ]; then\n    echo \"🧹 Czyszczenie istniejącego realm...\"\n    get_admin_token\n    curl -s -X DELETE \"$KEYCLOAK_URL/admin/realms/$REALM_NAME\" \\\n        -H \"Authorization: Bearer $ADMIN_TOKEN\"\n    print_status \"Realm '$REALM_NAME' usunięty\"\nfi\n\nif [ \"$1\" == \"--export-only\" ]; then\n    get_admin_token\n    export_realm_config\n    exit 0\nfi\n\n# Uruchom główną funkcję\nmain\n\n---\n\n# update-env.sh - Automatyczne aktualizowanie .env z Keycloak\n#!/bin/bash\n\necho \"🔧 Aktualizowanie .env file dla Keycloak...\"\n\nENV_FILE=\".env\"\nBACKUP_FILE=\".env.backup.$(date +%Y%m%d_%H%M%S)\"\n\n# Backup istniejącego .env\nif [ -f \"$ENV_FILE\" ]; then\n    cp \"$ENV_FILE\" \"$BACKUP_FILE\"\n    echo \"✅ Backup utworzony: $BACKUP_FILE\"\nfi\n\n# Aktualizuj lub dodaj zmienne Keycloak\ncat >> \"$ENV_FILE\" << 'EOF'\n\n# Keycloak Configuration\nKEYCLOAK_URL=http://keycloak:8080\nKEYCLOAK_REALM=media-vault\nKEYCLOAK_CLIENT_ID=media-vault-api\nKEYCLOAK_CLIENT_SECRET=vault-api-secret-123\nJWT_ISSUER=http://localhost:8443/realms/media-vault\nJWT_AUDIENCE=media-vault-api\nOAUTH2_ENABLED=true\n\n# Frontend Keycloak Config\nKEYCLOAK_FRONTEND_URL=http://localhost:8443\nKEYCLOAK_FRONTEND_REALM=media-vault\nKEYCLOAK_FRONTEND_CLIENT_ID=media-vault-frontend\n\n# Admin Panel Keycloak Config\nKEYCLOAK_ADMIN_CLIENT_ID=media-vault-admin\nADMIN_ROLE=vault-admin\n\n# Service Account (dla analyzer)\nSERVICE_ACCOUNT_CLIENT_ID=analyzer-service\nSERVICE_ACCOUNT_SECRET=analyzer-secret-123\nEOF\n\necho \"✅ .env file zaktualizowany z konfiguracją Keycloak\"\n\n---\n\n"
        },
        {
          "name": "TODO.md",
          "type": "file",
          "path": "keycloak/TODO.md",
          "size": 296,
          "content": "# Keycloak - TODO\n\n## High Priority\n- [ ] Configure OAuth2 clients\n- [ ] Set up user federation\n- [ ] Configure realm settings\n\n## Medium Priority\n- [ ] Create user roles and permissions\n- [ ] Set up identity providers\n- [ ] Configure password policies\n\n## Completed\n- [x] Initial Keycloak setup\n"
        },
        {
          "name": "update-env.sh",
          "type": "file",
          "path": "keycloak/update-env.sh",
          "size": 0,
          "content": ""
        }
      ]
    },
    {
      "name": "media-vault-admin",
      "type": "directory",
      "path": "media-vault-admin",
      "children": [
        {
          "name": "config",
          "type": "directory",
          "path": "media-vault-admin/config",
          "children": [
            {
              "name": "admin-config.js",
              "type": "file",
              "path": "media-vault-admin/config/admin-config.js",
              "size": 1111,
              "content": "// Media Vault Admin Configuration\nwindow.APP_CONFIG = {\n  // API Configuration\n  API_BASE_URL: process.env.API_URL || 'http://localhost:8080',\n  \n  // Authentication Configuration\n  AUTH: {\n    KEYCLOAK_URL: process.env.KEYCLOAK_URL || 'http://localhost:8080',\n    REALM: process.env.KEYCLOAK_REALM || 'media-vault',\n    CLIENT_ID: process.env.KEYCLOAK_CLIENT_ID || 'media-vault-admin',\n    ADMIN_ROLE: process.env.ADMIN_ROLE || 'vault-admin'\n  },\n  \n  // UI Configuration\n  UI: {\n    TITLE: process.env.VAULT_TITLE || 'Media Vault Admin',\n    THEME: {\n      PRIMARY_COLOR: '#4f46e5',\n      SECONDARY_COLOR: '#6366f1',\n      DANGER_COLOR: '#ef4444',\n      SUCCESS_COLOR: '#10b981',\n      WARNING_COLOR: '#f59e0b',\n      INFO_COLOR: '#3b82f6'\n    }\n  },\n  \n  // Feature Flags\n  FEATURES: {\n    USER_MANAGEMENT: true,\n    SYSTEM_MONITORING: true,\n    VAULT_MANAGEMENT: true,\n    SECURITY_SETTINGS: true\n  },\n  \n  // Monitoring URLs\n  MONITORING: {\n    GRAFANA: process.env.MONITORING_GRAFANA_URL || 'http://localhost:3000',\n    PROMETHEUS: process.env.MONITORING_PROMETHEUS_URL || 'http://localhost:9090'\n  }\n};\n"
            }
          ]
        },
        {
          "name": "src",
          "type": "directory",
          "path": "media-vault-admin/src",
          "children": [
            {
              "name": "css",
              "type": "directory",
              "path": "media-vault-admin/src/css",
              "children": [
                {
                  "name": "admin.css",
                  "type": "file",
                  "path": "media-vault-admin/src/css/admin.css",
                  "size": 4314,
                  "content": "/* Admin Styles */\n:root {\n  --primary-color: #4f46e5;\n  --primary-hover: #4338ca;\n  --secondary-color: #6b7280;\n  --success-color: #10b981;\n  --info-color: #3b82f6;\n  --warning-color: #f59e0b;\n  --danger-color: #ef4444;\n  --light-color: #f9fafb;\n  --dark-color: #1f2937;\n  --sidebar-width: 250px;\n  --header-height: 60px;\n  --transition-speed: 0.3s;\n}\n\n/* Layout */\nbody {\n  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n  background-color: #f3f4f6;\n  color: #374151;\n  line-height: 1.6;\n}\n\n.app-container {\n  display: flex;\n  min-height: 100vh;\n}\n\n/* Sidebar */\n.sidebar {\n  width: var(--sidebar-width);\n  background: #1e293b;\n  color: #fff;\n  transition: all var(--transition-speed) ease;\n  position: fixed;\n  height: 100vh;\n  z-index: 1000;\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);\n}\n\n.sidebar.active {\n  margin-left: calc(-1 * var(--sidebar-width));\n}\n\n.sidebar-header {\n  padding: 20px;\n  background: rgba(0, 0, 0, 0.2);\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.sidebar-header h3 {\n  color: #fff;\n  margin: 0;\n  font-weight: 600;\n  font-size: 1.25rem;\n}\n\n.sidebar ul.components {\n  padding: 20px 0;\n}\n\n.sidebar ul li a {\n  padding: 12px 20px;\n  font-size: 0.9rem;\n  display: block;\n  color: #cbd5e1;\n  text-decoration: none;\n  transition: all 0.3s;\n  border-left: 3px solid transparent;\n}\n\n.sidebar ul li a:hover,\n.sidebar ul li.active > a {\n  color: #fff;\n  background: rgba(255, 255, 255, 0.1);\n  border-left-color: var(--primary-color);\n}\n\n.sidebar ul li a i {\n  margin-right: 10px;\n  font-size: 1.1rem;\n  vertical-align: middle;\n}\n\n/* Content */\n#content {\n  width: calc(100% - var(--sidebar-width));\n  margin-left: var(--sidebar-width);\n  min-height: 100vh;\n  transition: all var(--transition-speed) ease;\n}\n\n#content.active {\n  width: 100%;\n  margin-left: 0;\n}\n\n/* Navbar */\n.navbar {\n  padding: 0.75rem 1.5rem;\n  background: #fff !important;\n  border-bottom: 1px solid #e5e7eb;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);\n}\n\n.navbar .dropdown-menu {\n  padding: 0.5rem 0;\n  border: 1px solid #e5e7eb;\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  border-radius: 0.5rem;\n}\n\n.navbar .dropdown-item {\n  padding: 0.5rem 1.25rem;\n  font-size: 0.875rem;\n}\n\n/* Cards */\n.card {\n  border: none;\n  border-radius: 0.5rem;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);\n  margin-bottom: 1.5rem;\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n}\n\n.card-header {\n  background-color: #fff;\n  border-bottom: 1px solid #e5e7eb;\n  padding: 1.25rem 1.5rem;\n  border-top-left-radius: 0.5rem !important;\n  border-top-right-radius: 0.5rem !important;\n}\n\n.card-header h5 {\n  font-weight: 600;\n  margin: 0;\n  font-size: 1.1rem;\n}\n\n.card-body {\n  padding: 1.5rem;\n}\n\n/* Tables */\n.table {\n  margin-bottom: 0;\n}\n\n.table thead th {\n  background-color: #f9fafb;\n  border-top: none;\n  font-weight: 600;\n  font-size: 0.75rem;\n  text-transform: uppercase;\n  letter-spacing: 0.05em;\n  color: #6b7280;\n  padding: 0.75rem 1.5rem;\n  border-bottom: 1px solid #e5e7eb;\n}\n\n.table tbody td {\n  padding: 1rem 1.5rem;\n  vertical-align: middle;\n  border-color: #f3f4f6;\n}\n\n.table-hover tbody tr:hover {\n  background-color: #f9fafb;\n}\n\n/* Buttons */\n.btn {\n  font-weight: 500;\n  padding: 0.5rem 1rem;\n  border-radius: 0.375rem;\n  font-size: 0.875rem;\n  transition: all 0.2s ease;\n}\n\n.btn-sm {\n  padding: 0.25rem 0.5rem;\n  font-size: 0.75rem;\n}\n\n.btn-primary {\n  background-color: var(--primary-color);\n  border-color: var(--primary-color);\n}\n\n.btn-primary:hover {\n  background-color: var(--primary-hover);\n  border-color: var(--primary-hover);\n}\n\n/* Badges */\n.badge {\n  font-weight: 500;\n  padding: 0.35em 0.65em;\n  font-size: 0.75em;\n}\n\n/* Progress */\n.progress {\n  height: 0.5rem;\n  border-radius: 0.25rem;\n  background-color: #e5e7eb;\n}\n\n.progress-bar {\n  transition: width 0.6s ease;\n}\n\n/* Responsive */\n@media (max-width: 768px) {\n  .sidebar {\n    margin-left: calc(-1 * var(--sidebar-width));\n  }\n  \n  .sidebar.active {\n    margin-left: 0;\n  }\n  \n  #content {\n    width: 100%;\n    margin-left: 0;\n  }\n  \n  #content.active {\n    margin-left: var(--sidebar-width);\n  }\n}\n"
                },
                {
                  "name": "dashboard.css",
                  "type": "file",
                  "path": "media-vault-admin/src/css/dashboard.css",
                  "size": 3509,
                  "content": "/* Dashboard Specific Styles */\n\n/* Stats Cards */\n.stats-card {\n  border-radius: 0.75rem;\n  overflow: hidden;\n  transition: all 0.3s ease;\n  border: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.stats-card .card-body {\n  padding: 1.5rem;\n  position: relative;\n  z-index: 1;\n}\n\n.stats-card .card-title {\n  font-size: 0.875rem;\n  font-weight: 500;\n  text-transform: uppercase;\n  letter-spacing: 0.05em;\n  margin-bottom: 0.5rem;\n  color: rgba(255, 255, 255, 0.9);\n}\n\n.stats-card .card-value {\n  font-size: 1.75rem;\n  font-weight: 700;\n  margin: 0.5rem 0;\n  color: #fff;\n}\n\n.stats-card .card-icon {\n  position: absolute;\n  right: 1.5rem;\n  top: 50%;\n  transform: translateY(-50%);\n  font-size: 3.5rem;\n  opacity: 0.2;\n  z-index: -1;\n}\n\n/* Activity Feed */\n.activity-feed {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.activity-item {\n  display: flex;\n  padding: 1rem 0;\n  border-bottom: 1px solid #f0f2f5;\n  align-items: flex-start;\n}\n\n.activity-item:last-child {\n  border-bottom: none;\n}\n\n.activity-avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: #f0f2f5;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 1rem;\n  flex-shrink: 0;\n  color: #6c757d;\n  font-weight: 600;\n}\n\n.activity-content {\n  flex: 1;\n}\n\n.activity-user {\n  font-weight: 600;\n  color: #2d3748;\n  margin-right: 0.25rem;\n}\n\n.activity-action {\n  color: #4a5568;\n  margin-right: 0.25rem;\n}\n\n.activity-target {\n  color: #4a5568;\n  font-weight: 500;\n}\n\n.activity-time {\n  display: block;\n  font-size: 0.75rem;\n  color: #a0aec0;\n  margin-top: 0.25rem;\n}\n\n/* System Status */\n.system-status-item {\n  margin-bottom: 1.5rem;\n}\n\n.system-status-item:last-child {\n  margin-bottom: 0;\n}\n\n.system-status-header {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 0.5rem;\n}\n\n.system-status-label {\n  font-size: 0.875rem;\n  color: #4a5568;\n  font-weight: 500;\n}\n\n.system-status-value {\n  font-weight: 600;\n  color: #2d3748;\n}\n\n/* Chart Container */\n.chart-container {\n  position: relative;\n  height: 250px;\n  width: 100%;\n}\n\n/* Responsive Adjustments */\n@media (max-width: 991.98px) {\n  .stats-card {\n    margin-bottom: 1rem;\n  }\n  \n  .chart-container {\n    height: 200px;\n  }\n}\n\n/* Animations */\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(10px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n.fade-in {\n  animation: fadeIn 0.3s ease-out forwards;\n}\n\n/* Custom Scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb {\n  background: #c1c1c1;\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: #a8a8a8;\n}\n\n/* Custom Utilities */\n.text-ellipsis {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.cursor-pointer {\n  cursor: pointer;\n}\n\n.transition-all {\n  transition: all 0.3s ease;\n}\n\n.hover-shadow:hover {\n  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n}\n\n/* Custom Badge Variants */\n.badge-outline {\n  background-color: transparent;\n  border: 1px solid currentColor;\n}\n\n/* Custom Backgrounds */\n.bg-gradient-primary {\n  background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);\n}\n\n.bg-gradient-success {\n  background: linear-gradient(135deg, #10b981 0%, #34d399 100%);\n}\n\n.bg-gradient-warning {\n  background: linear-gradient(135deg, #f59e0b 0%, #fbbf24 100%);\n}\n\n.bg-gradient-danger {\n  background: linear-gradient(135deg, #ef4444 0%, #f87171 100%);\n}"
                }
              ]
            },
            {
              "name": "js",
              "type": "directory",
              "path": "media-vault-admin/src/js",
              "children": [
                {
                  "name": "charts.js",
                  "type": "file",
                  "path": "media-vault-admin/src/js/charts.js",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "keycloak-admin.js",
                  "type": "file",
                  "path": "media-vault-admin/src/js/keycloak-admin.js",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "system-monitoring.js",
                  "type": "file",
                  "path": "media-vault-admin/src/js/system-monitoring.js",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "user-management.js",
                  "type": "file",
                  "path": "media-vault-admin/src/js/user-management.js",
                  "size": 17556,
                  "content": "// User Management for Media Vault Admin\n\nclass UserManager {\n  constructor() {\n    this.config = window.APP_CONFIG || {};\n    this.endpoints = {\n      users: `${this.config.API_BASE_URL}/api/admin/users`,\n      roles: `${this.config.API_BASE_URL}/api/admin/roles`\n    };\n    this.currentPage = 1;\n    this.pageSize = 10;\n    this.totalUsers = 0;\n    this.users = [];\n    this.roles = [];\n    \n    // Initialize if on users page\n    if (document.getElementById('users-page')) {\n      this.init();\n    }\n  }\n\n  /**\n   * Initialize the user management interface\n   */\n  async init() {\n    this.bindEvents();\n    await this.loadRoles();\n    await this.loadUsers();\n    this.renderUserTable();\n  }\n\n  /**\n   * Bind event listeners\n   */\n  bindEvents() {\n    // User search\n    const searchInput = document.getElementById('user-search');\n    if (searchInput) {\n      searchInput.addEventListener('input', this.debounce(() => {\n        this.currentPage = 1;\n        this.loadUsers();\n      }, 300));\n    }\n\n    // Add user modal\n    const addUserBtn = document.getElementById('add-user-btn');\n    if (addUserBtn) {\n      addUserBtn.addEventListener('click', () => this.showAddUserModal());\n    }\n\n    // Save user form\n    const userForm = document.getElementById('user-form');\n    if (userForm) {\n      userForm.addEventListener('submit', (e) => {\n        e.preventDefault();\n        this.saveUser();\n      });\n    }\n\n    // Role filter\n    const roleFilter = document.getElementById('role-filter');\n    if (roleFilter) {\n      roleFilter.addEventListener('change', () => {\n        this.currentPage = 1;\n        this.loadUsers();\n      });\n    }\n\n    // Pagination\n    document.addEventListener('click', (e) => {\n      if (e.target.closest('.page-link')) {\n        e.preventDefault();\n        const page = parseInt(e.target.closest('.page-link').dataset.page);\n        if (page && !isNaN(page)) {\n          this.currentPage = page;\n          this.loadUsers();\n        }\n      }\n    });\n  }\n\n  /**\n   * Load users from the API\n   */\n  async loadUsers() {\n    try {\n      this.showLoading(true);\n      \n      const search = document.getElementById('user-search')?.value || '';\n      const role = document.getElementById('role-filter')?.value || '';\n      \n      let url = `${this.endpoints.users}?page=${this.currentPage}&pageSize=${this.pageSize}`;\n      if (search) url += `&search=${encodeURIComponent(search)}`;\n      if (role) url += `&role=${encodeURIComponent(role)}`;\n      \n      const response = await fetch(url, {\n        headers: this.getAuthHeaders()\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to load users');\n      }\n      \n      const data = await response.json();\n      this.users = data.users || [];\n      this.totalUsers = data.total || 0;\n      \n      this.renderUserTable();\n      this.renderPagination();\n      \n    } catch (error) {\n      console.error('Error loading users:', error);\n      this.showError('Failed to load users. Please try again.');\n    } finally {\n      this.showLoading(false);\n    }\n  }\n\n  /**\n   * Load available roles from the API\n   */\n  async loadRoles() {\n    try {\n      const response = await fetch(this.endpoints.roles, {\n        headers: this.getAuthHeaders()\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to load roles');\n      }\n      \n      this.roles = await response.json();\n      this.renderRoleFilter();\n      \n    } catch (error) {\n      console.error('Error loading roles:', error);\n      this.showError('Failed to load roles. Some features may be limited.');\n    }\n  }\n\n  /**\n   * Render the users table\n   */\n  renderUserTable() {\n    const tbody = document.querySelector('#users-table tbody');\n    if (!tbody) return;\n    \n    tbody.innerHTML = '';\n    \n    if (this.users.length === 0) {\n      const tr = document.createElement('tr');\n      tr.innerHTML = `\n        <td colspan=\"6\" class=\"text-center py-4 text-muted\">\n          No users found\n        </td>\n      `;\n      tbody.appendChild(tr);\n      return;\n    }\n    \n    this.users.forEach(user => {\n      const tr = document.createElement('tr');\n      tr.className = 'align-middle';\n      \n      const statusClass = user.isActive ? 'success' : 'secondary';\n      const statusText = user.isActive ? 'Active' : 'Inactive';\n      \n      tr.innerHTML = `\n        <td>\n          <div class=\"d-flex align-items-center\">\n            <div class=\"avatar avatar-sm me-3\">\n              <span class=\"avatar-text rounded-circle bg-light text-dark\">\n                ${user.name?.charAt(0).toUpperCase() || 'U'}\n              </span>\n            </div>\n            <div>\n              <div class=\"fw-semibold\">${user.name || 'N/A'}</div>\n              <div class=\"text-muted small\">${user.email || ''}</div>\n            </div>\n          </div>\n        </td>\n        <td>${user.username || 'N/A'}</td>\n        <td>\n          ${user.roles?.map(role => \n            `<span class=\"badge bg-primary me-1\">${role}</span>`\n          ).join('') || '<span class=\"text-muted\">No roles</span>'}\n        </td>\n        <td>\n          <span class=\"badge bg-${statusClass}\">${statusText}</span>\n        </td>\n        <td>${new Date(user.createdAt).toLocaleDateString()}</td>\n        <td class=\"text-end\">\n          <div class=\"dropdown\">\n            <button class=\"btn btn-sm btn-link text-dark\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n              <i class=\"bi bi-three-dots-vertical\"></i>\n            </button>\n            <ul class=\"dropdown-menu dropdown-menu-end\">\n              <li>\n                <a class=\"dropdown-item\" href=\"#\" data-action=\"edit\" data-user-id=\"${user.id}\">\n                  <i class=\"bi bi-pencil me-2\"></i>Edit\n                </a>\n              </li>\n              <li>\n                <a class=\"dropdown-item\" href=\"#\" data-action=\"reset-password\" data-user-id=\"${user.id}\">\n                  <i class=\"bi bi-key me-2\"></i>Reset Password\n                </a>\n              </li>\n              <li><hr class=\"dropdown-divider\"></li>\n              <li>\n                <a class=\"dropdown-item text-danger\" href=\"#\" data-action=\"delete\" data-user-id=\"${user.id}\">\n                  <i class=\"bi bi-trash me-2\"></i>Delete\n                </a>\n              </li>\n            </ul>\n          </div>\n        </td>\n      `;\n      \n      tbody.appendChild(tr);\n    });\n    \n    // Add event listeners to action buttons\n    document.querySelectorAll('[data-action]').forEach(button => {\n      button.addEventListener('click', (e) => {\n        e.preventDefault();\n        const action = button.dataset.action;\n        const userId = button.dataset.userId;\n        \n        switch (action) {\n          case 'edit':\n            this.editUser(userId);\n            break;\n          case 'delete':\n            this.confirmDeleteUser(userId);\n            break;\n          case 'reset-password':\n            this.resetPassword(userId);\n            break;\n        }\n      });\n    });\n  }\n\n  /**\n   * Render the role filter dropdown\n   */\n  renderRoleFilter() {\n    const roleFilter = document.getElementById('role-filter');\n    if (!roleFilter) return;\n    \n    // Clear existing options except the first one\n    while (roleFilter.options.length > 1) {\n      roleFilter.remove(1);\n    }\n    \n    // Add role options\n    this.roles.forEach(role => {\n      const option = document.createElement('option');\n      option.value = role.id;\n      option.textContent = role.name;\n      roleFilter.appendChild(option);\n    });\n  }\n\n  /**\n   * Render pagination controls\n   */\n  renderPagination() {\n    const pagination = document.getElementById('pagination');\n    if (!pagination) return;\n    \n    const totalPages = Math.ceil(this.totalUsers / this.pageSize);\n    \n    if (totalPages <= 1) {\n      pagination.innerHTML = '';\n      return;\n    }\n    \n    let html = `\n      <nav aria-label=\"User pagination\">\n        <ul class=\"pagination mb-0\">\n          <li class=\"page-item ${this.currentPage === 1 ? 'disabled' : ''}\">\n            <a class=\"page-link\" href=\"#\" data-page=\"${this.currentPage - 1}\" aria-label=\"Previous\">\n              <span aria-hidden=\"true\">&laquo;</span>\n            </a>\n          </li>\n    `;\n    \n    // Show first page, current page, and pages around it\n    const pagesToShow = 3; // Number of pages to show around current page\n    let startPage = Math.max(1, this.currentPage - pagesToShow);\n    let endPage = Math.min(totalPages, this.currentPage + pagesToShow);\n    \n    // Adjust if we're near the start or end\n    if (this.currentPage <= pagesToShow) {\n      endPage = Math.min(2 * pagesToShow + 1, totalPages);\n    }\n    \n    if (totalPages - this.currentPage < pagesToShow) {\n      startPage = Math.max(1, totalPages - 2 * pagesToShow);\n    }\n    \n    // First page\n    if (startPage > 1) {\n      html += `\n        <li class=\"page-item ${1 === this.currentPage ? 'active' : ''}\">\n          <a class=\"page-link\" href=\"#\" data-page=\"1\">1</a>\n        </li>\n      `;\n      \n      if (startPage > 2) {\n        html += '<li class=\"page-item disabled\"><span class=\"page-link\">...</span></li>';\n      }\n    }\n    \n    // Page numbers\n    for (let i = startPage; i <= endPage; i++) {\n      html += `\n        <li class=\"page-item ${i === this.currentPage ? 'active' : ''}\">\n          <a class=\"page-link\" href=\"#\" data-page=\"${i}\">${i}</a>\n        </li>\n      `;\n    }\n    \n    // Last page\n    if (endPage < totalPages) {\n      if (endPage < totalPages - 1) {\n        html += '<li class=\"page-item disabled\"><span class=\"page-link\">...</span></li>';\n      }\n      \n      html += `\n        <li class=\"page-item ${totalPages === this.currentPage ? 'active' : ''}\">\n          <a class=\"page-link\" href=\"#\" data-page=\"${totalPages}\">${totalPages}</a>\n        </li>\n      `;\n    }\n    \n    // Next button\n    html += `\n          <li class=\"page-item ${this.currentPage === totalPages ? 'disabled' : ''}\">\n            <a class=\"page-link\" href=\"#\" data-page=\"${this.currentPage + 1}\" aria-label=\"Next\">\n              <span aria-hidden=\"true\">&raquo;</span>\n            </a>\n          </li>\n        </ul>\n      </nav>\n    `;\n    \n    pagination.innerHTML = html;\n  }\n\n  /**\n   * Show the add user modal\n   */\n  showAddUserModal(user = null) {\n    const modal = new bootstrap.Modal(document.getElementById('userModal'));\n    const form = document.getElementById('user-form');\n    const modalTitle = document.getElementById('userModalLabel');\n    const userIdField = document.getElementById('user-id');\n    const isEdit = !!user;\n    \n    // Reset form\n    form.reset();\n    \n    // Set modal title and button text\n    if (isEdit) {\n      modalTitle.textContent = 'Edit User';\n      document.getElementById('save-user-btn').textContent = 'Update User';\n      \n      // Populate form fields\n      userIdField.value = user.id;\n      document.getElementById('name').value = user.name || '';\n      document.getElementById('email').value = user.email || '';\n      document.getElementById('username').value = user.username || '';\n      document.getElementById('isActive').checked = user.isActive !== false;\n      \n      // Set roles\n      const roleSelect = document.getElementById('roles');\n      Array.from(roleSelect.options).forEach(option => {\n        option.selected = user.roles?.includes(option.value) || false;\n      });\n      \n    } else {\n      modalTitle.textContent = 'Add New User';\n      document.getElementById('save-user-btn').textContent = 'Add User';\n      userIdField.value = '';\n    }\n    \n    modal.show();\n  }\n\n  /**\n   * Edit a user\n   */\n  async editUser(userId) {\n    try {\n      this.showLoading(true);\n      \n      const response = await fetch(`${this.endpoints.users}/${userId}`, {\n        headers: this.getAuthHeaders()\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to load user data');\n      }\n      \n      const user = await response.json();\n      this.showAddUserModal(user);\n      \n    } catch (error) {\n      console.error('Error loading user:', error);\n      this.showError('Failed to load user data. Please try again.');\n    } finally {\n      this.showLoading(false);\n    }\n  }\n\n  /**\n   * Save user (create or update)\n   */\n  async saveUser() {\n    const form = document.getElementById('user-form');\n    if (!form) return;\n    \n    const userId = document.getElementById('user-id').value;\n    const isEdit = !!userId;\n    \n    const formData = new FormData(form);\n    const userData = {\n      name: formData.get('name'),\n      email: formData.get('email'),\n      username: formData.get('username'),\n      isActive: formData.get('isActive') === 'on',\n      roles: Array.from(document.getElementById('roles').selectedOptions).map(opt => opt.value)\n    };\n    \n    // Add password only for new users\n    if (!isEdit) {\n      const password = formData.get('password');\n      const confirmPassword = formData.get('confirmPassword');\n      \n      if (!password) {\n        this.showError('Password is required');\n        return;\n      }\n      \n      if (password !== confirmPassword) {\n        this.showError('Passwords do not match');\n        return;\n      }\n      \n      userData.password = password;\n    }\n    \n    try {\n      this.showLoading(true);\n      \n      const url = isEdit \n        ? `${this.endpoints.users}/${userId}`\n        : this.endpoints.users;\n      \n      const method = isEdit ? 'PUT' : 'POST';\n      \n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          ...this.getAuthHeaders()\n        },\n        body: JSON.stringify(userData)\n      });\n      \n      if (!response.ok) {\n        const error = await response.json().catch(() => ({}));\n        throw new Error(error.message || 'Failed to save user');\n      }\n      \n      // Close modal and refresh user list\n      const modal = bootstrap.Modal.getInstance(document.getElementById('userModal'));\n      if (modal) modal.hide();\n      \n      this.showSuccess(`User ${isEdit ? 'updated' : 'created'} successfully`);\n      this.loadUsers();\n      \n    } catch (error) {\n      console.error('Error saving user:', error);\n      this.showError(error.message || 'Failed to save user. Please try again.');\n    } finally {\n      this.showLoading(false);\n    }\n  }\n\n  /**\n   * Confirm user deletion\n   */\n  confirmDeleteUser(userId) {\n    const user = this.users.find(u => u.id === userId);\n    if (!user) return;\n    \n    if (confirm(`Are you sure you want to delete the user \"${user.name || user.username}\"? This action cannot be undone.`)) {\n      this.deleteUser(userId);\n    }\n  }\n\n  /**\n   * Delete a user\n   */\n  async deleteUser(userId) {\n    try {\n      this.showLoading(true);\n      \n      const response = await fetch(`${this.endpoints.users}/${userId}`, {\n        method: 'DELETE',\n        headers: this.getAuthHeaders()\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to delete user');\n      }\n      \n      this.showSuccess('User deleted successfully');\n      this.loadUsers();\n      \n    } catch (error) {\n      console.error('Error deleting user:', error);\n      this.showError('Failed to delete user. Please try again.');\n    } finally {\n      this.showLoading(false);\n    }\n  }\n\n  /**\n   * Reset user password\n   */\n  async resetPassword(userId) {\n    const user = this.users.find(u => u.id === userId);\n    if (!user) return;\n    \n    const newPassword = prompt(`Enter new password for ${user.name || user.username}:`);\n    if (!newPassword) return;\n    \n    try {\n      this.showLoading(true);\n      \n      const response = await fetch(`${this.endpoints.users}/${userId}/reset-password`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...this.getAuthHeaders()\n        },\n        body: JSON.stringify({ newPassword })\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to reset password');\n      }\n      \n      this.showSuccess('Password reset successfully');\n      \n    } catch (error) {\n      console.error('Error resetting password:', error);\n      this.showError('Failed to reset password. Please try again.');\n    } finally {\n      this.showLoading(false);\n    }\n  }\n\n  /**\n   * Show loading state\n   */\n  showLoading(isLoading) {\n    const buttons = document.querySelectorAll('button[type=\"submit\"]');\n    buttons.forEach(button => {\n      button.disabled = isLoading;\n      const spinner = button.querySelector('.spinner-border');\n      if (spinner) {\n        spinner.style.display = isLoading ? 'inline-block' : 'none';\n      }\n    });\n  }\n\n  /**\n   * Show success message\n   */\n  showSuccess(message) {\n    // You can implement a toast notification system here\n    alert(`Success: ${message}`);\n  }\n\n  /**\n   * Show error message\n   */\n  showError(message) {\n    // You can implement a toast notification system here\n    alert(`Error: ${message}`);\n  }\n\n  /**\n   * Get authentication headers\n   */\n  getAuthHeaders() {\n    const token = localStorage.getItem('auth_token');\n    return token ? { 'Authorization': `Bearer ${token}` } : {};\n  }\n\n  /**\n   * Debounce function to limit the rate of function calls\n   */\n  debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n      const later = () => {\n        clearTimeout(timeout);\n        func(...args);\n      };\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  }\n}\n\n// Initialize the user manager when the DOM is fully loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  window.userManager = new UserManager();\n});"
                },
                {
                  "name": "vault-admin.js",
                  "type": "file",
                  "path": "media-vault-admin/src/js/vault-admin.js",
                  "size": 10660,
                  "content": "// Media Vault Admin - Main JavaScript\n\nclass MediaVaultAdmin {\n  constructor() {\n    this.config = window.APP_CONFIG || {};\n    this.endpoints = {\n      stats: `${this.config.API_BASE_URL}/api/admin/stats`,\n      activity: `${this.config.API_BASE_URL}/api/admin/activity`,\n      system: `${this.config.API_BASE_URL}/api/admin/system`,\n    };\n    this.init();\n  }\n\n  /**\n   * Initialize the admin interface\n   */\n  init() {\n    this.bindEvents();\n    this.loadDashboardData();\n    this.setupCharts();\n  }\n\n  /**\n   * Bind event listeners\n   */\n  bindEvents() {\n    // Sidebar toggle\n    document.getElementById('sidebarCollapse')?.addEventListener('click', () => {\n      document.getElementById('sidebar')?.classList.toggle('active');\n      document.getElementById('content')?.classList.toggle('active');\n    });\n\n    // Logout button\n    document.getElementById('logout')?.addEventListener('click', (e) => {\n      e.preventDefault();\n      this.logout();\n    });\n\n    // Refresh stats button\n    document.getElementById('refresh-stats')?.addEventListener('click', () => {\n      this.loadDashboardData();\n    });\n  }\n\n  /**\n   * Load dashboard data\n   */\n  async loadDashboardData() {\n    try {\n      // Show loading state\n      this.setLoadingState(true);\n      \n      // Fetch stats\n      const statsResponse = await fetch(this.endpoints.stats, {\n        headers: this.getAuthHeaders()\n      });\n      \n      if (!statsResponse.ok) {\n        throw new Error('Failed to load dashboard stats');\n      }\n      \n      const stats = await statsResponse.json();\n      this.updateStatsUI(stats);\n      \n      // Fetch recent activity\n      const activityResponse = await fetch(this.endpoints.activity, {\n        headers: this.getAuthHeaders()\n      });\n      \n      if (!activityResponse.ok) {\n        throw new Error('Failed to load recent activity');\n      }\n      \n      const activities = await activityResponse.json();\n      this.updateActivityUI(activities);\n      \n      // Fetch system status\n      const systemResponse = await fetch(this.endpoints.system, {\n        headers: this.getAuthHeaders()\n      });\n      \n      if (!systemResponse.ok) {\n        throw new Error('Failed to load system status');\n      }\n      \n      const systemStatus = await systemResponse.json();\n      this.updateSystemStatusUI(systemStatus);\n      \n    } catch (error) {\n      console.error('Error loading dashboard data:', error);\n      this.showError('Failed to load dashboard data. Please try again.');\n    } finally {\n      this.setLoadingState(false);\n    }\n  }\n\n  /**\n   * Update stats cards UI\n   */\n  updateStatsUI(stats) {\n    // Total files\n    if (document.getElementById('total-files')) {\n      document.getElementById('total-files').textContent = stats.totalFiles?.toLocaleString() || '0';\n    }\n    \n    // Active users\n    if (document.getElementById('active-users')) {\n      document.getElementById('active-users').textContent = stats.activeUsers?.toLocaleString() || '0';\n    }\n    \n    // Storage used\n    if (document.getElementById('storage-used')) {\n      const storageGB = (stats.storageUsed / 1024 / 1024 / 1024).toFixed(2);\n      document.getElementById('storage-used').textContent = `${storageGB} GB`;\n    }\n    \n    // Alerts\n    if (document.getElementById('alerts-count')) {\n      document.getElementById('alerts-count').textContent = stats.alertsCount?.toLocaleString() || '0';\n    }\n  }\n\n  /**\n   * Update activity feed UI\n   */\n  updateActivityUI(activities = []) {\n    const activityList = document.getElementById('activity-list');\n    if (!activityList) return;\n    \n    // Clear existing content\n    activityList.innerHTML = '';\n    \n    // Add new activities\n    activities.slice(0, 5).forEach(activity => {\n      const activityItem = document.createElement('tr');\n      activityItem.className = 'fade-in';\n      \n      const timeAgo = this.formatTimeAgo(activity.timestamp);\n      \n      activityItem.innerHTML = `\n        <td class=\"align-middle\">\n          <div class=\"d-flex align-items-center\">\n            <div class=\"avatar avatar-sm me-2\">\n              <span class=\"avatar-text rounded-circle bg-light text-dark\">\n                ${activity.user?.charAt(0).toUpperCase() || 'U'}\n              </span>\n            </div>\n            <div>\n              <div class=\"fw-semibold\">${activity.user || 'System'}</div>\n              <small class=\"text-muted\">${timeAgo}</small>\n            </div>\n          </div>\n        </td>\n        <td class=\"align-middle\">\n          <span class=\"badge bg-light text-dark\">${activity.action}</span>\n        </td>\n        <td class=\"align-middle text-truncate\" style=\"max-width: 200px;\">\n          ${activity.target || 'N/A'}\n        </td>\n        <td class=\"align-middle text-end\">\n          <small class=\"text-muted\">${new Date(activity.timestamp).toLocaleTimeString()}</small>\n        </td>\n      `;\n      \n      activityList.appendChild(activityItem);\n    });\n  }\n\n  /**\n   * Update system status UI\n   */\n  updateSystemStatusUI(status) {\n    // CPU Usage\n    if (status.cpu) {\n      const cpuUsage = Math.round(status.cpu.usage * 100);\n      document.getElementById('cpu-usage').textContent = `${cpuUsage}%`;\n      const cpuProgress = document.getElementById('cpu-progress');\n      if (cpuProgress) {\n        cpuProgress.style.width = `${cpuUsage}%`;\n        cpuProgress.className = `progress-bar ${this.getUsageColorClass(cpuUsage)}`;\n      }\n    }\n    \n    // Memory Usage\n    if (status.memory) {\n      const memoryUsage = Math.round((status.memory.used / status.memory.total) * 100);\n      document.getElementById('memory-usage').textContent = `${memoryUsage}%`;\n      const memoryProgress = document.getElementById('memory-progress');\n      if (memoryProgress) {\n        memoryProgress.style.width = `${memoryUsage}%`;\n        memoryProgress.className = `progress-bar ${this.getUsageColorClass(memoryUsage)}`;\n      }\n    }\n    \n    // Storage\n    if (status.storage) {\n      const storagePercent = Math.round((status.storage.used / status.storage.total) * 100);\n      document.getElementById('storage-percent').textContent = `${storagePercent}%`;\n      const storageProgress = document.getElementById('storage-progress');\n      if (storageProgress) {\n        storageProgress.style.width = `${storagePercent}%`;\n        storageProgress.className = `progress-bar ${this.getUsageColorClass(storagePercent)}`;\n      }\n      \n      // Update storage details\n      const usedGB = (status.storage.used / 1024 / 1024 / 1024).toFixed(1);\n      const totalGB = (status.storage.total / 1024 / 1024 / 1024).toFixed(1);\n      document.getElementById('storage-details').textContent = `${usedGB} GB of ${totalGB} GB used`;\n    }\n  }\n\n  /**\n   * Setup charts\n   */\n  setupCharts() {\n    // Check if Chart.js is available\n    if (typeof Chart === 'undefined') {\n      console.warn('Chart.js is not loaded. Charts will not be rendered.');\n      return;\n    }\n    \n    // Example chart setup - you can add more charts as needed\n    const ctx = document.getElementById('usage-chart');\n    if (ctx) {\n      new Chart(ctx.getContext('2d'), {\n        type: 'line',\n        data: {\n          labels: Array.from({ length: 24 }, (_, i) => `${i}:00`),\n          datasets: [\n            {\n              label: 'CPU Usage',\n              data: Array.from({ length: 24 }, () => Math.floor(Math.random() * 30) + 20),\n              borderColor: '#4f46e5',\n              backgroundColor: 'rgba(79, 70, 229, 0.1)',\n              tension: 0.3,\n              fill: true\n            },\n            {\n              label: 'Memory Usage',\n              data: Array.from({ length: 24 }, () => Math.floor(Math.random() * 30) + 40),\n              borderColor: '#10b981',\n              backgroundColor: 'rgba(16, 185, 129, 0.1)',\n              tension: 0.3,\n              fill: true\n            }\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              position: 'top',\n            },\n            tooltip: {\n              mode: 'index',\n              intersect: false,\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              ticks: {\n                callback: (value) => `${value}%`\n              }\n            }\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Get color class based on usage percentage\n   */\n  getUsageColorClass(percent) {\n    if (percent > 90) return 'bg-danger';\n    if (percent > 70) return 'bg-warning';\n    if (percent > 40) return 'bg-info';\n    return 'bg-success';\n  }\n\n  /**\n   * Format timestamp as time ago\n   */\n  formatTimeAgo(timestamp) {\n    const seconds = Math.floor((new Date() - new Date(timestamp)) / 1000);\n    \n    const intervals = {\n      year: 31536000,\n      month: 2592000,\n      week: 604800,\n      day: 86400,\n      hour: 3600,\n      minute: 60,\n      second: 1\n    };\n    \n    for (const [unit, secondsInUnit] of Object.entries(intervals)) {\n      const interval = Math.floor(seconds / secondsInUnit);\n      if (interval >= 1) {\n        return interval === 1 ? `1 ${unit} ago` : `${interval} ${unit}s ago`;\n      }\n    }\n    \n    return 'Just now';\n  }\n\n  /**\n   * Get authentication headers\n   */\n  getAuthHeaders() {\n    const token = this.getAuthToken();\n    return {\n      'Content-Type': 'application/json',\n      'Authorization': token ? `Bearer ${token}` : ''\n    };\n  }\n\n  /**\n   * Get authentication token from storage\n   */\n  getAuthToken() {\n    // This should be implemented based on your auth system\n    return localStorage.getItem('auth_token');\n  }\n\n  /**\n   * Logout user\n   */\n  logout() {\n    // Clear auth token\n    localStorage.removeItem('auth_token');\n    \n    // Redirect to login page\n    window.location.href = '/login';\n  }\n\n  /**\n   * Show error message\n   */\n  showError(message) {\n    // You can implement a toast or alert system here\n    console.error('Error:', message);\n    alert(message);\n  }\n\n  /**\n   * Set loading state\n   */\n  setLoadingState(isLoading) {\n    const buttons = document.querySelectorAll('button[type=\"button\"]');\n    buttons.forEach(button => {\n      if (button.id !== 'logout') { // Don't disable logout button\n        button.disabled = isLoading;\n      }\n    });\n    \n    // You can add a loading spinner or other UI indicators here\n    if (isLoading) {\n      document.body.style.cursor = 'wait';\n    } else {\n      document.body.style.cursor = 'default';\n    }\n  }\n}\n\n// Initialize the admin interface when the DOM is fully loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  window.mediaVaultAdmin = new MediaVaultAdmin();\n});"
                }
              ]
            },
            {
              "name": "index.html",
              "type": "file",
              "path": "media-vault-admin/src/index.html",
              "size": 12931,
              "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Media Vault Admin</title>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css\">\n    <link rel=\"stylesheet\" href=\"css/admin.css\">\n    <link rel=\"stylesheet\" href=\"css/dashboard.css\">\n    <script src=\"/config/admin-config.js\"></script>\n</head>\n<body>\n    <div class=\"app-container\">\n        <!-- Sidebar -->\n        <nav id=\"sidebar\" class=\"sidebar\">\n            <div class=\"sidebar-header\">\n                <h3 id=\"app-title\">Media Vault</h3>\n            </div>\n            <ul class=\"list-unstyled components\">\n                <li class=\"active\">\n                    <a href=\"#\" data-page=\"dashboard\">\n                        <i class=\"bi bi-speedometer2\"></i> Dashboard\n                    </a>\n                </li>\n                <li>\n                    <a href=\"#\" data-page=\"vault\">\n                        <i class=\"bi bi-collection\"></i> Vault\n                    </a>\n                </li>\n                <li>\n                    <a href=\"users.html\">\n                        <i class=\"bi bi-people\"></i> Users\n                    </a>\n                </li>\n                <li>\n                    <a href=\"system.html\">\n                        <i class=\"bi bi-hdd-rack\"></i> System\n                    </a>\n                </li>\n                <li>\n                    <a href=\"security.html\">\n                        <i class=\"bi bi-shield-lock\"></i> Security\n                    </a>\n                </li>\n            </ul>\n        </nav>\n\n        <!-- Page Content -->\n        <div id=\"content\">\n            <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n                <div class=\"container-fluid\">\n                    <button type=\"button\" id=\"sidebarCollapse\" class=\"btn btn-outline-secondary\">\n                        <i class=\"bi bi-list\"></i>\n                    </button>\n                    <div class=\"ms-auto d-flex align-items-center\">\n                        <div class=\"dropdown\">\n                            <button class=\"btn btn-link text-dark dropdown-toggle\" type=\"button\" id=\"userDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                                <i class=\"bi bi-person-circle me-1\"></i>\n                                <span id=\"username\">Admin User</span>\n                            </button>\n                            <ul class=\"dropdown-menu dropdown-menu-end\" aria-labelledby=\"userDropdown\">\n                                <li><a class=\"dropdown-item\" href=\"#\"><i class=\"bi bi-person me-2\"></i>Profile</a></li>\n                                <li><hr class=\"dropdown-divider\"></li>\n                                <li><a class=\"dropdown-item text-danger\" href=\"#\" id=\"logout\"><i class=\"bi bi-box-arrow-right me-2\"></i>Logout</a></li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </nav>\n\n            <!-- Main Content -->\n            <div class=\"container-fluid p-4\">\n                <div class=\"row\">\n                    <div class=\"col-12\">\n                        <h2 id=\"page-title\">Dashboard</h2>\n                        <nav aria-label=\"breadcrumb\">\n                            <ol class=\"breadcrumb\">\n                                <li class=\"breadcrumb-item\"><a href=\"#\">Home</a></li>\n                                <li id=\"breadcrumb-active\" class=\"breadcrumb-item active\" aria-current=\"page\">Dashboard</li>\n                            </ol>\n                        </nav>\n                    </div>\n                </div>\n\n                <!-- Stats Cards -->\n                <div class=\"row mb-4\">\n                    <div class=\"col-md-3 mb-3\">\n                        <div class=\"card bg-primary text-white\">\n                            <div class=\"card-body\">\n                                <div class=\"d-flex justify-content-between align-items-center\">\n                                    <div>\n                                        <h6 class=\"card-title\">Total Files</h6>\n                                        <h2 id=\"total-files\" class=\"mb-0\">0</h2>\n                                    </div>\n                                    <i class=\"bi bi-folder2-open display-4 opacity-50\"></i>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"col-md-3 mb-3\">\n                        <div class=\"card bg-success text-white\">\n                            <div class=\"card-body\">\n                                <div class=\"d-flex justify-content-between align-items-center\">\n                                    <div>\n                                        <h6 class=\"card-title\">Active Users</h6>\n                                        <h2 id=\"active-users\" class=\"mb-0\">0</h2>\n                                    </div>\n                                    <i class=\"bi bi-people display-4 opacity-50\"></i>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"col-md-3 mb-3\">\n                        <div class=\"card bg-warning text-dark\">\n                            <div class=\"card-body\">\n                                <div class=\"d-flex justify-content-between align-items-center\">\n                                    <div>\n                                        <h6 class=\"card-title\">Storage Used</h6>\n                                        <h2 id=\"storage-used\" class=\"mb-0\">0 GB</h2>\n                                    </div>\n                                    <i class=\"bi bi-hdd-rack display-4 opacity-50\"></i>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"col-md-3 mb-3\">\n                        <div class=\"card bg-danger text-white\">\n                            <div class=\"card-body\">\n                                <div class=\"d-flex justify-content-between align-items-center\">\n                                    <div>\n                                        <h6 class=\"card-title\">Alerts</h6>\n                                        <h2 id=\"alerts-count\" class=\"mb-0\">0</h2>\n                                    </div>\n                                    <i class=\"bi bi-exclamation-triangle display-4 opacity-50\"></i>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <!-- Recent Activity -->\n                <div class=\"row\">\n                    <div class=\"col-md-8 mb-4\">\n                        <div class=\"card\">\n                            <div class=\"card-header d-flex justify-content-between align-items-center\">\n                                <h5 class=\"mb-0\">Recent Activity</h5>\n                                <div class=\"btn-group\" role=\"group\">\n                                    <button type=\"button\" class=\"btn btn-sm btn-outline-secondary\">Today</button>\n                                    <button type=\"button\" class=\"btn btn-sm btn-outline-secondary\">Week</button>\n                                    <button type=\"button\" class=\"btn btn-sm btn-outline-secondary active\">Month</button>\n                                </div>\n                            </div>\n                            <div class=\"card-body\">\n                                <div class=\"table-responsive\">\n                                    <table class=\"table table-hover\">\n                                        <thead>\n                                            <tr>\n                                                <th>User</th>\n                                                <th>Action</th>\n                                                <th>File</th>\n                                                <th>Time</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody id=\"activity-list\">\n                                            <!-- Activity items will be added here by JavaScript -->\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"col-md-4 mb-4\">\n                        <div class=\"card\">\n                            <div class=\"card-header\">\n                                <h5 class=\"mb-0\">System Status</h5>\n                            </div>\n                            <div class=\"card-body\">\n                                <div class=\"mb-3\">\n                                    <div class=\"d-flex justify-content-between mb-1\">\n                                        <span>CPU Usage</span>\n                                        <span id=\"cpu-usage\">0%</span>\n                                    </div>\n                                    <div class=\"progress\">\n                                        <div id=\"cpu-progress\" class=\"progress-bar\" role=\"progressbar\" style=\"width: 0%\"></div>\n                                    </div>\n                                </div>\n                                <div class=\"mb-3\">\n                                    <div class=\"d-flex justify-content-between mb-1\">\n                                        <span>Memory Usage</span>\n                                        <span id=\"memory-usage\">0%</span>\n                                    </div>\n                                    <div class=\"progress\">\n                                        <div id=\"memory-progress\" class=\"progress-bar bg-success\" role=\"progressbar\" style=\"width: 0%\"></div>\n                                    </div>\n                                </div>\n                                <div class=\"mb-3\">\n                                    <div class=\"d-flex justify-content-between mb-1\">\n                                        <span>Storage</span>\n                                        <span id=\"storage-percent\">0%</span>\n                                    </div>\n                                    <div class=\"progress\">\n                                        <div id=\"storage-progress\" class=\"progress-bar bg-info\" role=\"progressbar\" style=\"width: 0%\"></div>\n                                    </div>\n                                    <small class=\"text-muted\" id=\"storage-details\">0 GB of 0 GB used</small>\n                                </div>\n                                <hr>\n                                <div class=\"d-grid\">\n                                    <button class=\"btn btn-outline-primary\" id=\"refresh-stats\">\n                                        <i class=\"bi bi-arrow-repeat me-1\"></i> Refresh Stats\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <!-- Scripts -->\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <script src=\"js/vault-admin.js\"></script>\n    <script src=\"js/user-management.js\"></script>\n    <script src=\"js/system-monitoring.js\"></script>\n    <script>\n        // Initialize the admin interface\n        document.addEventListener('DOMContentLoaded', function() {\n            // Set the app title from config\n            if (window.APP_CONFIG && window.APP_CONFIG.UI && window.APP_CONFIG.UI.TITLE) {\n                document.title = window.APP_CONFIG.UI.TITLE;\n                const appTitle = document.getElementById('app-title');\n                if (appTitle) {\n                    appTitle.textContent = window.APP_CONFIG.UI.TITLE;\n                }\n            }\n\n            // Toggle sidebar\n            document.getElementById('sidebarCollapse').addEventListener('click', function() {\n                document.getElementById('sidebar').classList.toggle('active');\n                document.getElementById('content').classList.toggle('active');\n            });\n\n            // Initialize tooltips\n            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {\n                return new bootstrap.Tooltip(tooltipTriggerEl);\n            });\n        });\n    </script>\n</body>\n</html>"
            },
            {
              "name": "security.html",
              "type": "file",
              "path": "media-vault-admin/src/security.html",
              "size": 0,
              "content": ""
            },
            {
              "name": "system.html",
              "type": "file",
              "path": "media-vault-admin/src/system.html",
              "size": 0,
              "content": ""
            },
            {
              "name": "users.html",
              "type": "file",
              "path": "media-vault-admin/src/users.html",
              "size": 0,
              "content": ""
            }
          ]
        },
        {
          "name": "Dockerfile",
          "type": "file",
          "path": "media-vault-admin/Dockerfile",
          "size": 1095,
          "content": "# Use nginx to serve static files\nFROM nginx:alpine\n\n# Create config directory\nRUN mkdir -p /usr/share/nginx/html/config\n\n# Copy the configuration file\nCOPY config/admin-config.js /usr/share/nginx/html/config/\n\n# Copy the static files to the nginx web root\nCOPY src/ /usr/share/nginx/html/\n\n# Copy the nginx configuration\nCOPY nginx.conf /etc/nginx/conf.d/default.conf\n\n# Set environment variables for the admin interface\nENV API_URL=http://media-vault-api:8080 \\\n    KEYCLOAK_URL=http://keycloak:8080 \\\n    KEYCLOAK_REALM=media-vault \\\n    KEYCLOAK_CLIENT_ID=media-vault-admin \\\n    ADMIN_ROLE=vault-admin \\\n    VAULT_TITLE=\"Media Vault Admin\" \\\n    MONITORING_GRAFANA_URL=http://grafana:3000 \\\n    MONITORING_PROMETHEUS_URL=http://prometheus:9090\n\n# Replace environment variables in the config file\nRUN envsubst < /usr/share/nginx/html/config/admin-config.js > /usr/share/nginx/html/config/admin-config.tmp.js && \\\n    mv /usr/share/nginx/html/config/admin-config.tmp.js /usr/share/nginx/html/config/admin-config.js\n\n# Expose port 80\nEXPOSE 80\n\n# Start Nginx\nCMD [\"nginx\", \"-g\", \"daemon off;\"]"
        },
        {
          "name": "nginx.conf",
          "type": "file",
          "path": "media-vault-admin/nginx.conf",
          "size": 875,
          "content": "server {\n    listen 80;\n    server_name localhost;\n    root /usr/share/nginx/html;\n    index index.html;\n\n    location / {\n        try_files $uri $uri/ /index.html;\n    }\n\n    # Enable gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_min_length 10240;\n    gzip_proxied expired no-cache no-store private auth;\n    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml;\n    gzip_disable \"MSIE [1-6]\\.\";\n\n    # Cache control for static assets\n    location ~* \\.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc|ttf|woff|woff2)$ {\n        expires 1y;\n        access_log off;\n        add_header Cache-Control \"public\";\n    }\n\n    # Don't cache HTML files\n    location ~* \\.(?:html|json)$ {\n        expires -1;\n        add_header Cache-Control \"no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0\";\n    }\n}"
        },
        {
          "name": "TODO.md",
          "type": "file",
          "path": "media-vault-admin/TODO.md",
          "size": 750,
          "content": "# Media Vault Admin - TODO\n\n## High Priority\n- [ ] Implement user authentication and authorization\n- [ ] Create dashboard with system status overview\n- [ ] Add media library management interface\n\n## Medium Priority\n- [ ] Implement user management (CRUD operations)\n- [ ] Add role-based access control\n- [ ] Create settings/configuration page\n- [ ] Add logging and audit trail\n\n## Low Priority\n- [ ] Implement theme customization\n- [ ] Add support for multiple languages\n- [ ] Create documentation\n\n## In Progress\n- [ ] Setup basic project structure\n\n## Completed\n- [x] Initialize project\n- [x] Setup development environment\n\n## Notes\n- API documentation is available in the docs/API.md file\n- Configuration files are located in the config/ directory\n"
        }
      ]
    },
    {
      "name": "media-vault-analyzer",
      "type": "directory",
      "path": "media-vault-analyzer",
      "children": [
        {
          "name": "processors",
          "type": "directory",
          "path": "media-vault-analyzer/processors",
          "children": [
            {
              "name": "description_generator.py",
              "type": "file",
              "path": "media-vault-analyzer/processors/description_generator.py",
              "size": 34,
              "content": "\"\"\"\ndescription_generator.py\n\"\"\"\n\n"
            },
            {
              "name": "image_analyzer.py",
              "type": "file",
              "path": "media-vault-analyzer/processors/image_analyzer.py",
              "size": 27,
              "content": "\"\"\"\nimage_analyzer.py\n\"\"\"\n\n"
            },
            {
              "name": "metadata_extractor.py",
              "type": "file",
              "path": "media-vault-analyzer/processors/metadata_extractor.py",
              "size": 31,
              "content": "\"\"\"\nmetadata_extractor.py\n\"\"\"\n\n"
            },
            {
              "name": "nsfw_detector.py",
              "type": "file",
              "path": "media-vault-analyzer/processors/nsfw_detector.py",
              "size": 26,
              "content": "\"\"\"\nnsfw_detector.py\n\"\"\"\n\n"
            }
          ]
        },
        {
          "name": "analyzer.py",
          "type": "file",
          "path": "media-vault-analyzer/analyzer.py",
          "size": 6397,
          "content": "import os\nimport time\nimport requests\nimport cv2\nimport numpy as np\nfrom PIL import Image, ExifTags\nimport tensorflow as tf\nfrom transformers import BlipProcessor, BlipForConditionalGeneration\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nclass MediaVaultAnalyzer:\n    def __init__(self):\n        self.api_url = os.getenv('API_URL', 'http://media-vault-api:8080')\n        self.processing_path = os.getenv('PROCESSING_PATH', '/processing')\n        self.output_path = os.getenv('OUTPUT_PATH', '/uploads')\n\n        # Initialize AI models\n        self.load_models()\n\n    def load_models(self):\n        \"\"\"Load AI models for image analysis\"\"\"\n        try:\n            # Load image captioning model\n            logger.info(\"Loading BLIP model for image captioning...\")\n            self.processor = BlipProcessor.from_pretrained(\"Salesforce/blip-image-captioning-base\")\n            self.caption_model = BlipForConditionalGeneration.from_pretrained(\"Salesforce/blip-image-captioning-base\")\n            logger.info(\"BLIP model loaded successfully\")\n\n        except Exception as e:\n            logger.error(f\"Failed to load models: {e}\")\n            self.processor = None\n            self.caption_model = None\n\n    def generate_description(self, image_path):\n        \"\"\"Generate AI description for an image\"\"\"\n        if not self.processor or not self.caption_model:\n            return \"AI description service unavailable\"\n\n        try:\n            # Load and preprocess image\n            image = Image.open(image_path).convert('RGB')\n\n            # Generate caption\n            inputs = self.processor(image, return_tensors=\"pt\")\n            out = self.caption_model.generate(**inputs, max_length=50)\n            caption = self.processor.decode(out[0], skip_special_tokens=True)\n\n            return caption\n\n        except Exception as e:\n            logger.error(f\"Failed to generate description: {e}\")\n            return \"Failed to generate description\"\n\n    def extract_metadata(self, image_path):\n        \"\"\"Extract metadata from image\"\"\"\n        metadata = {}\n\n        try:\n            # Open image with PIL\n            image = Image.open(image_path)\n\n            # Get basic info\n            metadata['width'] = image.width\n            metadata['height'] = image.height\n            metadata['format'] = image.format\n            metadata['mode'] = image.mode\n\n            # Extract EXIF data\n            exif_data = {}\n            if hasattr(image, '_getexif') and image._getexif():\n                exif = image._getexif()\n                for tag_id, value in exif.items():\n                    tag = ExifTags.TAGS.get(tag_id, tag_id)\n                    exif_data[tag] = str(value)\n\n            metadata['exif'] = exif_data\n\n            # Camera info\n            if 'Make' in exif_data:\n                metadata['camera_make'] = exif_data['Make']\n            if 'Model' in exif_data:\n                metadata['camera_model'] = exif_data['Model']\n            if 'DateTime' in exif_data:\n                metadata['taken_at'] = exif_data['DateTime']\n\n        except Exception as e:\n            logger.error(f\"Failed to extract metadata: {e}\")\n\n        return metadata\n\n    def generate_thumbnail(self, image_path, photo_id):\n        \"\"\"Generate thumbnail for image\"\"\"\n        try:\n            thumbnail_dir = os.path.join(self.output_path, 'thumbnails')\n            os.makedirs(thumbnail_dir, exist_ok=True)\n\n            # Load image\n            image = Image.open(image_path)\n\n            # Create thumbnail\n            thumbnail_size = (300, 300)\n            image.thumbnail(thumbnail_size, Image.Resampling.LANCZOS)\n\n            # Save thumbnail\n            thumbnail_path = os.path.join(thumbnail_dir, f\"{photo_id}_thumb.jpg\")\n            image.save(thumbnail_path, \"JPEG\", quality=85)\n\n            return thumbnail_path\n\n        except Exception as e:\n            logger.error(f\"Failed to generate thumbnail: {e}\")\n            return None\n\n    def process_photo(self, photo_data):\n        \"\"\"Process a single photo\"\"\"\n        photo_id = photo_data['id']\n        file_path = photo_data['file_path']\n\n        logger.info(f\"Processing photo {photo_id}: {file_path}\")\n\n        try:\n            # Generate AI description\n            ai_description = self.generate_description(file_path)\n\n            # Extract metadata\n            metadata = self.extract_metadata(file_path)\n\n            # Generate thumbnail\n            thumbnail_path = self.generate_thumbnail(file_path, photo_id)\n\n            # Update photo via API\n            update_data = {\n                'ai_description': ai_description,\n                'ai_confidence': 0.85,  # Mock confidence score\n                'metadata': metadata,\n                'thumbnail_path': thumbnail_path,\n                'processed_at': time.strftime('%Y-%m-%d %H:%M:%S'),\n                'moderation_status': 'approved'  # Basic approval\n            }\n\n            # Send update to API\n            response = requests.put(\n                f\"{self.api_url}/api/vault/files/{photo_id}\",\n                json=update_data,\n                timeout=30\n            )\n\n            if response.status_code == 200:\n                logger.info(f\"Successfully processed photo {photo_id}\")\n            else:\n                logger.error(f\"Failed to update photo {photo_id}: {response.status_code}\")\n\n        except Exception as e:\n            logger.error(f\"Failed to process photo {photo_id}: {e}\")\n\n    def run(self):\n        \"\"\"Main processing loop\"\"\"\n        logger.info(\"Media Vault Analyzer started\")\n\n        while True:\n            try:\n                # Get pending photos from API\n                response = requests.get(\n                    f\"{self.api_url}/api/admin/photos/pending\",\n                    timeout=30\n                )\n\n                if response.status_code == 200:\n                    pending_photos = response.json()\n\n                    for photo in pending_photos:\n                        self.process_photo(photo)\n                        time.sleep(1)  # Small delay between processing\n\n                # Wait before next check\n                time.sleep(10)\n\n            except Exception as e:\n                logger.error(f\"Error in main loop: {e}\")\n                time.sleep(30)  # Wait longer on error\n\nif __name__ == \"__main__\":\n    analyzer = MediaVaultAnalyzer()\n    analyzer.run()\n\n"
        },
        {
          "name": "app.py",
          "type": "file",
          "path": "media-vault-analyzer/app.py",
          "size": 1162,
          "content": "\"\"\"\nMedia Vault Analyzer Service\n\nThis service handles media analysis tasks such as:\n- Image analysis (NSFW detection, object detection, etc.)\n- Video analysis\n- Metadata extraction\n- Content classification\n\"\"\"\n\nimport os\nimport logging\nfrom fastapi import FastAPI, HTTPException\nfrom fastapi.middleware.cors import CORSMiddleware\n\n# Set up logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n# Initialize FastAPI app\napp = FastAPI(\n    title=\"Media Vault Analyzer\",\n    description=\"Media analysis service for the Media Vault application\",\n    version=\"1.0.0\"\n)\n\n# Add CORS middleware\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n@app.get(\"/health\")\nasync def health_check():\n    \"\"\"Health check endpoint\"\"\"\n    return {\"status\": \"ok\", \"service\": \"media-vault-analyzer\"}\n\n@app.get(\"/analyze/image\")\nasync def analyze_image():\n    \"\"\"Analyze an image\"\"\"\n    # TODO: Implement image analysis\n    return {\"status\": \"not_implemented\"}\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n"
        },
        {
          "name": "Dockerfile",
          "type": "file",
          "path": "media-vault-analyzer/Dockerfile",
          "size": 654,
          "content": "# Use an official Python runtime as a parent image\nFROM python:3.9-slim\n\n# Set the working directory in the container\nWORKDIR /app\n\n# Set environment variables\nENV PYTHONDONTWRITEBYTECODE 1\nENV PYTHONUNBUFFERED 1\n\n# Install system dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    build-essential \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install Python dependencies\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy the current directory contents into the container at /app\nCOPY . .\n\n# Expose the port the app runs on\nEXPOSE 8000\n\n# Command to run the application\nCMD [\"python\", \"app.py\"]"
        },
        {
          "name": "requirements.txt",
          "type": "file",
          "path": "media-vault-analyzer/requirements.txt",
          "size": 292,
          "content": "fastapi==0.104.1\nuvicorn==0.24.0\nopencv-python==4.8.1.78\npillow==10.1.0\nnumpy==1.24.3\nscipy==1.11.4\nscikit-learn==1.3.2\ntensorflow==2.13.0\nrequests==2.31.0\npython-multipart==0.0.6\npython-magic==0.4.27\nffmpeg-python==0.2.0\nexifread==3.0.0\ntransformers==4.35.0\ntorch==2.1.0\ntorchvision==0.16.0\n"
        },
        {
          "name": "TODO.md",
          "type": "file",
          "path": "media-vault-analyzer/TODO.md",
          "size": 304,
          "content": "# Media Vault Analyzer - TODO\n\n## High Priority\n- [ ] Implement media analysis pipeline\n- [ ] Add support for image analysis\n- [ ] Set up video processing\n\n## Medium Priority\n- [ ] Add metadata extraction\n- [ ] Implement content moderation\n- [ ] Create analysis reports\n\n## Completed\n- [x] Project setup\n"
        }
      ]
    },
    {
      "name": "media-vault-backend",
      "type": "directory",
      "path": "media-vault-backend",
      "children": [
        {
          "name": "cmd",
          "type": "directory",
          "path": "media-vault-backend/cmd",
          "children": [
            {
              "name": "main.go",
              "type": "file",
              "path": "media-vault-backend/cmd/main.go",
              "size": 5059,
              "content": "// github.com/wronai/media-vault-backend/cmd/main.go\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\n\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/fiber/v2/middleware/cors\"\n\t\"github.com/gofiber/fiber/v2/middleware/logger\"\n\t\"github.com/gofiber/fiber/v2/middleware/monitor\"\n\t\"github.com/gofiber/fiber/v2/middleware/recover\"\n\n\t\"github.com/wronai/media-vault-backend/internal/auth\"\n\t\"github.com/wronai/media-vault-backend/internal/database\"\n\t\"github.com/wronai/media-vault-backend/internal/handlers\"\n\t\"github.com/wronai/media-vault-backend/internal/services\"\n)\n\nfunc main() {\n\t// Initialize database\n\tdb, err := database.Initialize()\n\tif err != nil {\n\t\tlog.Fatal(\"Failed to initialize database:\", err)\n\t}\n\tdefer db.Close()\n\n\t// Initialize Keycloak authentication\n\tif os.Getenv(\"OAUTH2_ENABLED\") == \"true\" {\n\t\tif err := auth.InitKeycloak(); err != nil {\n\t\t\tlog.Printf(\"Warning: Failed to initialize Keycloak: %v\", err)\n\t\t\tlog.Println(\"Running without authentication\")\n\t\t} else {\n\t\t\tlog.Println(\"Keycloak authentication enabled\")\n\t\t}\n\t}\n\n\t// Initialize services\n\tvaultService := services.NewVaultService(db)\n\tphotoService := services.NewPhotoService(db)\n\tdescriptionService := services.NewDescriptionService()\n\tsharingService := services.NewSharingService(db)\n\n\t// Initialize auth middleware\n\tauthMiddleware := auth.NewAuthMiddleware(auth.JWTConfig{\n\t\tSigningKey: []byte(os.Getenv(\"JWT_SECRET\")),\n\t})\n\n\t// Initialize handlers\n\tvaultHandler := handlers.NewVaultHandler(vaultService)\n\tadminHandler := handlers.NewAdminHandler()\n\tpartnerHandler := handlers.NewPartnerHandler(photoService, sharingService)\n\tuploadHandler := handlers.NewUploadHandler(*vaultService, *photoService, *descriptionService)\n\tphotoHandler := handlers.NewPhotoHandler(photoService)\n\n\t// Create Fiber app\n\tapp := fiber.New(fiber.Config{\n\t\tAppName:       \"Media Vault API\",\n\t\tPrefork:       false,\n\t\tCaseSensitive: true,\n\t\tStrictRouting: true,\n\t})\n\n\t// Middleware\n\tapp.Use(recover.New())\n\tapp.Use(logger.New())\n\tapp.Use(cors.New(cors.Config{\n\t\tAllowOrigins:     \"*\",\n\t\tAllowMethods:     \"GET,POST,PUT,DELETE,OPTIONS\",\n\t\tAllowHeaders:     \"Origin, Content-Type, Accept, Authorization\",\n\t\tAllowCredentials: true,\n\t}))\n\n\t// Health check\n\tapp.Get(\"/health\", func(c *fiber.Ctx) error {\n\t\treturn c.SendString(\"OK\")\n\t})\n\n\n\t// Metrics\n\tapp.Get(\"/metrics\", monitor.New(monitor.Config{Title: \"Media Vault Metrics\"}))\n\n\t// API v1 routes\n\tapi := app.Group(\"/api/v1\")\n\n\n\t// Auth routes (placeholder - implement these handlers)\n\tauthGroup := api.Group(\"/auth\")\n\t{\n\t\tauthGroup.Post(\"/login\", func(c *fiber.Ctx) error {\n\t\t\treturn c.Status(fiber.StatusNotImplemented).JSON(fiber.Map{\n\t\t\t\t\"error\": \"Login endpoint not implemented\",\n\t\t\t})\n\t\t})\n\t\tauthGroup.Post(\"/register\", func(c *fiber.Ctx) error {\n\t\t\treturn c.Status(fiber.StatusNotImplemented).JSON(fiber.Map{\n\t\t\t\t\"error\": \"Register endpoint not implemented\",\n\t\t\t})\n\t\t})\n\t\tauthGroup.Post(\"/refresh\", func(c *fiber.Ctx) error {\n\t\t\treturn c.Status(fiber.StatusNotImplemented).JSON(fiber.Map{\n\t\t\t\t\"error\": \"Refresh token endpoint not implemented\",\n\t\t\t})\n\t\t})\n\t\tauthGroup.Post(\"/logout\", func(c *fiber.Ctx) error {\n\t\t\treturn c.Status(fiber.StatusNotImplemented).JSON(fiber.Map{\n\t\t\t\t\"error\": \"Logout endpoint not implemented\",\n\t\t\t})\n\t\t})\n\t}\n\n\t// Protected routes\n\tprotected := api.Use(authMiddleware)\n\t{\n\t\t// Vault routes\n\t\tvault := protected.Group(\"/vault\")\n\t\t{\n\t\t\t// Vault routes\n\t\t\tvault.Get(\"\", vaultHandler.GetVault)\n\t\t\tvault.Post(\"/upload\", uploadHandler.UploadSingle)\n\t\t\tvault.Post(\"/upload/bulk\", uploadHandler.BulkUpload)\n\t\t}\n\n\t\t// Photo routes\n\t\tphotos := protected.Group(\"/photos\")\n\t\t{\n\t\t\tphotos.Get(\"\", photoHandler.ListPhotos)\n\t\t\tphotos.Get(\"/:id\", photoHandler.GetPhoto)\n\t\t\tphotos.Put(\"/:id\", photoHandler.UpdatePhoto)\n\t\t\tphotos.Delete(\"/:id\", photoHandler.DeletePhoto)\n\t\t\tphotos.Get(\"/:id/thumbnail\", photoHandler.GetThumbnail)\n\t\t\tphotos.Post(\"/:id/description\", photoHandler.UpdateDescription)\n\t\t\tphotos.Post(\"/:id/generate-description\", photoHandler.GenerateDescription)\n\t\t\tphotos.Get(\"/:id/shared-with\", photoHandler.GetSharedWith)\n\t\t}\n\n\t\t// Partner routes\n\t\tpartner := protected.Group(\"/partner\")\n\t\t{\n\t\t\tpartner.Post(\"/upload\", partnerHandler.BulkUpload)\n\t\t\tpartner.Get(\"/photos\", partnerHandler.GetPartnerPhotos)\n\t\t\tpartner.Put(\"/photos/descriptions\", partnerHandler.BatchUpdateDescriptions)\n\t\t\tpartner.Post(\"/photos/share\", partnerHandler.BatchSharePhotos)\n\t\t\tpartner.Get(\"/photos/:id/analytics\", partnerHandler.GetPhotoAnalytics)\n\t\t\tpartner.Get(\"/dashboard\", partnerHandler.GetPartnerDashboard)\n\t\t\tpartner.Get(\"/analytics\", partnerHandler.GetPartnerAnalytics)\n\t\t}\n\n\t\t// Admin routes\n\t\tadmin := protected.Group(\"/admin\", auth.RequireRole(\"admin\"))\n\t\t{\n\t\t\t// Admin routes\n\t\t\tadmin.Get(\"/users\", adminHandler.ListUsers)\n\t\t\tadmin.Post(\"/users\", adminHandler.CreateUser)\n\t\t\tadmin.Get(\"/users/:id\", adminHandler.GetUser)\n\t\t\tadmin.Put(\"/users/:id\", adminHandler.UpdateUser)\n\t\t\tadmin.Delete(\"/users/:id\", adminHandler.DeleteUser)\n\t\t}\n\t}\n\n\t// Start server\n\tport := os.Getenv(\"PORT\")\n\tif port == \"\" {\n\t\tport = \"8080\"\n\t}\n\n\tlog.Fatal(app.Listen(\":\" + port))\n}\n"
            }
          ]
        },
        {
          "name": "internal",
          "type": "directory",
          "path": "media-vault-backend/internal",
          "children": [
            {
              "name": "auth",
              "type": "directory",
              "path": "media-vault-backend/internal/auth",
              "children": [
                {
                  "name": "keycloak.go",
                  "type": "file",
                  "path": "media-vault-backend/internal/auth/keycloak.go",
                  "size": 334,
                  "content": "package auth\n\n// InitKeycloak initializes the Keycloak client\nfunc InitKeycloak() error {\n\t// TODO: Implement Keycloak client initialization\n\treturn nil\n}\n\n// VerifyToken verifies a JWT token from Keycloak\nfunc VerifyToken(tokenString string) (map[string]interface{}, error) {\n\t// TODO: Implement token verification\n\treturn nil, nil\n}"
                },
                {
                  "name": "middleware.go",
                  "type": "file",
                  "path": "media-vault-backend/internal/auth/middleware.go",
                  "size": 1710,
                  "content": "package auth\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/golang-jwt/jwt/v5\"\n)\n\n// JWTConfig defines the configuration for JWT middleware\ntype JWTConfig struct {\n\tSigningKey []byte\n}\n\n// NewAuthMiddleware creates a new JWT authentication middleware\nfunc NewAuthMiddleware(config JWTConfig) fiber.Handler {\n\treturn func(c *fiber.Ctx) error {\n\t\tauthHeader := c.Get(\"Authorization\")\n\t\tif authHeader == \"\" {\n\t\t\treturn c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{\n\t\t\t\t\"error\": \"Missing Authorization header\",\n\t\t\t})\n\t\t}\n\n\t\ttokenString := authHeader[len(\"Bearer \"):]\n\t\ttoken, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {\n\t\t\tif _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {\n\t\t\t\treturn nil, fiber.NewError(fiber.StatusUnauthorized, \"Invalid token\")\n\t\t\t}\n\t\t\treturn config.SigningKey, nil\n\t\t})\n\n\t\tif err != nil || !token.Valid {\n\t\t\treturn c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{\n\t\t\t\t\"error\": \"Invalid or expired token\",\n\t\t\t})\n\t\t}\n\n\t\t// Add user info to context\n\t\tif claims, ok := token.Claims.(jwt.MapClaims); ok {\n\t\t\tc.Locals(\"userID\", claims[\"sub\"])\n\t\t\tc.Locals(\"roles\", claims[\"realm_access\"].(map[string]interface{})[\"roles\"])\n\t\t}\n\n\t\treturn c.Next()\n\t}\n}\n\n// RequireRole checks if the user has the required role\nfunc RequireRole(role string) fiber.Handler {\n\treturn func(c *fiber.Ctx) error {\n\t\tuserRoles, ok := c.Locals(\"roles\").([]interface{})\n\t\tif !ok {\n\t\t\treturn c.Status(fiber.StatusForbidden).JSON(fiber.Map{\n\t\t\t\t\"error\": \"No roles found in token\",\n\t\t\t})\n\t\t}\n\n\t\tfor _, r := range userRoles {\n\t\t\tif r == role {\n\t\t\t\treturn c.Next()\n\t\t\t}\n\t\t}\n\n\t\treturn c.Status(fiber.StatusForbidden).JSON(fiber.Map{\n\t\t\t\"error\": \"Insufficient permissions\",\n\t\t})\n\t}\n}"
                },
                {
                  "name": "roles.go",
                  "type": "file",
                  "path": "media-vault-backend/internal/auth/roles.go",
                  "size": 729,
                  "content": "package auth\n\n// User roles\nconst (\n\tRoleAdmin = \"admin\"\n\tRoleUser  = \"user\"\n)\n\n// HasAdminRole checks if the user has admin role\nfunc HasAdminRole(roles []string) bool {\n\tfor _, role := range roles {\n\t\tif role == RoleAdmin {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// HasUserRole checks if the user has user role\nfunc HasUserRole(roles []string) bool {\n\tfor _, role := range roles {\n\t\tif role == RoleUser {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// HasAnyRole checks if the user has any of the specified roles\nfunc HasAnyRole(userRoles, requiredRoles []string) bool {\n\tfor _, requiredRole := range requiredRoles {\n\t\tfor _, userRole := range userRoles {\n\t\t\tif userRole == requiredRole {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}"
                }
              ]
            },
            {
              "name": "database",
              "type": "directory",
              "path": "media-vault-backend/internal/database",
              "children": [
                {
                  "name": "migrations.go",
                  "type": "file",
                  "path": "media-vault-backend/internal/database/migrations.go",
                  "size": 179,
                  "content": "package database\n\nimport \"database/sql\"\n\n// RunMigrations runs all database migrations\nfunc RunMigrations(db *sql.DB) error {\n\t// TODO: Implement database migrations\n\treturn nil\n}"
                },
                {
                  "name": "sqlite.go",
                  "type": "file",
                  "path": "media-vault-backend/internal/database/sqlite.go",
                  "size": 3396,
                  "content": "package database\n\nimport (\n    \"database/sql\"\n    \"os\"\n    \"path/filepath\"\n\n    _ \"github.com/mattn/go-sqlite3\"\n)\n\nfunc Initialize() (*sql.DB, error) {\n    dbPath := os.Getenv(\"DATABASE_PATH\")\n    if dbPath == \"\" {\n        dbPath = \"./data/media.db\"\n    }\n\n    // Ensure directory exists\n    dir := filepath.Dir(dbPath)\n    if err := os.MkdirAll(dir, 0755); err != nil {\n        return nil, err\n    }\n\n    db, err := sql.Open(\"sqlite3\", dbPath)\n    if err != nil {\n        return nil, err\n    }\n\n    // Enable foreign keys\n    if _, err := db.Exec(\"PRAGMA foreign_keys = ON\"); err != nil {\n        return nil, err\n    }\n\n    // Run migrations\n    if err := runMigrations(db); err != nil {\n        return nil, err\n    }\n\n    return db, nil\n}\n\nfunc runMigrations(db *sql.DB) error {\n    migrations := []string{\n        `CREATE TABLE IF NOT EXISTS photos (\n            id TEXT PRIMARY KEY,\n            user_id TEXT NOT NULL,\n            partner_id TEXT,\n            filename TEXT NOT NULL,\n            original_name TEXT NOT NULL,\n            file_path TEXT NOT NULL,\n            thumbnail_path TEXT,\n            file_size INTEGER NOT NULL,\n            mime_type TEXT NOT NULL,\n            width INTEGER,\n            height INTEGER,\n            hash TEXT NOT NULL,\n            description TEXT,\n            ai_description TEXT,\n            tags TEXT,\n            ai_confidence REAL,\n            is_nsfw BOOLEAN,\n            nsfw_confidence REAL,\n            moderation_status TEXT DEFAULT 'pending',\n            exif_data TEXT,\n            location TEXT,\n            camera_make TEXT,\n            camera_model TEXT,\n            taken_at DATETIME,\n            is_shared BOOLEAN DEFAULT FALSE,\n            share_count INTEGER DEFAULT 0,\n            view_count INTEGER DEFAULT 0,\n            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n            processed_at DATETIME\n        )`,\n\n        `CREATE TABLE IF NOT EXISTS photo_sharing (\n            id TEXT PRIMARY KEY,\n            photo_id TEXT NOT NULL,\n            shared_by TEXT NOT NULL,\n            shared_with TEXT NOT NULL,\n            permission TEXT NOT NULL DEFAULT 'view',\n            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n            expires_at DATETIME,\n            FOREIGN KEY (photo_id) REFERENCES photos (id) ON DELETE CASCADE\n        )`,\n\n        `CREATE TABLE IF NOT EXISTS photo_analytics (\n            photo_id TEXT PRIMARY KEY,\n            views INTEGER DEFAULT 0,\n            downloads INTEGER DEFAULT 0,\n            shares INTEGER DEFAULT 0,\n            last_viewed DATETIME,\n            FOREIGN KEY (photo_id) REFERENCES photos (id) ON DELETE CASCADE\n        )`,\n\n        `CREATE INDEX IF NOT EXISTS idx_photos_user_id ON photos (user_id)`,\n        `CREATE INDEX IF NOT EXISTS idx_photos_partner_id ON photos (partner_id)`,\n        `CREATE INDEX IF NOT EXISTS idx_photos_created_at ON photos (created_at)`,\n        `CREATE INDEX IF NOT EXISTS idx_photos_moderation_status ON photos (moderation_status)`,\n        `CREATE INDEX IF NOT EXISTS idx_photo_sharing_photo_id ON photo_sharing (photo_id)`,\n        `CREATE INDEX IF NOT EXISTS idx_photo_sharing_shared_with ON photo_sharing (shared_with)`,\n    }\n\n    for _, migration := range migrations {\n        if _, err := db.Exec(migration); err != nil {\n            return err\n        }\n    }\n\n    return nil\n}\n\n"
                }
              ]
            },
            {
              "name": "handlers",
              "type": "directory",
              "path": "media-vault-backend/internal/handlers",
              "children": [
                {
                  "name": "admin.go",
                  "type": "file",
                  "path": "media-vault-backend/internal/handlers/admin.go",
                  "size": 1693,
                  "content": "package handlers\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n)\n\n// AdminHandler handles admin-related HTTP requests\ntype AdminHandler struct {\n\t// Add any dependencies here\n}\n\n// NewAdminHandler creates a new AdminHandler\nfunc NewAdminHandler() *AdminHandler {\n\treturn &AdminHandler{}\n}\n\n// ListUsers returns a list of all users\nfunc (h *AdminHandler) ListUsers(c *fiber.Ctx) error {\n\t// TODO: Implement user listing\n\treturn c.Status(fiber.StatusNotImplemented).JSON(fiber.Map{\n\t\t\"error\": \"List users endpoint not implemented\",\n\t})\n}\n\n// GetUser returns a specific user by ID\nfunc (h *AdminHandler) GetUser(c *fiber.Ctx) error {\n\t// TODO: Implement get user by ID\n\treturn c.Status(fiber.StatusNotImplemented).JSON(fiber.Map{\n\t\t\"error\": \"Get user endpoint not implemented\",\n\t})\n}\n\n// CreateUser creates a new user\nfunc (h *AdminHandler) CreateUser(c *fiber.Ctx) error {\n\t// TODO: Implement user creation\n\treturn c.Status(fiber.StatusNotImplemented).JSON(fiber.Map{\n\t\t\"error\": \"Create user endpoint not implemented\",\n\t})\n}\n\n// UpdateUser updates an existing user\nfunc (h *AdminHandler) UpdateUser(c *fiber.Ctx) error {\n\t// TODO: Implement user update\n\treturn c.Status(fiber.StatusNotImplemented).JSON(fiber.Map{\n\t\t\"error\": \"Update user endpoint not implemented\",\n\t})\n}\n\n// DeleteUser deletes a user\nfunc (h *AdminHandler) DeleteUser(c *fiber.Ctx) error {\n\t// TODO: Implement user deletion\n\treturn c.Status(fiber.StatusNotImplemented).JSON(fiber.Map{\n\t\t\"error\": \"Delete user endpoint not implemented\",\n\t})\n}\n\n// GetSystemStats returns system statistics\nfunc (h *AdminHandler) GetSystemStats(c *fiber.Ctx) error {\n\t// TODO: Implement system stats retrieval\n\treturn c.JSON(fiber.Map{\"status\": \"ok\"})\n}"
                },
                {
                  "name": "auth.go",
                  "type": "file",
                  "path": "media-vault-backend/internal/handlers/auth.go",
                  "size": 2450,
                  "content": "package handlers\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n)\n\n// Login handles user login\n// @Summary User login\n// @Description Authenticate user and get access token\n// @Tags auth\n// @Accept json\n// @Produce json\n// @Param credentials body LoginRequest true \"Login credentials\"\n// @Success 200 {object} map[string]string\n// @Failure 400 {object} map[string]string\n// @Failure 401 {object} map[string]string\n// @Router /auth/login [post]\nfunc Login(c *fiber.Ctx) error {\n\t// TODO: Implement actual login logic\n\treturn c.JSON(fiber.Map{\n\t\t\"token\": \"dummy-jwt-token\",\n\t})\n}\n\n// Register handles user registration\n// @Summary Register a new user\n// @Description Create a new user account\n// @Tags auth\n// @Accept json\n// @Produce json\n// @Param user body RegisterRequest true \"User registration data\"\n// @Success 201 {object} map[string]string\n// @Failure 400 {object} map[string]string\n// @Failure 409 {object} map[string]string\n// @Router /auth/register [post]\nfunc Register(c *fiber.Ctx) error {\n\t// TODO: Implement actual registration logic\n\treturn c.Status(fiber.StatusCreated).JSON(fiber.Map{\n\t\t\"message\": \"User registered successfully\",\n\t})\n}\n\n// RefreshToken handles token refresh\n// @Summary Refresh access token\n// @Description Get a new access token using a refresh token\n// @Tags auth\n// @Accept json\n// @Produce json\n// @Param refreshToken body RefreshTokenRequest true \"Refresh token\"\n// @Success 200 {object} map[string]string\n// @Failure 400 {object} map[string]string\n// @Failure 401 {object} map[string]string\n// @Router /auth/refresh [post]\nfunc RefreshToken(c *fiber.Ctx) error {\n\t// TODO: Implement actual token refresh logic\n\treturn c.JSON(fiber.Map{\n\t\t\"token\": \"new-jwt-token\",\n\t})\n}\n\n// Logout handles user logout\n// @Summary User logout\n// @Description Invalidate the current session\n// @Tags auth\n// @Security BearerAuth\n// @Success 200 {object} map[string]string\n// @Failure 401 {object} map[string]string\n// @Router /auth/logout [post]\nfunc Logout(c *fiber.Ctx) error {\n\t// TODO: Implement actual logout logic\n\treturn c.JSON(fiber.Map{\n\t\t\"message\": \"Successfully logged out\",\n\t})\n}\n\n// Request/response models\ntype LoginRequest struct {\n\tUsername string `json:\"username\"`\n\tPassword string `json:\"password\"`\n}\n\ntype RegisterRequest struct {\n\tUsername string `json:\"username\"`\n\tEmail    string `json:\"email\"`\n\tPassword string `json:\"password\"`\n}\n\ntype RefreshTokenRequest struct {\n\tRefreshToken string `json:\"refresh_token\"`\n}\n"
                },
                {
                  "name": "partner.go",
                  "type": "file",
                  "path": "media-vault-backend/internal/handlers/partner.go",
                  "size": 1988,
                  "content": "package handlers\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/wronai/media-vault-backend/internal/services\"\n)\n\ntype PartnerHandler struct {\n    photoService   *services.PhotoService\n    sharingService *services.SharingService\n}\n\nfunc NewPartnerHandler(photoService *services.PhotoService, sharingService *services.SharingService) *PartnerHandler {\n    return &PartnerHandler{\n        photoService:   photoService,\n        sharingService: sharingService,\n    }\n}\n\n// BulkUpload handles bulk photo upload for partners\nfunc (h *PartnerHandler) BulkUpload(c *fiber.Ctx) error {\n    // Implementation from main.go\n    return c.SendString(\"Bulk upload endpoint\")\n}\n\n// GetPartnerPhotos returns photos uploaded by the partner\nfunc (h *PartnerHandler) GetPartnerPhotos(c *fiber.Ctx) error {\n    // Implementation from main.go\n    return c.SendString(\"Partner photos endpoint\")\n}\n\n// BatchUpdateDescriptions updates descriptions for multiple photos\nfunc (h *PartnerHandler) BatchUpdateDescriptions(c *fiber.Ctx) error {\n    // Implementation from main.go\n    return c.SendString(\"Batch update descriptions endpoint\")\n}\n\n// BatchSharePhotos shares multiple photos with users\nfunc (h *PartnerHandler) BatchSharePhotos(c *fiber.Ctx) error {\n    // Implementation from main.go\n    return c.SendString(\"Batch share photos endpoint\")\n}\n\n// GetPhotoAnalytics returns analytics for a specific photo\nfunc (h *PartnerHandler) GetPhotoAnalytics(c *fiber.Ctx) error {\n    // Implementation from main.go\n    return c.SendString(\"Photo analytics endpoint\")\n}\n\n// GetPartnerDashboard returns dashboard data for partner\nfunc (h *PartnerHandler) GetPartnerDashboard(c *fiber.Ctx) error {\n    // Implementation from main.go\n    return c.SendString(\"Partner dashboard endpoint\")\n}\n\n// GetPartnerAnalytics returns comprehensive analytics for partner\nfunc (h *PartnerHandler) GetPartnerAnalytics(c *fiber.Ctx) error {\n    // Implementation from main.go\n    return c.SendString(\"Partner analytics endpoint\")\n}\n"
                },
                {
                  "name": "photos.go",
                  "type": "file",
                  "path": "media-vault-backend/internal/handlers/photos.go",
                  "size": 10473,
                  "content": "package handlers\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/wronai/media-vault-backend/internal/services\"\n)\n\n// PhotoHandler handles photo-related HTTP requests\ntype PhotoHandler struct {\n\tphotoService *services.PhotoService\n}\n\n// NewPhotoHandler creates a new PhotoHandler\nfunc NewPhotoHandler(photoService *services.PhotoService) *PhotoHandler {\n\treturn &PhotoHandler{\n\t\tphotoService: photoService,\n\t}\n}\n\n// UploadPhoto handles photo uploads\nfunc (h *PhotoHandler) UploadPhoto(c *fiber.Ctx) error {\n\t// Get the file from the form data\n\tfile, err := c.FormFile(\"photo\")\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\n\t\t\t\"error\": \"No file uploaded\",\n\t\t})\n\t}\n\n\t// Get user ID from context (set by auth middleware)\n\tuserID := c.Locals(\"userID\").(string)\n\n\t// Upload the photo\n\tphoto, err := h.photoService.UploadPhoto(c.Context(), userID, file, nil)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\n\t\t\t\"error\": \"Failed to upload photo: \" + err.Error(),\n\t\t})\n\t}\n\n\treturn c.Status(fiber.StatusCreated).JSON(photo)\n}\n\n// GetPhoto handles retrieving a photo by ID\nfunc (h *PhotoHandler) GetPhoto(c *fiber.Ctx) error {\n\tphotoID := c.Params(\"id\")\n\tif photoID == \"\" {\n\t\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\n\t\t\t\"error\": \"Photo ID is required\",\n\t\t})\n\t}\n\n\t// Get photo from service\n\tphoto, err := h.photoService.GetPhoto(c.Context(), photoID)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusNotFound).JSON(fiber.Map{\n\t\t\t\"error\": \"Photo not found: \" + err.Error(),\n\t\t})\n\t}\n\n\t// Check if user has permission to view this photo\n\tuserID := c.Locals(\"userID\").(string)\n\tif photo.UserID != userID {\n\t\treturn c.Status(fiber.StatusForbidden).JSON(fiber.Map{\n\t\t\t\"error\": \"You don't have permission to view this photo\",\n\t\t})\n\t}\n\n\treturn c.JSON(photo)\n}\n\n// ListPhotos handles listing photos with pagination\nfunc (h *PhotoHandler) ListPhotos(c *fiber.Ctx) error {\n\t// Get pagination parameters\n\tpage := c.QueryInt(\"page\", 1)\n\tlimit := c.QueryInt(\"limit\", 20)\n\n\t// Get user ID from context\n\tuserID := c.Locals(\"userID\").(string)\n\n\t// Get photos from service\n\tphotos, total, err := h.photoService.ListPhotos(c.Context(), userID, page, limit)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\n\t\t\t\"error\": \"Failed to fetch photos: \" + err.Error(),\n\t\t})\n\t}\n\n\treturn c.JSON(fiber.Map{\n\t\t\"data\":  photos,\n\t\t\"total\": total,\n\t\t\"page\":  page,\n\t\t\"limit\": limit,\n\t})\n}\n\n// UpdatePhoto handles updating a photo's metadata\nfunc (h *PhotoHandler) UpdatePhoto(c *fiber.Ctx) error {\n\tphotoID := c.Params(\"id\")\n\tif photoID == \"\" {\n\t\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\n\t\t\t\"error\": \"Photo ID is required\",\n\t\t})\n\t}\n\n\t// Parse request body\n\tvar updates map[string]interface{}\n\tif err := c.BodyParser(&updates); err != nil {\n\t\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\n\t\t\t\"error\": \"Invalid request body: \" + err.Error(),\n\t\t})\n\t}\n\n\t// Update photo\n\tphoto, err := h.photoService.UpdatePhoto(c.Context(), photoID, updates)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\n\t\t\t\"error\": \"Failed to update photo: \" + err.Error(),\n\t\t})\n\t}\n\n\t// Verify ownership\n\tuserID := c.Locals(\"userID\").(string)\n\tif photo.UserID != userID {\n\t\treturn c.Status(fiber.StatusForbidden).JSON(fiber.Map{\n\t\t\t\"error\": \"You don't have permission to update this photo\",\n\t\t})\n\t}\n\n\treturn c.JSON(photo)\n}\n\n// DeletePhoto handles deleting a photo\nfunc (h *PhotoHandler) DeletePhoto(c *fiber.Ctx) error {\n\tphotoID := c.Params(\"id\")\n\tif photoID == \"\" {\n\t\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\n\t\t\t\"error\": \"Photo ID is required\",\n\t\t})\n\t}\n\n\t// First get the photo to verify ownership\n\tphoto, err := h.photoService.GetPhoto(c.Context(), photoID)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusNotFound).JSON(fiber.Map{\n\t\t\t\"error\": \"Photo not found: \" + err.Error(),\n\t\t})\n\t}\n\n\t// Verify ownership\n\tuserID := c.Locals(\"userID\").(string)\n\tif photo.UserID != userID {\n\t\treturn c.Status(fiber.StatusForbidden).JSON(fiber.Map{\n\t\t\t\"error\": \"You don't have permission to delete this photo\",\n\t\t})\n\t}\n\n\t// Delete the photo\n\terr = h.photoService.DeletePhoto(c.Context(), photoID)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\n\t\t\t\"error\": \"Failed to delete photo: \" + err.Error(),\n\t\t})\n\t}\n\n\treturn c.Status(fiber.StatusNoContent).Send(nil)\n}\n\n// GetThumbnail handles retrieving a photo's thumbnail\nfunc (h *PhotoHandler) GetThumbnail(c *fiber.Ctx) error {\n\tphotoID := c.Params(\"id\")\n\tif photoID == \"\" {\n\t\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\n\t\t\t\"error\": \"Photo ID is required\",\n\t\t})\n\t}\n\n\t// First get the photo to verify ownership\n\tphoto, err := h.photoService.GetPhoto(c.Context(), photoID)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusNotFound).JSON(fiber.Map{\n\t\t\t\"error\": \"Photo not found: \" + err.Error(),\n\t\t})\n\t}\n\n\t// Verify ownership\n\tuserID := c.Locals(\"userID\").(string)\n\tif photo.UserID != userID {\n\t\treturn c.Status(fiber.StatusForbidden).JSON(fiber.Map{\n\t\t\t\"error\": \"You don't have permission to view this thumbnail\",\n\t\t})\n\t}\n\n\t// Get size parameter (optional, default to medium)\n\tsize := c.Query(\"size\", \"medium\")\n\n\t// Get thumbnail data\n\tdata, contentType, err := h.photoService.GetThumbnail(c.Context(), photoID, size)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\n\t\t\t\"error\": \"Failed to get thumbnail: \" + err.Error(),\n\t\t})\n\t}\n\n\t// Set content type and send the image data\n\tc.Set(\"Content-Type\", contentType)\n\treturn c.Send(data)\n}\n\n// UpdateDescription updates a photo's description\nfunc (h *PhotoHandler) UpdateDescription(c *fiber.Ctx) error {\n\tphotoID := c.Params(\"id\")\n\tif photoID == \"\" {\n\t\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\n\t\t\t\"error\": \"Photo ID is required\",\n\t\t})\n\t}\n\n\t// First get the photo to verify ownership\n\tphoto, err := h.photoService.GetPhoto(c.Context(), photoID)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusNotFound).JSON(fiber.Map{\n\t\t\t\"error\": \"Photo not found: \" + err.Error(),\n\t\t})\n\t}\n\n\t// Verify ownership\n\tuserID := c.Locals(\"userID\").(string)\n\tif photo.UserID != userID {\n\t\treturn c.Status(fiber.StatusForbidden).JSON(fiber.Map{\n\t\t\t\"error\": \"You don't have permission to update this photo's description\",\n\t\t})\n\t}\n\n\t// Parse request body\n\tvar request struct {\n\t\tDescription string `json:\"description\"`\n\t}\n\tif err := c.BodyParser(&request); err != nil {\n\t\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\n\t\t\t\"error\": \"Invalid request body: \" + err.Error(),\n\t\t})\n\t}\n\n\t// Update the description\n\tupdates := map[string]interface{}{\n\t\t\"description\": request.Description,\n\t}\n\n\t// Update the photo\n\tupdatedPhoto, err := h.photoService.UpdatePhoto(c.Context(), photoID, updates)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\n\t\t\t\"error\": \"Failed to update description: \" + err.Error(),\n\t\t})\n\t}\n\n\treturn c.JSON(updatedPhoto)\n}\n\n// GenerateDescription generates an AI description for a photo\nfunc (h *PhotoHandler) GenerateDescription(c *fiber.Ctx) error {\n\tphotoID := c.Params(\"id\")\n\tif photoID == \"\" {\n\t\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\n\t\t\t\"error\": \"Photo ID is required\",\n\t\t})\n\t}\n\n\t// First get the photo to verify ownership\n\tphoto, err := h.photoService.GetPhoto(c.Context(), photoID)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusNotFound).JSON(fiber.Map{\n\t\t\t\"error\": \"Photo not found: \" + err.Error(),\n\t\t})\n\t}\n\n\t// Verify ownership\n\tuserID := c.Locals(\"userID\").(string)\n\tif photo.UserID != userID {\n\t\treturn c.Status(fiber.StatusForbidden).JSON(fiber.Map{\n\t\t\t\"error\": \"You don't have permission to generate a description for this photo\",\n\t\t})\n\t}\n\n\t// Generate the description\n\tdescription, err := h.photoService.GenerateDescription(c.Context(), photoID)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\n\t\t\t\"error\": \"Failed to generate description: \" + err.Error(),\n\t\t})\n\t}\n\n\t// Update the photo with the generated description\n\tupdates := map[string]interface{}{\n\t\t\"description\": description,\n\t}\n\n\t_, err = h.photoService.UpdatePhoto(c.Context(), photoID, updates)\n\tif err != nil {\n\t\t// Log the error but don't fail the request\n\t\t// since we still want to return the generated description\n\t\t// Consider using a background job for this in production\n\t\t// log.Printf(\"Failed to update photo with generated description: %v\", err)\n\t}\n\n\treturn c.JSON(fiber.Map{\n\t\t\"description\": description,\n\t})\n}\n\n// GetSharedWith gets the list of users a photo is shared with\nfunc (h *PhotoHandler) GetSharedWith(c *fiber.Ctx) error {\n\tphotoID := c.Params(\"id\")\n\tif photoID == \"\" {\n\t\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\n\t\t\t\"error\": \"Photo ID is required\",\n\t\t})\n\t}\n\n\t// First get the photo to verify ownership\n\tphoto, err := h.photoService.GetPhoto(c.Context(), photoID)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusNotFound).JSON(fiber.Map{\n\t\t\t\"error\": \"Photo not found: \" + err.Error(),\n\t\t})\n\t}\n\n\t// Verify ownership\n\tuserID := c.Locals(\"userID\").(string)\n\tif photo.UserID != userID {\n\t\treturn c.Status(fiber.StatusForbidden).JSON(fiber.Map{\n\t\t\t\"error\": \"You don't have permission to view sharing information for this photo\",\n\t\t})\n\t}\n\n\t// Get the list of users the photo is shared with\n\tusers, err := h.photoService.GetSharedWith(c.Context(), photoID)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\n\t\t\t\"error\": \"Failed to get shared users: \" + err.Error(),\n\t\t})\n\t}\n\n\treturn c.JSON(fiber.Map{\n\t\t\"photo_id\":   photoID,\n\t\t\"shared_with\": users,\n\t})\n}\n\n// RegisterRoutes registers photo-related routes\nfunc (h *PhotoHandler) RegisterRoutes(router fiber.Router) {\n\tphotoGroup := router.Group(\"/photos\")\n\t{\n\t\t// Upload a new photo\n\t\tphotoGroup.Post(\"/\", h.UploadPhoto)\n\t\t\n\t\t// List all photos with pagination\n\t\tphotoGroup.Get(\"/\", h.ListPhotos)\n\t\t\n\t\t// Get a specific photo by ID\n\t\tphotoGroup.Get(\"/:id\", h.GetPhoto)\n\t\t\n\t\t// Update a photo's metadata\n\t\tphotoGroup.Put(\"/:id\", h.UpdatePhoto)\n\t\t\n\t\t// Delete a photo\n\t\tphotoGroup.Delete(\"/:id\", h.DeletePhoto)\n\t\t\n\t\t// Get a photo's thumbnail\n\t\tphotoGroup.Get(\"/:id/thumbnail\", h.GetThumbnail)\n\t\t\n\t\t// Update a photo's description\n\t\tphotoGroup.Put(\"/:id/description\", h.UpdateDescription)\n\t\t\n\t\t// Generate an AI description for a photo\n\t\tphotoGroup.Post(\"/:id/generate-description\", h.GenerateDescription)\n\t\t\n\t\t// Get the list of users a photo is shared with\n\t\tphotoGroup.Get(\"/:id/shared-with\", h.GetSharedWith)\n\t}\n}"
                },
                {
                  "name": "upload.go",
                  "type": "file",
                  "path": "media-vault-backend/internal/handlers/upload.go",
                  "size": 7451,
                  "content": "package handlers\n\nimport (\n\t\"fmt\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"path/filepath\"\n\t\"strings\"\n\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/wronai/media-vault-backend/internal/models\"\n\t\"github.com/wronai/media-vault-backend/internal/services\"\n)\n\n// UploadHandler handles file uploads\n// @title Media Vault Upload Handler\n// @version 1.0\n// @description Handles file uploads to the media vault\n// @BasePath /api/v1\n// @securityDefinitions.apikey BearerAuth\n// @in header\n// @name Authorization\ntype UploadHandler struct {\n\tvaultService       services.VaultService\n\tphotoService       services.PhotoService\n\tdescriptionService services.DescriptionService\n}\n\n// NewUploadHandler creates a new upload handler\nfunc NewUploadHandler(\n\tvaultService services.VaultService,\n\tphotoService services.PhotoService,\n\tdescriptionService services.DescriptionService,\n) *UploadHandler {\n\treturn &UploadHandler{\n\t\tvaultService:       vaultService,\n\t\tphotoService:       photoService,\n\t\tdescriptionService: descriptionService,\n\t}\n}\n\n// UploadSingle handles single file upload\n// @Summary Upload a single file\n// @Description Upload a single file to the media vault\n// @Tags upload\n// @Accept multipart/form-data\n// @Produce json\n// @Param file formData file true \"File to upload\"\n// @Param description formData string false \"File description\"\n// @Param tags formData string false \"Comma-separated list of tags\"\n// @Success 200 {object} models.Photo\n// @Failure 400 {object} map[string]string\n// @Failure 401 {object} map[string]string\n// @Failure 500 {object} map[string]string\n// @Router /vault/upload [post]\nfunc (h *UploadHandler) UploadSingle(c *fiber.Ctx) error {\n\t// Get user ID from context\n\tuserID := c.Locals(\"userID\").(string)\n\n\t// Check if the request contains a file\n\tfileHeader, err := c.FormFile(\"file\")\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\n\t\t\t\"error\": \"No file uploaded: \" + err.Error(),\n\t\t})\n\t}\n\n\t// Get additional form data\n\tdescription := c.FormValue(\"description\", \"\")\n\ttags := c.FormValue(\"tags\", \"\")\n\n\t// Check file size (max 10MB)\n\tif fileHeader.Size > 10<<20 {\n\t\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\n\t\t\t\"error\": \"File too large. Maximum size is 10MB\",\n\t\t})\n\t}\n\n\t// Check file type\n\text := filepath.Ext(fileHeader.Filename)\n\tallowedTypes := map[string]bool{\n\t\t\".jpg\":  true,\n\t\t\".jpeg\": true,\n\t\t\".png\":  true,\n\t\t\".gif\":  true,\n\t\t\".webp\": true,\n\t}\n\n\tif !allowedTypes[ext] {\n\t\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\n\t\t\t\"error\": \"Invalid file type. Only JPG, JPEG, PNG, GIF, and WebP are allowed\",\n\t\t})\n\t}\n\n\t// Prepare metadata\n\tmetadata := make(map[string]interface{})\n\tif description != \"\" {\n\t\tmetadata[\"description\"] = description\n\t}\n\tif tags != \"\" {\n\t\tmetadata[\"tags\"] = tags\n\t}\n\n\t// Upload the file\n\tphoto, err := h.photoService.UploadPhoto(c.Context(), userID, fileHeader, metadata)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\n\t\t\t\"error\": \"Failed to upload file: \" + err.Error(),\n\t\t})\n\t}\n\n\treturn c.Status(fiber.StatusCreated).JSON(photo)\n}\n\n// BulkUpload handles multiple file uploads\n// @Summary Upload multiple files\n// @Description Upload multiple files to the media vault\n// @Tags upload\n// @Accept multipart/form-data\n// @Produce json\n// @Param files formData []file true \"Files to upload\"\n// @Param description formData string false \"Description for all files\"\n// @Param tags formData string false \"Comma-separated list of tags for all files\"\n// @Success 200 {array} models.Photo\n// @Failure 400 {object} map[string]string\n// @Failure 401 {object} map[string]string\n// @Failure 500 {object} map[string]string\n// @Router /vault/upload/bulk [post]\nfunc (h *UploadHandler) BulkUpload(c *fiber.Ctx) error {\n\t// Get user ID from context\n\tuserID := c.Locals(\"userID\").(string)\n\n\t// Parse the multipart form\n\tform, err := c.MultipartForm()\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\n\t\t\t\"error\": \"Failed to parse form: \" + err.Error(),\n\t\t})\n\t}\n\n\t// Get the files\n\tfiles := form.File[\"files\"]\n\tif len(files) == 0 {\n\t\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\n\t\t\t\"error\": \"No files uploaded. Use the 'files' form field to upload multiple files.\",\n\t\t})\n\t}\n\n\t// Get additional form data\n\tdescription := c.FormValue(\"description\", \"\")\n\ttags := c.FormValue(\"tags\", \"\")\n\n\t// Process each file\n\tvar uploadedPhotos []*models.Photo\n\tvar uploadErrors []string\n\n\tfor _, fileHeader := range files {\n\t\t// Check file size (max 10MB)\n\t\tif fileHeader.Size > 10<<20 {\n\t\t\terrMsg := fmt.Sprintf(\"File '%s' is too large. Maximum size is 10MB\", fileHeader.Filename)\n\t\t\tuploadErrors = append(uploadErrors, errMsg)\n\t\t\tcontinue\n\t\t}\n\n\t\t// Check file type\n\t\text := filepath.Ext(fileHeader.Filename)\n\t\tallowedTypes := map[string]bool{\n\t\t\t\".jpg\":  true,\n\t\t\t\".jpeg\": true,\n\t\t\t\".png\":  true,\n\t\t\t\".gif\":  true,\n\t\t\t\".webp\": true,\n\t\t}\n\n\t\tif !allowedTypes[ext] {\n\t\t\terrMsg := fmt.Sprintf(\"File '%s' has an unsupported type. Only JPG, JPEG, PNG, GIF, and WebP are allowed\", fileHeader.Filename)\n\t\t\tuploadErrors = append(uploadErrors, errMsg)\n\t\t\tcontinue\n\t\t}\n\n\t\t// Prepare metadata\n\t\tmetadata := make(map[string]interface{})\n\t\tif description != \"\" {\n\t\t\tmetadata[\"description\"] = description\n\t\t}\n\t\tif tags != \"\" {\n\t\t\tmetadata[\"tags\"] = tags\n\t\t}\n\n\t\t// Upload the file\n\t\tphoto, err := h.photoService.UploadPhoto(c.Context(), userID, fileHeader, metadata)\n\t\tif err != nil {\n\t\t\terrMsg := fmt.Sprintf(\"Failed to upload file '%s': %v\", fileHeader.Filename, err)\n\t\t\tuploadErrors = append(uploadErrors, errMsg)\n\t\t\tcontinue\n\t\t}\n\n\t\tuploadedPhotos = append(uploadedPhotos, photo)\n\t}\n\n\t// If no files were uploaded successfully, return an error\n\tif len(uploadedPhotos) == 0 {\n\t\terrMsg := \"No files were uploaded successfully\"\n\t\tif len(uploadErrors) > 0 {\n\t\t\terrMsg = strings.Join(uploadErrors, \"; \")\n\t\t}\n\t\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\n\t\t\t\"error\": errMsg,\n\t\t})\n\t}\n\n\t// If there were some errors but some files were uploaded successfully\n\tif len(uploadErrors) > 0 {\n\t\t// We still return a 200 status but include the errors in the response\n\t\treturn c.JSON(fiber.Map{\n\t\t\t\"photos\":       uploadedPhotos,\n\t\t\t\"error_count\":  len(uploadErrors),\n\t\t\t\"errors\":       uploadErrors,\n\t\t\t\"message\":      fmt.Sprintf(\"Uploaded %d files with %d errors\", len(uploadedPhotos), len(uploadErrors)),\n\t\t})\n\t}\n\n\treturn c.JSON(uploadedPhotos)\n}\n\n// Helper function to get content type from file extension\nfunc getContentType(ext string) string {\n\tcontentTypes := map[string]string{\n\t\t\".jpg\":  \"image/jpeg\",\n\t\t\".jpeg\": \"image/jpeg\",\n\t\t\".png\":  \"image/png\",\n\t\t\".gif\":  \"image/gif\",\n\t}\n\treturn contentTypes[ext]\n}\n\n// Helper function to check if a file is an image\nfunc isImage(contentType string) bool {\n\treturn contentType == \"image/jpeg\" || \n\t       contentType == \"image/png\" || \n\t       contentType == \"image/gif\"\n}\n\n// Helper function to validate image file\nfunc validateImageFile(fileHeader *multipart.FileHeader) error {\n\t// Open the file\n\tfile, err := fileHeader.Open()\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\t// Read the first 512 bytes to detect the content type\n\tbuffer := make([]byte, 512)\n\t_, err = file.Read(buffer)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Reset the file pointer\n\t_, err = file.Seek(0, 0)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Detect content type\n\tcontentType := http.DetectContentType(buffer)\n\tif !isImage(contentType) {\n\t\treturn fmt.Errorf(\"invalid file type: %s\", contentType)\n\t}\n\n\treturn nil\n}"
                },
                {
                  "name": "vault.go",
                  "type": "file",
                  "path": "media-vault-backend/internal/handlers/vault.go",
                  "size": 967,
                  "content": "package handlers\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/wronai/media-vault-backend/internal/services\"\n)\n\ntype VaultHandler struct {\n    vaultService *services.VaultService\n}\n\nfunc NewVaultHandler(vaultService *services.VaultService) *VaultHandler {\n    return &VaultHandler{vaultService: vaultService}\n}\n\n// GetVault returns the user's vault contents\n// @Summary Get vault contents\n// @Description Get the authenticated user's vault contents\n// @Tags vault\n// @Produce json\n// @Security BearerAuth\n// @Success 200 {object} map[string]interface{}\n// @Failure 401 {object} map[string]string\n// @Router /vault [get]\nfunc (h *VaultHandler) GetVault(c *fiber.Ctx) error {\n\t// Get user ID from context (set by auth middleware)\n\tuserID := c.Locals(\"userID\").(string)\n\n\t// TODO: Implement actual vault retrieval logic\n\t// For now, return a mock response\n\treturn c.JSON(fiber.Map{\n\t\t\"user_id\": userID,\n\t\t\"items\":    []string{},\n\t\t\"quota\":    \"0/1024 MB\",\n\t})\n}\n"
                }
              ]
            },
            {
              "name": "models",
              "type": "directory",
              "path": "media-vault-backend/internal/models",
              "children": [
                {
                  "name": "description.dart",
                  "type": "file",
                  "path": "media-vault-backend/internal/models/description.dart",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "description.go",
                  "type": "file",
                  "path": "media-vault-backend/internal/models/description.go",
                  "size": 1054,
                  "content": "package models\n\nimport (\n\t\"time\"\n)\n\n// Description represents a description for a media item\ntype Description struct {\n\tID          string    `json:\"id\"`\n\tMediaID     string    `json:\"media_id\"`\n\tContent     string    `json:\"content\"`\n\tGeneratedBy string    `json:\"generated_by\"` // \"user\" or \"ai\"\n\tCreatedAt   time.Time `json:\"created_at\"`\n\tUpdatedAt   time.Time `json:\"updated_at\"`\n}\n\n// NewDescription creates a new Description instance\nfunc NewDescription(mediaID, content, generatedBy string) *Description {\n\tnow := time.Now()\n\treturn &Description{\n\t\tID:          generateID(),\n\t\tMediaID:     mediaID,\n\t\tContent:     content,\n\t\tGeneratedBy: generatedBy,\n\t\tCreatedAt:   now,\n\t\tUpdatedAt:   now,\n\t}\n}\n\n// Update updates the description content\nfunc (d *Description) Update(content string) {\n\td.Content = content\n\td.UpdatedAt = time.Now()\n}\n\n// generateID generates a new unique ID\nfunc generateID() string {\n\t// In a real implementation, you might want to use UUID or another unique ID generator\n\treturn \"desc_\" + time.Now().Format(\"20060102150405\")\n}"
                },
                {
                  "name": "media.go",
                  "type": "file",
                  "path": "media-vault-backend/internal/models/media.go",
                  "size": 1624,
                  "content": "package models\n\nimport (\n\t\"time\"\n)\n\n// Media represents a media file in the system\ntype Media struct {\n\tID          string    `json:\"id\"`\n\tUserID      string    `json:\"user_id\"`\n\tTitle       string    `json:\"title\"`\n\tDescription string    `json:\"description,omitempty\"`\n\tURL         string    `json:\"url\"`\n\tThumbnailURL string    `json:\"thumbnail_url,omitempty\"`\n\tMIMEType    string    `json:\"mime_type\"`\n\tSize        int64     `json:\"size\"`\n\tWidth       int       `json:\"width,omitempty\"`\n\tHeight      int       `json:\"height,omitempty\"`\n\tIsPublic    bool      `json:\"is_public\"`\n\tCreatedAt   time.Time `json:\"created_at\"`\n\tUpdatedAt   time.Time `json:\"updated_at\"`\n}\n\n// NewMedia creates a new Media instance\nfunc NewMedia(userID, title, url, mimeType string, size int64) *Media {\n\tnow := time.Now()\n\treturn &Media{\n\t\tID:        generateMediaID(),\n\t\tUserID:    userID,\n\t\tTitle:     title,\n\t\tURL:       url,\n\t\tMIMEType:  mimeType,\n\t\tSize:      size,\n\t\tIsPublic:  false,\n\t\tCreatedAt: now,\n\t\tUpdatedAt: now,\n\t}\n}\n\n// Update updates the media metadata\nfunc (m *Media) Update(updates map[string]interface{}) {\n\tif title, ok := updates[\"title\"].(string); ok && title != \"\" {\n\t\tm.Title = title\n\t}\n\tif description, ok := updates[\"description\"].(string); ok {\n\t\tm.Description = description\n\t}\n\tif isPublic, ok := updates[\"is_public\"].(bool); ok {\n\t\tm.IsPublic = isPublic\n\t}\n\tm.UpdatedAt = time.Now()\n}\n\n// generateMediaID generates a new unique media ID\nfunc generateMediaID() string {\n\t// In a real implementation, you might want to use UUID or another unique ID generator\n\treturn \"media_\" + time.Now().Format(\"20060102150405\")\n}\n"
                },
                {
                  "name": "nsfw_mobilenet.h5",
                  "type": "file",
                  "path": "media-vault-backend/internal/models/nsfw_mobilenet.h5",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "nsfw_model.h5",
                  "type": "file",
                  "path": "media-vault-backend/internal/models/nsfw_model.h5",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "photo.dart",
                  "type": "file",
                  "path": "media-vault-backend/internal/models/photo.dart",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "photo.go",
                  "type": "file",
                  "path": "media-vault-backend/internal/models/photo.go",
                  "size": 4552,
                  "content": "package models\n\nimport \"time\"\n\n// Photo represents a photo in the vault\ntype Photo struct {\n    ID                string     `json:\"id\" db:\"id\"`\n    UserID            string     `json:\"user_id\" db:\"user_id\"`\n    PartnerID         *string    `json:\"partner_id,omitempty\" db:\"partner_id\"`\n    Filename          string     `json:\"filename\" db:\"filename\"`\n    OriginalName      string     `json:\"original_name\" db:\"original_name\"`\n    FilePath          string     `json:\"file_path\" db:\"file_path\"`\n    ThumbnailPath     *string    `json:\"thumbnail_path,omitempty\" db:\"thumbnail_path\"`\n    FileSize          int64      `json:\"file_size\" db:\"file_size\"`\n    MimeType          string     `json:\"mime_type\" db:\"mime_type\"`\n    Width             *int       `json:\"width,omitempty\" db:\"width\"`\n    Height            *int       `json:\"height,omitempty\" db:\"height\"`\n    Hash              string     `json:\"hash\" db:\"hash\"`\n    Description       *string    `json:\"description,omitempty\" db:\"description\"`\n    AIDescription     *string    `json:\"ai_description,omitempty\" db:\"ai_description\"`\n    Tags              *string    `json:\"tags,omitempty\" db:\"tags\"`\n    AIConfidence      *float64   `json:\"ai_confidence,omitempty\" db:\"ai_confidence\"`\n    IsNSFW            *bool      `json:\"is_nsfw,omitempty\" db:\"is_nsfw\"`\n    NSFWConfidence    *float64   `json:\"nsfw_confidence,omitempty\" db:\"nsfw_confidence\"`\n    ModerationStatus  string     `json:\"moderation_status\" db:\"moderation_status\"`\n    ExifData          *string    `json:\"exif_data,omitempty\" db:\"exif_data\"`\n    Location          *string    `json:\"location,omitempty\" db:\"location\"`\n    CameraMake        *string    `json:\"camera_make,omitempty\" db:\"camera_make\"`\n    CameraModel       *string    `json:\"camera_model,omitempty\" db:\"camera_model\"`\n    TakenAt           *time.Time `json:\"taken_at,omitempty\" db:\"taken_at\"`\n    IsShared          bool       `json:\"is_shared\" db:\"is_shared\"`\n    SharedWith        []string   `json:\"shared_with,omitempty\"`\n    ShareCount        int        `json:\"share_count\" db:\"share_count\"`\n    ViewCount         int        `json:\"view_count\" db:\"view_count\"`\n    CreatedAt         time.Time  `json:\"created_at\" db:\"created_at\"`\n    UpdatedAt         time.Time  `json:\"updated_at\" db:\"updated_at\"`\n    ProcessedAt       *time.Time `json:\"processed_at,omitempty\" db:\"processed_at\"`\n}\n\n// PhotoSharing represents photo sharing permissions\ntype PhotoSharing struct {\n    ID          string     `json:\"id\" db:\"id\"`\n    PhotoID     string     `json:\"photo_id\" db:\"photo_id\"`\n    SharedBy    string     `json:\"shared_by\" db:\"shared_by\"`\n    SharedWith  string     `json:\"shared_with\" db:\"shared_with\"`\n    Permission  string     `json:\"permission\" db:\"permission\"`\n    CreatedAt   time.Time  `json:\"created_at\" db:\"created_at\"`\n    ExpiresAt   *time.Time `json:\"expires_at,omitempty\" db:\"expires_at\"`\n}\n\n// PhotoAnalytics represents photo analytics data\ntype PhotoAnalytics struct {\n    PhotoID    string     `json:\"photo_id\" db:\"photo_id\"`\n    Views      int        `json:\"views\" db:\"views\"`\n    Downloads  int        `json:\"downloads\" db:\"downloads\"`\n    Shares     int        `json:\"shares\" db:\"shares\"`\n    LastViewed *time.Time `json:\"last_viewed,omitempty\" db:\"last_viewed\"`\n    ViewerIPs  []string   `json:\"viewer_ips,omitempty\"`\n    Countries  []string   `json:\"countries,omitempty\"`\n}\n\n// BulkUploadRequest represents a bulk upload request\ntype BulkUploadRequest struct {\n    Files       []UploadedFile `json:\"files\"`\n    DefaultTags string         `json:\"default_tags,omitempty\"`\n    ShareWith   []string       `json:\"share_with,omitempty\"`\n    AutoDescribe bool          `json:\"auto_describe\"`\n}\n\n// UploadedFile represents a file in bulk upload\ntype UploadedFile struct {\n    Filename    string `json:\"filename\"`\n    Data        []byte `json:\"data\"`\n    Description string `json:\"description,omitempty\"`\n    Tags        string `json:\"tags,omitempty\"`\n}\n\n// BatchUpdateRequest represents batch description update\ntype BatchUpdateRequest struct {\n    PhotoIDs    []string `json:\"photo_ids\"`\n    Description string   `json:\"description,omitempty\"`\n    Tags        string   `json:\"tags,omitempty\"`\n    Operation   string   `json:\"operation\"`\n}\n\n// ShareRequest represents a photo sharing request\ntype ShareRequest struct {\n    PhotoIDs   []string   `json:\"photo_ids\"`\n    ShareWith  []string   `json:\"share_with\"`\n    Permission string     `json:\"permission\"`\n    ExpiresAt  *time.Time `json:\"expires_at,omitempty\"`\n    Message    string     `json:\"message,omitempty\"`\n}\n"
                },
                {
                  "name": "user.dart",
                  "type": "file",
                  "path": "media-vault-backend/internal/models/user.dart",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "user.go",
                  "type": "file",
                  "path": "media-vault-backend/internal/models/user.go",
                  "size": 1581,
                  "content": "package models\n\nimport \"time\"\n\n// User represents a user in the system\ntype User struct {\n    ID        string    `json:\"id\" db:\"id\"`\n    Email     string    `json:\"email\" db:\"email\"`\n    Username  string    `json:\"username\" db:\"username\"`\n    FullName  string    `json:\"full_name,omitempty\" db:\"full_name\"`\n    AvatarURL *string   `json:\"avatar_url,omitempty\" db:\"avatar_url\"`\n    IsAdmin   bool      `json:\"is_admin\" db:\"is_admin\"`\n    IsActive  bool      `json:\"is_active\" db:\"is_active\"`\n    LastLogin *time.Time `json:\"last_login,omitempty\" db:\"last_login\"`\n    CreatedAt time.Time `json:\"created_at\" db:\"created_at\"`\n    UpdatedAt time.Time `json:\"updated_at\" db:\"updated_at\"`\n}\n\n// UserSettings represents user preferences and settings\ntype UserSettings struct {\n    UserID         string    `json:\"user_id\" db:\"user_id\"`\n    Theme          string    `json:\"theme\" db:\"theme\"`\n    Notifications  bool      `json:\"notifications\" db:\"notifications\"`\n    EmailAlerts    bool      `json:\"email_alerts\" db:\"email_alerts\"`\n    StorageQuota   int64     `json:\"storage_quota\" db:\"storage_quota\"`\n    StorageUsed    int64     `json:\"storage_used\" db:\"storage_used\"`\n    LastBackup     *time.Time `json:\"last_backup,omitempty\" db:\"last_backup\"`\n    AutoSave       bool      `json:\"auto_save\" db:\"auto_save\"`\n    AutoTagging    bool      `json:\"auto_tagging\" db:\"auto_tagging\"`\n    AutoCategorize bool      `json:\"auto_categorize\" db:\"auto_categorize\"`\n    CreatedAt      time.Time `json:\"created_at\" db:\"created_at\"`\n    UpdatedAt      time.Time `json:\"updated_at\" db:\"updated_at\"`\n}\n"
                },
                {
                  "name": "vault_file.dart",
                  "type": "file",
                  "path": "media-vault-backend/internal/models/vault_file.dart",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "vault_file.go",
                  "type": "file",
                  "path": "media-vault-backend/internal/models/vault_file.go",
                  "size": 731,
                  "content": "package models\n\nimport \"time\"\n\n// VaultFile represents a file in the vault\ntype VaultFile struct {\n    ID          string    `json:\"id\" db:\"id\"`\n    UserID      string    `json:\"user_id\" db:\"user_id\"`\n    Name        string    `json:\"name\" db:\"name\"`\n    Path        string    `json:\"path\" db:\"path\"`\n    Size        int64     `json:\"size\" db:\"size\"`\n    MimeType    string    `json:\"mime_type\" db:\"mime_type\"`\n    IsPublic    bool      `json:\"is_public\" db:\"is_public\"`\n    IsEncrypted bool      `json:\"is_encrypted\" db:\"is_encrypted\"`\n    Metadata    string    `json:\"metadata,omitempty\" db:\"metadata\"`\n    CreatedAt   time.Time `json:\"created_at\" db:\"created_at\"`\n    UpdatedAt   time.Time `json:\"updated_at\" db:\"updated_at\"`\n}\n"
                }
              ]
            },
            {
              "name": "services",
              "type": "directory",
              "path": "media-vault-backend/internal/services",
              "children": [
                {
                  "name": "auth_service.dart",
                  "type": "file",
                  "path": "media-vault-backend/internal/services/auth_service.dart",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "description_service.dart",
                  "type": "file",
                  "path": "media-vault-backend/internal/services/description_service.dart",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "description_service.go",
                  "type": "file",
                  "path": "media-vault-backend/internal/services/description_service.go",
                  "size": 679,
                  "content": "package services\n\n// DescriptionService handles AI-generated descriptions for media\n// TODO: Implement the description service functionality\n\n// DescriptionService provides methods for generating and managing descriptions\ntype DescriptionService struct {\n\t// Add any dependencies here\n}\n\n// NewDescriptionService creates a new DescriptionService\nfunc NewDescriptionService() *DescriptionService {\n\treturn &DescriptionService{}\n}\n\n// GenerateDescription generates a description for the given content\nfunc (s *DescriptionService) GenerateDescription(content string) (string, error) {\n\t// TODO: Implement description generation\n\treturn \"Generated description for: \" + content, nil\n}"
                },
                {
                  "name": "media_vault_service.dart",
                  "type": "file",
                  "path": "media-vault-backend/internal/services/media_vault_service.dart",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "photo_service.dart",
                  "type": "file",
                  "path": "media-vault-backend/internal/services/photo_service.dart",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "photo_service.go",
                  "type": "file",
                  "path": "media-vault-backend/internal/services/photo_service.go",
                  "size": 4721,
                  "content": "package services\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"mime/multipart\"\n\t\"time\"\n\n\t\"github.com/valyala/fasthttp\"\n\t\"github.com/wronai/media-vault-backend/internal/models\"\n)\n\ntype PhotoService struct {\n\tdb *sql.DB\n}\n\nfunc NewPhotoService(db *sql.DB) *PhotoService {\n\treturn &PhotoService{db: db}\n}\n\n// UploadPhoto handles photo upload\nfunc (s *PhotoService) UploadPhoto(ctx context.Context, userID string, fileHeader *multipart.FileHeader, meta map[string]interface{}) (*models.Photo, error) {\n\t// TODO: Implement actual file upload and database record creation\n\treturn &models.Photo{\n\t\tID:           \"generated-id\",\n\t\tUserID:       userID,\n\t\tFilename:     fileHeader.Filename,\n\t\tOriginalName: fileHeader.Filename,\n\t\tFileSize:     fileHeader.Size,\n\t\tMimeType:     fileHeader.Header.Get(\"Content-Type\"),\n\t\tCreatedAt:    time.Now(),\n\t\tUpdatedAt:    time.Now(),\n\t}, nil\n}\n\n// GetPhoto retrieves a photo by ID\nfunc (s *PhotoService) GetPhoto(ctx *fasthttp.RequestCtx, photoID string) (*models.Photo, error) {\n\t// TODO: Implement actual database query\n\treturn &models.Photo{\n\t\tID:           photoID,\n\t\tUserID:       \"user-id\",\n\t\tFilename:     \"example.jpg\",\n\t\tOriginalName: \"example.jpg\",\n\t\tFileSize:     1024,\n\t\tMimeType:     \"image/jpeg\",\n\t\tCreatedAt:    time.Now(),\n\t\tUpdatedAt:    time.Now(),\n\t}, nil\n}\n\n// ListPhotos lists photos with pagination and filtering\nfunc (s *PhotoService) ListPhotos(ctx *fasthttp.RequestCtx, userID string, page, limit int) ([]*models.Photo, int, error) {\n\t// TODO: Implement actual database query with pagination\n\treturn []*models.Photo{}, 0, nil\n}\n\n// UpdatePhoto updates a photo's metadata\nfunc (s *PhotoService) UpdatePhoto(ctx *fasthttp.RequestCtx, photoID string, updates map[string]interface{}) (*models.Photo, error) {\n\t// TODO: Implement actual update logic\n\treturn &models.Photo{\n\t\tID:           photoID,\n\t\tUserID:       \"user-id\",\n\t\tFilename:     \"updated.jpg\",\n\t\tOriginalName: \"updated.jpg\",\n\t\tFileSize:     1024,\n\t\tMimeType:     \"image/jpeg\",\n\t\tCreatedAt:    time.Now(),\n\t\tUpdatedAt:    time.Now(),\n\t}, nil\n}\n\n// DeletePhoto removes a photo\nfunc (s *PhotoService) DeletePhoto(ctx *fasthttp.RequestCtx, photoID string) error {\n\t// TODO: Implement actual delete logic\n\treturn nil\n}\n\n// GetThumbnail retrieves a photo's thumbnail\nfunc (s *PhotoService) GetThumbnail(ctx *fasthttp.RequestCtx, photoID, size string) ([]byte, string, error) {\n\t// TODO: Implement thumbnail generation/retrieval\n\treturn []byte{}, \"image/jpeg\", nil\n}\n\n// GenerateDescription generates an AI description for a photo\nfunc (s *PhotoService) GenerateDescription(ctx *fasthttp.RequestCtx, photoID string) (string, error) {\n\t// TODO: Implement AI description generation\n\treturn \"Generated description for photo \" + photoID, nil\n}\n\n// GetSharedWith gets the list of users a photo is shared with\nfunc (s *PhotoService) GetSharedWith(ctx *fasthttp.RequestCtx, photoID string) ([]string, error) {\n\t// TODO: Implement sharing logic\n\treturn []string{}, nil\n}\n\n// GetPartnerPhotos retrieves photos for a partner with pagination\nfunc (s *PhotoService) GetPartnerPhotos(partnerID string, page, limit int, sortBy, sortOrder, search string) ([]*models.Photo, int, error) {\n\t// TODO: Implement partner photos retrieval\n\treturn []*models.Photo{}, 0, nil\n}\n\n// GenerateAIDescription generates AI description for a photo\nfunc (s *PhotoService) GenerateAIDescription(photoID string) (string, error) {\n\t// TODO: Implement AI description generation\n\treturn \"AI generated description for \" + photoID, nil\n}\n\n// GetPhotoAnalytics retrieves analytics for a photo\nfunc (s *PhotoService) GetPhotoAnalytics(photoID string) (*models.PhotoAnalytics, error) {\n\t// TODO: Implement photo analytics\n\treturn &models.PhotoAnalytics{\n\t\tPhotoID:    photoID,\n\t\tViews:      0,\n\t\tDownloads:  0,\n\t\tShares:     0,\n\t\tLastViewed: nil,\n\t\tViewerIPs:  []string{},\n\t\tCountries:  []string{},\n\t}, nil\n}\n\n// GetPartnerDashboard returns dashboard data for partner\nfunc (s *PhotoService) GetPartnerDashboard(partnerID string) (map[string]interface{}, error) {\n\t// TODO: Implement partner dashboard data\n\treturn map[string]interface{}{\n\t\t\"total_photos\":    0,\n\t\t\"total_views\":    0,\n\t\t\"total_downloads\": 0,\n\t\t\"storage_used\":    \"0 MB\",\n\t\t\"recent_photos\":  []interface{}{},\n\t}, nil\n}\n\n// GetPartnerAnalytics returns comprehensive analytics for partner\nfunc (s *PhotoService) GetPartnerAnalytics(partnerID string, from, to *time.Time) (map[string]interface{}, error) {\n\t// TODO: Implement partner analytics\n\treturn map[string]interface{}{\n\t\t\"period\": map[string]interface{}{\n\t\t\t\"from\": from,\n\t\t\t\"to\":   to,\n\t\t},\n\t\t\"total_photos\":    0,\n\t\t\"total_views\":    0,\n\t\t\"total_downloads\": 0,\n\t\t\"popular_photos\": []interface{}{},\n\t\t\"activity\":       []interface{}{},\n\t}, nil\n}\n"
                },
                {
                  "name": "sharing_service.go",
                  "type": "file",
                  "path": "media-vault-backend/internal/services/sharing_service.go",
                  "size": 4366,
                  "content": "package services\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"errors\"\n\t\"time\"\n\n\t\"github.com/google/uuid\"\n)\n\n// Share represents a shared photo with permissions\ntype Share struct {\n\tID          string    `json:\"id\"`\n\tPhotoID     string    `json:\"photo_id\"`\n\tSharedBy    string    `json:\"shared_by\"`\n\tSharedWith  string    `json:\"shared_with\"`\n\tPermission  string    `json:\"permission\"` // \"view\" or \"download\"\n\tExpiresAt   time.Time `json:\"expires_at,omitempty\"`\n\tCreatedAt   time.Time `json:\"created_at\"`\n}\n\n// SharingService handles photo sharing operations\ntype SharingService struct {\n\tdb *sql.DB\n}\n\n// NewSharingService creates a new SharingService\nfunc NewSharingService(db *sql.DB) *SharingService {\n\treturn &SharingService{\n\t\tdb: db,\n\t}\n}\n\n// SharePhoto shares a photo with another user\nfunc (s *SharingService) SharePhoto(ctx context.Context, share *Share) error {\n\t// Validate input\n\tif share.PhotoID == \"\" || share.SharedBy == \"\" || share.SharedWith == \"\" {\n\t\treturn errors.New(\"photo ID, shared_by, and shared_with are required\")\n\t}\n\n\t// Set default permission if not provided\n\tif share.Permission == \"\" {\n\t\tshare.Permission = \"view\"\n\t}\n\n\t// Generate a new share ID if not provided\n\tif share.ID == \"\" {\n\t\tshare.ID = uuid.New().String()\n\t}\n\n\t// Set created at time\n\tshare.CreatedAt = time.Now()\n\n\t// Insert the share record\n\t_, err := s.db.ExecContext(ctx, `\n\t\tINSERT INTO photo_shares (id, photo_id, shared_by, shared_with, permission, expires_at, created_at)\n\t\tVALUES ($1, $2, $3, $4, $5, $6, $7)\n\t`,\n\t\tshare.ID,\n\t\tshare.PhotoID,\n\t\tshare.SharedBy,\n\t\tshare.SharedWith,\n\t\tshare.Permission,\n\t\tshare.ExpiresAt,\n\t\tshare.CreatedAt,\n\t)\n\n\treturn err\n}\n\n// GetShare retrieves a share by ID\nfunc (s *SharingService) GetShare(ctx context.Context, shareID string) (*Share, error) {\n\tvar share Share\n\terr := s.db.QueryRowContext(ctx, `\n\t\tSELECT id, photo_id, shared_by, shared_with, permission, expires_at, created_at\n\t\tFROM photo_shares\n\t\tWHERE id = $1\n\t`, shareID).Scan(\n\t\t&share.ID,\n\t\t&share.PhotoID,\n\t\t&share.SharedBy,\n\t\t&share.SharedWith,\n\t\t&share.Permission,\n\t\t&share.ExpiresAt,\n\t\t&share.CreatedAt,\n\t)\n\n\tif err != nil {\n\t\tif err == sql.ErrNoRows {\n\t\t\treturn nil, errors.New(\"share not found\")\n\t\t}\n\t\treturn nil, err\n\t}\n\n\treturn &share, nil\n}\n\n// ListSharesForPhoto lists all shares for a specific photo\nfunc (s *SharingService) ListSharesForPhoto(ctx context.Context, photoID string) ([]*Share, error) {\n\trows, err := s.db.QueryContext(ctx, `\n\t\tSELECT id, photo_id, shared_by, shared_with, permission, expires_at, created_at\n\t\tFROM photo_shares\n\t\tWHERE photo_id = $1\n\t`, photoID)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\n\tvar shares []*Share\n\tfor rows.Next() {\n\t\tvar share Share\n\t\tif err := rows.Scan(\n\t\t\t&share.ID,\n\t\t\t&share.PhotoID,\n\t\t\t&share.SharedBy,\n\t\t\t&share.SharedWith,\n\t\t\t&share.Permission,\n\t\t\t&share.ExpiresAt,\n\t\t\t&share.CreatedAt,\n\t\t); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tshares = append(shares, &share)\n\t}\n\n\tif err = rows.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn shares, nil\n}\n\n// RevokeShare removes a share\nfunc (s *SharingService) RevokeShare(ctx context.Context, shareID string) error {\n\tresult, err := s.db.ExecContext(ctx, `\n\t\tDELETE FROM photo_shares\n\t\tWHERE id = $1\n\t`, shareID)\n\n\tif err != nil {\n\t\treturn err\n\t}\n\n\trowsAffected, err := result.RowsAffected()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif rowsAffected == 0 {\n\t\treturn errors.New(\"share not found\")\n\t}\n\n\treturn nil\n}\n\n// HasPermission checks if a user has permission to access a photo\nfunc (s *SharingService) HasPermission(ctx context.Context, photoID, userID, requiredPermission string) (bool, error) {\n\t// Check if the user is the owner of the photo\n\tvar ownerID string\n\terr := s.db.QueryRowContext(ctx, `\n\t\tSELECT user_id FROM photos WHERE id = $1\n\t`, photoID).Scan(&ownerID)\n\n\tif err != nil {\n\t\tif err == sql.ErrNoRows {\n\t\t\treturn false, errors.New(\"photo not found\")\n\t\t}\n\t\treturn false, err\n\t}\n\n\t// If the user is the owner, they have all permissions\n\tif ownerID == userID {\n\t\treturn true, nil\n\t}\n\n\t// Check for an active share\n\tvar count int\n\terr = s.db.QueryRowContext(ctx, `\n\t\tSELECT COUNT(*)\n\t\tFROM photo_shares\n\t\tWHERE photo_id = $1\n\t\t  AND shared_with = $2\n\t\t  AND (expires_at IS NULL OR expires_at > NOW())\n\t\t  AND permission = $3\n\t`, photoID, userID, requiredPermission).Scan(&count)\n\n\tif err != nil {\n\t\treturn false, err\n\t}\n\n\treturn count > 0, nil\n}"
                },
                {
                  "name": "vault_service.go",
                  "type": "file",
                  "path": "media-vault-backend/internal/services/vault_service.go",
                  "size": 214,
                  "content": "package services\n\nimport (\n\t\"database/sql\"\n)\n\ntype VaultService struct {\n    db *sql.DB\n}\n\nfunc NewVaultService(db *sql.DB) *VaultService {\n    return &VaultService{db: db}\n}\n\n// Add your VaultService methods here\n"
                }
              ]
            },
            {
              "name": "utils",
              "type": "directory",
              "path": "media-vault-backend/internal/utils",
              "children": [
                {
                  "name": "constants.dart",
                  "type": "file",
                  "path": "media-vault-backend/internal/utils/constants.dart",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "image_processing.go",
                  "type": "file",
                  "path": "media-vault-backend/internal/utils/image_processing.go",
                  "size": 635,
                  "content": "package utils\n\nimport (\n\t\"image\"\n\t\"io\"\n)\n\n// ProcessImage processes an image and returns the processed image\nfunc ProcessImage(r io.Reader) (image.Image, error) {\n    // Implementation for image processing\n    return nil, nil\n}\n\n// GenerateThumbnail generates a thumbnail for the given image\nfunc GenerateThumbnail(img image.Image, width, height int) (image.Image, error) {\n    // Implementation for thumbnail generation\n    return nil, nil\n}\n\n// ConvertImage converts an image to the specified format\nfunc ConvertImage(img image.Image, format string) ([]byte, error) {\n    // Implementation for image conversion\n    return nil, nil\n}\n"
                },
                {
                  "name": "metadata.go",
                  "type": "file",
                  "path": "media-vault-backend/internal/utils/metadata.go",
                  "size": 441,
                  "content": "package utils\n\n// Metadata represents file metadata\ntype Metadata map[string]interface{}\n\n// ExtractMetadata extracts metadata from a file\nfunc ExtractMetadata(filePath string) (Metadata, error) {\n    // Implementation for metadata extraction\n    return Metadata{}, nil\n}\n\n// CleanMetadata removes sensitive information from metadata\nfunc CleanMetadata(meta Metadata) Metadata {\n    // Implementation for metadata cleaning\n    return meta\n}\n"
                },
                {
                  "name": "permissions.dart",
                  "type": "file",
                  "path": "media-vault-backend/internal/utils/permissions.dart",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "theme.dart",
                  "type": "file",
                  "path": "media-vault-backend/internal/utils/theme.dart",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "thumbnails.go",
                  "type": "file",
                  "path": "media-vault-backend/internal/utils/thumbnails.go",
                  "size": 643,
                  "content": "package utils\n\nimport \"image\"\n\n// ThumbnailOptions contains options for thumbnail generation\ntype ThumbnailOptions struct {\n    Width   int\n    Height  int\n    Quality int\n    Format  string\n}\n\n// GenerateThumbnail generates a thumbnail for the given image\nfunc GenerateThumbnail(img image.Image, opts ThumbnailOptions) ([]byte, error) {\n    // Implementation for thumbnail generation\n    return nil, nil\n}\n\n// GenerateThumbnailFromBytes generates a thumbnail from image bytes\nfunc GenerateThumbnailFromBytes(data []byte, opts ThumbnailOptions) ([]byte, error) {\n    // Implementation for thumbnail generation from bytes\n    return nil, nil\n}\n"
                },
                {
                  "name": "validators.dart",
                  "type": "file",
                  "path": "media-vault-backend/internal/utils/validators.dart",
                  "size": 0,
                  "content": ""
                }
              ]
            }
          ]
        },
        {
          "name": "migrations",
          "type": "directory",
          "path": "media-vault-backend/migrations",
          "children": [
            {
              "name": "001_initial.sql",
              "type": "file",
              "path": "media-vault-backend/migrations/001_initial.sql",
              "size": 0,
              "content": ""
            },
            {
              "name": "002_photos.sql",
              "type": "file",
              "path": "media-vault-backend/migrations/002_photos.sql",
              "size": 0,
              "content": ""
            },
            {
              "name": "003_descriptions.sql",
              "type": "file",
              "path": "media-vault-backend/migrations/003_descriptions.sql",
              "size": 0,
              "content": ""
            }
          ]
        },
        {
          "name": "Dockerfile",
          "type": "file",
          "path": "media-vault-backend/Dockerfile",
          "size": 750,
          "content": "# Build stage\nFROM golang:1.21-alpine AS builder\n\n# Set the working directory\nWORKDIR /app\n\n# Copy go mod and sum files\nCOPY go.mod go.sum ./\n\n# Download all dependencies\nRUN go mod download\n\n# Copy the source code\nCOPY . .\n\n# Tidy up the module dependencies\nRUN go mod tidy\n\n# Build the application\nRUN CGO_ENABLED=0 GOOS=linux go build -o media-vault-api ./cmd\n\n# Final stage\nFROM alpine:3.18\n\n# Install required packages\nRUN apk --no-cache add ca-certificates\n\n# Set the working directory\nWORKDIR /app\n\n# Copy the binary from builder\nCOPY --from=builder /app/media-vault-api .\n\n# Copy migrations\nCOPY --from=builder /app/migrations ./migrations\n\n# Expose the application port\nEXPOSE 8080\n\n# Command to run the application\nCMD [\"./media-vault-api\"]"
        },
        {
          "name": "Dockerfile.bak",
          "type": "file",
          "path": "media-vault-backend/Dockerfile.bak",
          "size": 846,
          "content": "# Build stage\nFROM golang:1.21-alpine AS builder\n\n# Set the working directory\nWORKDIR /app\n\n# Copy go mod and sum files\nCOPY go.mod go.sum ./\n\n# Initialize the Go module if not already done\nRUN go mod init media-vault 2>/dev/null || true\n\n# Download all dependencies\nRUN go mod download\n\n# Copy the source code\nCOPY . .\n\n# Tidy up the module dependencies\nRUN go mod tidy\n\n# Build the application\nRUN CGO_ENABLED=0 GOOS=linux go build -o media-vault-api ./cmd\n\n# Final stage\nFROM alpine:3.18\n\n# Install required packages\nRUN apk --no-cache add ca-certificates\n\n# Set the working directory\nWORKDIR /app\n\n# Copy the binary from builder\nCOPY --from=builder /app/media-vault-api .\n\n# Copy migrations\nCOPY --from=builder /app/migrations ./migrations\n\n# Expose the application port\nEXPOSE 8080\n\n# Command to run the application\nCMD [\"./media-vault-api\"]"
        },
        {
          "name": "go.mod",
          "type": "file",
          "path": "media-vault-backend/go.mod",
          "size": 708,
          "content": "module github.com/wronai/media-vault-backend\n\ngo 1.21\n\nrequire (\n    github.com/gofiber/fiber/v2 v2.50.0\n    github.com/golang-jwt/jwt/v5 v5.0.0\n    github.com/google/uuid v1.3.1\n    github.com/mattn/go-sqlite3 v1.14.17\n)\n\nrequire (\n    github.com/andybalholm/brotli v1.0.5 // indirect\n    github.com/klauspost/compress v1.16.7 // indirect\n    github.com/mattn/go-colorable v0.1.13 // indirect\n    github.com/mattn/go-isatty v0.0.19 // indirect\n    github.com/mattn/go-runewidth v0.0.15 // indirect\n    github.com/rivo/uniseg v0.2.0 // indirect\n    github.com/valyala/bytebufferpool v1.0.0 // indirect\n    github.com/valyala/fasthttp v1.50.0 // indirect\n    github.com/valyala/tcplisten v1.0.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "file",
          "path": "media-vault-backend/go.sum",
          "size": 0,
          "content": ""
        },
        {
          "name": "TODO.md",
          "type": "file",
          "path": "media-vault-backend/TODO.md",
          "size": 296,
          "content": "# Media Vault Backend - TODO\n\n## High Priority\n- [ ] Implement REST API endpoints\n- [ ] Set up database models\n- [ ] Add authentication middleware\n\n## Medium Priority\n- [ ] Implement file storage service\n- [ ] Add API documentation\n- [ ] Set up logging\n\n## Completed\n- [x] Project initialization\n"
        }
      ]
    },
    {
      "name": "media-vault-backend-backup-20250530110754",
      "type": "directory",
      "path": "media-vault-backend-backup-20250530110754",
      "children": [
        {
          "name": "cmd",
          "type": "directory",
          "path": "media-vault-backend-backup-20250530110754/cmd",
          "children": [
            {
              "name": "main.go",
              "type": "file",
              "path": "media-vault-backend-backup-20250530110754/cmd/main.go",
              "size": 30526,
              "content": "// media-vault-backend/cmd/main.go\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/fiber/v2/middleware/cors\"\n\t\"github.com/gofiber/fiber/v2/middleware/logger\"\n\t\"github.com/gofiber/fiber/v2/middleware/monitor\"\n\t\"github.com/gofiber/fiber/v2/middleware/recover\"\n\n\t\"media-vault/internal/auth\"\n\t\"media-vault/internal/database\"\n\t\"media-vault/internal/handlers\"\n\t\"media-vault/internal/services\"\n)\n\nfunc main() {\n\t// Initialize database\n\tdb, err := database.Initialize()\n\tif err != nil {\n\t\tlog.Fatal(\"Failed to initialize database:\", err)\n\t}\n\tdefer db.Close()\n\n\t// Initialize Keycloak authentication\n\tif os.Getenv(\"OAUTH2_ENABLED\") == \"true\" {\n\t\tif err := auth.InitKeycloak(); err != nil {\n\t\t\tlog.Printf(\"Warning: Failed to initialize Keycloak: %v\", err)\n\t\t\tlog.Println(\"Running without authentication\")\n\t\t} else {\n\t\t\tlog.Println(\"Keycloak authentication enabled\")\n\t\t}\n\t}\n\n\t// Initialize services\n\tvaultService := services.NewVaultService(db)\n\tphotoService := services.NewPhotoService(db)\n\tdescriptionService := services.NewDescriptionService()\n\tsharingService := services.NewSharingService(db)\n\n\t// Initialize handlers\n\tvaultHandler := handlers.NewVaultHandler(vaultService, photoService)\n\tadminHandler := handlers.NewAdminHandler(vaultService)\n\tpartnerHandler := handlers.NewPartnerHandler(photoService, sharingService)\n\tuploadHandler := handlers.NewUploadHandler(vaultService, photoService, descriptionService)\n\n\t// Fiber app configuration\n\tapp := fiber.New(fiber.Config{\n\t\tBodyLimit:    100 * 1024 * 1024, // 100MB\n\t\tReadTimeout:  0,\n\t\tWriteTimeout: 0,\n\t\tErrorHandler: func(ctx *fiber.Ctx, err error) error {\n\t\t\tcode := fiber.StatusInternalServerError\n\t\t\tif e, ok := err.(*fiber.Error); ok {\n\t\t\t\tcode = e.Code\n\t\t\t}\n\t\t\treturn ctx.Status(code).JSON(fiber.Map{\n\t\t\t\t\"error\": err.Error(),\n\t\t\t\t\"code\":  code,\n\t\t\t})\n\t\t},\n\t})\n\n\t// Middleware\n\tapp.Use(recover.New())\n\tapp.Use(logger.New(logger.Config{\n\t\tFormat: \"[${time}] ${status} - ${method} ${path} (${latency})\\n\",\n\t}))\n\tapp.Use(cors.New(cors.Config{\n\t\tAllowOrigins:     os.Getenv(\"CORS_ORIGINS\"),\n\t\tAllowMethods:     \"GET,POST,HEAD,PUT,DELETE,PATCH,OPTIONS\",\n\t\tAllowHeaders:     \"Origin,Content-Type,Accept,Authorization,X-Requested-With\",\n\t\tAllowCredentials: true,\n\t}))\n\n\t// Health and monitoring endpoints\n\tapp.Get(\"/health\", func(c *fiber.Ctx) error {\n\t\treturn c.JSON(fiber.Map{\n\t\t\t\"status\":  \"ok\",\n\t\t\t\"service\": \"media-vault-api\",\n\t\t\t\"version\": os.Getenv(\"VAULT_VERSION\"),\n\t\t})\n\t})\n\tapp.Get(\"/metrics\", monitor.New(monitor.Config{Title: \"Media Vault Metrics\"}))\n\n\t// Public routes\n\tapp.Get(\"/api/vault/info\", vaultHandler.GetVaultInfo)\n\n\t// Protected routes\n\tapi := app.Group(\"/api\")\n\tapi.Use(auth.JWTMiddleware())\n\n\t// User endpoints\n\tapi.Get(\"/user\", auth.GetUserInfo)\n\tapi.Get(\"/user/profile\", vaultHandler.GetUserProfile)\n\tapi.Put(\"/user/profile\", vaultHandler.UpdateUserProfile)\n\n\t// Vault endpoints (User level)\n\tvault := api.Group(\"/vault\")\n\tvault.Post(\"/upload\", uploadHandler.UploadSingle)\n\tvault.Get(\"/files\", vaultHandler.GetUserFiles)\n\tvault.Get(\"/files/:id\", vaultHandler.GetFile)\n\tvault.Put(\"/files/:id\", vaultHandler.UpdateFile)\n\tvault.Delete(\"/files/:id\", vaultHandler.DeleteFile)\n\tvault.Get(\"/files/:id/download\", vaultHandler.DownloadFile)\n\tvault.Get(\"/files/:id/thumbnail\", vaultHandler.GetThumbnail)\n\tvault.Get(\"/search\", vaultHandler.SearchFiles)\n\tvault.Get(\"/stats\", vaultHandler.GetUserStats)\n\n\t// Photo management endpoints\n\tphotos := api.Group(\"/photos\")\n\tphotos.Get(\"/\", vaultHandler.GetUserPhotos)\n\tphotos.Get(\"/:id\", vaultHandler.GetPhoto)\n\tphotos.Put(\"/:id/description\", vaultHandler.UpdatePhotoDescription)\n\tphotos.Post(\"/:id/generate-description\", vaultHandler.GenerateDescription)\n\tphotos.Get(\"/:id/shared-with\", vaultHandler.GetPhotoSharing)\n\n\t// Partner endpoints (requires partner role)\n\tpartner := api.Group(\"/partner\")\n\tpartner.Use(auth.RequireRole(\"vault-partner\"))\n\tpartner.Post(\"/bulk-upload\", partnerHandler.BulkUpload)\n\tpartner.Get(\"/photos\", partnerHandler.GetPartnerPhotos)\n\tpartner.Put(\"/photos/batch-update\", partnerHandler.BatchUpdateDescriptions)\n\tpartner.Post(\"/photos/batch-share\", partnerHandler.BatchSharePhotos)\n\tpartner.Get(\"/photos/:id/analytics\", partnerHandler.GetPhotoAnalytics)\n\tpartner.Get(\"/dashboard\", partnerHandler.GetPartnerDashboard)\n\tpartner.Get(\"/analytics\", partnerHandler.GetPartnerAnalytics)\n\n\t// Admin endpoints (requires admin role)\n\tadmin := api.Group(\"/admin\")\n\tadmin.Use(auth.RequireRole(\"vault-admin\"))\n\tadmin.Get(\"/users\", adminHandler.GetUsers)\n\tadmin.Get(\"/users/:id\", adminHandler.GetUser)\n\tadmin.Put(\"/users/:id\", adminHandler.UpdateUser)\n\tadmin.Delete(\"/users/:id\", adminHandler.DeleteUser)\n\tadmin.Get(\"/users/:id/files\", adminHandler.GetUserFiles)\n\tadmin.Get(\"/system/stats\", adminHandler.GetSystemStats)\n\tadmin.Get(\"/system/health\", adminHandler.GetSystemHealth)\n\tadmin.Get(\"/content/flagged\", adminHandler.GetFlaggedContent)\n\tadmin.Put(\"/content/:id/moderate\", adminHandler.ModerateContent)\n\tadmin.Get(\"/audit-logs\", adminHandler.GetAuditLogs)\n\n\t// Start server\n\tport := os.Getenv(\"PORT\")\n\tif port == \"\" {\n\t\tport = \"8080\"\n\t}\n\n\tlog.Printf(\"Media Vault API starting on port %s\", port)\n\tlog.Printf(\"Vault Name: %s\", os.Getenv(\"VAULT_NAME\"))\n\tlog.Printf(\"Environment: %s\", os.Getenv(\"ENVIRONMENT\"))\n\n\tlog.Fatal(app.Listen(\":\" + port))\n}\n\n---\n\n// media-vault-backend/internal/models/photo.go\npackage models\n\nimport (\n\t\"time\"\n)\n\n// Photo represents a photo in the vault\ntype Photo struct {\n\tID            string    `json:\"id\" db:\"id\"`\n\tUserID        string    `json:\"user_id\" db:\"user_id\"`\n\tPartnerID     *string   `json:\"partner_id,omitempty\" db:\"partner_id\"`\n\tFilename      string    `json:\"filename\" db:\"filename\"`\n\tOriginalName  string    `json:\"original_name\" db:\"original_name\"`\n\tFilePath      string    `json:\"file_path\" db:\"file_path\"`\n\tThumbnailPath *string   `json:\"thumbnail_path,omitempty\" db:\"thumbnail_path\"`\n\tFileSize      int64     `json:\"file_size\" db:\"file_size\"`\n\tMimeType      string    `json:\"mime_type\" db:\"mime_type\"`\n\tWidth         *int      `json:\"width,omitempty\" db:\"width\"`\n\tHeight        *int      `json:\"height,omitempty\" db:\"height\"`\n\tHash          string    `json:\"hash\" db:\"hash\"`\n\n\t// AI Generated Content\n\tDescription         *string `json:\"description,omitempty\" db:\"description\"`\n\tAIDescription       *string `json:\"ai_description,omitempty\" db:\"ai_description\"`\n\tTags               *string `json:\"tags,omitempty\" db:\"tags\"`\n\tAIConfidence       *float64 `json:\"ai_confidence,omitempty\" db:\"ai_confidence\"`\n\n\t// Content Moderation\n\tIsNSFW             *bool    `json:\"is_nsfw,omitempty\" db:\"is_nsfw\"`\n\tNSFWConfidence     *float64 `json:\"nsfw_confidence,omitempty\" db:\"nsfw_confidence\"`\n\tModerationStatus   string   `json:\"moderation_status\" db:\"moderation_status\"` // pending, approved, rejected\n\n\t// Metadata\n\tExifData           *string `json:\"exif_data,omitempty\" db:\"exif_data\"`\n\tLocation           *string `json:\"location,omitempty\" db:\"location\"`\n\tCameraMake         *string `json:\"camera_make,omitempty\" db:\"camera_make\"`\n\tCameraModel        *string `json:\"camera_model,omitempty\" db:\"camera_model\"`\n\tTakenAt            *time.Time `json:\"taken_at,omitempty\" db:\"taken_at\"`\n\n\t// Sharing\n\tIsShared           bool     `json:\"is_shared\" db:\"is_shared\"`\n\tSharedWith         []string `json:\"shared_with,omitempty\"`\n\tShareCount         int      `json:\"share_count\" db:\"share_count\"`\n\tViewCount          int      `json:\"view_count\" db:\"view_count\"`\n\n\t// Timestamps\n\tCreatedAt          time.Time  `json:\"created_at\" db:\"created_at\"`\n\tUpdatedAt          time.Time  `json:\"updated_at\" db:\"updated_at\"`\n\tProcessedAt        *time.Time `json:\"processed_at,omitempty\" db:\"processed_at\"`\n}\n\n// PhotoSharing represents photo sharing permissions\ntype PhotoSharing struct {\n\tID        string    `json:\"id\" db:\"id\"`\n\tPhotoID   string    `json:\"photo_id\" db:\"photo_id\"`\n\tSharedBy  string    `json:\"shared_by\" db:\"shared_by\"`\n\tSharedWith string   `json:\"shared_with\" db:\"shared_with\"`\n\tPermission string   `json:\"permission\" db:\"permission\"` // view, download\n\tCreatedAt time.Time `json:\"created_at\" db:\"created_at\"`\n\tExpiresAt *time.Time `json:\"expires_at,omitempty\" db:\"expires_at\"`\n}\n\n// PhotoAnalytics represents photo analytics data\ntype PhotoAnalytics struct {\n\tPhotoID     string    `json:\"photo_id\" db:\"photo_id\"`\n\tViews       int       `json:\"views\" db:\"views\"`\n\tDownloads   int       `json:\"downloads\" db:\"downloads\"`\n\tShares      int       `json:\"shares\" db:\"shares\"`\n\tLastViewed  *time.Time `json:\"last_viewed,omitempty\" db:\"last_viewed\"`\n\tViewerIPs   []string  `json:\"viewer_ips,omitempty\"`\n\tCountries   []string  `json:\"countries,omitempty\"`\n}\n\n// BulkUploadRequest represents a bulk upload request\ntype BulkUploadRequest struct {\n\tFiles       []UploadedFile `json:\"files\"`\n\tDefaultTags string         `json:\"default_tags,omitempty\"`\n\tShareWith   []string       `json:\"share_with,omitempty\"`\n\tAutoDescribe bool          `json:\"auto_describe\"`\n}\n\n// UploadedFile represents a file in bulk upload\ntype UploadedFile struct {\n\tFilename    string `json:\"filename\"`\n\tData        []byte `json:\"data\"`\n\tDescription string `json:\"description,omitempty\"`\n\tTags        string `json:\"tags,omitempty\"`\n}\n\n// BatchUpdateRequest represents batch description update\ntype BatchUpdateRequest struct {\n\tPhotoIDs    []string `json:\"photo_ids\"`\n\tDescription string   `json:\"description,omitempty\"`\n\tTags        string   `json:\"tags,omitempty\"`\n\tOperation   string   `json:\"operation\"` // replace, append, prepend\n}\n\n// ShareRequest represents a photo sharing request\ntype ShareRequest struct {\n\tPhotoIDs   []string   `json:\"photo_ids\"`\n\tShareWith  []string   `json:\"share_with\"`\n\tPermission string     `json:\"permission\"`\n\tExpiresAt  *time.Time `json:\"expires_at,omitempty\"`\n\tMessage    string     `json:\"message,omitempty\"`\n}\n\n---\n\n// media-vault-backend/internal/handlers/partner.go\npackage handlers\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/gofiber/fiber/v2\"\n\t\"media-vault/internal/auth\"\n\t\"media-vault/internal/models\"\n\t\"media-vault/internal/services\"\n)\n\ntype PartnerHandler struct {\n\tphotoService   *services.PhotoService\n\tsharingService *services.SharingService\n}\n\nfunc NewPartnerHandler(photoService *services.PhotoService, sharingService *services.SharingService) *PartnerHandler {\n\treturn &PartnerHandler{\n\t\tphotoService:   photoService,\n\t\tsharingService: sharingService,\n\t}\n}\n\n// BulkUpload handles bulk photo upload for partners\nfunc (h *PartnerHandler) BulkUpload(c *fiber.Ctx) error {\n\tuser := c.Locals(\"user\").(*auth.KeycloakClaims)\n\n\t// Parse multipart form\n\tform, err := c.MultipartForm()\n\tif err != nil {\n\t\treturn c.Status(400).JSON(fiber.Map{\"error\": \"Failed to parse form data\"})\n\t}\n\n\tfiles := form.File[\"files\"]\n\tif len(files) == 0 {\n\t\treturn c.Status(400).JSON(fiber.Map{\"error\": \"No files provided\"})\n\t}\n\n\t// Get optional parameters\n\tdefaultTags := c.FormValue(\"default_tags\", \"\")\n\tautoDescribe := c.FormValue(\"auto_describe\", \"false\") == \"true\"\n\tshareWithStr := c.FormValue(\"share_with\", \"\")\n\n\tvar shareWith []string\n\tif shareWithStr != \"\" {\n\t\tshareWith = strings.Split(shareWithStr, \",\")\n\t}\n\n\tvar uploadResults []map[string]interface{}\n\tvar successCount, errorCount int\n\n\t// Process each file\n\tfor i, file := range files {\n\t\tlog.Printf(\"Processing file %d/%d: %s\", i+1, len(files), file.Filename)\n\n\t\t// Upload file\n\t\tphoto, err := h.photoService.CreatePhotoFromUpload(file, user.Subject, &user.Subject)\n\t\tif err != nil {\n\t\t\terrorCount++\n\t\t\tuploadResults = append(uploadResults, map[string]interface{}{\n\t\t\t\t\"filename\": file.Filename,\n\t\t\t\t\"status\":   \"error\",\n\t\t\t\t\"error\":    err.Error(),\n\t\t\t})\n\t\t\tcontinue\n\t\t}\n\n\t\t// Set default tags if provided\n\t\tif defaultTags != \"\" {\n\t\t\tphoto.Tags = &defaultTags\n\t\t}\n\n\t\t// Generate AI description if requested\n\t\tif autoDescribe {\n\t\t\tif description, err := h.photoService.GenerateAIDescription(photo.ID); err == nil {\n\t\t\t\tphoto.AIDescription = &description\n\t\t\t}\n\t\t}\n\n\t\t// Update photo with additional data\n\t\tif err := h.photoService.UpdatePhoto(photo); err != nil {\n\t\t\tlog.Printf(\"Failed to update photo %s: %v\", photo.ID, err)\n\t\t}\n\n\t\t// Share with specified users\n\t\tif len(shareWith) > 0 {\n\t\t\tshareRequest := &models.ShareRequest{\n\t\t\t\tPhotoIDs:   []string{photo.ID},\n\t\t\t\tShareWith:  shareWith,\n\t\t\t\tPermission: \"view\",\n\t\t\t}\n\t\t\tif err := h.sharingService.SharePhotos(user.Subject, shareRequest); err != nil {\n\t\t\t\tlog.Printf(\"Failed to share photo %s: %v\", photo.ID, err)\n\t\t\t}\n\t\t}\n\n\t\tsuccessCount++\n\t\tuploadResults = append(uploadResults, map[string]interface{}{\n\t\t\t\"filename\": file.Filename,\n\t\t\t\"status\":   \"success\",\n\t\t\t\"photo_id\": photo.ID,\n\t\t\t\"size\":     photo.FileSize,\n\t\t})\n\t}\n\n\treturn c.JSON(fiber.Map{\n\t\t\"message\":       \"Bulk upload completed\",\n\t\t\"total_files\":   len(files),\n\t\t\"success_count\": successCount,\n\t\t\"error_count\":   errorCount,\n\t\t\"results\":       uploadResults,\n\t})\n}\n\n// GetPartnerPhotos returns photos uploaded by the partner\nfunc (h *PartnerHandler) GetPartnerPhotos(c *fiber.Ctx) error {\n\tuser := c.Locals(\"user\").(*auth.KeycloakClaims)\n\n\t// Parse query parameters\n\tpage, _ := strconv.Atoi(c.Query(\"page\", \"1\"))\n\tlimit, _ := strconv.Atoi(c.Query(\"limit\", \"20\"))\n\tsortBy := c.Query(\"sort\", \"created_at\")\n\tsortOrder := c.Query(\"order\", \"desc\")\n\tsearch := c.Query(\"search\", \"\")\n\n\tphotos, total, err := h.photoService.GetPartnerPhotos(user.Subject, page, limit, sortBy, sortOrder, search)\n\tif err != nil {\n\t\treturn c.Status(500).JSON(fiber.Map{\"error\": \"Failed to get photos\"})\n\t}\n\n\treturn c.JSON(fiber.Map{\n\t\t\"photos\": photos,\n\t\t\"pagination\": fiber.Map{\n\t\t\t\"page\":        page,\n\t\t\t\"limit\":       limit,\n\t\t\t\"total\":       total,\n\t\t\t\"total_pages\": (total + limit - 1) / limit,\n\t\t},\n\t})\n}\n\n// BatchUpdateDescriptions updates descriptions for multiple photos\nfunc (h *PartnerHandler) BatchUpdateDescriptions(c *fiber.Ctx) error {\n\tuser := c.Locals(\"user\").(*auth.KeycloakClaims)\n\n\tvar request models.BatchUpdateRequest\n\tif err := c.BodyParser(&request); err != nil {\n\t\treturn c.Status(400).JSON(fiber.Map{\"error\": \"Invalid request body\"})\n\t}\n\n\tif len(request.PhotoIDs) == 0 {\n\t\treturn c.Status(400).JSON(fiber.Map{\"error\": \"No photo IDs provided\"})\n\t}\n\n\tvar updatedCount int\n\tvar errors []string\n\n\tfor _, photoID := range request.PhotoIDs {\n\t\t// Verify partner owns the photo\n\t\tphoto, err := h.photoService.GetPhoto(photoID)\n\t\tif err != nil {\n\t\t\terrors = append(errors, fmt.Sprintf(\"Photo %s not found\", photoID))\n\t\t\tcontinue\n\t\t}\n\n\t\tif photo.PartnerID == nil || *photo.PartnerID != user.Subject {\n\t\t\terrors = append(errors, fmt.Sprintf(\"No permission for photo %s\", photoID))\n\t\t\tcontinue\n\t\t}\n\n\t\t// Update description based on operation\n\t\tswitch request.Operation {\n\t\tcase \"replace\":\n\t\t\tphoto.Description = &request.Description\n\t\t\tif request.Tags != \"\" {\n\t\t\t\tphoto.Tags = &request.Tags\n\t\t\t}\n\t\tcase \"append\":\n\t\t\tif photo.Description != nil {\n\t\t\t\tnewDesc := *photo.Description + \" \" + request.Description\n\t\t\t\tphoto.Description = &newDesc\n\t\t\t} else {\n\t\t\t\tphoto.Description = &request.Description\n\t\t\t}\n\t\tcase \"prepend\":\n\t\t\tif photo.Description != nil {\n\t\t\t\tnewDesc := request.Description + \" \" + *photo.Description\n\t\t\t\tphoto.Description = &newDesc\n\t\t\t} else {\n\t\t\t\tphoto.Description = &request.Description\n\t\t\t}\n\t\tdefault:\n\t\t\tphoto.Description = &request.Description\n\t\t}\n\n\t\tif err := h.photoService.UpdatePhoto(photo); err != nil {\n\t\t\terrors = append(errors, fmt.Sprintf(\"Failed to update photo %s: %v\", photoID, err))\n\t\t\tcontinue\n\t\t}\n\n\t\tupdatedCount++\n\t}\n\n\treturn c.JSON(fiber.Map{\n\t\t\"message\":       \"Batch update completed\",\n\t\t\"updated_count\": updatedCount,\n\t\t\"total_count\":   len(request.PhotoIDs),\n\t\t\"errors\":        errors,\n\t})\n}\n\n// BatchSharePhotos shares multiple photos with users\nfunc (h *PartnerHandler) BatchSharePhotos(c *fiber.Ctx) error {\n\tuser := c.Locals(\"user\").(*auth.KeycloakClaims)\n\n\tvar request models.ShareRequest\n\tif err := c.BodyParser(&request); err != nil {\n\t\treturn c.Status(400).JSON(fiber.Map{\"error\": \"Invalid request body\"})\n\t}\n\n\tif len(request.PhotoIDs) == 0 {\n\t\treturn c.Status(400).JSON(fiber.Map{\"error\": \"No photo IDs provided\"})\n\t}\n\n\tif len(request.ShareWith) == 0 {\n\t\treturn c.Status(400).JSON(fiber.Map{\"error\": \"No users to share with\"})\n\t}\n\n\t// Verify partner owns all photos\n\tfor _, photoID := range request.PhotoIDs {\n\t\tphoto, err := h.photoService.GetPhoto(photoID)\n\t\tif err != nil {\n\t\t\treturn c.Status(404).JSON(fiber.Map{\"error\": fmt.Sprintf(\"Photo %s not found\", photoID)})\n\t\t}\n\n\t\tif photo.PartnerID == nil || *photo.PartnerID != user.Subject {\n\t\t\treturn c.Status(403).JSON(fiber.Map{\"error\": fmt.Sprintf(\"No permission for photo %s\", photoID)})\n\t\t}\n\t}\n\n\t// Share photos\n\tif err := h.sharingService.SharePhotos(user.Subject, &request); err != nil {\n\t\treturn c.Status(500).JSON(fiber.Map{\"error\": \"Failed to share photos\"})\n\t}\n\n\treturn c.JSON(fiber.Map{\n\t\t\"message\":     \"Photos shared successfully\",\n\t\t\"photo_count\": len(request.PhotoIDs),\n\t\t\"user_count\":  len(request.ShareWith),\n\t})\n}\n\n// GetPhotoAnalytics returns analytics for a specific photo\nfunc (h *PartnerHandler) GetPhotoAnalytics(c *fiber.Ctx) error {\n\tuser := c.Locals(\"user\").(*auth.KeycloakClaims)\n\tphotoID := c.Params(\"id\")\n\n\t// Verify partner owns the photo\n\tphoto, err := h.photoService.GetPhoto(photoID)\n\tif err != nil {\n\t\treturn c.Status(404).JSON(fiber.Map{\"error\": \"Photo not found\"})\n\t}\n\n\tif photo.PartnerID == nil || *photo.PartnerID != user.Subject {\n\t\treturn c.Status(403).JSON(fiber.Map{\"error\": \"Permission denied\"})\n\t}\n\n\tanalytics, err := h.photoService.GetPhotoAnalytics(photoID)\n\tif err != nil {\n\t\treturn c.Status(500).JSON(fiber.Map{\"error\": \"Failed to get analytics\"})\n\t}\n\n\treturn c.JSON(analytics)\n}\n\n// GetPartnerDashboard returns dashboard data for partner\nfunc (h *PartnerHandler) GetPartnerDashboard(c *fiber.Ctx) error {\n\tuser := c.Locals(\"user\").(*auth.KeycloakClaims)\n\n\tdashboard, err := h.photoService.GetPartnerDashboard(user.Subject)\n\tif err != nil {\n\t\treturn c.Status(500).JSON(fiber.Map{\"error\": \"Failed to get dashboard data\"})\n\t}\n\n\treturn c.JSON(dashboard)\n}\n\n// GetPartnerAnalytics returns comprehensive analytics for partner\nfunc (h *PartnerHandler) GetPartnerAnalytics(c *fiber.Ctx) error {\n\tuser := c.Locals(\"user\").(*auth.KeycloakClaims)\n\n\t// Parse date range\n\tfromStr := c.Query(\"from\", \"\")\n\ttoStr := c.Query(\"to\", \"\")\n\n\tvar from, to *time.Time\n\tif fromStr != \"\" {\n\t\tif parsedFrom, err := time.Parse(\"2006-01-02\", fromStr); err == nil {\n\t\t\tfrom = &parsedFrom\n\t\t}\n\t}\n\tif toStr != \"\" {\n\t\tif parsedTo, err := time.Parse(\"2006-01-02\", toStr); err == nil {\n\t\t\tto = &parsedTo\n\t\t}\n\t}\n\n\tanalytics, err := h.photoService.GetPartnerAnalytics(user.Subject, from, to)\n\tif err != nil {\n\t\treturn c.Status(500).JSON(fiber.Map{\"error\": \"Failed to get analytics\"})\n\t}\n\n\treturn c.JSON(analytics)\n}\n\n---\n\n// media-vault-backend/internal/services/photo_service.go\npackage services\n\nimport (\n\t\"crypto/md5\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"image\"\n\t_ \"image/jpeg\"\n\t_ \"image/png\"\n\t\"io\"\n\t\"mime/multipart\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"time\"\n\n\t\"github.com/google/uuid\"\n\t\"media-vault/internal/models\"\n\t\"media-vault/internal/utils\"\n)\n\ntype PhotoService struct {\n\tdb *sql.DB\n}\n\nfunc NewPhotoService(db *sql.DB) *PhotoService {\n\treturn &PhotoService{db: db}\n}\n\n// CreatePhotoFromUpload creates a photo record from uploaded file\nfunc (s *PhotoService) CreatePhotoFromUpload(fileHeader *multipart.FileHeader, userID string, partnerID *string) (*models.Photo, error) {\n\t// Open uploaded file\n\tfile, err := fileHeader.Open()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to open uploaded file: %v\", err)\n\t}\n\tdefer file.Close()\n\n\t// Generate unique filename\n\tphotoID := uuid.New().String()\n\text := filepath.Ext(fileHeader.Filename)\n\tfilename := photoID + ext\n\n\t// Create upload directory if not exists\n\tuploadDir := os.Getenv(\"UPLOAD_PATH\")\n\tif uploadDir == \"\" {\n\t\tuploadDir = \"./uploads\"\n\t}\n\n\toriginalDir := filepath.Join(uploadDir, \"originals\")\n\tif err := os.MkdirAll(originalDir, 0755); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to create upload directory: %v\", err)\n\t}\n\n\t// Save file\n\tfilePath := filepath.Join(originalDir, filename)\n\tdst, err := os.Create(filePath)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to create file: %v\", err)\n\t}\n\tdefer dst.Close()\n\n\t// Copy file and calculate hash\n\tfile.Seek(0, 0) // Reset file pointer\n\thasher := md5.New()\n\twriter := io.MultiWriter(dst, hasher)\n\n\tif _, err := io.Copy(writer, file); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to save file: %v\", err)\n\t}\n\n\thash := fmt.Sprintf(\"%x\", hasher.Sum(nil))\n\n\t// Get image dimensions\n\tfile.Seek(0, 0)\n\tvar width, height *int\n\tif img, _, err := image.Decode(file); err == nil {\n\t\tbounds := img.Bounds()\n\t\tw, h := bounds.Dx(), bounds.Dy()\n\t\twidth, height = &w, &h\n\t}\n\n\t// Generate thumbnail\n\tthumbnailPath, err := utils.GenerateThumbnail(filePath, photoID)\n\tif err != nil {\n\t\t// Log error but don't fail upload\n\t\tfmt.Printf(\"Failed to generate thumbnail for %s: %v\\n\", photoID, err)\n\t}\n\n\t// Extract EXIF data\n\texifData, err := utils.ExtractEXIF(filePath)\n\tif err != nil {\n\t\t// Log error but don't fail upload\n\t\tfmt.Printf(\"Failed to extract EXIF for %s: %v\\n\", photoID, err)\n\t}\n\n\t// Create photo record\n\tphoto := &models.Photo{\n\t\tID:               photoID,\n\t\tUserID:           userID,\n\t\tPartnerID:        partnerID,\n\t\tFilename:         filename,\n\t\tOriginalName:     fileHeader.Filename,\n\t\tFilePath:         filePath,\n\t\tThumbnailPath:    thumbnailPath,\n\t\tFileSize:         fileHeader.Size,\n\t\tMimeType:         fileHeader.Header.Get(\"Content-Type\"),\n\t\tWidth:            width,\n\t\tHeight:           height,\n\t\tHash:             hash,\n\t\tModerationStatus: \"pending\",\n\t\tIsShared:         false,\n\t\tShareCount:       0,\n\t\tViewCount:        0,\n\t\tCreatedAt:        time.Now(),\n\t\tUpdatedAt:        time.Now(),\n\t\tExifData:         exifData,\n\t}\n\n\t// Save to database\n\tquery := `\n\t\tINSERT INTO photos (\n\t\t\tid, user_id, partner_id, filename, original_name, file_path,\n\t\t\tthumbnail_path, file_size, mime_type, width, height, hash,\n\t\t\tmoderation_status, is_shared, share_count, view_count,\n\t\t\tcreated_at, updated_at, exif_data\n\t\t) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n\t`\n\n\t_, err = s.db.Exec(query,\n\t\tphoto.ID, photo.UserID, photo.PartnerID, photo.Filename,\n\t\tphoto.OriginalName, photo.FilePath, photo.ThumbnailPath,\n\t\tphoto.FileSize, photo.MimeType, photo.Width, photo.Height,\n\t\tphoto.Hash, photo.ModerationStatus, photo.IsShared,\n\t\tphoto.ShareCount, photo.ViewCount, photo.CreatedAt,\n\t\tphoto.UpdatedAt, photo.ExifData,\n\t)\n\n\tif err != nil {\n\t\t// Clean up uploaded file on database error\n\t\tos.Remove(filePath)\n\t\tif thumbnailPath != nil {\n\t\t\tos.Remove(*thumbnailPath)\n\t\t}\n\t\treturn nil, fmt.Errorf(\"failed to save photo to database: %v\", err)\n\t}\n\n\treturn photo, nil\n}\n\n// GetPhoto retrieves a photo by ID\nfunc (s *PhotoService) GetPhoto(photoID string) (*models.Photo, error) {\n\tquery := `\n\t\tSELECT id, user_id, partner_id, filename, original_name, file_path,\n\t\t\t   thumbnail_path, file_size, mime_type, width, height, hash,\n\t\t\t   description, ai_description, tags, ai_confidence,\n\t\t\t   is_nsfw, nsfw_confidence, moderation_status,\n\t\t\t   exif_data, location, camera_make, camera_model, taken_at,\n\t\t\t   is_shared, share_count, view_count,\n\t\t\t   created_at, updated_at, processed_at\n\t\tFROM photos WHERE id = ?\n\t`\n\n\tphoto := &models.Photo{}\n\terr := s.db.QueryRow(query, photoID).Scan(\n\t\t&photo.ID, &photo.UserID, &photo.PartnerID, &photo.Filename,\n\t\t&photo.OriginalName, &photo.FilePath, &photo.ThumbnailPath,\n\t\t&photo.FileSize, &photo.MimeType, &photo.Width, &photo.Height,\n\t\t&photo.Hash, &photo.Description, &photo.AIDescription,\n\t\t&photo.Tags, &photo.AIConfidence, &photo.IsNSFW,\n\t\t&photo.NSFWConfidence, &photo.ModerationStatus, &photo.ExifData,\n\t\t&photo.Location, &photo.CameraMake, &photo.CameraModel,\n\t\t&photo.TakenAt, &photo.IsShared, &photo.ShareCount,\n\t\t&photo.ViewCount, &photo.CreatedAt, &photo.UpdatedAt,\n\t\t&photo.ProcessedAt,\n\t)\n\n\tif err != nil {\n\t\tif err == sql.ErrNoRows {\n\t\t\treturn nil, fmt.Errorf(\"photo not found\")\n\t\t}\n\t\treturn nil, fmt.Errorf(\"failed to get photo: %v\", err)\n\t}\n\n\treturn photo, nil\n}\n\n// UpdatePhoto updates a photo record\nfunc (s *PhotoService) UpdatePhoto(photo *models.Photo) error {\n\tquery := `\n\t\tUPDATE photos SET\n\t\t\tdescription = ?, ai_description = ?, tags = ?, ai_confidence = ?,\n\t\t\tis_nsfw = ?, nsfw_confidence = ?, moderation_status = ?,\n\t\t\tlocation = ?, camera_make = ?, camera_model = ?, taken_at = ?,\n\t\t\tis_shared = ?, share_count = ?, view_count = ?,\n\t\t\tupdated_at = ?, processed_at = ?\n\t\tWHERE id = ?\n\t`\n\n\tphoto.UpdatedAt = time.Now()\n\n\t_, err := s.db.Exec(query,\n\t\tphoto.Description, photo.AIDescription, photo.Tags, photo.AIConfidence,\n\t\tphoto.IsNSFW, photo.NSFWConfidence, photo.ModerationStatus,\n\t\tphoto.Location, photo.CameraMake, photo.CameraModel, photo.TakenAt,\n\t\tphoto.IsShared, photo.ShareCount, photo.ViewCount,\n\t\tphoto.UpdatedAt, photo.ProcessedAt, photo.ID,\n\t)\n\n\treturn err\n}\n\n// GetPartnerPhotos retrieves photos for a partner with pagination\nfunc (s *PhotoService) GetPartnerPhotos(partnerID string, page, limit int, sortBy, sortOrder, search string) ([]*models.Photo, int, error) {\n\toffset := (page - 1) * limit\n\n\t// Build WHERE clause\n\twhereClause := \"WHERE partner_id = ?\"\n\targs := []interface{}{partnerID}\n\n\tif search != \"\" {\n\t\twhereClause += \" AND (original_name LIKE ? OR description LIKE ? OR tags LIKE ?)\"\n\t\tsearchPattern := \"%\" + search + \"%\"\n\t\targs = append(args, searchPattern, searchPattern, searchPattern)\n\t}\n\n\t// Validate sort parameters\n\tallowedSorts := map[string]bool{\n\t\t\"created_at\": true, \"updated_at\": true, \"original_name\": true,\n\t\t\"file_size\": true, \"view_count\": true, \"share_count\": true,\n\t}\n\tif !allowedSorts[sortBy] {\n\t\tsortBy = \"created_at\"\n\t}\n\tif sortOrder != \"asc\" && sortOrder != \"desc\" {\n\t\tsortOrder = \"desc\"\n\t}\n\n\t// Count total\n\tcountQuery := \"SELECT COUNT(*) FROM photos \" + whereClause\n\tvar total int\n\terr := s.db.QueryRow(countQuery, args...).Scan(&total)\n\tif err != nil {\n\t\treturn nil, 0, fmt.Errorf(\"failed to count photos: %v\", err)\n\t}\n\n\t// Get photos\n\tquery := fmt.Sprintf(`\n\t\tSELECT id, user_id, partner_id, filename, original_name, file_path,\n\t\t\t   thumbnail_path, file_size, mime_type, width, height,\n\t\t\t   description, ai_description, tags, is_nsfw, moderation_status,\n\t\t\t   is_shared, share_count, view_count, created_at, updated_at\n\t\tFROM photos %s\n\t\tORDER BY %s %s\n\t\tLIMIT ? OFFSET ?\n\t`, whereClause, sortBy, sortOrder)\n\n\targs = append(args, limit, offset)\n\trows, err := s.db.Query(query, args...)\n\tif err != nil {\n\t\treturn nil, 0, fmt.Errorf(\"failed to query photos: %v\", err)\n\t}\n\tdefer rows.Close()\n\n\tvar photos []*models.Photo\n\tfor rows.Next() {\n\t\tphoto := &models.Photo{}\n\t\terr := rows.Scan(\n\t\t\t&photo.ID, &photo.UserID, &photo.PartnerID, &photo.Filename,\n\t\t\t&photo.OriginalName, &photo.FilePath, &photo.ThumbnailPath,\n\t\t\t&photo.FileSize, &photo.MimeType, &photo.Width, &photo.Height,\n\t\t\t&photo.Description, &photo.AIDescription, &photo.Tags,\n\t\t\t&photo.IsNSFW, &photo.ModerationStatus, &photo.IsShared,\n\t\t\t&photo.ShareCount, &photo.ViewCount, &photo.CreatedAt, &photo.UpdatedAt,\n\t\t)\n\t\tif err != nil {\n\t\t\treturn nil, 0, fmt.Errorf(\"failed to scan photo: %v\", err)\n\t\t}\n\t\tphotos = append(photos, photo)\n\t}\n\n\treturn photos, total, nil\n}\n\n// GenerateAIDescription generates AI description for a photo\nfunc (s *PhotoService) GenerateAIDescription(photoID string) (string, error) {\n\t// This would integrate with AI service (OpenAI, Google Vision, etc.)\n\t// For now, return a placeholder\n\treturn \"AI-generated description for photo \" + photoID, nil\n}\n\n// GetPhotoAnalytics retrieves analytics for a photo\nfunc (s *PhotoService) GetPhotoAnalytics(photoID string) (*models.PhotoAnalytics, error) {\n\tquery := `\n\t\tSELECT photo_id, views, downloads, shares, last_viewed\n\t\tFROM photo_analytics WHERE photo_id = ?\n\t`\n\n\tanalytics := &models.PhotoAnalytics{}\n\terr := s.db.QueryRow(query, photoID).Scan(\n\t\t&analytics.PhotoID, &analytics.Views, &analytics.Downloads,\n\t\t&analytics.Shares, &analytics.LastViewed,\n\t)\n\n\tif err != nil {\n\t\tif err == sql.ErrNoRows {\n\t\t\t// Create default analytics if not exists\n\t\t\tanalytics = &models.PhotoAnalytics{\n\t\t\t\tPhotoID:   photoID,\n\t\t\t\tViews:     0,\n\t\t\t\tDownloads: 0,\n\t\t\t\tShares:    0,\n\t\t\t}\n\t\t} else {\n\t\t\treturn nil, fmt.Errorf(\"failed to get analytics: %v\", err)\n\t\t}\n\t}\n\n\treturn analytics, nil\n}\n\n// GetPartnerDashboard returns dashboard data for partner\nfunc (s *PhotoService) GetPartnerDashboard(partnerID string) (map[string]interface{}, error) {\n\tdashboard := make(map[string]interface{})\n\n\t// Total photos\n\tvar totalPhotos int\n\terr := s.db.QueryRow(\"SELECT COUNT(*) FROM photos WHERE partner_id = ?\", partnerID).Scan(&totalPhotos)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Total views\n\tvar totalViews int\n\terr = s.db.QueryRow(\"SELECT COALESCE(SUM(view_count), 0) FROM photos WHERE partner_id = ?\", partnerID).Scan(&totalViews)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Total shares\n\tvar totalShares int\n\terr = s.db.QueryRow(\"SELECT COALESCE(SUM(share_count), 0) FROM photos WHERE partner_id = ?\", partnerID).Scan(&totalShares)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Recent uploads (last 7 days)\n\tvar recentUploads int\n\terr = s.db.QueryRow(`\n\t\tSELECT COUNT(*) FROM photos\n\t\tWHERE partner_id = ? AND created_at > datetime('now', '-7 days')\n\t`, partnerID).Scan(&recentUploads)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tdashboard[\"total_photos\"] = totalPhotos\n\tdashboard[\"total_views\"] = totalViews\n\tdashboard[\"total_shares\"] = totalShares\n\tdashboard[\"recent_uploads\"] = recentUploads\n\n\treturn dashboard, nil\n}\n\n// GetPartnerAnalytics returns comprehensive analytics for partner\nfunc (s *PhotoService) GetPartnerAnalytics(partnerID string, from, to *time.Time) (map[string]interface{}, error) {\n\tanalytics := make(map[string]interface{})\n\n\t// Build date filter\n\tdateFilter := \"\"\n\targs := []interface{}{partnerID}\n\tif from != nil && to != nil {\n\t\tdateFilter = \" AND created_at BETWEEN ? AND ?\"\n\t\targs = append(args, from, to)\n\t}\n\n\t// Upload trends (daily)\n\tquery := fmt.Sprintf(`\n\t\tSELECT DATE(created_at) as date, COUNT(*) as count\n\t\tFROM photos WHERE partner_id = ?%s\n\t\tGROUP BY DATE(created_at)\n\t\tORDER BY date DESC\n\t\tLIMIT 30\n\t`, dateFilter)\n\n\trows, err := s.db.Query(query, args...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\n\tvar uploadTrends []map[string]interface{}\n\tfor rows.Next() {\n\t\tvar date string\n\t\tvar count int\n\t\tif err := rows.Scan(&date, &count); err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tuploadTrends = append(uploadTrends, map[string]interface{}{\n\t\t\t\"date\":  date,\n\t\t\t\"count\": count,\n\t\t})\n\t}\n\n\tanalytics[\"upload_trends\"] = uploadTrends\n\n\treturn analytics, nil\n}"
            }
          ]
        },
        {
          "name": "internal",
          "type": "directory",
          "path": "media-vault-backend-backup-20250530110754/internal",
          "children": [
            {
              "name": "auth",
              "type": "directory",
              "path": "media-vault-backend-backup-20250530110754/internal/auth",
              "children": [
                {
                  "name": "keycloak.go",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/auth/keycloak.go",
                  "size": 334,
                  "content": "package auth\n\n// InitKeycloak initializes the Keycloak client\nfunc InitKeycloak() error {\n\t// TODO: Implement Keycloak client initialization\n\treturn nil\n}\n\n// VerifyToken verifies a JWT token from Keycloak\nfunc VerifyToken(tokenString string) (map[string]interface{}, error) {\n\t// TODO: Implement token verification\n\treturn nil, nil\n}"
                },
                {
                  "name": "middleware.go",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/auth/middleware.go",
                  "size": 1710,
                  "content": "package auth\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/golang-jwt/jwt/v5\"\n)\n\n// JWTConfig defines the configuration for JWT middleware\ntype JWTConfig struct {\n\tSigningKey []byte\n}\n\n// NewAuthMiddleware creates a new JWT authentication middleware\nfunc NewAuthMiddleware(config JWTConfig) fiber.Handler {\n\treturn func(c *fiber.Ctx) error {\n\t\tauthHeader := c.Get(\"Authorization\")\n\t\tif authHeader == \"\" {\n\t\t\treturn c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{\n\t\t\t\t\"error\": \"Missing Authorization header\",\n\t\t\t})\n\t\t}\n\n\t\ttokenString := authHeader[len(\"Bearer \"):]\n\t\ttoken, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {\n\t\t\tif _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {\n\t\t\t\treturn nil, fiber.NewError(fiber.StatusUnauthorized, \"Invalid token\")\n\t\t\t}\n\t\t\treturn config.SigningKey, nil\n\t\t})\n\n\t\tif err != nil || !token.Valid {\n\t\t\treturn c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{\n\t\t\t\t\"error\": \"Invalid or expired token\",\n\t\t\t})\n\t\t}\n\n\t\t// Add user info to context\n\t\tif claims, ok := token.Claims.(jwt.MapClaims); ok {\n\t\t\tc.Locals(\"userID\", claims[\"sub\"])\n\t\t\tc.Locals(\"roles\", claims[\"realm_access\"].(map[string]interface{})[\"roles\"])\n\t\t}\n\n\t\treturn c.Next()\n\t}\n}\n\n// RequireRole checks if the user has the required role\nfunc RequireRole(role string) fiber.Handler {\n\treturn func(c *fiber.Ctx) error {\n\t\tuserRoles, ok := c.Locals(\"roles\").([]interface{})\n\t\tif !ok {\n\t\t\treturn c.Status(fiber.StatusForbidden).JSON(fiber.Map{\n\t\t\t\t\"error\": \"No roles found in token\",\n\t\t\t})\n\t\t}\n\n\t\tfor _, r := range userRoles {\n\t\t\tif r == role {\n\t\t\t\treturn c.Next()\n\t\t\t}\n\t\t}\n\n\t\treturn c.Status(fiber.StatusForbidden).JSON(fiber.Map{\n\t\t\t\"error\": \"Insufficient permissions\",\n\t\t})\n\t}\n}"
                },
                {
                  "name": "roles.go",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/auth/roles.go",
                  "size": 0,
                  "content": ""
                }
              ]
            },
            {
              "name": "database",
              "type": "directory",
              "path": "media-vault-backend-backup-20250530110754/internal/database",
              "children": [
                {
                  "name": "migrations.go",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/database/migrations.go",
                  "size": 156,
                  "content": "package database\n\n// RunMigrations runs all database migrations\nfunc RunMigrations(db *sql.DB) error {\n\t// TODO: Implement database migrations\n\treturn nil\n}"
                },
                {
                  "name": "sqlite.go",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/database/sqlite.go",
                  "size": 3396,
                  "content": "package database\n\nimport (\n    \"database/sql\"\n    \"os\"\n    \"path/filepath\"\n\n    _ \"github.com/mattn/go-sqlite3\"\n)\n\nfunc Initialize() (*sql.DB, error) {\n    dbPath := os.Getenv(\"DATABASE_PATH\")\n    if dbPath == \"\" {\n        dbPath = \"./data/media.db\"\n    }\n\n    // Ensure directory exists\n    dir := filepath.Dir(dbPath)\n    if err := os.MkdirAll(dir, 0755); err != nil {\n        return nil, err\n    }\n\n    db, err := sql.Open(\"sqlite3\", dbPath)\n    if err != nil {\n        return nil, err\n    }\n\n    // Enable foreign keys\n    if _, err := db.Exec(\"PRAGMA foreign_keys = ON\"); err != nil {\n        return nil, err\n    }\n\n    // Run migrations\n    if err := runMigrations(db); err != nil {\n        return nil, err\n    }\n\n    return db, nil\n}\n\nfunc runMigrations(db *sql.DB) error {\n    migrations := []string{\n        `CREATE TABLE IF NOT EXISTS photos (\n            id TEXT PRIMARY KEY,\n            user_id TEXT NOT NULL,\n            partner_id TEXT,\n            filename TEXT NOT NULL,\n            original_name TEXT NOT NULL,\n            file_path TEXT NOT NULL,\n            thumbnail_path TEXT,\n            file_size INTEGER NOT NULL,\n            mime_type TEXT NOT NULL,\n            width INTEGER,\n            height INTEGER,\n            hash TEXT NOT NULL,\n            description TEXT,\n            ai_description TEXT,\n            tags TEXT,\n            ai_confidence REAL,\n            is_nsfw BOOLEAN,\n            nsfw_confidence REAL,\n            moderation_status TEXT DEFAULT 'pending',\n            exif_data TEXT,\n            location TEXT,\n            camera_make TEXT,\n            camera_model TEXT,\n            taken_at DATETIME,\n            is_shared BOOLEAN DEFAULT FALSE,\n            share_count INTEGER DEFAULT 0,\n            view_count INTEGER DEFAULT 0,\n            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n            processed_at DATETIME\n        )`,\n\n        `CREATE TABLE IF NOT EXISTS photo_sharing (\n            id TEXT PRIMARY KEY,\n            photo_id TEXT NOT NULL,\n            shared_by TEXT NOT NULL,\n            shared_with TEXT NOT NULL,\n            permission TEXT NOT NULL DEFAULT 'view',\n            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n            expires_at DATETIME,\n            FOREIGN KEY (photo_id) REFERENCES photos (id) ON DELETE CASCADE\n        )`,\n\n        `CREATE TABLE IF NOT EXISTS photo_analytics (\n            photo_id TEXT PRIMARY KEY,\n            views INTEGER DEFAULT 0,\n            downloads INTEGER DEFAULT 0,\n            shares INTEGER DEFAULT 0,\n            last_viewed DATETIME,\n            FOREIGN KEY (photo_id) REFERENCES photos (id) ON DELETE CASCADE\n        )`,\n\n        `CREATE INDEX IF NOT EXISTS idx_photos_user_id ON photos (user_id)`,\n        `CREATE INDEX IF NOT EXISTS idx_photos_partner_id ON photos (partner_id)`,\n        `CREATE INDEX IF NOT EXISTS idx_photos_created_at ON photos (created_at)`,\n        `CREATE INDEX IF NOT EXISTS idx_photos_moderation_status ON photos (moderation_status)`,\n        `CREATE INDEX IF NOT EXISTS idx_photo_sharing_photo_id ON photo_sharing (photo_id)`,\n        `CREATE INDEX IF NOT EXISTS idx_photo_sharing_shared_with ON photo_sharing (shared_with)`,\n    }\n\n    for _, migration := range migrations {\n        if _, err := db.Exec(migration); err != nil {\n            return err\n        }\n    }\n\n    return nil\n}\n\n"
                }
              ]
            },
            {
              "name": "handlers",
              "type": "directory",
              "path": "media-vault-backend-backup-20250530110754/internal/handlers",
              "children": [
                {
                  "name": "admin.go",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/handlers/admin.go",
                  "size": 470,
                  "content": "package handlers\n\nimport \"github.com/gofiber/fiber/v2\"\n\n// AdminHandler handles admin-related HTTP requests\ntype AdminHandler struct {\n\t// Add any dependencies here\n}\n\n// NewAdminHandler creates a new AdminHandler\nfunc NewAdminHandler() *AdminHandler {\n\treturn &AdminHandler{}\n}\n\n// GetSystemStats returns system statistics\nfunc (h *AdminHandler) GetSystemStats(c *fiber.Ctx) error {\n\t// TODO: Implement system stats retrieval\n\treturn c.JSON(fiber.Map{\"status\": \"ok\"})\n}"
                },
                {
                  "name": "partner.go",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/handlers/partner.go",
                  "size": 1384,
                  "content": "package handlers\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n)\n\n// PartnerHandler handles partner-related HTTP requests\ntype PartnerHandler struct {\n\t// Add any dependencies here (e.g., services, repositories)\n}\n\n// NewPartnerHandler creates a new PartnerHandler\nfunc NewPartnerHandler() *PartnerHandler {\n\treturn &PartnerHandler{}\n}\n\n// RegisterRoutes registers partner routes\nfunc (h *PartnerHandler) RegisterRoutes(router fiber.Router) {\n\tpartnerGroup := router.Group(\"/api/partners\")\n\t\n\t// Public routes\n\t// partnerGroup.Get(\"/\", h.ListPartners)\n\t// partnerGroup.Get(\"/:id\", h.GetPartner)\n\n\n\t// Protected routes (require authentication)\n\t// partnerGroup.Use(auth.RequireRole(\"partner\"))\n\t// partnerGroup.Post(\"/\", h.CreatePartner)\n\t// partnerGroup.Put(\"/:id\", h.UpdatePartner)\n\t// partnerGroup.Delete(\"/:id\", h.DeletePartner)\n}\n\n// ListPartners handles GET /api/partners\n// func (h *PartnerHandler) ListPartners(c *fiber.Ctx) error {\n// \t// Implementation here\n// \treturn c.JSON(fiber.Map{\n// \t\t\"message\": \"List of partners\",\n// \t})\n// }\n\n\n// GetPartner handles GET /api/partners/:id\n// func (h *PartnerHandler) GetPartner(c *fiber.Ctx) error {\n// \t// Implementation here\n// \tpartnerID := c.Params(\"id\")\n// \treturn c.JSON(fiber.Map{\n// \t\t\"message\": \"Get partner with ID: \" + partnerID,\n// \t})\n// }\n\n// Add other handler methods (CreatePartner, UpdatePartner, DeletePartner) as needed"
                },
                {
                  "name": "photos.go",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/handlers/photos.go",
                  "size": 3136,
                  "content": "package handlers\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n\t\"media-vault/internal/services\"\n)\n\n// PhotoHandler handles photo-related HTTP requests\ntype PhotoHandler struct {\n\tphotoService *services.PhotoService\n}\n\n// NewPhotoHandler creates a new PhotoHandler\nfunc NewPhotoHandler(photoService *services.PhotoService) *PhotoHandler {\n\treturn &PhotoHandler{\n\t\tphotoService: photoService,\n\t}\n}\n\n// UploadPhoto handles photo uploads\nfunc (h *PhotoHandler) UploadPhoto(c *fiber.Ctx) error {\n\t// Get the file from the form data\n\tfile, err := c.FormFile(\"photo\")\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\n\t\t\t\"error\": \"No file uploaded\",\n\t\t})\n\t}\n\n\t// Get user ID from context (set by auth middleware)\n\tuserID := c.Locals(\"userID\").(string)\n\n\t// Upload the photo\n\tphoto, err := h.photoService.UploadPhoto(c.Context(), userID, file, nil)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\n\t\t\t\"error\": \"Failed to upload photo: \" + err.Error(),\n\t\t})\n\t}\n\n\treturn c.Status(fiber.StatusCreated).JSON(photo)\n}\n\n// GetPhoto handles retrieving a photo by ID\nfunc (h *PhotoHandler) GetPhoto(c *fiber.Ctx) error {\n\tphotoID := c.Params(\"id\")\n\tif photoID == \"\" {\n\t\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\n\t\t\t\"error\": \"Photo ID is required\",\n\t\t})\n\t}\n\n\t// Get photo from service\n\tphoto, err := h.photoService.GetPhoto(c.Context(), photoID)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusNotFound).JSON(fiber.Map{\n\t\t\t\"error\": \"Photo not found\",\n\t\t})\n\t}\n\n\t// Check if user has permission to view this photo\n\t// (Implementation depends on your auth system)\n\n\n\treturn c.JSON(photo)\n}\n\n// ListPhotos handles listing photos with pagination\nfunc (h *PhotoHandler) ListPhotos(c *fiber.Ctx) error {\n\t// Get pagination parameters\n\tpage := c.QueryInt(\"page\", 1)\n\tlimit := c.QueryInt(\"limit\", 20)\n\n\t// Get user ID from context\n\tuserID := c.Locals(\"userID\").(string)\n\n\t// Get photos from service\n\tphotos, total, err := h.photoService.ListPhotos(c.Context(), userID, page, limit)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\n\t\t\t\"error\": \"Failed to fetch photos\",\n\t\t})\n\t}\n\n\treturn c.JSON(fiber.Map{\n\t\t\"data\":  photos,\n\t\t\"total\": total,\n\t\t\"page\":  page,\n\t\t\"limit\": limit,\n\t})\n}\n\n// DeletePhoto handles deleting a photo\nfunc (h *PhotoHandler) DeletePhoto(c *fiber.Ctx) error {\n\tphotoID := c.Params(\"id\")\n\tif photoID == \"\" {\n\t\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\n\t\t\t\"error\": \"Photo ID is required\",\n\t\t})\n\t}\n\n\t// Get user ID from context\n\tuserID := c.Locals(\"userID\").(string)\n\n\t// Delete the photo\n\terr := h.photoService.DeletePhoto(c.Context(), userID, photoID)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\n\t\t\t\"error\": \"Failed to delete photo: \" + err.Error(),\n\t\t})\n\t}\n\n\treturn c.SendStatus(fiber.StatusNoContent)\n}\n\n// RegisterRoutes registers photo-related routes\nfunc (h *PhotoHandler) RegisterRoutes(router fiber.Router) {\n\tphotos := router.Group(\"/photos\")\n\tphotos.Post(\"/\", h.UploadPhoto)\n\tphotos.Get(\"/\", h.ListPhotos)\n\tphotos.Get(\"/:id\", h.GetPhoto)\n\tphotos.Delete(\"/:id\", h.DeletePhoto)\n}"
                },
                {
                  "name": "upload.go",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/handlers/upload.go",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "vault.go",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/handlers/vault.go",
                  "size": 0,
                  "content": ""
                }
              ]
            },
            {
              "name": "models",
              "type": "directory",
              "path": "media-vault-backend-backup-20250530110754/internal/models",
              "children": [
                {
                  "name": "description.dart",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/models/description.dart",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "description.go",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/models/description.go",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "nsfw_mobilenet.h5",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/models/nsfw_mobilenet.h5",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "nsfw_model.h5",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/models/nsfw_model.h5",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "photo.dart",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/models/photo.dart",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "photo.go",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/models/photo.go",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "user.dart",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/models/user.dart",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "user.go",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/models/user.go",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "vault_file.dart",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/models/vault_file.dart",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "vault_file.go",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/models/vault_file.go",
                  "size": 0,
                  "content": ""
                }
              ]
            },
            {
              "name": "services",
              "type": "directory",
              "path": "media-vault-backend-backup-20250530110754/internal/services",
              "children": [
                {
                  "name": "auth_service.dart",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/services/auth_service.dart",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "description_service.dart",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/services/description_service.dart",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "description_service.go",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/services/description_service.go",
                  "size": 679,
                  "content": "package services\n\n// DescriptionService handles AI-generated descriptions for media\n// TODO: Implement the description service functionality\n\n// DescriptionService provides methods for generating and managing descriptions\ntype DescriptionService struct {\n\t// Add any dependencies here\n}\n\n// NewDescriptionService creates a new DescriptionService\nfunc NewDescriptionService() *DescriptionService {\n\treturn &DescriptionService{}\n}\n\n// GenerateDescription generates a description for the given content\nfunc (s *DescriptionService) GenerateDescription(content string) (string, error) {\n\t// TODO: Implement description generation\n\treturn \"Generated description for: \" + content, nil\n}"
                },
                {
                  "name": "media_vault_service.dart",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/services/media_vault_service.dart",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "photo_service.dart",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/services/photo_service.dart",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "photo_service.go",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/services/photo_service.go",
                  "size": 3084,
                  "content": "package services\n\nimport (\n\t\"context\"\n\t\"mime/multipart\"\n)\n\n// Photo represents a photo in the system\ntype Photo struct {\n\tID          string `json:\"id\"`\n\tUserID      string `json:\"user_id\"`\n\tTitle       string `json:\"title\"`\n\tDescription string `json:\"description\"`\n\tURL         string `json:\"url\"`\n\tThumbnailURL string `json:\"thumbnail_url\"`\n\tIsPublic    bool   `json:\"is_public\"`\n\tCreatedAt   int64  `json:\"created_at\"`\n\tUpdatedAt   int64  `json:\"updated_at\"`\n}\n\n// PhotoService defines the interface for photo operations\ntype PhotoService interface {\n\t// UploadPhoto uploads a new photo\n\tUploadPhoto(ctx context.Context, userID string, fileHeader *multipart.FileHeader, metadata map[string]interface{}) (*Photo, error)\n\t\n\t// GetPhoto retrieves a photo by ID\n\tGetPhoto(ctx context.Context, photoID string) (*Photo, error)\n\t\n\t// ListPhotos lists photos with pagination and filtering\n\tListPhotos(ctx context.Context, filter map[string]interface{}, offset, limit int) ([]*Photo, int64, error)\n\t\n\t// UpdatePhoto updates photo metadata\n\tUpdatePhoto(ctx context.Context, photoID string, updates map[string]interface{}) (*Photo, error)\n\t\n\t// DeletePhoto removes a photo\n\tDeletePhoto(ctx context.Context, photoID string) error\n\t\n\t// GenerateThumbnail generates a thumbnail for a photo\n\tGenerateThumbnail(photoURL string) (string, error)\n}\n\n// photoService implements PhotoService\ntype photoService struct {\n\t// Add dependencies like storage client, database, etc.\n}\n\n// NewPhotoService creates a new photo service\nfunc NewPhotoService() PhotoService {\n\treturn &photoService{}\n}\n\n// UploadPhoto implements PhotoService\nfunc (s *photoService) UploadPhoto(ctx context.Context, userID string, fileHeader *multipart.FileHeader, metadata map[string]interface{}) (*Photo, error) {\n\t// TODO: Implement photo upload logic\n\t// 1. Validate file type and size\n\t// 2. Generate unique filename\n\t// 3. Upload to storage (S3, local filesystem, etc.)\n\t// 4. Generate thumbnail\n\t// 5. Save metadata to database\n\treturn nil, nil\n}\n\n// GetPhoto implements PhotoService\nfunc (s *photoService) GetPhoto(ctx context.Context, photoID string) (*Photo, error) {\n\t// TODO: Implement photo retrieval\n\treturn nil, nil\n}\n\n// ListPhotos implements PhotoService\nfunc (s *photoService) ListPhotos(ctx context.Context, filter map[string]interface{}, offset, limit int) ([]*Photo, int64, error) {\n\t// TODO: Implement photo listing with filtering and pagination\n\treturn nil, 0, nil\n}\n\n// UpdatePhoto implements PhotoService\nfunc (s *photoService) UpdatePhoto(ctx context.Context, photoID string, updates map[string]interface{}) (*Photo, error) {\n\t// TODO: Implement photo metadata update\n\treturn nil, nil\n}\n\n// DeletePhoto implements PhotoService\nfunc (s *photoService) DeletePhoto(ctx context.Context, photoID string) error {\n\t// TODO: Implement photo deletion\n\treturn nil\n}\n\n// GenerateThumbnail implements PhotoService\nfunc (s *photoService) GenerateThumbnail(photoURL string) (string, error) {\n\t// TODO: Implement thumbnail generation\n\t// This could use a library like imaging or call an external service\n\treturn \"\", nil\n}"
                },
                {
                  "name": "sharing_service.go",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/services/sharing_service.go",
                  "size": 4366,
                  "content": "package services\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"errors\"\n\t\"time\"\n\n\t\"github.com/google/uuid\"\n)\n\n// Share represents a shared photo with permissions\ntype Share struct {\n\tID          string    `json:\"id\"`\n\tPhotoID     string    `json:\"photo_id\"`\n\tSharedBy    string    `json:\"shared_by\"`\n\tSharedWith  string    `json:\"shared_with\"`\n\tPermission  string    `json:\"permission\"` // \"view\" or \"download\"\n\tExpiresAt   time.Time `json:\"expires_at,omitempty\"`\n\tCreatedAt   time.Time `json:\"created_at\"`\n}\n\n// SharingService handles photo sharing operations\ntype SharingService struct {\n\tdb *sql.DB\n}\n\n// NewSharingService creates a new SharingService\nfunc NewSharingService(db *sql.DB) *SharingService {\n\treturn &SharingService{\n\t\tdb: db,\n\t}\n}\n\n// SharePhoto shares a photo with another user\nfunc (s *SharingService) SharePhoto(ctx context.Context, share *Share) error {\n\t// Validate input\n\tif share.PhotoID == \"\" || share.SharedBy == \"\" || share.SharedWith == \"\" {\n\t\treturn errors.New(\"photo ID, shared_by, and shared_with are required\")\n\t}\n\n\t// Set default permission if not provided\n\tif share.Permission == \"\" {\n\t\tshare.Permission = \"view\"\n\t}\n\n\t// Generate a new share ID if not provided\n\tif share.ID == \"\" {\n\t\tshare.ID = uuid.New().String()\n\t}\n\n\t// Set created at time\n\tshare.CreatedAt = time.Now()\n\n\t// Insert the share record\n\t_, err := s.db.ExecContext(ctx, `\n\t\tINSERT INTO photo_shares (id, photo_id, shared_by, shared_with, permission, expires_at, created_at)\n\t\tVALUES ($1, $2, $3, $4, $5, $6, $7)\n\t`,\n\t\tshare.ID,\n\t\tshare.PhotoID,\n\t\tshare.SharedBy,\n\t\tshare.SharedWith,\n\t\tshare.Permission,\n\t\tshare.ExpiresAt,\n\t\tshare.CreatedAt,\n\t)\n\n\treturn err\n}\n\n// GetShare retrieves a share by ID\nfunc (s *SharingService) GetShare(ctx context.Context, shareID string) (*Share, error) {\n\tvar share Share\n\terr := s.db.QueryRowContext(ctx, `\n\t\tSELECT id, photo_id, shared_by, shared_with, permission, expires_at, created_at\n\t\tFROM photo_shares\n\t\tWHERE id = $1\n\t`, shareID).Scan(\n\t\t&share.ID,\n\t\t&share.PhotoID,\n\t\t&share.SharedBy,\n\t\t&share.SharedWith,\n\t\t&share.Permission,\n\t\t&share.ExpiresAt,\n\t\t&share.CreatedAt,\n\t)\n\n\tif err != nil {\n\t\tif err == sql.ErrNoRows {\n\t\t\treturn nil, errors.New(\"share not found\")\n\t\t}\n\t\treturn nil, err\n\t}\n\n\treturn &share, nil\n}\n\n// ListSharesForPhoto lists all shares for a specific photo\nfunc (s *SharingService) ListSharesForPhoto(ctx context.Context, photoID string) ([]*Share, error) {\n\trows, err := s.db.QueryContext(ctx, `\n\t\tSELECT id, photo_id, shared_by, shared_with, permission, expires_at, created_at\n\t\tFROM photo_shares\n\t\tWHERE photo_id = $1\n\t`, photoID)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\n\tvar shares []*Share\n\tfor rows.Next() {\n\t\tvar share Share\n\t\tif err := rows.Scan(\n\t\t\t&share.ID,\n\t\t\t&share.PhotoID,\n\t\t\t&share.SharedBy,\n\t\t\t&share.SharedWith,\n\t\t\t&share.Permission,\n\t\t\t&share.ExpiresAt,\n\t\t\t&share.CreatedAt,\n\t\t); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tshares = append(shares, &share)\n\t}\n\n\tif err = rows.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn shares, nil\n}\n\n// RevokeShare removes a share\nfunc (s *SharingService) RevokeShare(ctx context.Context, shareID string) error {\n\tresult, err := s.db.ExecContext(ctx, `\n\t\tDELETE FROM photo_shares\n\t\tWHERE id = $1\n\t`, shareID)\n\n\tif err != nil {\n\t\treturn err\n\t}\n\n\trowsAffected, err := result.RowsAffected()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif rowsAffected == 0 {\n\t\treturn errors.New(\"share not found\")\n\t}\n\n\treturn nil\n}\n\n// HasPermission checks if a user has permission to access a photo\nfunc (s *SharingService) HasPermission(ctx context.Context, photoID, userID, requiredPermission string) (bool, error) {\n\t// Check if the user is the owner of the photo\n\tvar ownerID string\n\terr := s.db.QueryRowContext(ctx, `\n\t\tSELECT user_id FROM photos WHERE id = $1\n\t`, photoID).Scan(&ownerID)\n\n\tif err != nil {\n\t\tif err == sql.ErrNoRows {\n\t\t\treturn false, errors.New(\"photo not found\")\n\t\t}\n\t\treturn false, err\n\t}\n\n\t// If the user is the owner, they have all permissions\n\tif ownerID == userID {\n\t\treturn true, nil\n\t}\n\n\t// Check for an active share\n\tvar count int\n\terr = s.db.QueryRowContext(ctx, `\n\t\tSELECT COUNT(*)\n\t\tFROM photo_shares\n\t\tWHERE photo_id = $1\n\t\t  AND shared_with = $2\n\t\t  AND (expires_at IS NULL OR expires_at > NOW())\n\t\t  AND permission = $3\n\t`, photoID, userID, requiredPermission).Scan(&count)\n\n\tif err != nil {\n\t\treturn false, err\n\t}\n\n\treturn count > 0, nil\n}"
                },
                {
                  "name": "vault_service.go",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/services/vault_service.go",
                  "size": 0,
                  "content": ""
                }
              ]
            },
            {
              "name": "utils",
              "type": "directory",
              "path": "media-vault-backend-backup-20250530110754/internal/utils",
              "children": [
                {
                  "name": "constants.dart",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/utils/constants.dart",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "image_processing.go",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/utils/image_processing.go",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "metadata.go",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/utils/metadata.go",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "permissions.dart",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/utils/permissions.dart",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "theme.dart",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/utils/theme.dart",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "thumbnails.go",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/utils/thumbnails.go",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "validators.dart",
                  "type": "file",
                  "path": "media-vault-backend-backup-20250530110754/internal/utils/validators.dart",
                  "size": 0,
                  "content": ""
                }
              ]
            }
          ]
        },
        {
          "name": "migrations",
          "type": "directory",
          "path": "media-vault-backend-backup-20250530110754/migrations",
          "children": [
            {
              "name": "001_initial.sql",
              "type": "file",
              "path": "media-vault-backend-backup-20250530110754/migrations/001_initial.sql",
              "size": 0,
              "content": ""
            },
            {
              "name": "002_photos.sql",
              "type": "file",
              "path": "media-vault-backend-backup-20250530110754/migrations/002_photos.sql",
              "size": 0,
              "content": ""
            },
            {
              "name": "003_descriptions.sql",
              "type": "file",
              "path": "media-vault-backend-backup-20250530110754/migrations/003_descriptions.sql",
              "size": 0,
              "content": ""
            }
          ]
        },
        {
          "name": "Dockerfile",
          "type": "file",
          "path": "media-vault-backend-backup-20250530110754/Dockerfile",
          "size": 846,
          "content": "# Build stage\nFROM golang:1.21-alpine AS builder\n\n# Set the working directory\nWORKDIR /app\n\n# Copy go mod and sum files\nCOPY go.mod go.sum ./\n\n# Initialize the Go module if not already done\nRUN go mod init media-vault 2>/dev/null || true\n\n# Download all dependencies\nRUN go mod download\n\n# Copy the source code\nCOPY . .\n\n# Tidy up the module dependencies\nRUN go mod tidy\n\n# Build the application\nRUN CGO_ENABLED=0 GOOS=linux go build -o media-vault-api ./cmd\n\n# Final stage\nFROM alpine:3.18\n\n# Install required packages\nRUN apk --no-cache add ca-certificates\n\n# Set the working directory\nWORKDIR /app\n\n# Copy the binary from builder\nCOPY --from=builder /app/media-vault-api .\n\n# Copy migrations\nCOPY --from=builder /app/migrations ./migrations\n\n# Expose the application port\nEXPOSE 8080\n\n# Command to run the application\nCMD [\"./media-vault-api\"]"
        },
        {
          "name": "Dockerfile.bak",
          "type": "file",
          "path": "media-vault-backend-backup-20250530110754/Dockerfile.bak",
          "size": 846,
          "content": "# Build stage\nFROM golang:1.21-alpine AS builder\n\n# Set the working directory\nWORKDIR /app\n\n# Copy go mod and sum files\nCOPY go.mod go.sum ./\n\n# Initialize the Go module if not already done\nRUN go mod init media-vault 2>/dev/null || true\n\n# Download all dependencies\nRUN go mod download\n\n# Copy the source code\nCOPY . .\n\n# Tidy up the module dependencies\nRUN go mod tidy\n\n# Build the application\nRUN CGO_ENABLED=0 GOOS=linux go build -o media-vault-api ./cmd\n\n# Final stage\nFROM alpine:3.18\n\n# Install required packages\nRUN apk --no-cache add ca-certificates\n\n# Set the working directory\nWORKDIR /app\n\n# Copy the binary from builder\nCOPY --from=builder /app/media-vault-api .\n\n# Copy migrations\nCOPY --from=builder /app/migrations ./migrations\n\n# Expose the application port\nEXPOSE 8080\n\n# Command to run the application\nCMD [\"./media-vault-api\"]"
        },
        {
          "name": "go.mod",
          "type": "file",
          "path": "media-vault-backend-backup-20250530110754/go.mod",
          "size": 724,
          "content": "module media-vault\n\ngo 1.21\n\nrequire (\n    github.com/gofiber/fiber/v2 v2.50.0\n    github.com/golang-jwt/jwt/v5 v5.0.0\n    github.com/google/uuid v1.3.1\n    github.com/mattn/go-sqlite3 v1.14.17\n)\n\nrequire (\n    github.com/andybalholm/brotli v1.0.5 // indirect\n    github.com/klauspost/compress v1.16.7 // indirect\n    github.com/mattn/go-colorable v0.1.13 // indirect\n    github.com/mattn/go-isatty v0.0.19 // indirect\n    github.com/mattn/go-runewidth v0.0.15 // indirect\n    github.com/rivo/uniseg v0.2.0 // indirect\n    github.com/valyala/bytebufferpool v1.0.0 // indirect\n    github.com/valyala/fasthttp v1.50.0 // indirect\n    github.com/valyala/tcplisten v1.0.0 // indirect\n    golang.org/x/sys v0.12.0 // indirect\n)\n\n"
        },
        {
          "name": "go.sum",
          "type": "file",
          "path": "media-vault-backend-backup-20250530110754/go.sum",
          "size": 0,
          "content": ""
        }
      ]
    },
    {
      "name": "monitoring",
      "type": "directory",
      "path": "monitoring",
      "children": [
        {
          "name": "alertmanager",
          "type": "directory",
          "path": "monitoring/alertmanager",
          "children": [
            {
              "name": "alertmanager.yml",
              "type": "file",
              "path": "monitoring/alertmanager/alertmanager.yml",
              "size": 1297,
              "content": "global:\n  smtp_smarthost: '${SMTP_HOST}:${SMTP_PORT}'\n  smtp_from: '${SMTP_USER}'\n  smtp_auth_username: '${SMTP_USER}'\n  smtp_auth_password: '${SMTP_PASSWORD}'\n  smtp_require_tls: true\n\ntemplates:\n  - '/etc/alertmanager/templates/*.tmpl'\n\nroute:\n  group_by: ['alertname', 'cluster', 'service']\n  group_wait: 10s\n  group_interval: 10s\n  repeat_interval: 12h\n  receiver: 'default'\n  routes:\n    # Critical alerts\n    - match:\n        severity: critical\n      receiver: 'critical-alerts'\n      group_wait: 0s\n      repeat_interval: 5m\n\n    # Warning alerts\n    - match:\n        severity: warning\n      receiver: 'warning-alerts'\n      repeat_interval: 30m\n\n    # Security alerts\n    - match:\n        category: security\n      receiver: 'security-alerts'\n      group_wait: 0s\n      repeat_interval: 15m\n\nreceivers:\n  - name: 'default'\n    email_configs:\n      - to: '${ADMIN_EMAIL}'\n        subject: '[Media Vault] Alert: {{ .GroupLabels.alertname }}'\n        headers:\n          From: 'Media Vault Monitoring <${SMTP_USER}>'\n          To: '${ADMIN_EMAIL}'\n        body: |\n          {{ range .Alerts }}\n          **Alert:** {{ .Annotations.summary }}\n          **Description:** {{ .Annotations.description }}\n          **Severity:** {{ .Labels.severity }}\n          **Instance:** {{ .Labels.instance }}\n"
            }
          ]
        },
        {
          "name": "blackbox",
          "type": "directory",
          "path": "monitoring/blackbox",
          "children": [
            {
              "name": "blackbox.yml",
              "type": "file",
              "path": "monitoring/blackbox/blackbox.yml",
              "size": 737,
              "content": "modules:\n  http_2xx:\n    prober: http\n    timeout: 5s\n    http:\n      valid_http_versions: [\"HTTP/1.1\", \"HTTP/2.0\"]\n      valid_status_codes: [200, 201, 202]\n      method: GET\n      headers:\n        Host: \"media-vault.local\"\n        User-Agent: \"Prometheus-Blackbox-Exporter\"\n      preferred_ip_protocol: \"ip4\"\n      ip_protocol_fallback: false\n\n  http_post_2xx:\n    prober: http\n    timeout: 5s\n    http:\n      method: POST\n      headers:\n        Content-Type: \"application/json\"\n      body: '{\"health\": \"check\"}'\n      valid_status_codes: [200, 201, 202]\n\n  tcp_connect:\n    prober: tcp\n    timeout: 5s\n    tcp:\n      preferred_ip_protocol: \"ip4\"\n\n  icmp:\n    prober: icmp\n    timeout: 5s\n    icmp:\n      preferred_ip_protocol: \"ip4\"\n\n"
            }
          ]
        },
        {
          "name": "grafana",
          "type": "directory",
          "path": "monitoring/grafana",
          "children": [
            {
              "name": "provisioning",
              "type": "directory",
              "path": "monitoring/grafana/provisioning",
              "children": [
                {
                  "name": "dashboards",
                  "type": "directory",
                  "path": "monitoring/grafana/provisioning/dashboards",
                  "children": [
                    {
                      "name": "application.json",
                      "type": "file",
                      "path": "monitoring/grafana/provisioning/dashboards/application.json",
                      "size": 0,
                      "content": ""
                    },
                    {
                      "name": "business.json",
                      "type": "file",
                      "path": "monitoring/grafana/provisioning/dashboards/business.json",
                      "size": 0,
                      "content": ""
                    },
                    {
                      "name": "dashboard.yml",
                      "type": "file",
                      "path": "monitoring/grafana/provisioning/dashboards/dashboard.yml",
                      "size": 225,
                      "content": "apiVersion: 1\n\nproviders:\n  - name: 'default'\n    orgId: 1\n    folder: ''\n    type: file\n    disableDeletion: false\n    updateIntervalSeconds: 10\n    allowUiUpdates: true\n    options:\n      path: /var/lib/grafana/dashboards\n\n"
                    },
                    {
                      "name": "infrastructure.json",
                      "type": "file",
                      "path": "monitoring/grafana/provisioning/dashboards/infrastructure.json",
                      "size": 0,
                      "content": ""
                    },
                    {
                      "name": "security.json",
                      "type": "file",
                      "path": "monitoring/grafana/provisioning/dashboards/security.json",
                      "size": 0,
                      "content": ""
                    }
                  ]
                },
                {
                  "name": "datasources",
                  "type": "directory",
                  "path": "monitoring/grafana/provisioning/datasources",
                  "children": [
                    {
                      "name": "prometheus.yml",
                      "type": "file",
                      "path": "monitoring/grafana/provisioning/datasources/prometheus.yml",
                      "size": 560,
                      "content": "apiVersion: 1\n\ndatasources:\n  - name: Prometheus\n    type: prometheus\n    access: proxy\n    url: http://prometheus:9090\n    isDefault: true\n    editable: true\n    jsonData:\n      timeInterval: \"5s\"\n      queryTimeout: \"60s\"\n      httpMethod: \"POST\"\n    secureJsonData: {}\n\n  - name: Loki\n    type: loki\n    access: proxy\n    url: http://loki:3100\n    editable: true\n    jsonData:\n      maxLines: 1000\n      derivedFields:\n        - datasourceUid: \"prometheus\"\n          matcherRegex: \"traceID=(\\\\w+)\"\n          name: \"TraceID\"\n          url: \"$${__value.raw}\"\n"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "loki",
          "type": "directory",
          "path": "monitoring/loki",
          "children": [
            {
              "name": "loki.yml",
              "type": "file",
              "path": "monitoring/loki/loki.yml",
              "size": 703,
              "content": "auth_enabled: false\n\nserver:\n  http_listen_port: 3100\n  grpc_listen_port: 9096\n\ncommon:\n  path_prefix: /tmp/loki\n  storage:\n    filesystem:\n      chunks_directory: /tmp/loki/chunks\n      rules_directory: /tmp/loki/rules\n  replication_factor: 1\n  ring:\n    instance_addr: 127.0.0.1\n    kvstore:\n      store: inmemory\n\nquery_range:\n  results_cache:\n    cache:\n      embedded_cache:\n        enabled: true\n        max_size_mb: 100\n\nschema_config:\n  configs:\n    - from: 2020-10-24\n      store: boltdb-shipper\n      object_store: filesystem\n      schema: v11\n      index:\n        prefix: index_\n        period: 24h\n\nruler:\n  alertmanager_url: http://alertmanager:9093\n\nanalytics:\n  reporting_enabled: false\n\n"
            }
          ]
        },
        {
          "name": "prometheus",
          "type": "directory",
          "path": "monitoring/prometheus",
          "children": [
            {
              "name": "rules",
              "type": "directory",
              "path": "monitoring/prometheus/rules",
              "children": [
                {
                  "name": "advanced-alerts.yml",
                  "type": "file",
                  "path": "monitoring/prometheus/rules/advanced-alerts.yml",
                  "size": 5335,
                  "content": "groups:\n  - name: media-vault-critical\n    rules:\n      # Critical Infrastructure Alerts\n      - alert: ServiceCompletleyDown\n        expr: up == 0\n        for: 1m\n        labels:\n          severity: critical\n          team: infrastructure\n        annotations:\n          summary: \"Service {{ $labels.job }} is completely down\"\n          description: \"{{ $labels.job }} has been down for more than 1 minute\"\n          runbook_url: \"https://wiki.mediavault.com/runbooks/service-down\"\n          action: \"Immediate investigation required\"\n\n      - alert: DiskWillFillIn4Hours\n        expr: predict_linear(node_filesystem_avail_bytes{mountpoint=\"/\"}[1h], 4*3600) < 0\n        for: 5m\n        labels:\n          severity: critical\n          team: infrastructure\n        annotations:\n          summary: \"Disk will fill up in 4 hours\"\n          description: \"Disk space will be exhausted in approximately 4 hours\"\n          action: \"Clean up space or expand storage immediately\"\n\n      - alert: DatabaseConnectionExhaustion\n        expr: sum(pg_stat_activity_count) > 80\n        for: 2m\n        labels:\n          severity: critical\n          team: database\n        annotations:\n          summary: \"Database connection pool near exhaustion\"\n          description: \"PostgreSQL has {{ $value }} active connections (limit ~100)\"\n          action: \"Check for connection leaks or scale database\"\n\n      # Security Alerts\n      - alert: SuspiciousLoginActivity\n        expr: increase(keycloak_failed_login_attempts[5m]) > 20\n        for: 1m\n        labels:\n          severity: warning\n          team: security\n        annotations:\n          summary: \"Unusual login activity detected\"\n          description: \"{{ $value }} failed login attempts in 5 minutes\"\n          action: \"Check for brute force attacks, consider IP blocking\"\n\n      - alert: UnauthorizedAPIAccess\n        expr: increase(http_requests_total{code=~\"401|403\"}[5m]) > 50\n        for: 2m\n        labels:\n          severity: warning\n          team: security\n        annotations:\n          summary: \"High number of unauthorized API requests\"\n          description: \"{{ $value }} unauthorized requests in 5 minutes\"\n          action: \"Investigate potential security breach\"\n\n  - name: media-vault-performance\n    rules:\n      # Performance Degradation\n      - alert: APIResponseTimeDegraded\n        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 5\n        for: 5m\n        labels:\n          severity: warning\n          team: backend\n        annotations:\n          summary: \"API response time degraded\"\n          description: \"95th percentile response time is {{ $value }}s\"\n          action: \"Investigate performance bottlenecks\"\n\n      - alert: HighMemoryPressure\n        expr: (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes > 0.9\n        for: 10m\n        labels:\n          severity: warning\n          team: infrastructure\n        annotations:\n          summary: \"High memory pressure detected\"\n          description: \"Memory usage is {{ $value | humanizePercentage }}\"\n          action: \"Consider scaling or optimizing memory usage\"\n\n      - alert: SwapUsageHigh\n        expr: (node_memory_SwapTotal_bytes - node_memory_SwapFree_bytes) / node_memory_SwapTotal_bytes > 0.5\n        for: 5m\n        labels:\n          severity: warning\n          team: infrastructure\n        annotations:\n          summary: \"High swap usage detected\"\n          description: \"Swap usage is {{ $value | humanizePercentage }}\"\n          action: \"Investigate memory pressure and optimize\"\n\n      # Network Issues\n      - alert: HighNetworkErrors\n        expr: rate(node_network_receive_errs_total[5m]) + rate(node_network_transmit_errs_total[5m]) > 10\n        for: 3m\n        labels:\n          severity: warning\n          team: infrastructure\n        annotations:\n          summary: \"High network error rate\"\n          description: \"Network errors: {{ $value }} errors/second\"\n          action: \"Check network configuration and hardware\"\n\n  - name: media-vault-business\n    rules:\n      # Business Logic Alerts\n      - alert: UploadFailureRateHigh\n        expr: (rate(vault_upload_failures_total[5m]) / rate(vault_upload_attempts_total[5m])) > 0.1\n        for: 5m\n        labels:\n          severity: warning\n          team: application\n        annotations:\n          summary: \"High upload failure rate\"\n          description: \"{{ $value | humanizePercentage }} of uploads are failing\"\n          action: \"Check storage capacity and upload service health\"\n\n      - alert: NSFWDetectionServiceDown\n        expr: up{job=\"nsfw-analyzer\"} == 0\n        for: 1m\n        labels:\n          severity: warning\n          team: ml\n        annotations:\n          summary: \"NSFW detection service is down\"\n          description: \"Content moderation is not functioning\"\n          action: \"Restart NSFW analyzer service\"\n\n      - alert: VaultStorageUtilizationHigh\n        expr: (vault_storage_used_bytes / vault_storage_total_bytes) > 0.85\n        for: 5m\n        labels:\n          severity: warning\n          team: infrastructure\n        annotations:\n          summary: \"Vault storage utilization high\"\n          description: \"Storage is {{ $value | humanizePercentage }} full\"\n          action: \"Plan storage expansion or implement cleanup policies\"\n\n"
                },
                {
                  "name": "media-vault.yml",
                  "type": "file",
                  "path": "monitoring/prometheus/rules/media-vault.yml",
                  "size": 2359,
                  "content": "groups:\n  - name: media-vault-alerts\n    rules:\n      # High CPU Usage\n      - alert: HighCPUUsage\n        expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100) > 80\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"High CPU usage detected\"\n          description: \"CPU usage is above 80% for more than 5 minutes\"\n\n      # High Memory Usage\n      - alert: HighMemoryUsage\n        expr: (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100 > 85\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"High memory usage detected\"\n          description: \"Memory usage is above 85%\"\n\n      # Disk Space Low\n      - alert: DiskSpaceLow\n        expr: node_filesystem_avail_bytes{mountpoint=\"/\"} / node_filesystem_size_bytes{mountpoint=\"/\"} * 100 < 10\n        for: 1m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"Disk space is running low\"\n          description: \"Less than 10% disk space remaining\"\n\n      # Service Down\n      - alert: MediaVaultAPIDown\n        expr: up{job=\"media-vault-api\"} == 0\n        for: 1m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"Media Vault API is down\"\n          description: \"Media Vault API has been down for more than 1 minute\"\n\n      # Keycloak Down\n      - alert: KeycloakDown\n        expr: up{job=\"keycloak\"} == 0\n        for: 1m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"Keycloak is down\"\n          description: \"Keycloak has been down for more than 1 minute\"\n\n      # High Response Time\n      - alert: HighResponseTime\n        expr: http_request_duration_seconds{quantile=\"0.95\"} > 2\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"High response time detected\"\n          description: \"95th percentile response time is above 2 seconds\"\n\n      # Failed Login Attempts\n      - alert: HighFailedLogins\n        expr: increase(keycloak_failed_login_attempts[5m]) > 10\n        for: 1m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"High number of failed login attempts\"\n          description: \"More than 10 failed login attempts in 5 minutes\"\n\n"
                }
              ]
            },
            {
              "name": "prometheus.yml",
              "type": "file",
              "path": "monitoring/prometheus/prometheus.yml",
              "size": 1868,
              "content": "# monitoring/prometheus/prometheus.yml\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n  external_labels:\n    cluster: 'media-vault'\n    environment: 'production'\n\nrule_files:\n  - \"rules/*.yml\"\n\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets:\n          - alertmanager:9093\n\nscrape_configs:\n  # Prometheus itself\n  - job_name: 'prometheus'\n    static_configs:\n      - targets: ['localhost:9090']\n    scrape_interval: 30s\n\n  # Node Exporter - Host metrics\n  - job_name: 'node-exporter'\n    static_configs:\n      - targets: ['node-exporter:9100']\n    scrape_interval: 30s\n\n  # cAdvisor - Container metrics\n  - job_name: 'cadvisor'\n    static_configs:\n      - targets: ['cadvisor:8080']\n    scrape_interval: 30s\n\n  # Media Vault API\n  - job_name: 'media-vault-api'\n    static_configs:\n      - targets: ['media-vault-api:8080']\n    metrics_path: '/metrics'\n    scrape_interval: 15s\n\n  # Keycloak\n  - job_name: 'keycloak'\n    static_configs:\n      - targets: ['keycloak:8080']\n    metrics_path: '/metrics'\n    scrape_interval: 30s\n\n  # PostgreSQL Exporter\n  - job_name: 'postgres-exporter'\n    static_configs:\n      - targets: ['postgres-exporter:9187']\n    scrape_interval: 30s\n\n  # Redis Exporter\n  - job_name: 'redis-exporter'\n    static_configs:\n      - targets: ['redis-exporter:9121']\n    scrape_interval: 30s\n\n  # Blackbox Exporter - External monitoring\n  - job_name: 'blackbox'\n    metrics_path: /probe\n    params:\n      module: [http_2xx]\n    static_configs:\n      - targets:\n        - http://media-vault-api:8080/health\n        - http://keycloak:8080/health\n        - http://flutter-web:80\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: blackbox-exporter:9115\n"
            }
          ]
        },
        {
          "name": "promtail",
          "type": "directory",
          "path": "monitoring/promtail",
          "children": [
            {
              "name": "promtail.yml",
              "type": "file",
              "path": "monitoring/promtail/promtail.yml",
              "size": 1729,
              "content": "server:\n  http_listen_port: 9080\n  grpc_listen_port: 0\n\npositions:\n  filename: /tmp/positions.yaml\n\nclients:\n  - url: http://loki:3100/loki/api/v1/push\n\nscrape_configs:\n  # Docker container logs\n  - job_name: container-logs\n    static_configs:\n      - targets:\n          - localhost\n        labels:\n          job: containerlogs\n          __path__: /var/lib/docker/containers/*/*log\n\n    pipeline_stages:\n      - json:\n          expressions:\n            output: log\n            stream: stream\n            attrs:\n      - json:\n          expressions:\n            tag:\n          source: attrs\n      - regex:\n          expression: (?P<container_name>(?:[^|]*))\\|\n          source: tag\n      - timestamp:\n          format: RFC3339Nano\n          source: time\n      - labels:\n          stream:\n          container_name:\n      - output:\n          source: output\n\n  # Media Vault API logs\n  - job_name: media-vault-api\n    static_configs:\n      - targets:\n          - localhost\n        labels:\n          job: media-vault-api\n          __path__: /var/log/media-vault-api.log\n\n  # Keycloak logs\n  - job_name: keycloak\n    static_configs:\n      - targets:\n          - localhost\n        labels:\n          job: keycloak\n          __path__: /var/log/keycloak.log\n\n  # System logs\n  - job_name: syslog\n    static_configs:\n      - targets:\n          - localhost\n        labels:\n          job: syslog\n          __path__: /var/log/syslog\n\n    pipeline_stages:\n      - regex:\n          expression: '^(?P<timestamp>\\S+\\s+\\d+\\s+\\d+:\\d+:\\d+)\\s+(?P<hostname>\\S+)\\s+(?P<service>\\S+?)(\\[\\d+\\])?\\s*:\\s+(?P<message>.*)\n      - timestamp:\n          format: 'Jan 02 15:04:05'\n          source: timestamp\n      - labels:\n          hostname:\n          service:\n\n"
            }
          ]
        },
        {
          "name": "TODO.md",
          "type": "file",
          "path": "monitoring/TODO.md",
          "size": 313,
          "content": "# Monitoring - TODO\n\n## High Priority\n- [ ] Set up Prometheus metrics collection\n- [ ] Configure Grafana dashboards\n- [ ] Implement alerting rules\n\n## Medium Priority\n- [ ] Add logging infrastructure\n- [ ] Set up service health checks\n- [ ] Configure log rotation\n\n## Completed\n- [x] Basic monitoring stack setup\n"
        }
      ]
    },
    {
      "name": "nsfw-analyzer",
      "type": "directory",
      "path": "nsfw-analyzer",
      "children": [
        {
          "name": "analyzer.py",
          "type": "file",
          "path": "nsfw-analyzer/analyzer.py",
          "size": 4790,
          "content": "import os\nimport requests\nimport numpy as np\nimport tensorflow as tf\nfrom PIL import Image\nfrom flask import Flask, request, jsonify\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\napp = Flask(__name__)\n\nclass NSFWAnalyzer:\n    def __init__(self):\n        self.model_path = os.getenv('MODEL_PATH', '/models')\n        self.confidence_threshold = float(os.getenv('CONFIDENCE_THRESHOLD', '0.8'))\n        self.model = None\n        self.load_model()\n\n    def load_model(self):\n        \"\"\"Load NSFW detection model\"\"\"\n        try:\n            # Try to load pre-trained model\n            model_file = os.path.join(self.model_path, 'nsfw_mobilenet.h5')\n            if os.path.exists(model_file):\n                self.model = tf.keras.models.load_model(model_file)\n                logger.info(\"NSFW model loaded successfully\")\n            else:\n                logger.warning(\"NSFW model not found, using mock detection\")\n                self.model = None\n        except Exception as e:\n            logger.error(f\"Failed to load NSFW model: {e}\")\n            self.model = None\n\n    def preprocess_image(self, image_path):\n        \"\"\"Preprocess image for NSFW detection\"\"\"\n        try:\n            image = Image.open(image_path).convert('RGB')\n            image = image.resize((224, 224))\n            image_array = np.array(image) / 255.0\n            image_array = np.expand_dims(image_array, axis=0)\n            return image_array\n        except Exception as e:\n            logger.error(f\"Failed to preprocess image: {e}\")\n            return None\n\n    def detect_nsfw(self, image_path):\n        \"\"\"Detect NSFW content in image\"\"\"\n        if not self.model:\n            # Mock detection for development\n            return {\n                'is_nsfw': False,\n                'confidence': 0.1,\n                'categories': {\n                    'safe': 0.9,\n                    'suggestive': 0.05,\n                    'explicit': 0.05\n                }\n            }\n\n        try:\n            # Preprocess image\n            image_array = self.preprocess_image(image_path)\n            if image_array is None:\n                return None\n\n            # Run prediction\n            predictions = self.model.predict(image_array)\n\n            # Parse results (assuming model outputs probabilities for each category)\n            categories = {\n                'safe': float(predictions[0][0]),\n                'suggestive': float(predictions[0][1]),\n                'explicit': float(predictions[0][2])\n            }\n\n            # Determine if NSFW\n            nsfw_confidence = categories['suggestive'] + categories['explicit']\n            is_nsfw = nsfw_confidence > self.confidence_threshold\n\n            return {\n                'is_nsfw': is_nsfw,\n                'confidence': nsfw_confidence,\n                'categories': categories\n            }\n\n        except Exception as e:\n            logger.error(f\"NSFW detection failed: {e}\")\n            return None\n\n# Global analyzer instance\nanalyzer = NSFWAnalyzer()\n\n@app.route('/health', methods=['GET'])\ndef health_check():\n    return jsonify({'status': 'healthy', 'model_loaded': analyzer.model is not None})\n\n@app.route('/analyze', methods=['POST'])\ndef analyze_image():\n    \"\"\"Analyze image for NSFW content\"\"\"\n    try:\n        data = request.get_json()\n        image_path = data.get('image_path')\n\n        if not image_path or not os.path.exists(image_path):\n            return jsonify({'error': 'Invalid image path'}), 400\n\n        # Run NSFW detection\n        result = analyzer.detect_nsfw(image_path)\n\n        if result is None:\n            return jsonify({'error': 'Analysis failed'}), 500\n\n        return jsonify(result)\n\n    except Exception as e:\n        logger.error(f\"Analysis request failed: {e}\")\n        return jsonify({'error': 'Internal server error'}), 500\n\n@app.route('/batch-analyze', methods=['POST'])\ndef batch_analyze():\n    \"\"\"Analyze multiple images\"\"\"\n    try:\n        data = request.get_json()\n        image_paths = data.get('image_paths', [])\n\n        results = []\n        for image_path in image_paths:\n            if os.path.exists(image_path):\n                result = analyzer.detect_nsfw(image_path)\n                results.append({\n                    'image_path': image_path,\n                    'result': result\n                })\n            else:\n                results.append({\n                    'image_path': image_path,\n                    'error': 'File not found'\n                })\n\n        return jsonify({'results': results})\n\n    except Exception as e:\n        logger.error(f\"Batch analysis failed: {e}\")\n        return jsonify({'error': 'Internal server error'}), 500\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8501, debug=False)\n\n\n"
        },
        {
          "name": "Dockerfile",
          "type": "file",
          "path": "nsfw-analyzer/Dockerfile",
          "size": 0,
          "content": ""
        },
        {
          "name": "model_loader.py",
          "type": "file",
          "path": "nsfw-analyzer/model_loader.py",
          "size": 25,
          "content": "\"\"\"\nmodel_loader.py\n\"\"\"\n\n"
        },
        {
          "name": "requirements.txt",
          "type": "file",
          "path": "nsfw-analyzer/requirements.txt",
          "size": 93,
          "content": "tensorflow==2.13.0\npillow==10.1.0\nnumpy==1.24.3\nrequests==2.31.0\nflask==2.3.3\nwerkzeug==2.3.7"
        }
      ]
    },
    {
      "name": "photovault",
      "type": "directory",
      "path": "photovault",
      "children": [
        {
          "name": "accounts",
          "type": "directory",
          "path": "photovault/accounts",
          "children": [
            {
              "name": "migrations",
              "type": "directory",
              "path": "photovault/accounts/migrations",
              "children": [
                {
                  "name": "__init__.py",
                  "type": "file",
                  "path": "photovault/accounts/migrations/__init__.py",
                  "size": 0,
                  "content": ""
                }
              ]
            },
            {
              "name": "__init__.py",
              "type": "file",
              "path": "photovault/accounts/__init__.py",
              "size": 0,
              "content": ""
            },
            {
              "name": "admin.py",
              "type": "file",
              "path": "photovault/accounts/admin.py",
              "size": 1781,
              "content": "from django.contrib import admin\nfrom django.contrib.auth.admin import UserAdmin\nfrom django.utils.html import format_html\nfrom django.urls import reverse\nfrom django.utils.safestring import mark_safe\nfrom django.contrib.auth import get_user_model\nfrom .models import UserProfile, AuditLog\n\nUser = get_user_model()\n\n\nclass UserProfileInline(admin.StackedInline):\n    model = UserProfile\n    can_delete = False\n    verbose_name_plural = 'Profile'\n    fk_name = 'user'\n    readonly_fields = ('created_at', 'updated_at')\n\n\n@admin.register(User)\nclass CustomUserAdmin(UserAdmin):\n    list_display = ('email', 'first_name', 'last_name', 'is_staff', 'is_active')\n    list_filter = ('is_staff', 'is_active', 'is_partner', 'is_admin')\n    search_fields = ('email', 'first_name', 'last_name')\n    ordering = ('email',)\n    fieldsets = (\n        (None, {'fields': ('email', 'password')}),\n        ('Personal Info', {'fields': ('first_name', 'last_name')}),\n        ('Permissions', {\n            'fields': ('is_active', 'is_staff', 'is_superuser', 'is_partner', 'is_admin', 'groups', 'user_permissions'),\n        }),\n        ('Important dates', {'fields': ('last_login', 'date_joined')}),\n    )\n    add_fieldsets = (\n        (None, {\n            'classes': ('wide',),\n            'fields': ('email', 'password1', 'password2', 'is_staff', 'is_active')}\n        ),\n    )\n\n@admin.register(UserProfile)\nclass UserProfileAdmin(admin.ModelAdmin):\n    list_display = ('user', 'phone')\n    search_fields = ('user__email', 'phone')\n\n@admin.register(AuditLog)\nclass AuditLogAdmin(admin.ModelAdmin):\n    list_display = ('user', 'action', 'timestamp', 'ip_address')\n    list_filter = ('action', 'timestamp')\n    search_fields = ('user__email', 'action', 'ip_address')\n    readonly_fields = ('timestamp',)"
            },
            {
              "name": "apps.py",
              "type": "file",
              "path": "photovault/accounts/apps.py",
              "size": 148,
              "content": "from django.apps import AppConfig\n\n\nclass AccountsConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"accounts\"\n"
            },
            {
              "name": "models.py",
              "type": "file",
              "path": "photovault/accounts/models.py",
              "size": 4011,
              "content": "from django.contrib.auth.models import AbstractUser, BaseUserManager, Group, Permission\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\nfrom django.utils import timezone\n\n\nclass CustomUserManager(BaseUserManager):\n    \"\"\"Custom user model manager where email is the unique identifier.\"\"\"\n    \n    def create_user(self, email, password=None, **extra_fields):\n        \"\"\"Create and save a user with the given email and password.\"\"\"\n        if not email:\n            raise ValueError(_('The Email must be set'))\n        email = self.normalize_email(email)\n        user = self.model(email=email, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n\n    def create_superuser(self, email, password=None, **extra_fields):\n        \"\"\"Create and save a SuperUser with the given email and password.\"\"\"\n        extra_fields.setdefault('is_staff', True)\n        extra_fields.setdefault('is_superuser', True)\n        extra_fields.setdefault('is_active', True)\n\n        if extra_fields.get('is_staff') is not True:\n            raise ValueError(_('Superuser must have is_staff=True.'))\n        if extra_fields.get('is_superuser') is not True:\n            raise ValueError(_('Superuser must have is_superuser=True.'))\n        return self.create_user(email, password, **extra_fields)\n\n\nclass CustomUser(AbstractUser):\n    \"\"\"Custom user model that uses email as the unique identifier.\"\"\"\n    username = None\n    email = models.EmailField(_('email address'), unique=True)\n    first_name = models.CharField(_('first name'), max_length=150)\n    last_name = models.CharField(_('last name'), max_length=150)\n    is_partner = models.BooleanField(default=False)\n    is_admin = models.BooleanField(default=False)\n    date_joined = models.DateTimeField(default=timezone.now)\n    last_login = models.DateTimeField(blank=True, null=True)\n    \n    USERNAME_FIELD = 'email'\n    REQUIRED_FIELDS = ['first_name', 'last_name']\n    \n    objects = CustomUserManager()\n    \n    def __str__(self):\n        return self.email\n    \n    def get_full_name(self):\n        return f\"{self.first_name} {self.last_name}\"\n    \n    def has_perm(self, perm, obj=None):\n        \"\"\"Does the user have a specific permission?\"\"\"\n        return True\n    \n    def has_module_perms(self, app_label):\n        \"\"\"Does the user have permissions to view the app `app_label`?\"\"\"\n        return True\n    \n    class Meta:\n        verbose_name = _('user')\n        verbose_name_plural = _('users')\n\n\nclass UserProfile(models.Model):\n    \"\"\"Extended user profile information.\"\"\"\n    user = models.OneToOneField(CustomUser, on_delete=models.CASCADE, related_name='profile')\n    phone = models.CharField(max_length=20, blank=True, null=True)\n    address = models.TextField(blank=True, null=True)\n    profile_picture = models.ImageField(upload_to='profile_pics/', blank=True, null=True)\n    bio = models.TextField(blank=True, null=True)\n    \n    def __str__(self):\n        return f\"{self.user.email}'s Profile\"\n\n\nclass AuditLog(models.Model):\n    \"\"\"Model to track user actions for auditing.\"\"\"\n    ACTION_CHOICES = [\n        ('login', 'User Login'),\n        ('logout', 'User Logout'),\n        ('password_change', 'Password Changed'),\n        ('profile_update', 'Profile Updated'),\n        ('user_created', 'User Created'),\n        ('user_updated', 'User Updated'),\n        ('user_deleted', 'User Deleted'),\n    ]\n    \n    user = models.ForeignKey(CustomUser, on_delete=models.SET_NULL, null=True, blank=True)\n    action = models.CharField(max_length=50, choices=ACTION_CHOICES)\n    ip_address = models.GenericIPAddressField(blank=True, null=True)\n    user_agent = models.TextField(blank=True, null=True)\n    timestamp = models.DateTimeField(auto_now_add=True)\n    details = models.JSONField(blank=True, null=True)\n    \n    class Meta:\n        ordering = ['-timestamp']\n    \n    def __str__(self):\n        return f\"{self.get_action_display()} - {self.user.email if self.user else 'System'}\"\n"
            },
            {
              "name": "tests.py",
              "type": "file",
              "path": "photovault/accounts/tests.py",
              "size": 60,
              "content": "from django.test import TestCase\n\n# Create your tests here.\n"
            },
            {
              "name": "urls.py",
              "type": "file",
              "path": "photovault/accounts/urls.py",
              "size": 1664,
              "content": "from django.urls import path\nfrom django.contrib.auth import views as auth_views\nfrom . import views\nfrom .views import (\n    UserProfileView, UserProfileUpdateView, \n    UserPasswordChangeView, UserNotificationSettingsView,\n    UserActivityLogView, UserDeleteView\n)\n\napp_name = 'accounts'\n\nurlpatterns = [\n    # User profile\n    path('profile/', UserProfileView.as_view(), name='profile'),\n    path('profile/edit/', UserProfileUpdateView.as_view(), name='profile_edit'),\n    \n    # Authentication\n    path('login/', auth_views.LoginView.as_view(template_name='accounts/login.html'), name='login'),\n    path('logout/', auth_views.LogoutView.as_view(next_page='home'), name='logout'),\n    \n    # Password management\n    path('password/change/', UserPasswordChangeView.as_view(), name='password_change'),\n    path('password/change/done/', \n         auth_views.PasswordChangeDoneView.as_view(\n             template_name='accounts/password_change_done.html'\n         ), \n         name='password_change_done'\n    ),\n    \n    # Account settings\n    path('settings/notifications/', \n         UserNotificationSettingsView.as_view(), \n         name='notification_settings'\n    ),\n    path('settings/security/', views.SecuritySettingsView.as_view(), name='security_settings'),\n    \n    # Activity and audit logs\n    path('activity/', UserActivityLogView.as_view(), name='activity_log'),\n    \n    # Account deletion\n    path('delete/', UserDeleteView.as_view(), name='delete_account'),\n    \n    # API endpoints\n    path('api/profile/', views.ProfileAPIView.as_view(), name='api_profile'),\n    path('api/activity/', views.ActivityLogAPIView.as_view(), name='api_activity'),\n]\n"
            },
            {
              "name": "views.py",
              "type": "file",
              "path": "photovault/accounts/views.py",
              "size": 63,
              "content": "from django.shortcuts import render\n\n# Create your views here.\n"
            }
          ]
        },
        {
          "name": "admin_panel",
          "type": "directory",
          "path": "photovault/admin_panel",
          "children": [
            {
              "name": "migrations",
              "type": "directory",
              "path": "photovault/admin_panel/migrations",
              "children": [
                {
                  "name": "__init__.py",
                  "type": "file",
                  "path": "photovault/admin_panel/migrations/__init__.py",
                  "size": 0,
                  "content": ""
                }
              ]
            },
            {
              "name": "__init__.py",
              "type": "file",
              "path": "photovault/admin_panel/__init__.py",
              "size": 0,
              "content": ""
            },
            {
              "name": "admin.py",
              "type": "file",
              "path": "photovault/admin_panel/admin.py",
              "size": 2575,
              "content": "from django.contrib import admin\nfrom django.utils.html import format_html\nfrom .models import (\n    SystemSetting, SecurityEvent, ContentModeration, \n    AuditLogEntry, AdminNotification, SystemConfig, AuditLog\n)\n\n\n@admin.register(SystemSetting)\nclass SystemSettingAdmin(admin.ModelAdmin):\n    list_display = ('key', 'value_short', 'is_public', 'updated_at', 'updated_by')\n    list_filter = ('is_public', 'updated_at')\n    search_fields = ('key', 'value', 'description')\n    list_editable = ('is_public',)\n    readonly_fields = ('updated_at', 'updated_by')\n    \n    def value_short(self, obj):\n        return obj.value[:100] + '...' if len(obj.value) > 100 else obj.value\n    value_short.short_description = 'Value'\n    \n    def save_model(self, request, obj, form, change):\n        if not obj.pk:\n            obj.updated_by = request.user\n        super().save_model(request, obj, form, change)\n\n\n@admin.register(SecurityEvent)\nclass SecurityEventAdmin(admin.ModelAdmin):\n    list_display = ('event_type', 'user_display', 'ip_address', 'created_at')\n    list_filter = ('event_type', 'created_at')\n    search_fields = ('user__email', 'ip_address', 'details')\n    readonly_fields = ('created_at', 'details_formatted')\n    date_hierarchy = 'created_at'\n    \n    def user_display(self, obj):\n        return obj.user.email if obj.user else 'System'\n    user_display.short_description = 'User'\n    \n    def details_formatted(self, obj):\n        if not obj.details:\n            return \"No details available\"\n        return format_html('<pre>{}</pre>', str(obj.details))\n    details_formatted.short_description = 'Event Details'\n\n\nclass ContentModerationInline(admin.TabularInline):\n    model = ContentModeration\n    extra = 0\n    readonly_fields = ('created_at', 'updated_at', 'reported_by', 'reviewed_by')\n    can_delete = False\n\n\n@admin.register(ContentModeration)\nclass ContentModerationAdmin(admin.ModelAdmin):\n    list_display = ('content_type', 'object_id', 'status', 'moderated_by', 'moderated_at')\n    list_filter = ('status', 'content_type')\n    search_fields = ('object_id', 'moderated_by__email', 'notes')\n    readonly_fields = ('moderated_at',)\n    actions = ['approve_content', 'reject_content']\n\n    def approve_content(self, request, queryset):\n        queryset.update(status='approved', moderated_by=request.user)\n    approve_content.short_description = \"Approve selected content\"\n\n    def reject_content(self, request, queryset):\n        queryset.update(status='rejected', moderated_by=request.user)\n    reject_content.short_description = \"Reject selected content\""
            },
            {
              "name": "apps.py",
              "type": "file",
              "path": "photovault/admin_panel/apps.py",
              "size": 153,
              "content": "from django.apps import AppConfig\n\n\nclass AdminPanelConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"admin_panel\"\n"
            },
            {
              "name": "models.py",
              "type": "file",
              "path": "photovault/admin_panel/models.py",
              "size": 4964,
              "content": "from django.db import models\nfrom django.conf import settings\nfrom django.utils.translation import gettext_lazy as _\nfrom django.utils import timezone\nfrom accounts.models import CustomUser\n\n\nclass SystemSetting(models.Model):\n    \"\"\"System-wide settings and configurations.\"\"\"\n    key = models.CharField(max_length=100, unique=True)\n    value = models.TextField()\n    description = models.TextField(blank=True, null=True)\n    is_public = models.BooleanField(default=False)\n    updated_at = models.DateTimeField(auto_now=True)\n    updated_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True)\n    \n    def __str__(self):\n        return f\"{self.key}: {self.value[:50]}\"\n\n\nclass SecurityEvent(models.Model):\n    \"\"\"Track security-related events and potential threats.\"\"\"\n    EVENT_TYPES = [\n        ('login_attempt', 'Login Attempt'),\n        ('failed_login', 'Failed Login'),\n        ('password_reset', 'Password Reset'),\n        ('suspicious_activity', 'Suspicious Activity'),\n        ('brute_force', 'Brute Force Attempt'),\n        ('account_lockout', 'Account Lockout'),\n    ]\n    \n    event_type = models.CharField(max_length=50, choices=EVENT_TYPES)\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True)\n    ip_address = models.GenericIPAddressField()\n    user_agent = models.TextField(blank=True, null=True)\n    details = models.JSONField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    \n    class Meta:\n        ordering = ['-created_at']\n    \n    def __str__(self):\n        return f\"{self.get_event_type_display()} - {self.ip_address} - {self.created_at}\"\n\n\nclass ContentModeration(models.Model):\n    \"\"\"Track content that needs moderation.\"\"\"\n    STATUS_CHOICES = [\n        ('pending', 'Pending Review'),\n        ('approved', 'Approved'),\n        ('rejected', 'Rejected'),\n        ('flagged', 'Flagged for Review'),\n    ]\n    \n    content_type = models.CharField(max_length=100)  # e.g., 'photo', 'comment', 'user_profile'\n    content_id = models.PositiveIntegerField()\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')\n    reported_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True, related_name='reported_content')\n    reviewed_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True, related_name='moderated_content')\n    report_reason = models.TextField(blank=True, null=True)\n    moderator_notes = models.TextField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    class Meta:\n        ordering = ['-created_at']\n        unique_together = ['content_type', 'content_id']\n    \n    def __str__(self):\n        return f\"{self.content_type} #{self.content_id} - {self.get_status_display()}\"\n\n\nclass AuditLogEntry(models.Model):\n    \"\"\"Detailed audit log for admin actions.\"\"\"\n    ACTION_TYPES = [\n        ('create', 'Create'),\n        ('update', 'Update'),\n        ('delete', 'Delete'),\n        ('login', 'Login'),\n        ('logout', 'Logout'),\n        ('permission_change', 'Permission Change'),\n        ('setting_change', 'Setting Change'),\n    ]\n    \n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True)\n    action = models.CharField(max_length=50, choices=ACTION_TYPES)\n    model = models.CharField(max_length=100)\n    object_id = models.CharField(max_length=100, blank=True, null=True)\n    changes = models.JSONField(blank=True, null=True)\n    ip_address = models.GenericIPAddressField(blank=True, null=True)\n    user_agent = models.TextField(blank=True, null=True)\n    timestamp = models.DateTimeField(auto_now_add=True)\n    \n    class Meta:\n        ordering = ['-timestamp']\n        verbose_name_plural = 'Audit Log Entries'\n    \n    def __str__(self):\n        return f\"{self.get_action_display()} {self.model} by {self.user}\"\n\n\nclass AdminNotification(models.Model):\n    \"\"\"Notifications for admin users.\"\"\"\n    NOTIFICATION_TYPES = [\n        ('system_alert', 'System Alert'),\n        ('user_report', 'User Report'),\n        ('content_flagged', 'Content Flagged'),\n        ('security_alert', 'Security Alert'),\n        ('system_update', 'System Update'),\n    ]\n    \n    notification_type = models.CharField(max_length=50, choices=NOTIFICATION_TYPES)\n    title = models.CharField(max_length=200)\n    message = models.TextField()\n    is_read = models.BooleanField(default=False)\n    related_content_type = models.CharField(max_length=100, blank=True, null=True)\n    related_object_id = models.PositiveIntegerField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    \n    class Meta:\n        ordering = ['-created_at']\n    \n    def __str__(self):\n        return f\"{self.get_notification_type_display()}: {self.title}\"\n"
            },
            {
              "name": "tests.py",
              "type": "file",
              "path": "photovault/admin_panel/tests.py",
              "size": 60,
              "content": "from django.test import TestCase\n\n# Create your tests here.\n"
            },
            {
              "name": "urls.py",
              "type": "file",
              "path": "photovault/admin_panel/urls.py",
              "size": 2020,
              "content": "from django.urls import path\nfrom . import views\nfrom .views import (\n    DashboardView, UserListView, UserDetailView, UserCreateView, UserUpdateView,\n    SystemSettingsView, SecurityLogsView, ContentModerationView, AuditLogsView,\n    AnalyticsDashboardView, SystemHealthView, BackupRestoreView\n)\n\napp_name = 'admin_panel'\n\nurlpatterns = [\n    # Dashboard\n    path('', DashboardView.as_view(), name='dashboard'),\n    \n    # User Management\n    path('users/', UserListView.as_view(), name='user_list'),\n    path('users/create/', UserCreateView.as_view(), name='user_create'),\n    path('users/<int:pk>/', UserDetailView.as_view(), name='user_detail'),\n    path('users/<int:pk>/edit/', UserUpdateView.as_view(), name='user_edit'),\n    \n    # System Settings\n    path('settings/', SystemSettingsView.as_view(), name='system_settings'),\n    \n    # Security\n    path('security/logs/', SecurityLogsView.as_view(), name='security_logs'),\n    \n    # Content Moderation\n    path('moderation/', ContentModerationView.as_view(), name='content_moderation'),\n    path('moderation/<int:pk>/review/', \n         views.ReviewContent.as_view(), \n         name='review_content'\n    ),\n    \n    # Audit Logs\n    path('audit-logs/', AuditLogsView.as_view(), name='audit_logs'),\n    \n    # Analytics\n    path('analytics/', AnalyticsDashboardView.as_view(), name='analytics'),\n    \n    # System Health\n    path('system/health/', SystemHealthView.as_view(), name='system_health'),\n    \n    # Backup & Restore\n    path('backup/', BackupRestoreView.as_view(), name='backup_restore'),\n    \n    # API Endpoints\n    path('api/users/', views.UserListAPIView.as_view(), name='api_users'),\n    path('api/users/<int:pk>/', views.UserDetailAPIView.as_view(), name='api_user_detail'),\n    path('api/security-events/', views.SecurityEventAPIView.as_view(), name='api_security_events'),\n    path('api/audit-logs/', views.AuditLogAPIView.as_view(), name='api_audit_logs'),\n    path('api/analytics/', views.AnalyticsAPIView.as_view(), name='api_analytics'),\n]\n"
            },
            {
              "name": "views.py",
              "type": "file",
              "path": "photovault/admin_panel/views.py",
              "size": 63,
              "content": "from django.shortcuts import render\n\n# Create your views here.\n"
            }
          ]
        },
        {
          "name": "core",
          "type": "directory",
          "path": "photovault/core",
          "children": [
            {
              "name": "migrations",
              "type": "directory",
              "path": "photovault/core/migrations",
              "children": [
                {
                  "name": "__init__.py",
                  "type": "file",
                  "path": "photovault/core/migrations/__init__.py",
                  "size": 0,
                  "content": ""
                }
              ]
            },
            {
              "name": "__init__.py",
              "type": "file",
              "path": "photovault/core/__init__.py",
              "size": 0,
              "content": ""
            },
            {
              "name": "admin.py",
              "type": "file",
              "path": "photovault/core/admin.py",
              "size": 7210,
              "content": "from django.contrib import admin\nfrom django.utils.html import format_html\nfrom django.urls import reverse\nfrom django.utils.safestring import mark_safe\nfrom django.conf import settings\nfrom .models import (\n    ActivityLog, SystemSetting, FileUpload, Notification\n)\n\n\n@admin.register(ActivityLog)\nclass ActivityLogAdmin(admin.ModelAdmin):\n    list_display = ('action', 'user_display', 'ip_address', 'created_at')\n    list_filter = ('action', 'created_at')\n    search_fields = ('user__email', 'ip_address', 'action')\n    readonly_fields = ('created_at', 'updated_at', 'details_formatted')\n    date_hierarchy = 'created_at'\n    \n    def user_display(self, obj):\n        if obj.user:\n            url = reverse('admin:accounts_customuser_change', args=[obj.user.id])\n            return mark_safe(f'<a href=\"{url}\">{obj.user.email}</a>')\n        return 'System'\n    user_display.short_description = 'User'\n    \n    def details_formatted(self, obj):\n        if not obj.details:\n            return \"No details available\"\n        return format_html('<pre>{}</pre>', str(obj.details))\n    details_formatted.short_description = 'Details'\n    \n    def has_add_permission(self, request):\n        return False\n    \n    def has_change_permission(self, request, obj=None):\n        return False\n\n\n@admin.register(SystemSetting)\nclass SystemSettingAdmin(admin.ModelAdmin):\n    list_display = ('key', 'value_short', 'setting_type', 'is_public', 'updated_at')\n    list_filter = ('setting_type', 'is_public')\n    search_fields = ('key', 'value', 'description')\n    list_editable = ('is_public',)\n    readonly_fields = ('created_at', 'updated_at', 'updated_by_display', 'value_type_info')\n    fieldsets = (\n        ('Basic Information', {\n            'fields': ('key', 'description', 'is_public')\n        }),\n        ('Value', {\n            'fields': ('setting_type', 'value', 'value_type_info')\n        }),\n        ('Metadata', {\n            'fields': ('updated_by_display', 'created_at', 'updated_at'),\n            'classes': ('collapse',)\n        }),\n    )\n    \n    def value_short(self, obj):\n        value = str(obj.value)\n        return value[:100] + '...' if len(value) > 100 else value\n    value_short.short_description = 'Value'\n    \n    def updated_by_display(self, obj):\n        if obj.updated_by:\n            url = reverse('admin:accounts_customuser_change', args=[obj.updated_by.id])\n            return mark_safe(f'<a href=\"{url}\">{obj.updated_by.email}</a>')\n        return 'System'\n    updated_by_display.short_description = 'Updated By'\n    \n    def value_type_info(self, obj):\n        if obj.setting_type == 'boolean':\n            return \"Enter 'true' or 'false' (case insensitive)\"\n        elif obj.setting_type == 'integer':\n            return \"Enter a whole number\"\n        elif obj.setting_type == 'json':\n            return \"Enter valid JSON (e.g., {\\\"key\\\": \\\"value\\\"})\"\n        return \"Text value\"\n    value_type_info.short_description = 'Format Hint'\n    \n    def save_model(self, request, obj, form, change):\n        if not obj.pk:\n            obj.updated_by = request.user\n        super().save_model(request, obj, form, change)\n\n\n@admin.register(FileUpload)\nclass FileUploadAdmin(admin.ModelAdmin):\n    list_display = ('preview_thumbnail', 'original_filename', 'file_type', 'user_display', 'file_size_display', 'created_at')\n    list_filter = ('file_type', 'created_at')\n    search_fields = ('original_filename', 'user__email')\n    readonly_fields = ('created_at', 'updated_at', 'preview_large', 'file_size_display', 'metadata_formatted')\n    list_select_related = ('user',)\n    \n    fieldsets = (\n        ('File Information', {\n            'fields': ('preview_large', 'original_filename', 'file', 'file_type', 'is_public')\n        }),\n        ('Metadata', {\n            'fields': ('mime_type', 'file_size_display', 'metadata_formatted'),\n            'classes': ('collapse',)\n        }),\n        ('Ownership', {\n            'fields': ('user',)\n        }),\n        ('Timestamps', {\n            'fields': ('created_at', 'updated_at'),\n            'classes': ('collapse',)\n        }),\n    )\n    \n    def preview_thumbnail(self, obj):\n        if obj.file and obj.file_type == 'image':\n            return mark_safe(f'<img src=\"{obj.file.url}\" style=\"max-height: 50px; max-width: 50px;\" />')\n        return \"\"\n    preview_thumbnail.short_description = 'Preview'\n    \n    def preview_large(self, obj):\n        if obj.file and obj.file_type == 'image':\n            return mark_safe(f'<img src=\"{obj.file.url}\" style=\"max-height: 300px; max-width: 100%;\" />')\n        return \"No preview available\"\n    preview_large.short_description = 'Preview'\n    \n    def file_size_display(self, obj):\n        return obj.get_file_size_display()\n    file_size_display.short_description = 'File Size'\n    \n    def user_display(self, obj):\n        if obj.user:\n            url = reverse('admin:accounts_customuser_change', args=[obj.user.id])\n            return mark_safe(f'<a href=\"{url}\">{obj.user.email}</a>')\n        return 'System'\n    user_display.short_description = 'User'\n    \n    def metadata_formatted(self, obj):\n        if not obj.metadata:\n            return \"No metadata available\"\n        return format_html('<pre>{}</pre>', str(obj.metadata))\n    metadata_formatted.short_description = 'Metadata'\n\n\n@admin.register(Notification)\nclass NotificationAdmin(admin.ModelAdmin):\n    list_display = ('title', 'user_display', 'notification_type', 'is_read', 'created_at')\n    list_filter = ('notification_type', 'is_read', 'created_at')\n    search_fields = ('title', 'message', 'user__email')\n    list_editable = ('is_read',)\n    readonly_fields = ('created_at', 'updated_at', 'read_at_display')\n    actions = ['mark_as_read', 'mark_as_unread']\n    \n    fieldsets = (\n        ('Notification', {\n            'fields': ('user', 'title', 'message', 'notification_type')\n        }),\n        ('Actions', {\n            'fields': ('is_read', 'read_at_display', 'action_url', 'action_text')\n        }),\n        ('Timestamps', {\n            'fields': ('created_at', 'updated_at'),\n            'classes': ('collapse',)\n        }),\n    )\n    \n    def user_display(self, obj):\n        url = reverse('admin:accounts_customuser_change', args=[obj.user.id])\n        return mark_safe(f'<a href=\"{url}\">{obj.user.email}</a>')\n    user_display.short_description = 'User'\n    \n    def read_at_display(self, obj):\n        if obj.read_at:\n            return obj.read_at.strftime('%Y-%m-%d %H:%M:%S')\n        return 'Not read'\n    read_at_display.short_description = 'Read At'\n    \n    def mark_as_read(self, request, queryset):\n        updated = queryset.update(is_read=True, read_at=timezone.now())\n        self.message_user(request, f\"Marked {updated} notifications as read.\")\n    mark_as_read.short_description = \"Mark selected notifications as read\"\n    \n    def mark_as_unread(self, request, queryset):\n        updated = queryset.update(is_read=False, read_at=None)\n        self.message_user(request, f\"Marked {updated} notifications as unread.\")\n    mark_as_unread.short_description = \"Mark selected notifications as unread\"\n    \n    def get_queryset(self, request):\n        return super().get_queryset(request).select_related('user')\n"
            },
            {
              "name": "apps.py",
              "type": "file",
              "path": "photovault/core/apps.py",
              "size": 140,
              "content": "from django.apps import AppConfig\n\n\nclass CoreConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"core\"\n"
            },
            {
              "name": "models.py",
              "type": "file",
              "path": "photovault/core/models.py",
              "size": 6208,
              "content": "from django.db import models\nfrom django.conf import settings\nfrom django.utils import timezone\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass TimeStampedModel(models.Model):\n    \"\"\"Abstract base class with self-updating created and modified fields.\"\"\"\n    created_at = models.DateTimeField(auto_now_add=True, db_index=True)\n    updated_at = models.DateTimeField(auto_now=True, db_index=True)\n\n    class Meta:\n        abstract = True\n        ordering = ['-created_at']\n\n\nclass ActivityLog(TimeStampedModel):\n    \"\"\"System-wide activity log\"\"\"\n    ACTION_TYPES = [\n        ('login', 'User Login'),\n        ('logout', 'User Logout'),\n        ('password_change', 'Password Changed'),\n        ('profile_update', 'Profile Updated'),\n        ('content_create', 'Content Created'),\n        ('content_update', 'Content Updated'),\n        ('content_delete', 'Content Deleted'),\n        ('settings_update', 'Settings Updated'),\n    ]\n    \n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True)\n    action = models.CharField(max_length=50, choices=ACTION_TYPES)\n    ip_address = models.GenericIPAddressField(blank=True, null=True)\n    user_agent = models.TextField(blank=True, null=True)\n    details = models.JSONField(blank=True, null=True)\n    \n    class Meta:\n        verbose_name = _('Activity Log')\n        verbose_name_plural = _('Activity Logs')\n        ordering = ['-created_at']\n    \n    def __str__(self):\n        return f\"{self.get_action_display()} - {self.user or 'System'}\"\n\n\nclass SystemSetting(TimeStampedModel):\n    \"\"\"System-wide settings and configurations\"\"\"\n    SETTING_TYPES = [\n        ('string', 'String'),\n        ('integer', 'Integer'),\n        ('boolean', 'Boolean'),\n        ('json', 'JSON'),\n    ]\n    \n    key = models.CharField(max_length=100, unique=True, help_text=\"Setting key (snake_case)\")\n    value = models.TextField(blank=True, null=True, help_text=\"Setting value\")\n    setting_type = models.CharField(max_length=20, choices=SETTING_TYPES, default='string')\n    is_public = models.BooleanField(default=False, help_text=\"If True, this setting can be exposed via API\")\n    description = models.TextField(blank=True, null=True, help_text=\"Description of the setting\")\n    updated_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True, \n                                 related_name='updated_settings')\n    \n    class Meta:\n        verbose_name = _('System Setting')\n        verbose_name_plural = _('System Settings')\n        ordering = ['key']\n    \n    def __str__(self):\n        return f\"{self.key}: {self.value}\"\n    \n    def get_typed_value(self):\n        \"\"\"Return the value cast to the appropriate type\"\"\"\n        if not self.value:\n            return None\n            \n        if self.setting_type == 'integer':\n            try:\n                return int(self.value)\n            except (ValueError, TypeError):\n                return 0\n        elif self.setting_type == 'boolean':\n            return self.value.lower() in ('true', '1', 't', 'y', 'yes')\n        elif self.setting_type == 'json':\n            import json\n            try:\n                return json.loads(self.value)\n            except (json.JSONDecodeError, TypeError):\n                return {}\n        return self.value\n\n\nclass FileUpload(TimeStampedModel):\n    \"\"\"Generic file upload model\"\"\"\n    UPLOAD_TYPES = [\n        ('image', 'Image'),\n        ('document', 'Document'),\n        ('video', 'Video'),\n        ('audio', 'Audio'),\n        ('other', 'Other'),\n    ]\n    \n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True)\n    file = models.FileField(upload_to='uploads/%Y/%m/%d/')\n    file_type = models.CharField(max_length=20, choices=UPLOAD_TYPES)\n    original_filename = models.CharField(max_length=255)\n    mime_type = models.CharField(max_length=100, blank=True, null=True)\n    file_size = models.PositiveIntegerField(help_text=\"File size in bytes\")\n    is_public = models.BooleanField(default=False)\n    metadata = models.JSONField(blank=True, null=True)\n    \n    class Meta:\n        verbose_name = _('File Upload')\n        verbose_name_plural = _('File Uploads')\n        ordering = ['-created_at']\n    \n    def __str__(self):\n        return self.original_filename\n    \n    def get_file_size_display(self):\n        \"\"\"Return human-readable file size\"\"\"\n        if self.file_size < 1024:\n            return f\"{self.file_size} B\"\n        elif self.file_size < 1024 * 1024:\n            return f\"{self.file_size / 1024:.1f} KB\"\n        elif self.file_size < 1024 * 1024 * 1024:\n            return f\"{self.file_size / (1024 * 1024):.1f} MB\"\n        return f\"{self.file_size / (1024 * 1024 * 1024):.1f} GB\"\n    \n    def get_absolute_url(self):\n        return self.file.url if self.file else ''\n\n\nclass Notification(TimeStampedModel):\n    \"\"\"System notifications for users\"\"\"\n    NOTIFICATION_TYPES = [\n        ('info', 'Information'),\n        ('success', 'Success'),\n        ('warning', 'Warning'),\n        ('error', 'Error'),\n        ('system', 'System'),\n    ]\n    \n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='notifications')\n    notification_type = models.CharField(max_length=20, choices=NOTIFICATION_TYPES, default='info')\n    title = models.CharField(max_length=200)\n    message = models.TextField()\n    is_read = models.BooleanField(default=False)\n    read_at = models.DateTimeField(blank=True, null=True)\n    action_url = models.URLField(blank=True, null=True)\n    action_text = models.CharField(max_length=100, blank=True, null=True)\n    \n    class Meta:\n        verbose_name = _('Notification')\n        verbose_name_plural = _('Notifications')\n        ordering = ['-created_at']\n    \n    def __str__(self):\n        return f\"{self.get_notification_type_display()}: {self.title}\"\n    \n    def mark_as_read(self, commit=True):\n        self.is_read = True\n        self.read_at = timezone.now()\n        if commit:\n            self.save()\n    \n    def mark_as_unread(self, commit=True):\n        self.is_read = False\n        self.read_at = None\n        if commit:\n            self.save()\n"
            },
            {
              "name": "tests.py",
              "type": "file",
              "path": "photovault/core/tests.py",
              "size": 60,
              "content": "from django.test import TestCase\n\n# Create your tests here.\n"
            },
            {
              "name": "views.py",
              "type": "file",
              "path": "photovault/core/views.py",
              "size": 63,
              "content": "from django.shortcuts import render\n\n# Create your views here.\n"
            }
          ]
        },
        {
          "name": "partner_panel",
          "type": "directory",
          "path": "photovault/partner_panel",
          "children": [
            {
              "name": "migrations",
              "type": "directory",
              "path": "photovault/partner_panel/migrations",
              "children": [
                {
                  "name": "__init__.py",
                  "type": "file",
                  "path": "photovault/partner_panel/migrations/__init__.py",
                  "size": 0,
                  "content": ""
                }
              ]
            },
            {
              "name": "__init__.py",
              "type": "file",
              "path": "photovault/partner_panel/__init__.py",
              "size": 0,
              "content": ""
            },
            {
              "name": "admin.py",
              "type": "file",
              "path": "photovault/partner_panel/admin.py",
              "size": 2294,
              "content": "from django.contrib import admin\nfrom django.utils.html import format_html\nfrom django.urls import reverse\nfrom django.utils.safestring import mark_safe\nfrom .models import (\n    PhotoBatch, Photo, PhotoShare, PhotoAccessLog, \n    PhotoCollection, PhotoComment\n)\n\n\nclass PhotoInline(admin.TabularInline):\n    model = Photo\n    extra = 0\n    readonly_fields = ('preview_thumbnail', 'file_size_display', 'status')\n    fields = ('preview_thumbnail', 'title', 'status', 'is_featured', 'created_at')\n    \n    def preview_thumbnail(self, obj):\n        if obj.image:\n            return mark_safe(f'<img src=\"{obj.image.url}\" style=\"max-height: 100px; max-width: 100px;\" />')\n        return \"No Image\"\n    preview_thumbnail.short_description = 'Preview'\n    \n    def file_size_display(self, obj):\n        if obj.file_size < 1024:\n            return f\"{obj.file_size} B\"\n        elif obj.file_size < 1024 * 1024:\n            return f\"{obj.file_size / 1024:.1f} KB\"\n        return f\"{obj.file_size / (1024 * 1024):.1f} MB\"\n    file_size_display.short_description = 'File Size'\n    \n    def has_change_permission(self, request, obj=None):\n        return False\n\n\n@admin.register(PhotoBatch)\nclass PhotoBatchAdmin(admin.ModelAdmin):\n    list_display = ('id', 'user', 'created_at', 'status')\n    list_filter = ('status', 'created_at')\n    search_fields = ('user__email', 'id')\n    inlines = [PhotoInline]\n    readonly_fields = ('created_at', 'updated_at')\n\n@admin.register(Photo)\nclass PhotoAdmin(admin.ModelAdmin):\n    list_display = ('id', 'batch', 'user', 'created_at', 'is_approved')\n    list_filter = ('is_approved', 'created_at')\n    search_fields = ('description', 'user__email', 'batch__id')\n    readonly_fields = ('created_at', 'updated_at')\n    list_editable = ('is_approved',)\n\n@admin.register(PhotoShare)\nclass PhotoShareAdmin(admin.ModelAdmin):\n    list_display = ('id', 'photo', 'shared_by', 'shared_with', 'can_edit', 'created_at')\n    list_filter = ('can_edit', 'created_at')\n    search_fields = ('photo__id', 'shared_by__email', 'shared_with__email')\n\n@admin.register(PhotoAccess)\nclass PhotoAccessAdmin(admin.ModelAdmin):\n    list_display = ('id', 'user', 'photo', 'access_type', 'granted_at')\n    list_filter = ('access_type', 'granted_at')\n    search_fields = ('user__email', 'photo__id')"
            },
            {
              "name": "apps.py",
              "type": "file",
              "path": "photovault/partner_panel/apps.py",
              "size": 157,
              "content": "from django.apps import AppConfig\n\n\nclass PartnerPanelConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"partner_panel\"\n"
            },
            {
              "name": "models.py",
              "type": "file",
              "path": "photovault/partner_panel/models.py",
              "size": 1046,
              "content": "from django.db import models\nfrom django.conf import settings\nfrom django.utils import timezone\nfrom django.utils.translation import gettext_lazy as _\nfrom django.core.validators import FileExtensionValidator\nimport os\nimport uuid\n\ndef photo_upload_path(instance, filename):\n    \"\"\"Generate upload path for photos\"\"\"\n    ext = filename.split('.')[-1]\n    filename = f\"{uuid.uuid4()}.{ext}\"\n    return f\"photos/{instance.user.id}/{filename}\"\n\n\nclass PhotoBatch(models.Model):\n    \"\"\"Batch of photos uploaded together\"\"\"\n    STATUS_CHOICES = [\n        ('draft', 'Draft'),\n        ('uploading', 'Uploading'),\n        ('processing', 'Processing'),\n        ('completed', 'Completed'),\n        ('processed', 'Processed'),\n        ('failed', 'Failed'),\n    ]\n    \n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='uploading')\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n        "
            },
            {
              "name": "tests.py",
              "type": "file",
              "path": "photovault/partner_panel/tests.py",
              "size": 60,
              "content": "from django.test import TestCase\n\n# Create your tests here.\n"
            },
            {
              "name": "urls.py",
              "type": "file",
              "path": "photovault/partner_panel/urls.py",
              "size": 2357,
              "content": "from django.urls import path\nfrom . import views\nfrom .views import (\n    PartnerDashboardView, PhotoBatchListView, PhotoBatchCreateView,\n    PhotoBatchDetailView, PhotoBatchUpdateView, PhotoUploadView,\n    PhotoEditView, BatchShareView, BatchAnalyticsView, BatchExportView,\n    BatchSettingsView, BatchMetadataView, BatchActionsView, BatchShareSettingsView\n)\n\napp_name = 'partner_panel'\n\nurlpatterns = [\n    # Dashboard\n    path('', PartnerDashboardView.as_view(), name='dashboard'),\n    \n    # Photo Batches\n    path('batches/', PhotoBatchListView.as_view(), name='batch_list'),\n    path('batches/create/', PhotoBatchCreateView.as_view(), name='batch_create'),\n    path('batches/<int:pk>/', PhotoBatchDetailView.as_view(), name='batch_detail'),\n    path('batches/<int:pk>/edit/', PhotoBatchUpdateView.as_view(), name='batch_edit'),\n    path('batches/<int:pk>/upload/', PhotoUploadView.as_view(), name='batch_upload'),\n    \n    # Batch Actions\n    path('batches/<int:pk>/share/', BatchShareView.as_view(), name='batch_share'),\n    path('batches/<int:pk>/analytics/', BatchAnalyticsView.as_view(), name='batch_analytics'),\n    path('batches/<int:pk>/export/', BatchExportView.as_view(), name='batch_export'),\n    path('batches/<int:pk>/settings/', BatchSettingsView.as_view(), name='batch_settings'),\n    path('batches/<int:pk>/metadata/', BatchMetadataView.as_view(), name='batch_metadata'),\n    path('batches/<int:pk>/actions/', BatchActionsView.as_view(), name='batch_actions'),\n    path('batches/<int:pk>/share-settings/', \n         BatchShareSettingsView.as_view(), \n         name='batch_share_settings'\n    ),\n    \n    # Photos\n    path('photos/<int:pk>/edit/', PhotoEditView.as_view(), name='photo_edit'),\n    \n    # API Endpoints\n    path('api/batches/', views.BatchListAPIView.as_view(), name='api_batch_list'),\n    path('api/batches/<int:pk>/', views.BatchDetailAPIView.as_view(), name='api_batch_detail'),\n    path('api/batches/<int:batch_id>/photos/', views.PhotoListAPIView.as_view(), name='api_photo_list'),\n    path('api/batches/<int:batch_id>/photos/<int:pk>/', \n         views.PhotoDetailAPIView.as_view(), \n         name='api_photo_detail'\n    ),\n    path('api/shared-links/', views.SharedLinkAPIView.as_view(), name='api_shared_links'),\n    path('api/analytics/', views.PartnerAnalyticsAPIView.as_view(), name='api_partner_analytics'),\n]\n"
            },
            {
              "name": "views.py",
              "type": "file",
              "path": "photovault/partner_panel/views.py",
              "size": 63,
              "content": "from django.shortcuts import render\n\n# Create your views here.\n"
            }
          ]
        },
        {
          "name": "photovault",
          "type": "directory",
          "path": "photovault/photovault",
          "children": [
            {
              "name": "__init__.py",
              "type": "file",
              "path": "photovault/photovault/__init__.py",
              "size": 0,
              "content": ""
            },
            {
              "name": "asgi.py",
              "type": "file",
              "path": "photovault/photovault/asgi.py",
              "size": 397,
              "content": "\"\"\"\nASGI config for photovault project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/4.2/howto/deployment/asgi/\n\"\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"photovault.settings\")\n\napplication = get_asgi_application()\n"
            },
            {
              "name": "settings.py",
              "type": "file",
              "path": "photovault/photovault/settings.py",
              "size": 7425,
              "content": "\"\"\"\nDjango settings for photovault project.\n\nGenerated by 'django-admin startproject' using Django 4.2.4.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/4.2/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/4.2/ref/settings/\n\"\"\"\n\nfrom pathlib import Path\nimport os\nfrom datetime import timedelta\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-your-secret-key-here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'django.contrib.sites',\n    \n    # Third-party apps\n    'crispy_forms',\n    'crispy_bootstrap5',\n    'django_filters',\n    'django_tables2',\n    'widget_tweaks',\n    'allauth',\n    'allauth.account',\n    'allauth.socialaccount',\n    \n    # Local apps\n    'accounts.apps.AccountsConfig',\n    'admin_panel.apps.AdminPanelConfig',\n    'partner_panel.apps.PartnerPanelConfig',\n    'core.apps.CoreConfig',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'allauth.account.middleware.AccountMiddleware',\n]\n\nROOT_URLCONF = 'photovault.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n                'django.template.context_processors.request',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'photovault.wsgi.application'\n\n# Database\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n\n# Media files\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\n# Authentication\nAUTH_USER_MODEL = 'accounts.CustomUser'\nLOGIN_REDIRECT_URL = 'home'\nLOGOUT_REDIRECT_URL = 'home'\nLOGIN_URL = 'account_login'\n\n# Crispy Forms\nCRISPY_ALLOWED_TEMPLATE_PACKS = 'bootstrap5'\nCRISPY_TEMPLATE_PACK = 'bootstrap5'\n\n# Django AllAuth Settings\nAUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',\n    'allauth.account.auth_backends.AuthenticationBackend',\n)\n\nSITE_ID = 1\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_USERNAME_REQUIRED = False\nACCOUNT_AUTHENTICATION_METHOD = 'email'\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'\nACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = True\nACCOUNT_SESSION_REMEMBER = True\n\n# Email settings (for development)\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\n\n# File upload settings\nFILE_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10MB\nDATA_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10MB\n\n# Security settings (for development, update for production)\nSESSION_COOKIE_SECURE = False\nCSRF_COOKIE_SECURE = False\nSECURE_SSL_REDIRECT = False\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = \"django-insecure-lpala*z1(+_de+jra&hv37yx3%*$%k_t&lhcgzv51sz0td+1%(\"\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n]\n\nMIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n]\n\nROOT_URLCONF = \"photovault.urls\"\n\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.contrib.messages.context_processors.messages\",\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = \"photovault.wsgi.application\"\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.NumericPasswordValidator\",\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = \"en-us\"\n\nTIME_ZONE = \"UTC\"\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = \"static/\"\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n"
            },
            {
              "name": "urls.py",
              "type": "file",
              "path": "photovault/photovault/urls.py",
              "size": 2014,
              "content": "\"\"\"\nURL configuration for photovault URL Configuration\n\"\"\"\nfrom django.conf import settings\nfrom django.conf.urls.static import static\nfrom django.contrib import admin\nfrom django.urls import path, include\nfrom django.views.generic import TemplateView\nfrom django.contrib.auth import views as auth_views\n\n# Admin site customization\nadmin.site.site_header = 'PhotoVault Administration'\nadmin.site.site_title = 'PhotoVault Admin'\nadmin.site.index_title = 'Welcome to PhotoVault Admin'\n\nurlpatterns = [\n    # Admin URLs\n    path('admin/', admin.site.urls),\n    \n    # Authentication URLs (using Django Allauth)\n    path('accounts/', include('allauth.urls')),\n    \n    # Custom account URLs\n    path('accounts/', include('accounts.urls')),\n    \n    # Admin Panel URLs\n    path('admin-panel/', include('admin_panel.urls', namespace='admin_panel')),\n    \n    # Partner Panel URLs\n    path('partner/', include('partner_panel.urls', namespace='partner')),\n    \n    # Core URLs (API, etc.)\n    path('api/', include('core.api.urls', namespace='api')),\n    \n    # Home page\n    path('', TemplateView.as_view(template_name='home.html'), name='home'),\n    \n    # Password reset URLs (if not using Allauth's)\n    path('password_reset/', auth_views.PasswordResetView.as_view(), name='password_reset'),\n    path('password_reset/done/', auth_views.PasswordResetDoneView.as_view(), name='password_reset_done'),\n    path('reset/<uidb64>/<token>/', auth_views.PasswordResetConfirmView.as_view(), name='password_reset_confirm'),\n    path('reset/done/', auth_views.PasswordResetCompleteView.as_view(), name='password_reset_complete'),\n]\n\n# Serve media files in development\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\n\n# Add debug toolbar if in development\nif settings.DEBUG:\n    import debug_toolbar\n    urlpatterns = [\n        path('__debug__/', include(debug_toolbar.urls)),\n    ] + urlpatterns\n"
            },
            {
              "name": "wsgi.py",
              "type": "file",
              "path": "photovault/photovault/wsgi.py",
              "size": 397,
              "content": "\"\"\"\nWSGI config for photovault project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"photovault.settings\")\n\napplication = get_wsgi_application()\n"
            }
          ]
        },
        {
          "name": "manage.py",
          "type": "file",
          "path": "photovault/manage.py",
          "size": 666,
          "content": "#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"photovault.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == \"__main__\":\n    main()\n"
        }
      ]
    },
    {
      "name": "processing",
      "type": "directory",
      "path": "processing",
      "children": []
    },
    {
      "name": "scripts",
      "type": "directory",
      "path": "scripts",
      "children": [
        {
          "name": "automation",
          "type": "directory",
          "path": "scripts/automation",
          "children": [
            {
              "name": "auto-scaling.sh",
              "type": "file",
              "path": "scripts/automation/auto-scaling.sh",
              "size": 0,
              "content": ""
            },
            {
              "name": "incident-handler.sh",
              "type": "file",
              "path": "scripts/automation/incident-handler.sh",
              "size": 4917,
              "content": "#!/bin/bash\n\n# Automated Incident Response Handler\nPROMETHEUS_URL=\"http://prometheus:9090\"\nALERTMANAGER_URL=\"http://alertmanager:9093\"\n\n# Get active alerts\nget_alerts() {\n    curl -s \"$ALERTMANAGER_URL/api/v1/alerts\" | jq -r '.data[] | select(.status.state == \"active\")'\n}\n\n# Handle service down alert\nhandle_service_down() {\n    local service=$1\n    echo \"🚨 Handling service down: $service\"\n\n    # Try automatic restart\n    docker restart \"$service\" 2>/dev/null\n\n    # Wait and check if service is back up\n    sleep 30\n    if docker ps | grep -q \"$service.*Up\"; then\n        send_notification \"✅ Service $service automatically recovered\"\n        return 0\n    else\n        send_notification \"❌ Service $service failed to restart - manual intervention required\"\n        return 1\n    fi\n}\n\n# Handle high resource usage\nhandle_high_resource_usage() {\n    local resource=$1\n    local threshold=$2\n\n    echo \"⚠️ Handling high $resource usage: $threshold%\"\n\n    case $resource in\n        \"memory\")\n            # Clear system caches\n            sync && echo 3 > /proc/sys/vm/drop_caches\n            # Restart non-critical services\n            docker restart media-vault-analyzer || true\n            ;;\n        \"disk\")\n            # Clean old logs and temporary files\n            docker system prune -f\n            find /tmp -type f -atime +7 -delete 2>/dev/null || true\n            ;;\n        \"cpu\")\n            # Scale down resource-intensive services temporarily\n            docker update --cpus=\"0.5\" media-vault-analyzer || true\n            ;;\n    esac\n\n    send_notification \"🔧 Automated remediation applied for high $resource usage\"\n}\n\n# Handle security incidents\nhandle_security_incident() {\n    local incident_type=$1\n    local details=$2\n\n    echo \"🛡️ Handling security incident: $incident_type\"\n\n    case $incident_type in\n        \"failed_logins\")\n            # Enable additional security measures\n            # This would integrate with Keycloak API to increase security\n            send_notification \"🔒 Enhanced security measures activated due to failed login attempts\"\n            ;;\n        \"unauthorized_access\")\n            # Log the incident for analysis\n            echo \"$(date): Unauthorized access detected - $details\" >> /var/log/security-incidents.log\n            send_notification \"🚨 SECURITY ALERT: Unauthorized access detected - details logged\"\n            ;;\n    esac\n}\n\n# Send notification to various channels\nsend_notification() {\n    local message=$1\n    local timestamp=$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")\n\n    # Slack notification\n    if [ -n \"$SLACK_WEBHOOK_URL\" ]; then\n        curl -X POST -H 'Content-type: application/json' \\\n            --data \"{\\\"text\\\":\\\"[$timestamp] Media Vault: $message\\\"}\" \\\n            \"$SLACK_WEBHOOK_URL\" 2>/dev/null || true\n    fi\n\n    # PagerDuty notification (for critical alerts)\n    if [ -n \"$PAGERDUTY_API_KEY\" ] && [[ $message == *\"❌\"* ]]; then\n        curl -X POST \"https://events.pagerduty.com/v2/enqueue\" \\\n            -H \"Content-Type: application/json\" \\\n            -d \"{\n                \\\"routing_key\\\": \\\"$PAGERDUTY_API_KEY\\\",\n                \\\"event_action\\\": \\\"trigger\\\",\n                \\\"payload\\\": {\n                    \\\"summary\\\": \\\"Media Vault Alert: $message\\\",\n                    \\\"source\\\": \\\"media-vault-automation\\\",\n                    \\\"severity\\\": \\\"critical\\\"\n                }\n            }\" 2>/dev/null || true\n    fi\n\n    # Local logging\n    echo \"[$timestamp] $message\" >> /var/log/automation.log\n}\n\n# Main incident processing loop\nprocess_incidents() {\n    local alerts=$(get_alerts)\n\n    if [ -z \"$alerts\" ]; then\n        return 0\n    fi\n\n    echo \"$alerts\" | while IFS= read -r alert; do\n        local alert_name=$(echo \"$alert\" | jq -r '.labels.alertname // \"unknown\"')\n        local severity=$(echo \"$alert\" | jq -r '.labels.severity // \"unknown\"')\n\n        echo \"Processing alert: $alert_name (severity: $severity)\"\n\n        case $alert_name in\n            \"ServiceCompletleyDown\")\n                local service=$(echo \"$alert\" | jq -r '.labels.job // \"unknown\"')\n                handle_service_down \"$service\"\n                ;;\n            \"HighMemoryUsage\"|\"HighCPUUsage\"|\"DiskSpaceLow\")\n                local resource=$(echo \"$alert_name\" | sed 's/High\\|Low//g' | tr '[:upper:]' '[:lower:]')\n                handle_high_resource_usage \"$resource\" \"85\"\n                ;;\n            \"SuspiciousLoginActivity\")\n                handle_security_incident \"failed_logins\" \"$alert\"\n                ;;\n            \"UnauthorizedAPIAccess\")\n                handle_security_incident \"unauthorized_access\" \"$alert\"\n                ;;\n            *)\n                send_notification \"⚠️ Unhandled alert: $alert_name\"\n                ;;\n        esac\n    done\n}\n\n# Run the incident handler\nmain() {\n    echo \"🤖 Starting automated incident response system...\"\n    process_incidents\n}\n\nmain \"$@\"\n\n"
            }
          ]
        },
        {
          "name": "backup",
          "type": "directory",
          "path": "scripts/backup",
          "children": [
            {
              "name": "backup.sh",
              "type": "file",
              "path": "scripts/backup/backup.sh",
              "size": 1776,
              "content": "#!/bin/bash\n\n# Enhanced backup script with S3 support\nset -e\n\nBACKUP_DIR=\"/backups\"\nSOURCE_DATA=\"/backup-source/data\"\nSOURCE_UPLOADS=\"/backup-source/uploads\"\nTIMESTAMP=$(date +%Y%m%d_%H%M%S)\nBACKUP_NAME=\"media-vault-backup-${TIMESTAMP}\"\n\necho \"🗄️  Starting backup: $BACKUP_NAME\"\n\n# Create backup directory\nmkdir -p \"$BACKUP_DIR/$BACKUP_NAME\"\n\n# Backup SQLite database\necho \"📄 Backing up database...\"\nif [ -f \"$SOURCE_DATA/media.db\" ]; then\n    sqlite3 \"$SOURCE_DATA/media.db\" \".backup $BACKUP_DIR/$BACKUP_NAME/media.db\"\n    echo \"✅ Database backup completed\"\nelse\n    echo \"⚠️  Database not found\"\nfi\n\n# Backup uploads\necho \"📁 Backing up uploads...\"\nif [ -d \"$SOURCE_UPLOADS\" ]; then\n    cp -r \"$SOURCE_UPLOADS\" \"$BACKUP_DIR/$BACKUP_NAME/\"\n    echo \"✅ Uploads backup completed\"\nelse\n    echo \"⚠️  Uploads directory not found\"\nfi\n\n# Create metadata\ncat > \"$BACKUP_DIR/$BACKUP_NAME/metadata.json\" << EOF\n{\n  \"backup_date\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\n  \"version\": \"1.0\",\n  \"components\": [\"database\", \"uploads\"],\n  \"size_bytes\": $(du -sb \"$BACKUP_DIR/$BACKUP_NAME\" | cut -f1)\n}\nEOF\n\n# Compress backup\necho \"🗜️  Compressing backup...\"\ncd \"$BACKUP_DIR\"\ntar -czf \"${BACKUP_NAME}.tar.gz\" \"$BACKUP_NAME\"\nrm -rf \"$BACKUP_NAME\"\n\n# Upload to S3 if configured\nif [ -n \"$S3_BUCKET\" ] && [ -n \"$AWS_ACCESS_KEY_ID\" ]; then\n    echo \"☁️  Uploading to S3...\"\n    aws s3 cp \"${BACKUP_NAME}.tar.gz\" \"s3://$S3_BUCKET/media-vault-backups/\"\n    echo \"✅ S3 upload completed\"\nfi\n\n# Cleanup old backups\nif [ -n \"$RETENTION_DAYS\" ]; then\n    echo \"🧹 Cleaning up old backups...\"\n    find \"$BACKUP_DIR\" -name \"media-vault-backup-*.tar.gz\" -mtime +$RETENTION_DAYS -delete\n    echo \"✅ Cleanup completed\"\nfi\n\necho \"🎉 Backup completed: ${BACKUP_NAME}.tar.gz\"\n\n"
            },
            {
              "name": "restore.sh",
              "type": "file",
              "path": "scripts/backup/restore.sh",
              "size": 0,
              "content": ""
            }
          ]
        },
        {
          "name": "capacity",
          "type": "directory",
          "path": "scripts/capacity",
          "children": [
            {
              "name": "capacity_planner.py",
              "type": "file",
              "path": "scripts/capacity/capacity_planner.py",
              "size": 6485,
              "content": "import requests\nimport json\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime, timedelta\nimport os\n\nclass CapacityPlanner:\n    def __init__(self):\n        self.prometheus_url = os.getenv('PROMETHEUS_URL', 'http://prometheus:9090')\n        self.prediction_days = int(os.getenv('PREDICTION_DAYS', '30'))\n        self.alert_threshold = float(os.getenv('ALERT_THRESHOLD', '0.8'))\n\n    def query_prometheus(self, query, start_time, end_time, step='1h'):\n        \"\"\"Query Prometheus for range data\"\"\"\n        params = {\n            'query': query,\n            'start': start_time.isoformat() + 'Z',\n            'end': end_time.isoformat() + 'Z',\n            'step': step\n        }\n\n        response = requests.get(f'{self.prometheus_url}/api/v1/query_range', params=params)\n        return response.json()\n\n    def predict_resource_usage(self, metric_name, query):\n        \"\"\"Predict future resource usage using linear regression\"\"\"\n        end_time = datetime.utcnow()\n        start_time = end_time - timedelta(days=7)  # Use last 7 days for prediction\n\n        data = self.query_prometheus(query, start_time, end_time)\n\n        if not data['data']['result']:\n            return None\n\n        # Extract time series data\n        values = data['data']['result'][0]['values']\n        timestamps = [float(v[0]) for v in values]\n        metrics = [float(v[1]) for v in values if v[1] != 'NaN']\n\n        if len(metrics) < 2:\n            return None\n\n        # Simple linear regression\n        x = np.array(range(len(metrics)))\n        y = np.array(metrics)\n\n        # Calculate trend\n        slope = np.polyfit(x, y, 1)[0]\n        current_value = metrics[-1]\n\n        # Predict future values\n        future_hours = self.prediction_days * 24\n        predicted_value = current_value + (slope * future_hours)\n\n        return {\n            'metric': metric_name,\n            'current_value': current_value,\n            'predicted_value': predicted_value,\n            'trend_slope': slope,\n            'prediction_days': self.prediction_days,\n            'will_exceed_threshold': predicted_value > self.alert_threshold\n        }\n\n    def generate_capacity_report(self):\n        \"\"\"Generate comprehensive capacity planning report\"\"\"\n        metrics = [\n            {\n                'name': 'CPU Usage',\n                'query': '100 - (avg(irate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100)',\n                'unit': '%',\n                'threshold': 80\n            },\n            {\n                'name': 'Memory Usage',\n                'query': '(node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100',\n                'unit': '%',\n                'threshold': 85\n            },\n            {\n                'name': 'Disk Usage',\n                'query': '(node_filesystem_size_bytes{mountpoint=\"/\"} - node_filesystem_avail_bytes{mountpoint=\"/\"}) / node_filesystem_size_bytes{mountpoint=\"/\"} * 100',\n                'unit': '%',\n                'threshold': 90\n            },\n            {\n                'name': 'API Request Rate',\n                'query': 'rate(http_requests_total[5m])',\n                'unit': 'req/s',\n                'threshold': 1000\n            }\n        ]\n\n        report = {\n            'generated_at': datetime.utcnow().isoformat(),\n            'prediction_period_days': self.prediction_days,\n            'predictions': [],\n            'recommendations': []\n        }\n\n        for metric in metrics:\n            prediction = self.predict_resource_usage(metric['name'], metric['query'])\n\n            if prediction:\n                prediction['unit'] = metric['unit']\n                prediction['threshold'] = metric['threshold']\n                report['predictions'].append(prediction)\n\n                # Generate recommendations\n                if prediction['will_exceed_threshold']:\n                    if 'CPU' in metric['name']:\n                        report['recommendations'].append({\n                            'metric': metric['name'],\n                            'action': 'Scale horizontally or optimize CPU-intensive processes',\n                            'priority': 'high' if prediction['predicted_value'] > 90 else 'medium'\n                        })\n                    elif 'Memory' in metric['name']:\n                        report['recommendations'].append({\n                            'metric': metric['name'],\n                            'action': 'Increase memory allocation or optimize memory usage',\n                            'priority': 'high' if prediction['predicted_value'] > 95 else 'medium'\n                        })\n                    elif 'Disk' in metric['name']:\n                        report['recommendations'].append({\n                            'metric': metric['name'],\n                            'action': 'Expand storage or implement cleanup policies',\n                            'priority': 'critical' if prediction['predicted_value'] > 95 else 'high'\n                        })\n\n        return report\n\n    def save_report(self, report):\n        \"\"\"Save capacity planning report\"\"\"\n        os.makedirs('/data', exist_ok=True)\n\n        timestamp = datetime.utcnow().strftime('%Y%m%d_%H%M%S')\n        filename = f'/data/capacity_report_{timestamp}.json'\n\n        with open(filename, 'w') as f:\n            json.dump(report, f, indent=2)\n\n        # Also save as latest\n        with open('/data/capacity_report_latest.json', 'w') as f:\n            json.dump(report, f, indent=2)\n\n        return filename\n\ndef main():\n    planner = CapacityPlanner()\n\n    print(\"🔮 Generating capacity planning report...\")\n    report = planner.generate_capacity_report()\n\n    filename = planner.save_report(report)\n    print(f\"📊 Report saved: {filename}\")\n\n    # Print summary\n    print(\"\\n📋 Capacity Planning Summary:\")\n    print(\"=\" * 40)\n\n    for prediction in report['predictions']:\n        status = \"⚠️ ALERT\" if prediction['will_exceed_threshold'] else \"✅ OK\"\n        print(f\"{prediction['metric']}: {prediction['current_value']:.1f}{prediction.get('unit', '')} → {prediction['predicted_value']:.1f}{prediction.get('unit', '')} {status}\")\n\n    if report['recommendations']:\n        print(f\"\\n🎯 Recommendations ({len(report['recommendations'])}):\")\n        for rec in report['recommendations']:\n            priority = rec['priority'].upper()\n            print(f\"[{priority}] {rec['metric']}: {rec['action']}\")\n\nif __name__ == \"__main__\":\n    main()\n\n"
            }
          ]
        },
        {
          "name": "optimization",
          "type": "directory",
          "path": "scripts/optimization",
          "children": [
            {
              "name": "optimize.sh",
              "type": "file",
              "path": "scripts/optimization/optimize.sh",
              "size": 4021,
              "content": "#!/bin/bash\n\n# Performance Optimization Script\necho \"⚡ Starting performance optimization...\"\n\n# Get current metrics\nget_metric() {\n    local query=$1\n    curl -s \"http://prometheus:9090/api/v1/query?query=${query}\" | \\\n        jq -r '.data.result[0].value[1] // \"0\"' 2>/dev/null || echo \"0\"\n}\n\n# CPU optimization\noptimize_cpu() {\n    local cpu_usage=$(get_metric \"100 - (avg(irate(node_cpu_seconds_total{mode=\\\"idle\\\"}[5m])) * 100)\")\n\n    if (( $(echo \"$cpu_usage > 70\" | bc -l) )); then\n        echo \"🔧 High CPU usage detected: ${cpu_usage}%\"\n\n        # Reduce CPU limits for non-critical services\n        docker update --cpus=\"0.5\" media-vault-analyzer 2>/dev/null || true\n        docker update --cpus=\"0.3\" nsfw-analyzer 2>/dev/null || true\n\n        echo \"✅ CPU limits reduced for non-critical services\"\n    fi\n}\n\n# Memory optimization\noptimize_memory() {\n    local mem_usage=$(get_metric \"(node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100\")\n\n    if (( $(echo \"$mem_usage > 80\" | bc -l) )); then\n        echo \"🔧 High memory usage detected: ${mem_usage}%\"\n\n        # Clear system caches\n        sync && echo 3 > /proc/sys/vm/drop_caches 2>/dev/null || true\n\n        # Restart memory-intensive services\n        docker restart media-vault-analyzer 2>/dev/null || true\n\n        echo \"✅ Memory optimization applied\"\n    fi\n}\n\n# Disk optimization\noptimize_disk() {\n    echo \"🗃️ Running disk optimization...\"\n\n    # Clean Docker system\n    docker system prune -f\n\n    # Clean old logs\n    find /var/log -name \"*.log\" -type f -mtime +7 -exec truncate -s 0 {} \\; 2>/dev/null || true\n\n    # Clean temporary files\n    find /tmp -type f -atime +1 -delete 2>/dev/null || true\n\n    echo \"✅ Disk cleanup completed\"\n}\n\n# Database optimization\noptimize_database() {\n    echo \"🗄️ Running database optimization...\"\n\n    # SQLite optimization\n    if [ -f \"/data/media.db\" ]; then\n        sqlite3 /data/media.db \"VACUUM; PRAGMA optimize;\" 2>/dev/null || true\n        echo \"✅ SQLite database optimized\"\n    fi\n\n    # PostgreSQL optimization (if available)\n    if docker ps | grep -q keycloak-db; then\n        docker exec keycloak-db psql -U keycloak -d keycloak -c \"VACUUM ANALYZE;\" 2>/dev/null || true\n        echo \"✅ PostgreSQL database optimized\"\n    fi\n}\n\n# Network optimization\noptimize_network() {\n    echo \"🌐 Running network optimization...\"\n\n    # Optimize Docker network settings\n    echo 'net.core.rmem_max = 134217728' >> /etc/sysctl.conf 2>/dev/null || true\n    echo 'net.core.wmem_max = 134217728' >> /etc/sysctl.conf 2>/dev/null || true\n\n    sysctl -p 2>/dev/null || true\n\n    echo \"✅ Network optimization applied\"\n}\n\n# Generate optimization report\ngenerate_report() {\n    local timestamp=$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")\n\n    cat > /tmp/optimization_report.json << EOF\n{\n    \"timestamp\": \"$timestamp\",\n    \"optimizations_applied\": [\n        \"CPU limits adjusted\",\n        \"Memory caches cleared\",\n        \"Disk cleanup performed\",\n        \"Database vacuumed\",\n        \"Network settings optimized\"\n    ],\n    \"metrics_after\": {\n        \"cpu_usage\": $(get_metric \"100 - (avg(irate(node_cpu_seconds_total{mode=\\\"idle\\\"}[5m])) * 100)\"),\n        \"memory_usage\": $(get_metric \"(node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100\"),\n        \"disk_usage\": $(get_metric \"(node_filesystem_size_bytes{mountpoint=\\\"/\\\"} - node_filesystem_avail_bytes{mountpoint=\\\"/\\\"}) / node_filesystem_size_bytes{mountpoint=\\\"/\\\"} * 100\")\n    }\n}\nEOF\n\n    echo \"📊 Optimization report generated: /tmp/optimization_report.json\"\n}\n\n# Main optimization workflow\nmain() {\n    echo \"🚀 Media Vault Performance Optimization\"\n    echo \"=======================================\"\n\n    optimize_cpu\n    optimize_memory\n    optimize_disk\n    optimize_database\n    optimize_network\n    generate_report\n\n    echo \"\"\n    echo \"✅ Performance optimization completed!\"\n    echo \"📊 Check metrics in Grafana for improvements\"\n}\n\nmain \"$@\""
            }
          ]
        },
        {
          "name": "security",
          "type": "directory",
          "path": "scripts/security",
          "children": [
            {
              "name": "audit.sh",
              "type": "file",
              "path": "scripts/security/audit.sh",
              "size": 0,
              "content": ""
            },
            {
              "name": "security-scan.sh",
              "type": "file",
              "path": "scripts/security/security-scan.sh",
              "size": 0,
              "content": ""
            }
          ]
        },
        {
          "name": "extract_go_files.sh",
          "type": "file",
          "path": "scripts/extract_go_files.sh",
          "size": 9409,
          "content": "#!/bin/bash\n\n# Create necessary directories\nmkdir -p media-vault-backend/internal/auth\nmkdir -p media-vault-backend/internal/handlers\nmkdir -p media-vault-backend/internal/models\nmkdir -p media-vault-backend/internal/services\nmkdir -p media-vault-backend/internal/utils\n\n# Extract models\ncat > media-vault-backend/internal/models/photo.go << 'EOL'\npackage models\n\nimport \"time\"\n\n// Photo represents a photo in the vault\ntype Photo struct {\n    ID                string     `json:\"id\" db:\"id\"`\n    UserID            string     `json:\"user_id\" db:\"user_id\"`\n    PartnerID         *string    `json:\"partner_id,omitempty\" db:\"partner_id\"`\n    Filename          string     `json:\"filename\" db:\"filename\"`\n    OriginalName      string     `json:\"original_name\" db:\"original_name\"`\n    FilePath          string     `json:\"file_path\" db:\"file_path\"`\n    ThumbnailPath     *string    `json:\"thumbnail_path,omitempty\" db:\"thumbnail_path\"`\n    FileSize          int64      `json:\"file_size\" db:\"file_size\"`\n    MimeType          string     `json:\"mime_type\" db:\"mime_type\"`\n    Width             *int       `json:\"width,omitempty\" db:\"width\"`\n    Height            *int       `json:\"height,omitempty\" db:\"height\"`\n    Hash              string     `json:\"hash\" db:\"hash\"`\n    Description       *string    `json:\"description,omitempty\" db:\"description\"`\n    AIDescription     *string    `json:\"ai_description,omitempty\" db:\"ai_description\"`\n    Tags              *string    `json:\"tags,omitempty\" db:\"tags\"`\n    AIConfidence      *float64   `json:\"ai_confidence,omitempty\" db:\"ai_confidence\"`\n    IsNSFW            *bool      `json:\"is_nsfw,omitempty\" db:\"is_nsfw\"`\n    NSFWConfidence    *float64   `json:\"nsfw_confidence,omitempty\" db:\"nsfw_confidence\"`\n    ModerationStatus  string     `json:\"moderation_status\" db:\"moderation_status\"`\n    ExifData          *string    `json:\"exif_data,omitempty\" db:\"exif_data\"`\n    Location          *string    `json:\"location,omitempty\" db:\"location\"`\n    CameraMake        *string    `json:\"camera_make,omitempty\" db:\"camera_make\"`\n    CameraModel       *string    `json:\"camera_model,omitempty\" db:\"camera_model\"`\n    TakenAt           *time.Time `json:\"taken_at,omitempty\" db:\"taken_at\"`\n    IsShared          bool       `json:\"is_shared\" db:\"is_shared\"`\n    SharedWith        []string   `json:\"shared_with,omitempty\"`\n    ShareCount        int        `json:\"share_count\" db:\"share_count\"`\n    ViewCount         int        `json:\"view_count\" db:\"view_count\"`\n    CreatedAt         time.Time  `json:\"created_at\" db:\"created_at\"`\n    UpdatedAt         time.Time  `json:\"updated_at\" db:\"updated_at\"`\n    ProcessedAt       *time.Time `json:\"processed_at,omitempty\" db:\"processed_at\"`\n}\n\n// PhotoSharing represents photo sharing permissions\ntype PhotoSharing struct {\n    ID          string     `json:\"id\" db:\"id\"`\n    PhotoID     string     `json:\"photo_id\" db:\"photo_id\"`\n    SharedBy    string     `json:\"shared_by\" db:\"shared_by\"`\n    SharedWith  string     `json:\"shared_with\" db:\"shared_with\"`\n    Permission  string     `json:\"permission\" db:\"permission\"`\n    CreatedAt   time.Time  `json:\"created_at\" db:\"created_at\"`\n    ExpiresAt   *time.Time `json:\"expires_at,omitempty\" db:\"expires_at\"`\n}\n\n// PhotoAnalytics represents photo analytics data\ntype PhotoAnalytics struct {\n    PhotoID    string     `json:\"photo_id\" db:\"photo_id\"`\n    Views      int        `json:\"views\" db:\"views\"`\n    Downloads  int        `json:\"downloads\" db:\"downloads\"`\n    Shares     int        `json:\"shares\" db:\"shares\"`\n    LastViewed *time.Time `json:\"last_viewed,omitempty\" db:\"last_viewed\"`\n    ViewerIPs  []string   `json:\"viewer_ips,omitempty\"`\n    Countries  []string   `json:\"countries,omitempty\"`\n}\n\n// BulkUploadRequest represents a bulk upload request\ntype BulkUploadRequest struct {\n    Files       []UploadedFile `json:\"files\"`\n    DefaultTags string         `json:\"default_tags,omitempty\"`\n    ShareWith   []string       `json:\"share_with,omitempty\"`\n    AutoDescribe bool          `json:\"auto_describe\"`\n}\n\n// UploadedFile represents a file in bulk upload\ntype UploadedFile struct {\n    Filename    string `json:\"filename\"`\n    Data        []byte `json:\"data\"`\n    Description string `json:\"description,omitempty\"`\n    Tags        string `json:\"tags,omitempty\"`\n}\n\n// BatchUpdateRequest represents batch description update\ntype BatchUpdateRequest struct {\n    PhotoIDs    []string `json:\"photo_ids\"`\n    Description string   `json:\"description,omitempty\"`\n    Tags        string   `json:\"tags,omitempty\"`\n    Operation   string   `json:\"operation\"`\n}\n\n// ShareRequest represents a photo sharing request\ntype ShareRequest struct {\n    PhotoIDs   []string   `json:\"photo_ids\"`\n    ShareWith  []string   `json:\"share_with\"`\n    Permission string     `json:\"permission\"`\n    ExpiresAt  *time.Time `json:\"expires_at,omitempty\"`\n    Message    string     `json:\"message,omitempty\"`\n}\nEOL\n\n# Extract partner handler\ncat > media-vault-backend/internal/handlers/partner.go << 'EOL'\npackage handlers\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n\t\"media-vault/internal/services\"\n)\n\ntype PartnerHandler struct {\n    photoService   *services.PhotoService\n    sharingService *services.SharingService\n}\n\nfunc NewPartnerHandler(photoService *services.PhotoService, sharingService *services.SharingService) *PartnerHandler {\n    return &PartnerHandler{\n        photoService:   photoService,\n        sharingService: sharingService,\n    }\n}\n\n// BulkUpload handles bulk photo upload for partners\nfunc (h *PartnerHandler) BulkUpload(c *fiber.Ctx) error {\n    // Implementation from main.go\n    return c.SendString(\"Bulk upload endpoint\")\n}\n\n// GetPartnerPhotos returns photos uploaded by the partner\nfunc (h *PartnerHandler) GetPartnerPhotos(c *fiber.Ctx) error {\n    // Implementation from main.go\n    return c.SendString(\"Partner photos endpoint\")\n}\n\n// BatchUpdateDescriptions updates descriptions for multiple photos\nfunc (h *PartnerHandler) BatchUpdateDescriptions(c *fiber.Ctx) error {\n    // Implementation from main.go\n    return c.SendString(\"Batch update descriptions endpoint\")\n}\n\n// BatchSharePhotos shares multiple photos with users\nfunc (h *PartnerHandler) BatchSharePhotos(c *fiber.Ctx) error {\n    // Implementation from main.go\n    return c.SendString(\"Batch share photos endpoint\")\n}\n\n// GetPhotoAnalytics returns analytics for a specific photo\nfunc (h *PartnerHandler) GetPhotoAnalytics(c *fiber.Ctx) error {\n    // Implementation from main.go\n    return c.SendString(\"Photo analytics endpoint\")\n}\n\n// GetPartnerDashboard returns dashboard data for partner\nfunc (h *PartnerHandler) GetPartnerDashboard(c *fiber.Ctx) error {\n    // Implementation from main.go\n    return c.SendString(\"Partner dashboard endpoint\")\n}\n\n// GetPartnerAnalytics returns comprehensive analytics for partner\nfunc (h *PartnerHandler) GetPartnerAnalytics(c *fiber.Ctx) error {\n    // Implementation from main.go\n    return c.SendString(\"Partner analytics endpoint\")\n}\nEOL\n\n# Extract photo service\ncat > media-vault-backend/internal/services/photo_service.go << 'EOL'\npackage services\n\nimport (\n\t\"database/sql\"\n\t\"mime/multipart\"\n\t\"time\"\n\t\"media-vault/internal/models\"\n)\n\ntype PhotoService struct {\n    db *sql.DB\n}\n\nfunc NewPhotoService(db *sql.DB) *PhotoService {\n    return &PhotoService{db: db}\n}\n\n// CreatePhotoFromUpload creates a photo record from uploaded file\nfunc (s *PhotoService) CreatePhotoFromUpload(fileHeader *multipart.FileHeader, userID string, partnerID *string) (*models.Photo, error) {\n    // Implementation from main.go\n    return &models.Photo{}, nil\n}\n\n// GetPhoto retrieves a photo by ID\nfunc (s *PhotoService) GetPhoto(photoID string) (*models.Photo, error) {\n    // Implementation from main.go\n    return &models.Photo{}, nil\n}\n\n// UpdatePhoto updates a photo record\nfunc (s *PhotoService) UpdatePhoto(photo *models.Photo) error {\n    // Implementation from main.go\n    return nil\n}\n\n// GetPartnerPhotos retrieves photos for a partner with pagination\nfunc (s *PhotoService) GetPartnerPhotos(partnerID string, page, limit int, sortBy, sortOrder, search string) ([]*models.Photo, int, error) {\n    // Implementation from main.go\n    return []*models.Photo{}, 0, nil\n}\n\n// GenerateAIDescription generates AI description for a photo\nfunc (s *PhotoService) GenerateAIDescription(photoID string) (string, error) {\n    // Implementation from main.go\n    return \"\", nil\n}\n\n// GetPhotoAnalytics retrieves analytics for a photo\nfunc (s *PhotoService) GetPhotoAnalytics(photoID string) (*models.PhotoAnalytics, error) {\n    // Implementation from main.go\n    return &models.PhotoAnalytics{}, nil\n}\n\n// GetPartnerDashboard returns dashboard data for partner\nfunc (s *PhotoService) GetPartnerDashboard(partnerID string) (map[string]interface{}, error) {\n    // Implementation from main.go\n    return map[string]interface{}{\n        \"total_photos\": 0,\n        \"total_views\": 0,\n        \"total_shares\": 0,\n    }, nil\n}\n\n// GetPartnerAnalytics returns comprehensive analytics for partner\nfunc (s *PhotoService) GetPartnerAnalytics(partnerID string, from, to *time.Time) (map[string]interface{}, error) {\n    // Implementation from main.go\n    return map[string]interface{}{\n        \"total_photos\": 0,\n        \"total_views\": 0,\n        \"total_shares\": 0,\n        \"views_by_date\": []interface{}{},\n        \"top_photos\":   []interface{}{},\n    }, nil\n}\nEOL\n\necho \"Extracted Go files to their respective locations\"\n"
        },
        {
          "name": "fix-imports.sh",
          "type": "file",
          "path": "scripts/fix-imports.sh",
          "size": 302,
          "content": "#!/bin/bash\n\n# Find all Go files and update imports\nfind /home/tom/github/wronai/docker-platform/media-vault-backend -type f -name \"*.go\" -exec sed -i 's|media-vault/internal/|github.com/wronai/media-vault-backend/internal/|g' {} \\;\n\necho \"Imports updated to use github.com/wronai/media-vault-backend\"\n"
        },
        {
          "name": "fix_all_imports.sh",
          "type": "file",
          "path": "scripts/fix_all_imports.sh",
          "size": 364,
          "content": "#!/bin/bash\n\n# Fix imports in all Go files\nfind media-vault-backend -name \"*.go\" -type f -exec sed -i 's|media-vault/internal/|github.com/wronai/media-vault-backend/internal/|g' {} \\;\nfind media-vault-backend -name \"*.go\" -type f -exec sed -i 's|media-vault-backend/internal/|github.com/wronai/media-vault-backend/internal/|g' {} \\;\n\necho \"Fixed all import paths\"\n"
        },
        {
          "name": "fix_go_files.sh",
          "type": "file",
          "path": "scripts/fix_go_files.sh",
          "size": 2520,
          "content": "#!/bin/bash\n\n# Fix user.go\ncat > media-vault-backend/internal/models/user.go << 'EOL'\npackage models\n\nimport \"time\"\n\n// User represents a user in the system\ntype User struct {\n    ID        string    `json:\"id\" db:\"id\"`\n    Email     string    `json:\"email\" db:\"email\"`\n    Username  string    `json:\"username\" db:\"username\"`\n    FullName  string    `json:\"full_name,omitempty\" db:\"full_name\"`\n    AvatarURL *string   `json:\"avatar_url,omitempty\" db:\"avatar_url\"`\n    IsAdmin   bool      `json:\"is_admin\" db:\"is_admin\"`\n    IsActive  bool      `json:\"is_active\" db:\"is_active\"`\n    LastLogin *time.Time `json:\"last_login,omitempty\" db:\"last_login\"`\n    CreatedAt time.Time `json:\"created_at\" db:\"created_at\"`\n    UpdatedAt time.Time `json:\"updated_at\" db:\"updated_at\"`\n}\n\n// UserSettings represents user preferences and settings\ntype UserSettings struct {\n    UserID         string    `json:\"user_id\" db:\"user_id\"`\n    Theme          string    `json:\"theme\" db:\"theme\"`\n    Notifications  bool      `json:\"notifications\" db:\"notifications\"`\n    EmailAlerts    bool      `json:\"email_alerts\" db:\"email_alerts\"`\n    StorageQuota   int64     `json:\"storage_quota\" db:\"storage_quota\"`\n    StorageUsed    int64     `json:\"storage_used\" db:\"storage_used\"`\n    LastBackup     *time.Time `json:\"last_backup,omitempty\" db:\"last_backup\"`\n    AutoSave       bool      `json:\"auto_save\" db:\"auto_save\"`\n    AutoTagging    bool      `json:\"auto_tagging\" db:\"auto_tagging\"`\n    AutoCategorize bool      `json:\"auto_categorize\" db:\"auto_categorize\"`\n    CreatedAt      time.Time `json:\"created_at\" db:\"created_at\"`\n    UpdatedAt      time.Time `json:\"updated_at\" db:\"updated_at\"`\n}\nEOL\n\n# Fix vault_service.go\ncat > media-vault-backend/internal/services/vault_service.go << 'EOL'\npackage services\n\nimport (\n\t\"database/sql\"\n\t\"media-vault-backend/internal/models\"\n)\n\ntype VaultService struct {\n    db *sql.DB\n}\n\nfunc NewVaultService(db *sql.DB) *VaultService {\n    return &VaultService{db: db}\n}\n\n// Add your VaultService methods here\nEOL\n\n# Fix vault.go\ncat > media-vault-backend/internal/handlers/vault.go << 'EOL'\npackage handlers\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n\t\"media-vault-backend/internal/services\"\n)\n\ntype VaultHandler struct {\n    vaultService *services.VaultService\n}\n\nfunc NewVaultHandler(vaultService *services.VaultService) *VaultHandler {\n    return &VaultHandler{vaultService: vaultService}\n}\n\n// Add your VaultHandler methods here\nEOL\n\necho \"Fixed Go files with proper package declarations and basic structure\"\n"
        },
        {
          "name": "fix_remaining_files.sh",
          "type": "file",
          "path": "scripts/fix_remaining_files.sh",
          "size": 2917,
          "content": "#!/bin/bash\n\n# Fix vault_file.go\ncat > media-vault-backend/internal/models/vault_file.go << 'EOL'\npackage models\n\nimport \"time\"\n\n// VaultFile represents a file in the vault\ntype VaultFile struct {\n    ID          string    `json:\"id\" db:\"id\"`\n    UserID      string    `json:\"user_id\" db:\"user_id\"`\n    Name        string    `json:\"name\" db:\"name\"`\n    Path        string    `json:\"path\" db:\"path\"`\n    Size        int64     `json:\"size\" db:\"size\"`\n    MimeType    string    `json:\"mime_type\" db:\"mime_type\"`\n    IsPublic    bool      `json:\"is_public\" db:\"is_public\"`\n    IsEncrypted bool      `json:\"is_encrypted\" db:\"is_encrypted\"`\n    Metadata    string    `json:\"metadata,omitempty\" db:\"metadata\"`\n    CreatedAt   time.Time `json:\"created_at\" db:\"created_at\"`\n    UpdatedAt   time.Time `json:\"updated_at\" db:\"updated_at\"`\n}\nEOL\n\n# Fix image_processing.go\ncat > media-vault-backend/internal/utils/image_processing.go << 'EOL'\npackage utils\n\nimport (\n\t\"image\"\n\t\"io\"\n)\n\n// ProcessImage processes an image and returns the processed image\nfunc ProcessImage(r io.Reader) (image.Image, error) {\n    // Implementation for image processing\n    return nil, nil\n}\n\n// GenerateThumbnail generates a thumbnail for the given image\nfunc GenerateThumbnail(img image.Image, width, height int) (image.Image, error) {\n    // Implementation for thumbnail generation\n    return nil, nil\n}\n\n// ConvertImage converts an image to the specified format\nfunc ConvertImage(img image.Image, format string) ([]byte, error) {\n    // Implementation for image conversion\n    return nil, nil\n}\nEOL\n\n# Fix metadata.go\ncat > media-vault-backend/internal/utils/metadata.go << 'EOL'\npackage utils\n\n// Metadata represents file metadata\ntype Metadata map[string]interface{}\n\n// ExtractMetadata extracts metadata from a file\nfunc ExtractMetadata(filePath string) (Metadata, error) {\n    // Implementation for metadata extraction\n    return Metadata{}, nil\n}\n\n// CleanMetadata removes sensitive information from metadata\nfunc CleanMetadata(meta Metadata) Metadata {\n    // Implementation for metadata cleaning\n    return meta\n}\nEOL\n\n# Fix thumbnails.go\ncat > media-vault-backend/internal/utils/thumbnails.go << 'EOL'\npackage utils\n\nimport \"image\"\n\n// ThumbnailOptions contains options for thumbnail generation\ntype ThumbnailOptions struct {\n    Width   int\n    Height  int\n    Quality int\n    Format  string\n}\n\n// GenerateThumbnail generates a thumbnail for the given image\nfunc GenerateThumbnail(img image.Image, opts ThumbnailOptions) ([]byte, error) {\n    // Implementation for thumbnail generation\n    return nil, nil\n}\n\n// GenerateThumbnailFromBytes generates a thumbnail from image bytes\nfunc GenerateThumbnailFromBytes(data []byte, opts ThumbnailOptions) ([]byte, error) {\n    // Implementation for thumbnail generation from bytes\n    return nil, nil\n}\nEOL\n\necho \"Fixed all remaining Go files with proper package declarations and basic structure\"\n"
        },
        {
          "name": "infrastructure-health.sh",
          "type": "file",
          "path": "scripts/infrastructure-health.sh",
          "size": 0,
          "content": ""
        },
        {
          "name": "infrastructure-setup.sh",
          "type": "file",
          "path": "scripts/infrastructure-setup.sh",
          "size": 857,
          "content": "#!/bin/bash\n\necho \"🏗️  Setting up Infrastructure Administration...\"\n\n# Create monitoring directories\nmkdir -p monitoring/{prometheus/rules,alertmanager,grafana/{provisioning,dashboards},loki,promtail,filebeat}\nmkdir -p traefik backups scripts\n\n# Set permissions\nchmod +x scripts/*.sh\n\n# Create network if not exists\ndocker network create media-vault-network 2>/dev/null || true\n\necho \"✅ Infrastructure setup completed\"\necho \"\"\necho \"📋 Available profiles:\"\necho \"  - default: Basic monitoring (Prometheus, Grafana, AlertManager)\"\necho \"  - elk: Elasticsearch, Logstash, Kibana\"\necho \"  - traefik: Traefik load balancer\"\necho \"  - redis-tools: Redis management tools\"\necho \"  - auto-update: Watchtower auto-updates\"\necho \"  - nginx-proxy: Nginx Proxy Manager\"\necho \"\"\necho \"🚀 Start with: docker-compose -f docker-compose.infrastructure.yml up -d\""
        },
        {
          "name": "performance-report.sh",
          "type": "file",
          "path": "scripts/performance-report.sh",
          "size": 0,
          "content": ""
        },
        {
          "name": "setup.sh",
          "type": "file",
          "path": "scripts/setup.sh",
          "size": 1168,
          "content": "#!/bin/bash\n\n# setup.sh - Complete Media Vault Setup Script\nset -e\n\necho \"🔐 Media Vault Complete Setup\"\necho \"=============================\"\n\n# Colors for output\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nRED='\\033[0;31m'\nNC='\\033[0m'\n\nprint_status() { echo -e \"${GREEN}✅ $1${NC}\"; }\nprint_warning() { echo -e \"${YELLOW}⚠️  $1${NC}\"; }\nprint_error() { echo -e \"${RED}❌ $1${NC}\"; }\n\n# Check dependencies\ncheck_dependencies() {\n    echo \"🔍 Checking dependencies...\"\n\n    if ! command -v docker &> /dev/null; then\n        print_error \"Docker is not installed\"\n        exit 1\n    fi\n\n    if ! command -v docker-compose &> /dev/null; then\n        print_error \"Docker Compose is not installed\"\n        exit 1\n    fi\n\n    print_status \"All dependencies are available\"\n}\n\n# Create directory structure\ncreate_directories() {\n    echo \"📁 Creating directory structure...\"\n\n    directories=(\n        \"data\"\n        \"uploads/originals\"\n        \"uploads/thumbnails\"\n        \"uploads/processed\"\n        \"processing/incoming\"\n        \"processing/temp\"\n        \"backups\"\n        \"logs\"\n        \"models\"\n    )\n\n    for dir in \"${directories[@]}\"; do\n        mkdir -p \"$dir\""
        },
        {
          "name": "test-makefile-docker.sh",
          "type": "file",
          "path": "scripts/test-makefile-docker.sh",
          "size": 7568,
          "content": "#!/bin/bash\n\n# Exit on any error\nset -e\n\n# Define colors for output\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nRED='\\033[0;31m'\nNC='\\033[0m' # No Color\n\n# Create a temporary directory for testing\nTEMP_DIR=$(mktemp -d)\necho -e \"${YELLOW}📁 Created temporary directory: ${TEMP_DIR}${NC}\"\n\n# Function to clean up\ntrap_handler() {\n    echo -e \"\\n${YELLOW}🧹 Cleaning up...${NC}\"\n    docker-compose -f ${TEMP_DIR}/docker-compose.yml down --volumes --remove-orphans >/dev/null 2>&1 || true\n    # Don't remove the temp dir for debugging\n    # rm -rf \"${TEMP_DIR}\"\n    echo -e \"${GREEN}✅ Cleanup complete${NC}\n\"\n}\ntrap trap_handler EXIT\n\n# Copy necessary files to temp directory\necho -e \"${YELLOW}📦 Copying project files...${NC}\"\ncp Makefile \"${TEMP_DIR}/\"\n\n# Create a minimal .env file if .env.example doesn't exist\nif [ ! -f .env.example ]; then\n    echo -e \"${YELLOW}ℹ️  Creating minimal .env file...${NC}\"\n    echo \"# Minimal .env file for testing\" > \"${TEMP_DIR}/.env\"\n    echo \"COMPOSE_PROJECT_NAME=makefile-test\" >> \"${TEMP_DIR}/.env\"\nelse\n    cp .env.example \"${TEMP_DIR}/.env\"\nfi\n\n# Copy docker-compose files\ncp -r docker-compose* \"${TEMP_DIR}/\" 2>/dev/null || true\n\n# Copy Ansible files if they exist\nif [ -d \"ansible\" ]; then\n    echo -e \"${YELLOW}📦 Copying Ansible files...${NC}\"\n    mkdir -p \"${TEMP_DIR}/ansible\"\n    cp -r ansible/* \"${TEMP_DIR}/ansible/\"\n    \n    # Create a test inventory file\n    cat > \"${TEMP_DIR}/ansible/inventory.ini\" << 'EOL'\n[local]\nlocalhost ansible_connection=local\n\n[all:vars]\nansible_python_interpreter=/usr/bin/python3\nEOL\n    \n    # Create a test playbook if none exists\n    if [ ! -f \"${TEMP_DIR}/ansible/playbook.yml\" ]; then\n        cat > \"${TEMP_DIR}/ansible/playbook.yml\" << 'EOL'\n---\n- name: Test Playbook\n  hosts: localhost\n  connection: local\n  gather_facts: yes\n  become: no\n\n  tasks:\n    - name: Check Docker is running\n      command: docker info\n      register: docker_info\n      changed_when: false\n\n    - name: Print Docker info\n      debug:\n        var: docker_info.stdout_lines\nEOL\n    fi\nfi\n\n# Create a test Dockerfile\ncat > \"${TEMP_DIR}/Dockerfile.test\" << 'EOL'\nFROM docker:24.0.7-cli\n\n# Install dependencies\nRUN apk add --no-cache \\\n    bash \\\n    curl \\\n    git \\\n    make \\\n    go \\\n    nodejs \\\n    npm \\\n    python3 \\\n    py3-pip \\\n    docker-compose \\\n    openssh-client \\\n    sshpass\n\n# Install Go linter compatible with Go 1.21.10\nRUN go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.55.2\n\n# Create and activate virtual environment for Python packages\nRUN python3 -m venv /opt/venv\nENV PATH=\"/opt/venv/bin:$PATH\"\n\n# Install Ansible and dependencies in the virtual environment\nRUN pip install --no-cache-dir --upgrade pip && \\\n    pip install --no-cache-dir ansible ansible-lint docker && \\\n    ansible --version && \\\n    ansible-lint --version\n\n# Set working directory\nWORKDIR /app\n\n# Copy project files\nCOPY . .\n\nEOL\n\n# Build test image\necho -e \"${YELLOW}🐳 Building test Docker image...${NC}\"\ndocker build -t makefile-test -f \"${TEMP_DIR}/Dockerfile.test\" \"${TEMP_DIR}\"\n\n# Function to test Ansible playbook\ntest_ansible_playbook() {\n    if [ ! -d \"${TEMP_DIR}/ansible\" ]; then\n        echo -e \"${YELLOW}ℹ️  No Ansible directory found, skipping Ansible tests${NC}\"\n        return 0\n    fi\n    \n    local failed=0\n    \n    echo -e \"\\n${YELLOW}🔍 Testing Ansible playbook...${NC}\"\n    echo \"--------------------------------------------------\"\n    \n    # Test playbook syntax\n    echo -e \"${YELLOW}🔧 Checking playbook syntax...${NC}\"\n    if ! docker run --rm \\\n        -v /var/run/docker.sock:/var/run/docker.sock \\\n        -v \"${TEMP_DIR}/ansible:/ansible\" \\\n        -w /ansible \\\n        makefile-test \\\n        ansible-playbook -i inventory.ini --syntax-check playbook.yml; then\n        echo -e \"${RED}❌ Ansible playbook syntax check failed${NC}\"\n        ((failed++))\n    else\n        echo -e \"${GREEN}✅ Ansible playbook syntax check passed${NC}\"\n    fi\n    \n    # Lint the playbook\n    echo -e \"\\n${YELLOW}🔍 Linting playbook...${NC}\"\n    if ! docker run --rm \\\n        -v /var/run/docker.sock:/var/run/docker.sock \\\n        -v \"${TEMP_DIR}/ansible:/ansible\" \\\n        -w /ansible \\\n        makefile-test \\\n        ansible-lint playbook.yml; then\n        echo -e \"${YELLOW}⚠️  Ansible linting found issues (non-fatal)${NC}\"\n    else\n        echo -e \"${GREEN}✅ Ansible linting passed${NC}\"\n    fi\n    \n    # Run the playbook in check mode\n    echo -e \"\\n${YELLOW}🔍 Running playbook in check mode...${NC}\"\n    if ! docker run --rm \\\n        -v /var/run/docker.sock:/var/run/docker.sock \\\n        -v \"${TEMP_DIR}/ansible:/ansible\" \\\n        -w /ansible \\\n        makefile-test \\\n        ansible-playbook -i inventory.ini --check playbook.yml; then\n        echo -e \"${RED}❌ Ansible playbook check mode failed${NC}\"\n        ((failed++))\n    else\n        echo -e \"${GREEN}✅ Ansible playbook check mode passed${NC}\"\n    fi\n    \n    return $failed\n}\n\n# Function to run a make target and check its status\nrun_make_target() {\n    local target=$1\n    local description=$2\n    \n    echo -e \"\\n${YELLOW}🔄 Testing: ${target} - ${description}${NC}\"\n    echo \"--------------------------------------------------\"\n    \n    # Run the make target in the container\n    if docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n        -v \"${TEMP_DIR}:/app\" \\\n        -w /app \\\n        makefile-test \\\n        make -n \"${target}\" >/dev/null 2>&1; then\n        echo -e \"${GREEN}✅ Dry run successful for: ${target}${NC}\"\n        return 0\n    else\n        echo -e \"${RED}❌ Dry run failed for: ${target}${NC}\"\n        return 1\n    fi\n}\n\n# Main test function\nrun_tests() {\n    local failed_tests=0\n    local total_tests=0\n    \n    # Define the targets to test with their descriptions\n    declare -A targets=(\n        [\"init\"]=\"Initialize development environment\"\n        [\"up\"]=\"Start all services\"\n        [\"up-build\"]=\"Rebuild and start all services\"\n        [\"down\"]=\"Stop all services\"\n        [\"restart\"]=\"Restart all services\"\n        [\"logs\"]=\"View logs from all services\"\n        [\"test-unit\"]=\"Run unit tests\"\n        [\"test-integration\"]=\"Run integration tests\"\n        [\"lint\"]=\"Run linters\"\n        [\"format\"]=\"Format code\"\n        [\"monitoring\"]=\"Start monitoring stack\"\n        [\"monitoring-down\"]=\"Stop monitoring stack\"\n        [\"clean\"]=\"Remove all containers and volumes\"\n    )\n    \n    # Run tests for each target\n    for target in \"${!targets[@]}\"; do\n        if ! run_make_target \"$target\" \"${targets[$target]}\"; then\n            ((failed_tests++))\n        fi\n        ((total_tests++))\n    done\n    \n    # Test Ansible playbook if it exists\n    if [ -d \"${TEMP_DIR}/ansible\" ]; then\n        echo -e \"\\n${YELLOW}🔍 Running Ansible tests...${NC}\"\n        ((total_tests++))\n        if ! test_ansible_playbook; then\n            ((failed_tests++))\n        fi\n    fi\n    \n    # Print summary\n    echo -e \"\\n${YELLOW}📊 Test Summary:${NC}\"\n    echo \"--------------------------------------------------\"\n    echo -e \"${GREEN}✅ Passed: $((total_tests - failed_tests))${NC}\"\n    echo -e \"${RED}❌ Failed: ${failed_tests}${NC}\"\n    echo -e \"📊 Total:  ${total_tests}\"\n    \n    # Exit with appropriate status\n    if [ $failed_tests -gt 0 ]; then\n        echo -e \"\\n❌ Some tests failed. Check the output above for details.\"\n        echo -e \"Temporary directory preserved at: ${TEMP_DIR} for debugging\"\n        return 1\n    else\n        echo -e \"\\n🎉 All tests passed successfully!\"\n        return 0\n    fi\n}\n\n# Run the tests\nrun_tests\n"
        },
        {
          "name": "test-makefile.sh",
          "type": "file",
          "path": "scripts/test-makefile.sh",
          "size": 2332,
          "content": "#!/bin/bash\n\n# Exit on any error\nset -e\n\necho \"🚀 Starting Makefile test in Docker environment...\"\n\n# Define colors for output\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nRED='\\033[0;31m'\nNC='\\033[0m' # No Color\n\n# Function to run a make target and check its status\nrun_make_target() {\n    local target=$1\n    local description=$2\n    \n    echo -e \"\\n${YELLOW}🔄 Testing: ${target} - ${description}${NC}\"\n    echo \"--------------------------------------------------\"\n    \n    # Run the make target and capture output and status\n    if make -n $target >/dev/null 2>&1; then\n        echo -e \"${GREEN}✅ Dry run successful for: ${target}${NC}\"\n        return 0\n    else\n        echo -e \"${RED}❌ Dry run failed for: ${target}${NC}\"\n        return 1\n    fi\n}\n\n# Main test function\ntest_makefile() {\n    local failed_tests=0\n    local total_tests=0\n    \n    # Define the targets to test with their descriptions\n    declare -A targets=(\n        [\"init\"]=\"Initialize development environment\"\n        [\"up\"]=\"Start all services\"\n        [\"up-build\"]=\"Rebuild and start all services\"\n        [\"down\"]=\"Stop all services\"\n        [\"restart\"]=\"Restart all services\"\n        [\"logs\"]=\"View logs from all services\"\n        [\"test-unit\"]=\"Run unit tests\"\n        [\"test-integration\"]=\"Run integration tests\"\n        [\"lint\"]=\"Run linters\"\n        [\"format\"]=\"Format code\"\n        [\"monitoring\"]=\"Start monitoring stack\"\n        [\"monitoring-down\"]=\"Stop monitoring stack\"\n        [\"clean\"]=\"Remove all containers and volumes\"\n    )\n    \n    # Run tests for each target\n    for target in \"${!targets[@]}\"; do\n        if ! run_make_target \"$target\" \"${targets[$target]}\"; then\n            ((failed_tests++))\n        fi\n        ((total_tests++))\n    done\n    \n    # Print summary\n    echo -e \"\\n${YELLOW}📊 Test Summary:${NC}\"\n    echo \"--------------------------------------------------\"\n    echo -e \"${GREEN}✅ Passed: $((total_tests - failed_tests))${NC}\"\n    echo -e \"${RED}❌ Failed: ${failed_tests}${NC}\"\n    echo -e \"📊 Total:  ${total_tests}\"\n    \n    # Exit with appropriate status\n    if [ $failed_tests -gt 0 ]; then\n        echo -e \"\\n❌ Some tests failed. Check the output above for details.\"\n        exit 1\n    else\n        echo -e \"\\n🎉 All tests passed successfully!\"\n        exit 0\n    fi\n}\n\n# Run the tests\ntest_makefile\n"
        },
        {
          "name": "TODO.md",
          "type": "file",
          "path": "scripts/TODO.md",
          "size": 295,
          "content": "# Scripts - TODO\n\n## High Priority\n- [ ] Document all scripts\n- [ ] Add error handling to critical scripts\n- [ ] Implement input validation\n\n## Medium Priority\n- [ ] Add usage examples\n- [ ] Create tests for scripts\n- [ ] Standardize logging format\n\n## Completed\n- [x] Initial script collection\n"
        },
        {
          "name": "update_imports.sh",
          "type": "file",
          "path": "scripts/update_imports.sh",
          "size": 1005,
          "content": "#!/bin/bash\n\n# Update imports in all Go files\nfind media-vault-backend -name \"*.go\" -type f -exec sed -i 's|media-vault-backend|github.com/wronai/media-vault-backend|g' {} \\;\n\n# Update the module path in go.mod\ncat > media-vault-backend/go.mod << 'EOL'\nmodule github.com/wronai/media-vault-backend\n\ngo 1.21\n\nrequire (\n    github.com/gofiber/fiber/v2 v2.50.0\n    github.com/golang-jwt/jwt/v5 v5.0.0\n    github.com/google/uuid v1.3.1\n    github.com/mattn/go-sqlite3 v1.14.17\n)\n\nrequire (\n    github.com/andybalholm/brotli v1.0.5 // indirect\n    github.com/klauspost/compress v1.16.7 // indirect\n    github.com/mattn/go-colorable v0.1.13 // indirect\n    github.com/mattn/go-isatty v0.0.19 // indirect\n    github.com/mattn/go-runewidth v0.0.15 // indirect\n    github.com/rivo/uniseg v0.2.0 // indirect\n    github.com/valyala/bytebufferpool v1.0.0 // indirect\n    github.com/valyala/fasthttp v1.50.0 // indirect\n    github.com/valyala/tcplisten v1.0.0 // indirect\n)\nEOL\n\necho \"Updated imports and module path\"\n"
        }
      ]
    },
    {
      "name": "tests",
      "type": "directory",
      "path": "tests",
      "children": [
        {
          "name": "backend",
          "type": "directory",
          "path": "tests/backend",
          "children": [
            {
              "name": "auth_test.go",
              "type": "file",
              "path": "tests/backend/auth_test.go",
              "size": 0,
              "content": ""
            },
            {
              "name": "handlers_test.go",
              "type": "file",
              "path": "tests/backend/handlers_test.go",
              "size": 0,
              "content": ""
            },
            {
              "name": "services_test.go",
              "type": "file",
              "path": "tests/backend/services_test.go",
              "size": 0,
              "content": ""
            }
          ]
        },
        {
          "name": "e2e",
          "type": "directory",
          "path": "tests/e2e",
          "children": [
            {
              "name": "admin_flow_test.js",
              "type": "file",
              "path": "tests/e2e/admin_flow_test.js",
              "size": 0,
              "content": ""
            },
            {
              "name": "user_flow_test.js",
              "type": "file",
              "path": "tests/e2e/user_flow_test.js",
              "size": 0,
              "content": ""
            }
          ]
        },
        {
          "name": "frontend",
          "type": "directory",
          "path": "tests/frontend",
          "children": [
            {
              "name": "test",
              "type": "directory",
              "path": "tests/frontend/test",
              "children": [
                {
                  "name": "integration_test.dart",
                  "type": "file",
                  "path": "tests/frontend/test/integration_test.dart",
                  "size": 0,
                  "content": ""
                },
                {
                  "name": "widget_test.dart",
                  "type": "file",
                  "path": "tests/frontend/test/widget_test.dart",
                  "size": 0,
                  "content": ""
                }
              ]
            }
          ]
        },
        {
          "name": "TODO.md",
          "type": "file",
          "path": "tests/TODO.md",
          "size": 309,
          "content": "# Tests - TODO\n\n## High Priority\n- [ ] Set up test framework\n- [ ] Create unit tests for core functionality\n- [ ] Implement integration tests\n\n## Medium Priority\n- [ ] Add test coverage reporting\n- [ ] Create end-to-end tests\n- [ ] Set up CI test pipeline\n\n## Completed\n- [x] Initial test directory structure\n"
        }
      ]
    },
    {
      "name": "tools",
      "type": "directory",
      "path": "tools",
      "children": [
        {
          "name": "build.sh",
          "type": "file",
          "path": "tools/build.sh",
          "size": 0,
          "content": ""
        },
        {
          "name": "deploy.sh",
          "type": "file",
          "path": "tools/deploy.sh",
          "size": 0,
          "content": ""
        },
        {
          "name": "format.sh",
          "type": "file",
          "path": "tools/format.sh",
          "size": 0,
          "content": ""
        },
        {
          "name": "lint.sh",
          "type": "file",
          "path": "tools/lint.sh",
          "size": 0,
          "content": ""
        },
        {
          "name": "test.sh",
          "type": "file",
          "path": "tools/test.sh",
          "size": 0,
          "content": ""
        }
      ]
    },
    {
      "name": "uploads",
      "type": "directory",
      "path": "uploads",
      "children": []
    },
    {
      "name": "CHANGELOG.md",
      "type": "file",
      "path": "CHANGELOG.md",
      "size": 675,
      "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n### Added\n- Initial project setup\n- Basic infrastructure with Docker Compose\n- Keycloak integration for authentication\n- File explorer interface\n- Media vault components\n- Monitoring stack\n\n### Changed\n- Project structure and organization\n\n### Fixed\n- Various bug fixes and improvements\n\n---\n*Note: This is the initial changelog entry. Future changes should be documented below following the same format.*\n"
    },
    {
      "name": "CONTRIBUTING.md",
      "type": "file",
      "path": "CONTRIBUTING.md",
      "size": 6706,
      "content": "# 👋 Welcome Contributors!\n\nThank you for your interest in contributing to Media Vault! We're excited to have you on board. This guide will help you get started with contributing to our project.\n\n## 📋 Table of Contents\n\n- [Code of Conduct](#-code-of-conduct)\n- [Getting Started](#-getting-started)\n- [Development Workflow](#-development-workflow)\n- [Code Style](#-code-style)\n- [Testing](#-testing)\n- [Pull Request Process](#-pull-request-process)\n- [Reporting Bugs](#-reporting-bugs)\n- [Feature Requests](#-feature-requests)\n- [Documentation](#-documentation)\n- [Community](#-community)\n\n## 🤝 Code of Conduct\n\nPlease read our [Code of Conduct](CODE_OF_CONDUCT.md) before contributing. We are committed to fostering a welcoming and inclusive community.\n\n## 🚀 Getting Started\n\n### Prerequisites\n\n- Git\n- Docker 20.10+ and Docker Compose\n- Node.js 16+ (for frontend development)\n- Go 1.19+ (for backend development)\n- Make (optional but recommended)\n\n### Setting Up the Development Environment\n\n1. **Fork the repository**\n   ```bash\n   git clone https://github.com/wronai/docker-platform.git\n   cd docker-platform\n   ```\n\n2. **Set up environment variables**\n   ```bash\n   cp .env.example .env\n   # Edit .env with your configuration\n   ```\n\n3. **Start the development environment**\n   ```bash\n   make dev\n   ```\n\n4. **Access the applications**\n   - Web UI: http://localhost:3000\n   - API: http://localhost:8080\n   - Documentation: http://localhost:8080/docs\n   - Monitoring: http://localhost:9090\n\n## 🔄 Development Workflow\n\n1. **Create a new branch**\n   ```bash\n   git checkout -b feature/your-feature-name\n   # or\n   git checkout -b fix/your-bug-fix\n   ```\n\n2. **Make your changes**\n   - Follow the code style guidelines\n   - Write tests for new features\n   - Update documentation as needed\n\n3. **Run tests**\n   ```bash\n   make test\n   ```\n\n4. **Commit your changes**\n   ```bash\n   git add .\n   git commit -m \"feat: add new feature\"\n   ```\n\n5. **Push your changes**\n   ```bash\n   git push origin your-branch-name\n   ```\n\n6. **Create a Pull Request**\n   - Go to the [repository](https://github.com/wronai/docker-platform)\n   - Click \"New Pull Request\"\n   - Follow the PR template\n   - Request reviews from maintainers\n\n## 🎨 Code Style\n\n### Backend (Go)\n- Follow the [Effective Go](https://golang.org/doc/effective_go.html) guidelines\n- Use `gofmt` for formatting\n- Run `golint` and `go vet` before committing\n- Write unit tests for new functionality\n\n### Frontend (Flutter/Dart)\n- Follow the [Dart Style Guide](https://dart.dev/guides/language/effective-dart/style)\n- Use `dart format` for formatting\n- Follow BLoC pattern for state management\n- Write widget tests for UI components\n\n### Git Commit Messages\n\nWe follow the [Conventional Commits](https://www.conventionalcommits.org/) specification:\n\n```\n<type>[optional scope]: <description>\n\n[optional body]\n\n[optional footer]\n```\n\nTypes:\n- `feat`: New feature\n- `fix`: Bug fix\n- `docs`: Documentation changes\n- `style`: Code style changes\n- `refactor`: Code changes that neither fixes a bug nor adds a feature\n- `perf`: Performance improvements\n- `test`: Adding tests\n- `chore`: Changes to the build process or auxiliary tools\n\nExample:\n```\nfeat(auth): add two-factor authentication\n\n- Add TOTP support\n- Add recovery codes\n- Update login flow\n\nCloses #123\n```\n\n## 🧪 Testing\n\n### Running Tests\n\n```bash\n# Run all tests\nmake test\n\n# Run backend tests\nmake test-backend\n\n# Run frontend tests\nmake test-frontend\n\n# Run integration tests\nmake test-integration\n\n# Run linters\nmake lint\n```\n\n### Writing Tests\n- Write unit tests for all new functionality\n- Include integration tests for critical paths\n- Use descriptive test names\n- Test edge cases and error conditions\n\n## 🔄 Pull Request Process\n\n1. Ensure your code passes all tests\n2. Update documentation if needed\n3. Ensure your branch is up to date with `main`\n4. Run linters and fix any issues\n5. Request reviews from at least one maintainer\n6. Address all review comments\n7. Wait for CI to pass\n8. Squash and merge when approved\n\n## 🐛 Reporting Bugs\n\nFound a bug? Please let us know by [opening an issue](https://github.com/wronai/docker-platform/issues/new?template=bug_report.md).\n\n### Before Submitting a Bug Report\n1. Check if the issue has already been reported\n2. Try to reproduce the issue with the latest version\n3. Collect as much information as possible\n\n### Bug Report Template\n```markdown\n## Describe the bug\nA clear and concise description of what the bug is.\n\n## To Reproduce\nSteps to reproduce the behavior:\n1. Go to '...'\n2. Click on '....'\n3. Scroll down to '....'\n4. See error\n\n## Expected behavior\nA clear and concise description of what you expected to happen.\n\n## Screenshots\nIf applicable, add screenshots to help explain your problem.\n\n## Additional context\nAdd any other context about the problem here.\n```\n\n## 💡 Feature Requests\n\nHave an idea for a new feature? [Open a feature request](https://github.com/wronai/docker-platform/issues/new?template=feature_request.md).\n\n### Feature Request Template\n```markdown\n## Is your feature request related to a problem? Please describe.\nA clear and concise description of what the problem is.\n\n## Describe the solution you'd like\nA clear and concise description of what you want to happen.\n\n## Describe alternatives you've considered\nA clear and concise description of any alternative solutions or features you've considered.\n\n## Additional context\nAdd any other context or screenshots about the feature request here.\n```\n\n## 📚 Documentation\n\nGood documentation is crucial for the success of any project. We appreciate contributions that improve our documentation.\n\n### Documentation Guidelines\n- Keep it clear and concise\n- Use proper formatting\n- Include examples where helpful\n- Keep it up to date\n\n### Building Documentation\n```bash\n# Build documentation\nmake docs\n\n# Serve documentation locally\nmake docs-serve\n```\n\n## 🌍 Community\n\n### Getting Help\n- [GitHub Discussions](https://github.com/wronai/docker-platform/discussions)\n- [Discord Server](https://discord.gg/your-invite-link)\n- [Community Forum](https://community.mediavault.example.com)\n\n### Stay Updated\n- Follow us on [Twitter](https://twitter.com/yourhandle)\n- Subscribe to our [blog](https://blog.mediavault.example.com)\n- Join our [newsletter](https://mediavault.example.com/newsletter)\n\n## 🙏 Acknowledgments\n\n- Thank you to all our contributors\n- Special thanks to our core maintainers\n- Shoutout to all our beta testers\n\n---\n\n<div align=\"center\">\n  <p>Happy coding! 🚀</p>\n  <p>If you have any questions, feel free to ask in our <a href=\"https://github.com/wronai/docker-platform/discussions\">Discussions</a>.</p>\n</div>\n"
    },
    {
      "name": "docker-compose.automation.yml",
      "type": "file",
      "path": "docker-compose.automation.yml",
      "size": 2898,
      "content": "version: '3.8'\n\nservices:\n  # Automated Incident Response\n  incident-response:\n    image: alpine:3.18\n    container_name: incident-response\n    volumes:\n      - ./scripts/automation:/scripts\n      - /var/run/docker.sock:/var/run/docker.sock\n    environment:\n      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}\n      - PAGERDUTY_API_KEY=${PAGERDUTY_API_KEY}\n      - TEAMS_WEBHOOK_URL=${TEAMS_WEBHOOK_URL}\n    command: |\n      sh -c \"\n        apk add --no-cache curl jq docker-cli\n        while true; do\n          /scripts/incident-handler.sh\n          sleep 30\n        done\n      \"\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n\n  # Capacity Planning Service\n  capacity-planner:\n    image: python:3.11-alpine\n    container_name: capacity-planner\n    volumes:\n      - ./scripts/capacity:/app\n      - ./data/capacity:/data\n    environment:\n      - PROMETHEUS_URL=http://prometheus:9090\n      - PREDICTION_DAYS=30\n      - ALERT_THRESHOLD=0.8\n    command: |\n      sh -c \"\n        pip install requests numpy pandas\n        cd /app && python capacity_planner.py\n      \"\n    depends_on:\n      - prometheus\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n\n  # Log Analysis & Anomaly Detection\n  log-analyzer:\n    image: python:3.11-alpine\n    container_name: log-analyzer\n    volumes:\n      - ./scripts/analysis:/app\n      - ./logs:/logs:ro\n    environment:\n      - ELASTICSEARCH_URL=http://elasticsearch:9200\n      - ANOMALY_THRESHOLD=3.0\n      - ALERT_WEBHOOK=${SLACK_WEBHOOK_URL}\n    command: |\n      sh -c \"\n        pip install elasticsearch scikit-learn numpy\n        cd /app && python anomaly_detector.py\n      \"\n    profiles:\n      - analytics\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n\n  # Performance Optimization Service\n  performance-optimizer:\n    image: alpine:3.18\n    container_name: performance-optimizer\n    volumes:\n      - ./scripts/optimization:/scripts\n      - /var/run/docker.sock:/var/run/docker.sock\n    environment:\n      - PROMETHEUS_URL=http://prometheus:9090\n      - OPTIMIZATION_SCHEDULE=0 3 * * *  # Daily at 3 AM\n    command: |\n      sh -c \"\n        apk add --no-cache curl jq docker-cli dcron\n        echo '$OPTIMIZATION_SCHEDULE /scripts/optimize.sh' | crontab -\n        crond -f\n      \"\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n\n  # Certificate Management\n  cert-manager:\n    image: alpine:3.18\n    container_name: cert-manager\n    volumes:\n      - ./certs:/certs\n      - ./scripts/certs:/scripts\n    environment:\n      - DOMAIN=${PRODUCTION_DOMAIN}\n      - EMAIL=${ADMIN_EMAIL}\n      - CERT_RENEWAL_DAYS=30\n    command: |\n      sh -c \"\n        apk add --no-cache openssl curl\n        /scripts/cert-monitor.sh\n      \"\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n    profiles:\n      - production\n\nnetworks:\n  media-vault-network:\n    external: true\n\n"
    },
    {
      "name": "docker-compose.infrastructure.yml",
      "type": "file",
      "path": "docker-compose.infrastructure.yml",
      "size": 11141,
      "content": "# docker-compose.infrastructure.yml - Infrastructure Administration\nversion: '3.8'\n\nservices:\n  # Prometheus - Metrics Collection\n  prometheus:\n    image: prom/prometheus:v2.47.0\n    container_name: prometheus\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ./monitoring/prometheus:/etc/prometheus\n      - prometheus_data:/prometheus\n    command:\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.path=/prometheus'\n      - '--web.console.libraries=/etc/prometheus/console_libraries'\n      - '--web.console.templates=/etc/prometheus/consoles'\n      - '--storage.tsdb.retention.time=30d'\n      - '--web.enable-lifecycle'\n      - '--web.enable-admin-api'\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n\n  # Grafana - Visualization & Dashboards\n  grafana:\n    image: grafana/grafana:10.1.0\n    container_name: grafana\n    ports:\n      - \"3333:3000\"\n    volumes:\n      - grafana_data:/var/lib/grafana\n      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning\n      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards\n    environment:\n      - GF_SECURITY_ADMIN_USER=admin\n      - GF_SECURITY_ADMIN_PASSWORD=grafana123\n      - GF_USERS_ALLOW_SIGN_UP=false\n      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel\n      - GF_AUTH_GENERIC_OAUTH_ENABLED=true\n      - GF_AUTH_GENERIC_OAUTH_NAME=Keycloak\n      - GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP=true\n      - GF_AUTH_GENERIC_OAUTH_CLIENT_ID=grafana\n      - GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET=grafana-secret\n      - GF_AUTH_GENERIC_OAUTH_SCOPES=openid profile email\n      - GF_AUTH_GENERIC_OAUTH_AUTH_URL=http://localhost:8443/realms/media-vault/protocol/openid_connect/auth\n      - GF_AUTH_GENERIC_OAUTH_TOKEN_URL=http://keycloak:8080/realms/media-vault/protocol/openid_connect/token\n      - GF_AUTH_GENERIC_OAUTH_API_URL=http://keycloak:8080/realms/media-vault/protocol/openid_connect/userinfo\n    depends_on:\n      - prometheus\n      - keycloak\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n\n  # AlertManager - Alert Management\n  alertmanager:\n    image: prom/alertmanager:v0.26.0\n    container_name: alertmanager\n    ports:\n      - \"9093:9093\"\n    volumes:\n      - ./monitoring/alertmanager:/etc/alertmanager\n      - alertmanager_data:/alertmanager\n    command:\n      - '--config.file=/etc/alertmanager/alertmanager.yml'\n      - '--storage.path=/alertmanager'\n      - '--web.external-url=http://localhost:9093'\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n\n  # Node Exporter - Host Metrics\n  node-exporter:\n    image: prom/node-exporter:v1.6.1\n    container_name: node-exporter\n    ports:\n      - \"9100:9100\"\n    volumes:\n      - /proc:/host/proc:ro\n      - /sys:/host/sys:ro\n      - /:/rootfs:ro\n    command:\n      - '--path.procfs=/host/proc'\n      - '--path.rootfs=/rootfs'\n      - '--path.sysfs=/host/sys'\n      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n\n  # cAdvisor - Container Metrics\n  cadvisor:\n    image: gcr.io/cadvisor/cadvisor:v0.47.2\n    container_name: cadvisor\n    ports:\n      - \"8888:8080\"\n    volumes:\n      - /:/rootfs:ro\n      - /var/run:/var/run:rw\n      - /sys:/sys:ro\n      - /var/lib/docker/:/var/lib/docker:ro\n      - /dev/disk/:/dev/disk:ro\n    privileged: true\n    devices:\n      - /dev/kmsg\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n\n  # Loki - Log Aggregation\n  loki:\n    image: grafana/loki:2.9.0\n    container_name: loki\n    ports:\n      - \"3100:3100\"\n    volumes:\n      - ./monitoring/loki:/etc/loki\n      - loki_data:/tmp/loki\n    command: -config.file=/etc/loki/loki.yml\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n\n  # Promtail - Log Shipper\n  promtail:\n    image: grafana/promtail:2.9.0\n    container_name: promtail\n    volumes:\n      - ./monitoring/promtail:/etc/promtail\n      - /var/log:/var/log:ro\n      - /var/lib/docker/containers:/var/lib/docker/containers:ro\n    command: -config.file=/etc/promtail/promtail.yml\n    depends_on:\n      - loki\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n\n  # Jaeger - Distributed Tracing\n  jaeger:\n    image: jaegertracing/all-in-one:1.49\n    container_name: jaeger\n    ports:\n      - \"16686:16686\"  # UI\n      - \"14268:14268\"  # HTTP collector\n      - \"14250:14250\"  # gRPC collector\n    environment:\n      - COLLECTOR_OTLP_ENABLED=true\n    volumes:\n      - jaeger_data:/badger\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n\n  # Portainer - Docker Management\n  portainer:\n    image: portainer/portainer-ce:2.19.1\n    container_name: portainer\n    ports:\n      - \"9000:9000\"\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - portainer_data:/data\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n\n  # Traefik - Advanced Load Balancer (alternative to Caddy)\n  traefik:\n    image: traefik:v3.0\n    container_name: traefik\n    ports:\n      - \"8080:8080\"  # Dashboard\n      - \"80:80\"      # HTTP\n      - \"443:443\"    # HTTPS\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - ./traefik:/etc/traefik\n      - traefik_data:/data\n    command:\n      - --api.dashboard=true\n      - --api.insecure=true\n      - --providers.docker=true\n      - --providers.docker.exposedbydefault=false\n      - --entrypoints.web.address=:80\n      - --entrypoints.websecure.address=:443\n      - --certificatesresolvers.letsencrypt.acme.email=admin@mediavault.com\n      - --certificatesresolvers.letsencrypt.acme.storage=/data/acme.json\n      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web\n      - --metrics.prometheus=true\n      - --tracing.jaeger=true\n      - --tracing.jaeger.samplingServerURL=http://jaeger:14268/api/sampling\n      - --tracing.jaeger.localAgentHostPort=jaeger:6831\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n    profiles:\n      - traefik\n\n  # Redis Commander - Redis Management\n  redis-commander:\n    image: rediscommander/redis-commander:latest\n    container_name: redis-commander\n    ports:\n      - \"8081:8081\"\n    environment:\n      - REDIS_HOSTS=local:redis:6379\n    depends_on:\n      - redis\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n    profiles:\n      - redis-tools\n\n  # pgAdmin - PostgreSQL Management\n  pgadmin:\n    image: dpage/pgadmin4:7.6\n    container_name: pgadmin\n    ports:\n      - \"5050:80\"\n    environment:\n      - PGADMIN_DEFAULT_EMAIL=admin@mediavault.com\n      - PGADMIN_DEFAULT_PASSWORD=pgadmin123\n      - PGADMIN_CONFIG_SERVER_MODE=False\n    volumes:\n      - pgadmin_data:/var/lib/pgadmin\n    depends_on:\n      - keycloak-db\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n\n  # Watchtower - Auto Updates\n  watchtower:\n    image: containrrr/watchtower:1.6.0\n    container_name: watchtower\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    environment:\n      - WATCHTOWER_CLEANUP=true\n      - WATCHTOWER_POLL_INTERVAL=86400  # 24 hours\n      - WATCHTOWER_INCLUDE_RESTARTING=true\n      - WATCHTOWER_NOTIFICATIONS=slack\n      - WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL=${SLACK_WEBHOOK_URL}\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n    profiles:\n      - auto-update\n\n  # Backup Service\n  backup-service:\n    image: alpine:3.18\n    container_name: backup-service\n    volumes:\n      - ./data:/backup-source/data:ro\n      - ./uploads:/backup-source/uploads:ro\n      - ./backups:/backups\n      - ./scripts:/scripts\n    environment:\n      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM\n      - RETENTION_DAYS=30\n      - S3_BUCKET=${S3_BACKUP_BUCKET}\n      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}\n      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}\n    command: |\n      sh -c \"\n        apk add --no-cache dcron aws-cli sqlite\n        echo '$$BACKUP_SCHEDULE cd /scripts && ./backup.sh' | crontab -\n        crond -f\n      \"\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n\n  # Elasticsearch (for advanced logging)\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.1\n    container_name: elasticsearch\n    environment:\n      - discovery.type=single-node\n      - xpack.security.enabled=false\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n    ports:\n      - \"9200:9200\"\n    volumes:\n      - elasticsearch_data:/usr/share/elasticsearch/data\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n    profiles:\n      - elk\n\n  # Kibana (for log visualization)\n  kibana:\n    image: docker.elastic.co/kibana/kibana:8.9.1\n    container_name: kibana\n    ports:\n      - \"5601:5601\"\n    environment:\n      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200\n    depends_on:\n      - elasticsearch\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n    profiles:\n      - elk\n\n  # FileBeat (log shipping to ELK)\n  filebeat:\n    image: docker.elastic.co/beats/filebeat:8.9.1\n    container_name: filebeat\n    user: root\n    volumes:\n      - ./monitoring/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro\n      - /var/lib/docker/containers:/var/lib/docker/containers:ro\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    depends_on:\n      - elasticsearch\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n    profiles:\n      - elk\n\n  # Nginx Proxy Manager (alternative to Caddy/Traefik)\n  nginx-proxy-manager:\n    image: jc21/nginx-proxy-manager:2.10.4\n    container_name: nginx-proxy-manager\n    ports:\n      - \"8080:80\"    # Admin UI\n      - \"8443:443\"   # HTTPS\n      - \"8181:81\"    # Admin Panel\n    volumes:\n      - npm_data:/data\n      - npm_letsencrypt:/etc/letsencrypt\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n    profiles:\n      - nginx-proxy\n\nvolumes:\n  prometheus_data:\n  grafana_data:\n  alertmanager_data:\n  loki_data:\n  jaeger_data:\n  portainer_data:\n  traefik_data:\n  pgadmin_data:\n  elasticsearch_data:\n  npm_data:\n  npm_letsencrypt:\n\nnetworks:\n  media-vault-network:\n    external: true\n\n---\n\n# monitoring/prometheus/prometheus.yml\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nrule_files:\n  - \"rules/*.yml\"\n\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets:\n          - alertmanager:9093\n\nscrape_configs:\n  # Prometheus itself\n  - job_name: 'prometheus'\n    static_configs:\n      - targets: ['localhost:9090']\n\n  # Node Exporter\n  - job_name: 'node-exporter'\n    static_configs:\n      - targets: ['node-exporter:9100']\n\n  # cAdvisor\n  - job_name: 'cadvisor'\n    static_configs:\n      - targets: ['cadvisor:8080']\n\n  # Media Vault API\n  - job_name: 'media-vault-api'\n    static_configs:\n      - targets: ['media-vault-api:8080']\n    metrics_path: '/metrics'\n\n  # Keycloak\n  - job_name: 'keycloak'\n    static_configs:\n      - targets: ['keycloak:8080']\n    metrics_path: '/metrics'\n\n  # PostgreSQL Exporter\n  - job_name: 'postgres'\n    static_configs:\n      - targets: ['postgres-exporter:9187']\n\n  # Traefik\n  - job_name: 'traefik'\n    static_configs:\n      - targets: ['traefik:8080']\n\n---\n\n"
    },
    {
      "name": "docker-compose.monitoring.yml",
      "type": "file",
      "path": "docker-compose.monitoring.yml",
      "size": 9017,
      "content": "# docker-compose.monitoring.yml - Media Vault Monitoring Stack\nversion: '3.8'\n\nservices:\n  # Prometheus - Metrics Collection\n  prometheus:\n    image: prom/prometheus:v2.47.0\n    container_name: prometheus\n    ports:\n      - \"${PROMETHEUS_PORT:-9090}:9090\"\n    volumes:\n      - ./monitoring/prometheus:/etc/prometheus\n      - prometheus_data:/prometheus\n    command:\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.path=/prometheus'\n      - '--storage.tsdb.retention.time=30d'\n      - '--web.console.libraries=/etc/prometheus/console_libraries'\n      - '--web.console.templates=/etc/prometheus/consoles'\n      - '--web.enable-lifecycle'\n      - '--web.enable-admin-api'\n      - '--web.external-url=http://localhost:9090'\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n    healthcheck:\n      test: [\"CMD\", \"wget\", \"--no-verbose\", \"--tries=1\", \"--spider\", \"http://localhost:9090/-/healthy\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\n  # Grafana - Visualization & Dashboards\n  grafana:\n    image: grafana/grafana:10.1.0\n    container_name: grafana\n    ports:\n      - \"${GRAFANA_PORT:-3333}:3000\"\n    volumes:\n      - grafana_data:/var/lib/grafana\n      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning\n      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards\n    environment:\n      # Admin Configuration\n      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}\n      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-grafana123}\n      - GF_USERS_ALLOW_SIGN_UP=false\n      - GF_USERS_DEFAULT_THEME=dark\n\n      # Organization\n      - GF_USERS_AUTO_ASSIGN_ORG=true\n      - GF_USERS_AUTO_ASSIGN_ORG_ROLE=Viewer\n\n      # Plugins\n      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel\n\n      # Keycloak OAuth Integration\n      - GF_AUTH_GENERIC_OAUTH_ENABLED=true\n      - GF_AUTH_GENERIC_OAUTH_NAME=Keycloak\n      - GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP=true\n      - GF_AUTH_GENERIC_OAUTH_CLIENT_ID=grafana\n      - GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET=${GRAFANA_OAUTH_SECRET:-grafana-secret}\n      - GF_AUTH_GENERIC_OAUTH_SCOPES=openid profile email roles\n      - GF_AUTH_GENERIC_OAUTH_AUTH_URL=http://localhost:8443/realms/media-vault/protocol/openid_connect/auth\n      - GF_AUTH_GENERIC_OAUTH_TOKEN_URL=http://keycloak:8080/realms/media-vault/protocol/openid_connect/token\n      - GF_AUTH_GENERIC_OAUTH_API_URL=http://keycloak:8080/realms/media-vault/protocol/openid_connect/userinfo\n      - GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH=contains(realm_access.roles[*], 'vault-admin') && 'Admin' || 'Viewer'\n\n      # Database\n      - GF_DATABASE_TYPE=sqlite3\n      - GF_DATABASE_PATH=/var/lib/grafana/grafana.db\n\n      # Security\n      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY:-SW2YcwTIb9zpOOhoPsMm}\n      - GF_SECURITY_COOKIE_SECURE=false\n      - GF_SECURITY_COOKIE_SAMESITE=lax\n\n      # Analytics\n      - GF_ANALYTICS_REPORTING_ENABLED=false\n      - GF_ANALYTICS_CHECK_FOR_UPDATES=false\n\n      # Alerting\n      - GF_ALERTING_ENABLED=true\n      - GF_UNIFIED_ALERTING_ENABLED=true\n\n      # Rendering\n      - GF_RENDERING_SERVER_URL=http://renderer:8081/render\n      - GF_RENDERING_CALLBACK_URL=http://grafana:3000/\n\n      # Paths\n      - GF_PATHS_PLUGINS=/var/lib/grafana/plugins\n      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning\n    depends_on:\n      - prometheus\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n    healthcheck:\n      test: [\"CMD-SHELL\", \"wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\n  # Grafana Image Renderer\n  renderer:\n    image: grafana/grafana-image-renderer:latest\n    container_name: grafana-renderer\n    ports:\n      - \"8081:8081\"\n    environment:\n      ENABLE_METRICS: 'true'\n      RENDERING_MODE: default\n      RENDERING_CLUSTERING_MODE: default\n      BROWSER_TZ: UTC\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n\n  # AlertManager - Alert Management\n  alertmanager:\n    image: prom/alertmanager:v0.26.0\n    container_name: alertmanager\n    ports:\n      - \"9093:9093\"\n    volumes:\n      - ./monitoring/alertmanager:/etc/alertmanager\n      - alertmanager_data:/alertmanager\n    command:\n      - '--config.file=/etc/alertmanager/alertmanager.yml'\n      - '--storage.path=/alertmanager'\n      - '--web.external-url=http://localhost:9093'\n      - '--web.route-prefix=/'\n    environment:\n      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}\n      - SMTP_HOST=${SMTP_HOST}\n      - SMTP_USER=${SMTP_USER}\n      - SMTP_PASSWORD=${SMTP_PASSWORD}\n      - ADMIN_EMAIL=${ADMIN_EMAIL}\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n\n  # Node Exporter - Host Metrics\n  node-exporter:\n    image: prom/node-exporter:v1.6.1\n    container_name: node-exporter\n    ports:\n      - \"9100:9100\"\n    volumes:\n      - /proc:/host/proc:ro\n      - /sys:/host/sys:ro\n      - /:/rootfs:ro\n      - /run/systemd/private:/run/systemd/private:ro\n    command:\n      - '--path.procfs=/host/proc'\n      - '--path.rootfs=/rootfs'\n      - '--path.sysfs=/host/sys'\n      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'\n      - '--collector.systemd'\n      - '--collector.processes'\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n    pid: host\n\n  # cAdvisor - Container Metrics\n  cadvisor:\n    image: gcr.io/cadvisor/cadvisor:v0.47.2\n    container_name: cadvisor\n    ports:\n      - \"8888:8080\"\n    volumes:\n      - /:/rootfs:ro\n      - /var/run:/var/run:rw\n      - /sys:/sys:ro\n      - /var/lib/docker/:/var/lib/docker:ro\n      - /dev/disk/:/dev/disk:ro\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    privileged: true\n    devices:\n      - /dev/kmsg:/dev/kmsg\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n    command:\n      - '--housekeeping_interval=30s'\n      - '--max_housekeeping_interval=35s'\n      - '--event_storage_event_limit=default=0'\n      - '--event_storage_age_limit=default=0'\n      - '--disable_metrics=percpu,sched,tcp,udp,disk,diskIO,accelerator'\n      - '--docker_only'\n\n  # Postgres Exporter - Database Metrics\n  postgres-exporter:\n    image: prometheuscommunity/postgres-exporter:v0.13.2\n    container_name: postgres-exporter\n    ports:\n      - \"9187:9187\"\n    environment:\n      DATA_SOURCE_NAME: \"postgresql://keycloak:${KEYCLOAK_DB_PASSWORD:-keycloak_password}@keycloak-db:5432/keycloak?sslmode=disable\"\n      PG_EXPORTER_EXCLUDE_DATABASES: \"template0,template1\"\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n    profiles:\n      - full\n\n  # Redis Exporter - Redis Metrics\n  redis-exporter:\n    image: oliver006/redis_exporter:v1.53.0\n    container_name: redis-exporter\n    ports:\n      - \"9121:9121\"\n    environment:\n      REDIS_ADDR: \"redis://redis:6379\"\n      REDIS_EXPORTER_LOG_FORMAT: \"json\"\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n    profiles:\n      - full\n\n  # Blackbox Exporter - External Monitoring\n  blackbox-exporter:\n    image: prom/blackbox-exporter:v0.24.0\n    container_name: blackbox-exporter\n    ports:\n      - \"9115:9115\"\n    volumes:\n      - ./monitoring/blackbox:/etc/blackbox_exporter\n    command:\n      - '--config.file=/etc/blackbox_exporter/blackbox.yml'\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n\n  # Loki - Log Aggregation\n  loki:\n    image: grafana/loki:2.9.0\n    container_name: loki\n    ports:\n      - \"3100:3100\"\n    volumes:\n      - ./monitoring/loki:/etc/loki\n      - loki_data:/tmp/loki\n    command: -config.file=/etc/loki/loki.yml\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n    profiles:\n      - logs\n\n  # Promtail - Log Shipper\n  promtail:\n    image: grafana/promtail:2.9.0\n    container_name: promtail\n    volumes:\n      - ./monitoring/promtail:/etc/promtail\n      - /var/log:/var/log:ro\n      - /var/lib/docker/containers:/var/lib/docker/containers:ro\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    command: -config.file=/etc/promtail/promtail.yml\n    depends_on:\n      - loki\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n    profiles:\n      - logs\n\n  # Jaeger - Distributed Tracing\n  jaeger:\n    image: jaegertracing/all-in-one:1.49\n    container_name: jaeger\n    ports:\n      - \"5775:5775/udp\"\n      - \"6831:6831/udp\"\n      - \"6832:6832/udp\"\n      - \"5778:5778\"\n      - \"16686:16686\"\n      - \"14250:14250\"\n      - \"14268:14268\"\n      - \"14269:14269\"\n      - \"9411:9411\"\n    environment:\n      - COLLECTOR_OTLP_ENABLED=true\n      - COLLECTOR_ZIPKIN_HOST_PORT=:9411\n    volumes:\n      - jaeger_data:/badger\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n    profiles:\n      - tracing\n\nvolumes:\n  prometheus_data:\n    driver: local\n  grafana_data:\n    driver: local\n  alertmanager_data:\n    driver: local\n  loki_data:\n    driver: local\n  jaeger_data:\n    driver: local\n\nnetworks:\n  media-vault-network:\n    external: true"
    },
    {
      "name": "docker-compose.test.yml",
      "type": "file",
      "path": "docker-compose.test.yml",
      "size": 1087,
      "content": "version: '3.8'\n\nservices:\n  test-db:\n    image: postgres:15-alpine\n    environment:\n      POSTGRES_DB: test_db\n      POSTGRES_USER: test_user\n      POSTGRES_PASSWORD: test_password\n    ports:\n      - \"5433:5432\"\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U test_user -d test_db\"]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n\n  test-redis:\n    image: redis:7-alpine\n    ports:\n      - \"6379:6379\"\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"ping\"]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n\n  test-runner:\n    build:\n      context: .\n      dockerfile: media-vault-backend/Dockerfile\n    environment:\n      - DB_HOST=test-db\n      - DB_USER=test_user\n      - DB_PASSWORD=test_password\n      - DB_NAME=test_db\n      - REDIS_HOST=test-redis\n    depends_on:\n      test-db:\n        condition: service_healthy\n      test-redis:\n        condition: service_healthy\n    volumes:\n      - ./media-vault-backend:/app\n    command: >\n      sh -c \"go test -v ./... -coverprofile=coverage.out && \\\n             go tool cover -html=coverage.out -o coverage.html\"\n"
    },
    {
      "name": "docker-compose.yml",
      "type": "file",
      "path": "docker-compose.yml",
      "size": 5058,
      "content": "# docker-compose.yml - Media Vault Main Stack\nversion: '3.8'\n\nservices:\n  # Keycloak Database\n  keycloak-db:\n    image: postgres:15\n    container_name: keycloak-db\n    env_file:\n      - ./keycloak/.env\n    volumes:\n      - keycloak_db_data:/var/lib/postgresql/data\n      - ./scripts/backup:/backup-scripts\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U keycloak\"]\n      interval: 30s\n      timeout: 10s\n      retries: 5\n\n  # Keycloak Identity Provider using Bitnami image\n  keycloak:\n    image: bitnami/keycloak:26.2.5\n    container_name: keycloak\n    env_file:\n      - ./keycloak/.env\n      \n    ports:\n      - \"${KEYCLOAK_HTTP_PORT:-8082}:8080\"\n      - \"${KEYCLOAK_HTTPS_PORT:-8445}:8443\"\n    depends_on:\n      keycloak-db:\n        condition: service_healthy\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 10\n      start_period: 60s\n    volumes:\n      - ./keycloak/themes:/opt/bitnami/keycloak/themes\n      - ./keycloak/import:/opt/bitnami/keycloak/data/import\n      - keycloak_data:/bitnami/keycloak\n\n  # Media Vault API Backend\n  media-vault-api:\n    build:\n      context: ./media-vault-backend\n      dockerfile: Dockerfile\n    container_name: media-vault-api\n    ports:\n      - \"${API_PORT:-8080}:8080\"\n    volumes:\n      - ./data:/data\n      - ./uploads:/uploads\n      - ./processing:/processing\n    env_file:\n      - ./media-vault-backend/.env\n    depends_on:\n      keycloak:\n        condition: service_healthy\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n    healthcheck:\n      test: [\"CMD\", \"wget\", \"--no-verbose\", \"--tries=1\", \"--spider\", \"http://localhost:8080/health\"]\n      timeout: 5s\n      retries: 5\n      start_period: 10s\n\n  # Media Vault Analyzer (AI Processing)\n  media-vault-analyzer:\n    build:\n      context: ./media-vault-analyzer\n      dockerfile: Dockerfile\n    container_name: media-vault-analyzer\n    env_file:\n      - ./media-vault-analyzer/.env\n    volumes:\n      - ./uploads:/uploads\n      - ./processing:/processing\n      - ./models:/models\n    depends_on:\n      - media-vault-api\n      - keycloak\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n    deploy:\n      resources:\n        limits:\n          memory: 2G\n        reservations:\n          memory: 1G\n\n  # NSFW Content Detection Service\n  nsfw-analyzer:\n    build:\n      context: ./nsfw-analyzer\n      dockerfile: Dockerfile\n    container_name: nsfw-analyzer\n    ports:\n      - \"${NSFW_PORT:-8501}:8501\"\n    env_file:\n      - ./nsfw-analyzer/.env\n    volumes:\n      - ./models:/models\n      - ./uploads:/uploads:ro\n    depends_on:\n      - media-vault-api\n      - keycloak\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n    deploy:\n      resources:\n        limits:\n          memory: 3G\n        reservations:\n          memory: 2G\n    profiles:\n      - full\n\n  # Flutter Web Frontend\n  flutter-web:\n    build:\n      context: ./flutter_frontend\n      dockerfile: Dockerfile.web\n    container_name: flutter-web\n    ports:\n      - \"${FRONTEND_PORT:-3000}:80\"\n    env_file:\n      - ./flutter_frontend/.env\n    depends_on:\n      - media-vault-api\n      - keycloak\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n\n  # Admin Panel (Traditional Web Interface)\n  media-vault-admin:\n    build:\n      context: ./media-vault-admin\n      dockerfile: Dockerfile\n    container_name: media-vault-admin\n    env_file:\n      - ./media-vault-admin/.env\n    ports:\n      - \"${ADMIN_PORT:-3001}:80\"\n    depends_on:\n      - media-vault-api\n      - keycloak\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n\n  # Caddy Reverse Proxy\n  caddy:\n    image: caddy:2-alpine\n    container_name: caddy-proxy\n    ports:\n      - \"${HTTP_PORT:-80}:80\"\n      - \"${HTTPS_PORT:-443}:443\"\n    volumes:\n      - ./caddy/Caddyfile:/etc/caddy/Caddyfile\n      - caddy_data:/data\n      - caddy_config:/config\n    env_file:\n      - ./caddy/.env\n    depends_on:\n      - media-vault-api\n      - flutter-web\n      - media-vault-admin\n      - keycloak\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n\n  # Redis (for caching and sessions)\n  redis:\n    image: redis:7-alpine\n    container_name: redis\n    ports:\n      - \"${REDIS_PORT:-6379}:6379\"\n    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru\n    volumes:\n      - redis_data:/data\n    restart: unless-stopped\n    networks:\n      - media-vault-network\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"ping\"]\n      interval: 30s\n      timeout: 10s\n      retries: 5\n\nvolumes:\n  caddy_data:\n    driver: local\n  caddy_config:\n    driver: local\n  keycloak_data:\n    driver: local\n  keycloak_db_data:\n    driver: local\n  redis_data:\n    driver: local\n\nnetworks:\n  media-vault-network:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: 172.20.0.0/16\n\n"
    },
    {
      "name": "DOCUMENTATION.md",
      "type": "file",
      "path": "DOCUMENTATION.md",
      "size": 3344,
      "content": "# 📚 Media Vault - Comprehensive Documentation\n\n## 📖 Table of Contents\n1. [Overview](#-overview)\n2. [Quick Start](#-quick-start)\n3. [Architecture](#-architecture)\n4. [API Reference](#-api-reference)\n5. [Deployment](#-deployment)\n6. [Development](#-development)\n7. [Monitoring & Operations](#-monitoring--operations)\n8. [Security](#-security)\n9. [Contributing](#-contributing)\n10. [Troubleshooting](#-troubleshooting)\n\n## 🌟 Overview\n\nMedia Vault is a secure, scalable media management platform with AI-powered analysis and organization capabilities. It provides:\n\n- Secure media storage and sharing\n- AI-powered media analysis\n- Role-based access control\n- Comprehensive monitoring\n- Scalable architecture\n\n## 🚀 Quick Start\n\n### Prerequisites\n- Docker 20.10+\n- Docker Compose 2.0+\n- 4GB+ RAM recommended\n\n### Local Development Setup\n\n```bash\n# Clone the repository\ngit clone https://github.com/wronai/docker-platform.git\ncd docker-platform\n\n# Copy example environment file\ncp .env.example .env\n\n# Start all services\nmake up\n\n# Access the application\nopen http://localhost\n```\n\n## 🏗️ Architecture\n\nFor detailed architecture documentation, see [ARCHITECTURE.md](./docs/ARCHITECTURE.md).\n\n### Core Components\n\n1. **Frontend**: Flutter-based web interface\n2. **Backend API**: Go-based REST API\n3. **Authentication**: Keycloak\n4. **Database**: PostgreSQL\n5. **Object Storage**: MinIO\n6. **AI Services**: Media analysis and processing\n7. **Monitoring**: Prometheus, Grafana, Loki\n\n## 📡 API Reference\n\nFor complete API documentation, see [API.md](./docs/API.md).\n\n### Authentication\n\n```http\nPOST /api/v1/auth/login\nContent-Type: application/json\n\n{\n  \"username\": \"user@example.com\",\n  \"password\": \"yourpassword\"\n}\n```\n\n## 🚀 Deployment\n\nFor production deployment instructions, see [DEPLOYMENT.md](./docs/DEPLOYMENT.md).\n\n### Environment Variables\n\nKey environment variables:\n\n```env\n# Database\nPOSTGRES_DB=mediavault\nPOSTGRES_USER=mediavault\nPOSTGRES_PASSWORD=changeme\n\n# Keycloak\nKEYCLOAK_ADMIN=admin\nKEYCLOAK_ADMIN_PASSWORD=changeme\n\n# MinIO\nMINIO_ROOT_USER=minioadmin\nMINIO_ROOT_PASSWORD=minioadmin\n```\n\n## 💻 Development\n\n### Prerequisites\n- Go 1.21+\n- Node.js 18+\n- Flutter 3.0+\n\n### Building\n\n```bash\n# Build all services\nmake build\n\n# Run tests\nmake test\n\n# Lint code\nmake lint\n```\n\n## 📊 Monitoring & Operations\n\nFor monitoring setup and operations, see [MONITORING.md](./docs/MONITORING.md).\n\n### Accessing Monitoring Tools\n\n- **Grafana**: http://localhost:3000\n- **Prometheus**: http://localhost:9090\n- **Loki**: http://localhost:3100\n\n## 🔒 Security\n\nFor security best practices and guidelines, see [SECURITY.md](./docs/SECURITY.md).\n\n### Reporting Security Issues\n\nPlease report security issues to security@wron.ai.\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Commit your changes\n4. Push to the branch\n5. Open a pull request\n\n## 🛠️ Troubleshooting\n\n### Common Issues\n\n1. **Port conflicts**\n   - Check if ports 80, 443, 5432, 9000, 9090, 3000 are available\n\n2. **Database connection issues**\n   - Verify PostgreSQL is running\n   - Check database credentials in .env\n\n3. **Authentication problems**\n   - Ensure Keycloak is running\n   - Verify user credentials in Keycloak\n\n### Getting Help\n\n- [GitHub Issues](https://github.com/wronai/docker-platform/issues)\n- support@wron.ai\n"
    },
    {
      "name": "generate_structure.py",
      "type": "file",
      "path": "generate_structure.py",
      "size": 5744,
      "content": "#!/usr/bin/env python3\nimport os\nimport json\nfrom pathlib import Path\nimport re\n\ndef get_file_info(file_path, base_path):\n    \"\"\"Get file information in the required format.\"\"\"\n    rel_path = os.path.relpath(file_path, base_path)\n    if os.path.isdir(file_path):\n        return {\n            'name': os.path.basename(file_path),\n            'type': 'directory',\n            'path': rel_path.replace('\\\\', '/'),\n            'children': scan_directory(file_path, base_path)\n        }\n    else:\n        try:\n            file_size = os.path.getsize(file_path)\n            content = ''\n            # Only read text files for content\n            if file_size < 1024 * 1024:  # Only read files smaller than 1MB\n                try:\n                    with open(file_path, 'r', encoding='utf-8') as f:\n                        content = f.read()\n                except (UnicodeDecodeError, PermissionError):\n                    content = f\"[Binary file: {os.path.basename(file_path)}]\"\n            \n            return {\n                'name': os.path.basename(file_path),\n                'type': 'file',\n                'path': rel_path.replace('\\\\', '/'),\n                'size': file_size,\n                'content': content\n            }\n        except (PermissionError, OSError) as e:\n            print(f\"Skipping {file_path}: {e}\")\n            return None\n\ndef should_skip_directory(dirname):\n    \"\"\"Check if directory should be skipped.\"\"\"\n    skip_dirs = {\n        'node_modules',\n        '.git',\n        '.github',\n        '__pycache__',\n        'venv',\n        'env',\n        '.venv',\n        'dist',\n        'build',\n        'coverage',\n        '.vscode',\n        '.idea'\n    }\n    return dirname in skip_dirs\n\ndef scan_directory(directory, base_path):\n    \"\"\"Recursively scan a directory and return its structure.\"\"\"\n    result = []\n    try:\n        entries = sorted(os.listdir(directory), key=lambda x: (not os.path.isdir(os.path.join(directory, x)), x.lower()))\n        for entry in entries:\n            if entry.startswith('.') or should_skip_directory(entry):\n                continue\n                \n            full_path = os.path.join(directory, entry)\n            file_info = get_file_info(full_path, base_path)\n            if file_info:\n                result.append(file_info)\n    except PermissionError as e:\n        print(f\"Permission denied: {directory}\")\n    return result\n\ndef generate_json_structure(root_dir, output_file):\n    \"\"\"Generate JSON structure for the given directory.\"\"\"\n    root_dir = os.path.abspath(root_dir)\n    structure = {\n        'name': os.path.basename(root_dir),\n        'type': 'directory',\n        'path': '.',\n        'children': scan_directory(root_dir, root_dir)\n    }\n    \n    with open(output_file, 'w', encoding='utf-8') as f:\n        json.dump(structure, f, indent=2, ensure_ascii=False)\n    \n    print(f\"Generated structure saved to {output_file}\")\n    return structure\n\ndef update_html_template(html_file, json_file):\n    \"\"\"Update HTML template with file system data if template exists.\"\"\"\n    try:\n        # Check if template file exists\n        if not os.path.exists(html_file):\n            print(f\"Note: HTML template {html_file} not found, skipping update\")\n            return\n            \n        # Read the template file\n        with open(html_file, 'r', encoding='utf-8') as f:\n            content = f.read()\n        \n        # Read the JSON file\n        with open(json_file, 'r', encoding='utf-8') as f:\n            json_data = f.read()\n        \n        # Create a script tag with the file system data\n        script_tag = f'<script>\\n        // This is automatically generated - do not edit manually\\n        const FILE_SYSTEM = {json_data};\\n    </script>'\n        \n        # Replace the placeholder script tag\n        content = re.sub(\n            r'<script>\\s*// This will be replaced by the actual file system data\\s*const FILE_SYSTEM = \\{.*?\\};?\\s*</script>',\n            script_tag,\n            content,\n            flags=re.DOTALL\n        )\n        \n        # Write the updated content back to the HTML file\n        with open(html_file, 'w', encoding='utf-8') as f:\n            f.write(content)\n        \n        print(f\"Updated {html_file} to include the file system data\")\n    except Exception as e:\n        print(f\"Warning: Could not update HTML template: {e}\")\n\ndef main():\n    # Configuration\n    root_dir = os.path.dirname(os.path.abspath(__file__))\n    data_dir = os.path.join(root_dir, 'data')\n    output_json = os.path.join(data_dir, 'file-system.json')\n    \n    # Create data directory if it doesn't exist\n    os.makedirs(data_dir, exist_ok=True)\n    \n    # Generate the JSON structure\n    print(\"Generating file system structure...\")\n    structure = generate_json_structure(root_dir, output_json)\n    \n    # Update the HTML file if it exists\n    html_file = os.path.join(root_dir, 'index.html')\n    update_html_template(html_file, output_json)\n    \n    print(\"\\nFile structure generation complete!\")\n    \n    # Count directories and files in the generated structure\n    def count_items(node):\n        if not node or 'children' not in node:\n            return 0, 0\n            \n        dirs = 0\n        files = 0\n        \n        for child in node.get('children', []):\n            if child['type'] == 'directory':\n                dirs += 1\n                child_dirs, child_files = count_items(child)\n                dirs += child_dirs\n                files += child_files\n            else:\n                files += 1\n                \n        return dirs, files\n    \n    dirs, files = count_items(structure)\n    print(f\"Total directories: {dirs}\")\n    print(f\"Total files: {files}\")\n    print(f\"Output file: {output_json}\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "name": "index-all.html",
      "type": "file",
      "path": "index-all.html",
      "size": 11800,
      "content": "<!DOCTYPE html>\n<html>\n<head>\n    <title>File Explorer</title>\n    <!-- Highlight.js CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/github.min.css\">\n    <!-- Load highlight.js -->\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n    <!-- Load language support -->\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/languages/yaml.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/languages/json.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/languages/dockerfile.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/languages/bash.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/languages/python.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/languages/javascript.min.js\"></script>\n    <style>\n        body { \n            font-family: Arial, sans-serif; \n            margin: 0;\n            padding: 20px;\n            height: 100vh;\n            box-sizing: border-box;\n            display: flex;\n            flex-direction: column;\n        }\n        .container {\n            display: flex;\n            flex: 1;\n            gap: 20px;\n            height: calc(100% - 80px);\n            overflow: hidden;\n        }\n        .file-list-container {\n            flex: 1;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            overflow: hidden;\n            display: flex;\n            flex-direction: column;\n        }\n        .file-list-header {\n            padding: 10px;\n            background: #f8f9fa;\n            border-bottom: 1px solid #ddd;\n            font-weight: bold;\n        }\n        #file-list {\n            flex: 1;\n            overflow-y: auto;\n            padding: 10px 0;\n        }\n        .file { \n            padding: 8px 15px;\n            cursor: pointer;\n            display: flex;\n            align-items: center;\n            gap: 8px;\n        }\n        .file:hover { \n            background: #f0f0f0; \n        }\n        .dir { \n            font-weight: bold;\n        }\n        .file-content-container {\n            flex: 2;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            overflow: hidden;\n            display: flex;\n            flex-direction: column;\n        }\n        .file-content-header {\n            padding: 10px;\n            background: #f8f9fa;\n            border-bottom: 1px solid #ddd;\n            font-weight: bold;\n        }\n        #file-content {\n            flex: 1;\n            padding: 15px;\n            background: white;\n            overflow-y: auto;\n            margin: 0;\n        }\n        pre { \n            margin: 0;\n            padding: 1em;\n            white-space: pre-wrap;\n            font-family: 'Fira Code', 'Consolas', 'Monaco', 'Andale Mono', monospace;\n            font-size: 14px;\n            line-height: 1.5;\n            border-radius: 4px;\n            background: #f6f8fa !important;\n            overflow-x: auto;\n        }\n        \n        /* Add some spacing for code blocks */\n        code {\n            font-family: 'Fira Code', 'Consolas', 'Monaco', 'Andale Mono', monospace;\n        }\n        \n        /* Fix for JSON syntax highlighting */\n        .hljs-attr {\n            color: #d946ef;\n        }\n        \n        /* Make line numbers visible */\n        .hljs-ln {\n            padding: 0;\n        }\n        \n        .hljs-ln-n {\n            padding-right: 1em;\n            color: #6e7781;\n            user-select: none;\n        }\n        .breadcrumb { \n            margin-bottom: 15px;\n            padding: 10px 15px;\n            background: #f8f9fa;\n            border-radius: 4px;\n        }\n        .breadcrumb a { \n            color: #007bff; \n            text-decoration: none;\n        }\n        .breadcrumb a:hover {\n            text-decoration: underline;\n        }\n    </style>\n</head>\n<body>\n    <h1>File Explorer</h1>\n    <div class=\"breadcrumb\" id=\"breadcrumb\">\n        <a href=\"#\" data-path=\"\">Root</a>\n    </div>\n    <div class=\"container\">\n        <div class=\"file-list-container\">\n            <div class=\"file-list-header\">Files</div>\n            <div id=\"file-list\">Loading...</div>\n        </div>\n        <div class=\"file-content-container\">\n            <div class=\"file-content-header\">File Content</div>\n            <div id=\"file-content\">Select a file to view its contents</div>\n        </div>\n    </div>\n\n    <script>\n        let fileSystem = null;\n        let currentPath = [];\n\n        // Load file system data\n        async function loadFileSystem() {\n            try {\n                const response = await fetch('data/file-system.json');\n                fileSystem = await response.json();\n                renderFileList();\n            } catch (error) {\n                document.getElementById('file-list').innerHTML = 'Error loading file system: ' + error.message;\n            }\n        }\n\n        // Render file list for current path\n        function renderFileList() {\n            const fileList = document.getElementById('file-list');\n            const currentDir = getCurrentDir();\n            \n            if (!currentDir || !currentDir.children) {\n                fileList.innerHTML = 'No files found';\n                return;\n            }\n\n            let html = '';\n            currentDir.children.forEach(item => {\n                const isDir = item.type === 'directory';\n                html += `\n                    <div class=\"file ${isDir ? 'dir' : ''}\" \n                         data-type=\"${item.type}\" \n                         data-path=\"${item.path}\">\n                        <span>${isDir ? '[DIR]' : '[FILE]'}</span>\n                        <span>${item.name}</span>\n                        ${!isDir ? `<span>${formatFileSize(item.size)}</span>` : ''}\n                    </div>`;\n            });\n            \n            fileList.innerHTML = html || 'Empty directory';\n            \n            // Add click handlers\n            document.querySelectorAll('.file').forEach(el => {\n                el.addEventListener('click', handleFileClick);\n            });\n        }\n\n        // Handle file/directory click\n        function handleFileClick(e) {\n            const type = this.getAttribute('data-type');\n            const path = this.getAttribute('data-path').split('/').filter(Boolean);\n            \n            if (type === 'directory') {\n                currentPath = path;\n                renderBreadcrumb();\n                renderFileList();\n                document.getElementById('file-content').innerHTML = '';\n            } else {\n                showFileContent(path[path.length - 1]);\n            }\n        }\n\n        // Show file content\n        function getLanguageFromFilename(filename) {\n            const ext = filename.split('.').pop().toLowerCase();\n            const languageMap = {\n                'js': 'javascript',\n                'jsx': 'javascript',\n                'ts': 'typescript',\n                'tsx': 'typescript',\n                'py': 'python',\n                'rb': 'ruby',\n                'java': 'java',\n                'c': 'c',\n                'cpp': 'cpp',\n                'cs': 'csharp',\n                'php': 'php',\n                'sh': 'bash',\n                'json': 'json',\n                'yaml': 'yaml',\n                'yml': 'yaml',\n                'xml': 'xml',\n                'html': 'html',\n                'css': 'css',\n                'scss': 'scss',\n                'sql': 'sql',\n                'md': 'markdown',\n                'dockerfile': 'dockerfile',\n                'go': 'go',\n                'rs': 'rust',\n                'swift': 'swift',\n                'kt': 'kotlin',\n                'dart': 'dart'\n            };\n            return languageMap[ext] || 'plaintext';\n        }\n\n        function showFileContent(filename) {\n            const currentDir = getCurrentDir();\n            const file = currentDir.children.find(f => f.name === filename);\n            const contentDiv = document.getElementById('file-content');\n            \n            if (!file || !file.content) {\n                contentDiv.innerHTML = 'No content to display';\n                return;\n            }\n            \n            try {\n                const language = getLanguageFromFilename(filename);\n                let content = file.content;\n                \n                // Format JSON if needed\n                if (language === 'json') {\n                    try {\n                        content = JSON.stringify(JSON.parse(content), null, 2);\n                    } catch (e) {\n                        console.warn('Error parsing JSON:', e);\n                    }\n                }\n                \n                // Escape HTML and add syntax highlighting\n                const escaped = escapeHtml(content);\n                contentDiv.innerHTML = `<pre><code class=\"language-${language}\">${escaped}</code></pre>`;\n                \n                // Apply syntax highlighting\n                document.querySelectorAll('pre code').forEach((block) => {\n                    hljs.highlightElement(block);\n                });\n                \n            } catch (error) {\n                console.error('Error displaying file content:', error);\n                contentDiv.innerHTML = `<pre>${escapeHtml(file.content)}</pre>`;\n            }\n        }\n\n        // Render breadcrumb navigation\n        function renderBreadcrumb() {\n            const breadcrumb = document.getElementById('breadcrumb');\n            let html = '<a href=\"#\" data-path=\"\">Root</a>';\n            \n            currentPath.forEach((segment, index) => {\n                const path = currentPath.slice(0, index + 1).join('/');\n                html += ` / <a href=\"#\" data-path=\"${path}\">${segment}</a>`;\n            });\n            \n            breadcrumb.innerHTML = html;\n            \n            // Add click handlers to breadcrumb links\n            breadcrumb.querySelectorAll('a').forEach(link => {\n                link.addEventListener('click', (e) => {\n                    e.preventDefault();\n                    const path = link.getAttribute('data-path');\n                    currentPath = path ? path.split('/') : [];\n                    renderBreadcrumb();\n                    renderFileList();\n                    document.getElementById('file-content').innerHTML = '';\n                });\n            });\n        }\n\n        // Get current directory based on path\n        function getCurrentDir() {\n            let current = fileSystem;\n            for (const segment of currentPath) {\n                if (!current.children) return null;\n                const found = current.children.find(item => item.name === segment);\n                if (!found) return null;\n                current = found;\n            }\n            return current;\n        }\n\n        // Helper functions\n        function formatFileSize(bytes) {\n            if (!bytes) return '0 B';\n            const k = 1024;\n            const sizes = ['B', 'KB', 'MB', 'GB'];\n            const i = Math.floor(Math.log(bytes) / Math.log(k));\n            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n        }\n\n        function escapeHtml(unsafe) {\n            return unsafe\n                .replace(/&/g, \"&amp;\")\n                .replace(/</g, \"&lt;\")\n                .replace(/>/g, \"&gt;\")\n                .replace(/\"/g, \"&quot;\")\n                .replace(/'/g, \"&#039;\");\n        }\n\n        // Initialize\n        document.addEventListener('DOMContentLoaded', () => {\n            loadFileSystem();\n        });\n    </script>\n</body>\n</html>\n"
    },
    {
      "name": "index.html",
      "type": "file",
      "path": "index.html",
      "size": 13601,
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Documentation Book</title>\n    <!-- Marked.js for Markdown rendering -->\n    <script src=\"https://cdn.jsdelivr.net/npm/marked/marked.min.js\"></script>\n    <!-- Highlight.js for syntax highlighting -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/github.min.css\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n    <!-- Table of Contents generator -->\n    <script src=\"https://cdn.jsdelivr.net/npm/markdown-toc@1.2.0/dist/markdown-toc.min.js\"></script>\n    <style>\n        :root {\n            --sidebar-width: 280px;\n            --header-height: 60px;\n            --primary-color: #0366d6;\n            --text-color: #24292e;\n            --border-color: #e1e4e8;\n            --bg-color: #ffffff;\n            --sidebar-bg: #f6f8fa;\n            --code-bg: #f6f8fa;\n            --font-sans: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif;\n            --font-mono: SFMono-Regular, Consolas, \"Liberation Mono\", Menlo, monospace;\n        }\n\n        * {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        body {\n            font-family: var(--font-sans);\n            line-height: 1.6;\n            color: var(--text-color);\n            background-color: var(--bg-color);\n            display: flex;\n            min-height: 100vh;\n        }\n\n        /* Sidebar */\n        #sidebar {\n            width: var(--sidebar-width);\n            background-color: var(--sidebar-bg);\n            border-right: 1px solid var(--border-color);\n            height: 100vh;\n            position: fixed;\n            overflow-y: auto;\n            padding: 20px;\n            z-index: 100;\n        }\n\n        #sidebar h2 {\n            font-size: 1.2em;\n            margin-bottom: 1em;\n            padding-bottom: 0.5em;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        #toc {\n            font-size: 0.9em;\n        }\n\n        #toc ul {\n            list-style: none;\n            padding-left: 1em;\n        }\n\n        #toc a {\n            color: var(--text-color);\n            text-decoration: none;\n            display: block;\n            padding: 4px 0;\n            transition: color 0.2s;\n        }\n\n        #toc a:hover {\n            color: var(--primary-color);\n        }\n\n        #toc .toc-h1 { margin-left: 0; font-weight: 600; }\n        #toc .toc-h2 { margin-left: 1em; }\n        #toc .toc-h3 { margin-left: 2em; font-size: 0.9em; }\n        #toc .toc-h4 { margin-left: 3em; font-size: 0.85em; }\n        #toc .toc-h5 { margin-left: 4em; font-size: 0.8em; }\n        #toc .toc-h6 { margin-left: 5em; font-size: 0.75em; }\n\n        /* Main content */\n        #main {\n            flex: 1;\n            margin-left: var(--sidebar-width);\n            max-width: 900px;\n            padding: 2em 3em;\n        }\n\n        /* Loading indicator */\n        .loading {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            font-size: 1.2em;\n        }\n\n        .spinner {\n            border: 3px solid rgba(0, 0, 0, 0.1);\n            border-radius: 50%;\n            border-top: 3px solid var(--primary-color);\n            width: 24px;\n            height: 24px;\n            animation: spin 1s linear infinite;\n            margin-right: 10px;\n        }\n\n        @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n        }\n\n        /* Markdown content */\n        .markdown-body {\n            line-height: 1.8;\n        }\n\n        .markdown-body h1,\n        .markdown-body h2,\n        .markdown-body h3,\n        .markdown-body h4,\n        .markdown-body h5,\n        .markdown-body h6 {\n            margin-top: 1.5em;\n            margin-bottom: 0.8em;\n            font-weight: 600;\n            line-height: 1.25;\n            position: relative;\n            padding-top: 1em;\n        }\n\n        .markdown-body h1:not(:first-child) {\n            border-top: 1px solid var(--border-color);\n            padding-top: 1.5em;\n            margin-top: 2em;\n        }\n\n        .markdown-body h1 { font-size: 2em; }\n        .markdown-body h2 { font-size: 1.5em; }\n        .markdown-body h3 { font-size: 1.25em; }\n        .markdown-body h4 { font-size: 1em; }\n        .markdown-body h5 { font-size: 0.875em; }\n        .markdown-body h6 { font-size: 0.85em; color: #6a737d; }\n\n        .markdown-body p {\n            margin-top: 0;\n            margin-bottom: 1em;\n        }\n\n        .markdown-body ul,\n        .markdown-body ol {\n            padding-left: 2em;\n            margin-top: 0;\n            margin-bottom: 1em;\n        }\n\n        .markdown-body li {\n            margin-bottom: 0.5em;\n        }\n\n        .markdown-body code {\n            background-color: var(--code-bg);\n            border-radius: 3px;\n            padding: 0.2em 0.4em;\n            font-family: var(--font-mono);\n            font-size: 85%;\n        }\n\n        .markdown-body pre {\n            background-color: var(--code-bg);\n            border-radius: 6px;\n            padding: 16px;\n            overflow: auto;\n            line-height: 1.45;\n            margin-bottom: 1.5em;\n        }\n\n        .markdown-body pre code {\n            background-color: transparent;\n            padding: 0;\n            border-radius: 0;\n        }\n\n        .markdown-body blockquote {\n            border-left: 0.25em solid #dfe2e5;\n            color: #6a737d;\n            padding: 0 1em;\n            margin: 0 0 1.5em 0;\n        }\n\n        .markdown-body table {\n            border-collapse: collapse;\n            width: 100%;\n            margin-bottom: 1.5em;\n            display: block;\n            overflow: auto;\n        }\n\n        .markdown-body table th,\n        .markdown-body table td {\n            border: 1px solid #dfe2e5;\n            padding: 6px 13px;\n        }\n\n        .markdown-body table tr {\n            background-color: #fff;\n            border-top: 1px solid #c6cbd1;\n        }\n\n        .markdown-body table tr:nth-child(2n) {\n            background-color: #f6f8fa;\n        }\n\n        /* File indicators */\n        .file-section {\n            position: relative;\n        }\n\n        .file-path {\n            position: absolute;\n            right: 0;\n            top: 0.5em;\n            font-size: 0.7em;\n            color: #6a737d;\n            background: #f6f8fa;\n            padding: 2px 8px;\n            border-radius: 12px;\n            font-family: var(--font-mono);\n        }\n\n        /* Responsive design */\n        @media (max-width: 1024px) {\n            :root {\n                --sidebar-width: 250px;\n            }\n            \n            #main {\n                padding: 1.5em;\n            }\n        }\n\n        @media (max-width: 768px) {\n            body {\n                flex-direction: column;\n            }\n            \n            #sidebar {\n                position: static;\n                width: 100%;\n                height: auto;\n                max-height: 40vh;\n                border-right: none;\n                border-bottom: 1px solid var(--border-color);\n            }\n            \n            #main {\n                margin-left: 0;\n                padding: 1em;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div id=\"sidebar\">\n        <h2>Table of Contents</h2>\n        <div id=\"toc\"></div>\n    </div>\n\n    <div id=\"main\">\n        <div class=\"loading\">\n            <div class=\"spinner\"></div>\n            <span>Loading documentation...</span>\n        </div>\n        <div id=\"content\" class=\"markdown-body\" style=\"display: none;\"></div>\n    </div>\n\n    <script>\n        // Configuration\n        const API_URL = 'data/file-system.json';\n        \n        // DOM Elements\n        const contentEl = document.getElementById('content');\n        const loadingEl = document.querySelector('.loading');\n        const tocEl = document.getElementById('toc');\n        \n        // Load and process file system\n        async function loadDocumentation() {\n            try {\n                // Show loading state\n                contentEl.style.display = 'none';\n                loadingEl.style.display = 'flex';\n                \n                // Load file system\n                const response = await fetch(API_URL);\n                const fileSystem = await response.json();\n                \n                // Extract and sort markdown files\n                const markdownFiles = [];\n                extractMarkdownFiles(fileSystem, markdownFiles);\n                \n                // Sort files by path (alphabetical order)\n                markdownFiles.sort((a, b) => a.path.localeCompare(b.path));\n                \n                // Load and render all markdown files\n                await renderMarkdownFiles(markdownFiles);\n                \n                // Generate table of contents\n                generateTOC();\n                \n                // Hide loading state, show content\n                loadingEl.style.display = 'none';\n                contentEl.style.display = 'block';\n                \n                // Apply syntax highlighting\n                document.querySelectorAll('pre code').forEach((block) => {\n                    hljs.highlightElement(block);\n                });\n                \n                // Scroll to hash if present in URL\n                if (window.location.hash) {\n                    const id = window.location.hash.substring(1);\n                    const element = document.getElementById(id);\n                    if (element) {\n                        element.scrollIntoView();\n                    }\n                }\n                \n            } catch (error) {\n                console.error('Error loading documentation:', error);\n                loadingEl.innerHTML = `\n                    <div style=\"color: #cb2431; text-align: center; padding: 2em;\">\n                        <h2>Error Loading Documentation</h2>\n                        <p>${error.message}</p>\n                        <p>Make sure to run <code>generate_structure.py</code> first.</p>\n                    </div>\n                `;\n            }\n        }\n        \n        // Recursively extract all markdown files from the file system\n        function extractMarkdownFiles(node, result = []) {\n            if (!node) return;\n            \n            if (node.type === 'file' && node.name.endsWith('.md')) {\n                result.push({\n                    name: node.name,\n                    path: node.path,\n                    content: node.content || ''\n                });\n            } else if (node.children) {\n                for (const child of node.children) {\n                    extractMarkdownFiles(child, result);\n                }\n            }\n        }\n        \n        // Render all markdown files to the page\n        async function renderMarkdownFiles(files) {\n            let html = '';\n            \n            for (const file of files) {\n                try {\n                    // Add file section with path indicator\n                    html += `\n                        <div class=\"file-section\">\n                            <div class=\"file-path\" title=\"${file.path}\">${file.path}</div>\n                            ${marked.parse(file.content || '')}\n                        </div>\n                        <hr style=\"margin: 2em 0; border: 0; border-top: 1px dashed #e1e4e8;\">\n                    `;\n                } catch (error) {\n                    console.error(`Error rendering ${file.path}:`, error);\n                    html += `\n                        <div class=\"file-section\">\n                            <h2>Error Loading: ${file.name}</h2>\n                            <pre>${error.message}</pre>\n                        </div>\n                    `;\n                }\n            }\n            \n            contentEl.innerHTML = html;\n        }\n        \n        // Generate table of contents from headings\n        function generateTOC() {\n            const headings = contentEl.querySelectorAll('h1, h2, h3, h4, h5, h6');\n            let tocHtml = '<ul>';\n            let currentLevel = 1;\n            \n            headings.forEach((heading, index) => {\n                // Skip file path indicators\n                if (heading.classList.contains('file-path')) return;\n                \n                const level = parseInt(heading.tagName.substring(1));\n                const id = `heading-${index}`;\n                \n                // Set ID for anchor links\n                heading.id = id;\n                \n                // Add TOC entry\n                if (level > currentLevel) {\n                    tocHtml += '<ul>'.repeat(level - currentLevel);\n                } else if (level < currentLevel) {\n                    tocHtml += '</li></ul>'.repeat(currentLevel - level);\n                } else {\n                    tocHtml += '</li>';\n                }\n                \n                tocHtml += `<li class=\"toc-h${level}\"><a href=\"#${id}\">${heading.textContent}</a>`;\n                currentLevel = level;\n            });\n            \n            // Close any open lists\n            tocHtml += '</li></ul>'.repeat(currentLevel - 1);\n            tocHtml += '</ul>';\n            \n            tocEl.innerHTML = tocHtml;\n        }\n        \n        // Initialize\n        document.addEventListener('DOMContentLoaded', loadDocumentation);\n    </script>\n</body>\n</html>\n"
    },
    {
      "name": "keycloak.png",
      "type": "file",
      "path": "keycloak.png",
      "size": 70922,
      "content": "[Binary file: keycloak.png]"
    },
    {
      "name": "LICENSE",
      "type": "file",
      "path": "LICENSE",
      "size": 11357,
      "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
    },
    {
      "name": "Makefile",
      "type": "file",
      "path": "Makefile",
      "size": 18539,
      "content": "\n# Media Vault - Makefile\n\n# Color definitions\nGREEN  := $(shell tput -Txterm setaf 2)\nYELLOW := $(shell tput -Txterm setaf 3)\nWHITE  := $(shell tput -Txterm setaf 7)\nRESET  := $(shell tput -Txterm sgr0)\n\n# Default target\n.DEFAULT_GOAL := help\n\n# Phony targets - Keep this list in sync with actual targets\n.PHONY: help \\\n        init \\\n        up up-build down restart \\\n        build rebuild \\\n        test test-unit test-integration test-e2e \\\n        lint format \\\n        logs \\\n        clean clean-all \\\n        setup-keycloak keycloak-clean keycloak-export \\\n        deploy \\\n        monitoring monitoring-down monitoring-restart monitoring-logs monitoring-status \\\n        grafana prometheus alerts \\\n        status shell-api shell-keycloak \\\n        dev-start prod-setup backup \\\n        keycloak keycloak-db media-vault-api media-vault-analyzer nsfw-analyzer flutter-web media-vault-admin caddy redis\n\n## Help\nhelp: ## Show this help\n\t@echo 'Media Vault - Available Commands:'\n\t@echo '================================='\n\t@echo ''\n\t@echo '🚀 Quick Start:'\n\t@echo '  make up                     Start basic application stack'\n\t@echo '  make up-build              Rebuild and start all services'\n\t@echo '  make full-stack            Complete setup with monitoring'\n\t@echo '  make dev-start             Quick start for development'\n\t@echo ''\n\t@echo '📊 Monitoring:'\n\t@echo '  make monitoring            Start monitoring stack'\n\t@echo '  make monitoring-status     Show monitoring status'\n\t@echo '  make monitoring-logs       Show monitoring logs'\n\t@echo '  make grafana               Open Grafana (http://localhost:3333)'\n\t@echo '  make prometheus            Open Prometheus (http://localhost:9090)'\n\t@echo '  make alerts                Open AlertManager (http://localhost:9093)'\n\t@echo ''\n\t@echo '🔐 Authentication:'\n\t@echo '  make setup-keycloak         Configure Keycloak'\n\t@echo '  make keycloak-clean        Reset Keycloak config'\n\t@echo '  make keycloak-export       Export Keycloak configuration'\n\t@echo ''\n\t@echo '🛠️  Individual Services:'\n\t@echo '  make keycloak              Start Keycloak service'\n\t@echo '  make keycloak-db           Start Keycloak database'\n\t@echo '  make media-vault-api       Start Media Vault API'\n\t@echo '  make media-vault-analyzer  Start AI Processing service'\n\t@echo '  make nsfw-analyzer        Start NSFW Analyzer service'\n\t@echo '  make flutter-web          Start Flutter Web Frontend'\n\t@echo '  make media-vault-admin    Start Admin Panel'\n\t@echo '  make caddy                Start Caddy Reverse Proxy'\n\t@echo '  make redis                Start Redis Cache'\n\t@echo ''\n\t@echo '🔧 Management:'\n\t@echo '  make down                  Stop all services'\n\t@echo '  make restart              Restart all services'\n\t@echo '  make clean                Clean up containers and volumes'\n\t@echo '  make clean-all            Remove all containers, volumes, and images'\n\t@echo '  make logs                 Show application logs'\n\t@echo '  make status               Show container status'\n\t@echo '  make backup               Create database backup'\n\t@echo '  make prod-setup           Configure production settings'\n\t@echo ''\n\t@echo '🔍 Development:'\n\t@echo '  make test                 Run all tests'\n\t@echo '  make lint                 Run linters'\n\t@echo '  make format               Format code'\n\t@echo '  make coverage             Generate test coverage report'\n\n## Environment\ninit: ## Initialize development environment\n\t@echo \"${GREEN}🚀 Initializing development environment...${RESET}\"\n\tcp .env.example .env\n\t@echo \"✅ Created .env file\"\n\t@echo \"${YELLOW}ℹ️  Please edit .env with your configuration${RESET}\"\n\n## Docker Composee\nup: ## Start all services\n\t@echo \"${GREEN}🚀 Starting all services...${RESET}\"\n\tdocker-compose up -d\n\nup-build: ## Rebuild and start all services\n\t@echo \"${GREEN}🚀 Rebuilding and starting all services...${RESET}\"\n\tdocker-compose up -d --build\n\ndown: ## Stop and remove all services\n\t@echo \"${YELLOW}🛑 Stopping and removing all services...${RESET}\"\n\tdocker-compose down\n\nstop: ## Stop all services without removing containers\n\t@echo \"${YELLOW}🛑 Stopping all services (containers will remain)...${RESET}\"\n\tdocker-compose stop\n\nrestart: ## Restart all services\n\t@echo \"${YELLOW}🔄 Restarting all services...${RESET}\"\n\tdocker-compose restart\n\nlogs: ## View logs from all services\n\tdocker-compose logs -f\n\nstatus: ## Show container status\n\tdocker-compose ps\n\nshell-api: ## Open shell in API container\n\tdocker-compose exec media-vault-api sh\n\nshell-keycloak: ## Open shell in Keycloak container\n\tdocker-compose exec keycloak bash\n\n## Development\ndev: up ## Start development environment\n\nrun-browse: up ## Start services and open in browser\n\t@echo \"${GREEN}🌐 Opening application in browser...${RESET}\"\n\t@if command -v xdg-open > /dev/null; then \\\n\t\txdg-open http://localhost; \\\n\telif command -v open > /dev/null; then \\\n\t\topen http://localhost; \\\n\telse \\\n\t\techo \"${YELLOW}Could not detect the web browser to use. Please open http://localhost manually${RESET}\"; \\\n\tfi\n\n## Testing\ntest: test-unit test-integration ## Run all tests\n\ntest-unit: ## Run unit tests\n\t@echo \"🧪 Running unit tests...\"\n\tdocker-compose run --rm media-vault-api go test -v ./... -short\n\ntest-integration: ## Run integration tests\n\t@echo \"${GREEN}🧪 Running integration tests...${RESET}\"\n\tdocker-compose -f docker-compose.test.yml up --abort-on-container-exit\n\ntest-e2e: ## Run end-to-end tests\n\t@echo \"${GREEN}🧪 Running E2E tests...${RESET}\"\n\t# TODO: Add E2E test command\n\ncoverage: ## Generate test coverage report\n\t@echo \"${GREEN}📊 Generating test coverage...${RESET}\"\n\tdocker-compose run --rm media-vault-api go test -coverprofile=coverage.out ./...\n\tdocker-compose run --rm media-vault-api go tool cover -html=coverage.out -o coverage.html\n\n## Code Quality\nlint: ## Run linters\n\t@echo \"${GREEN}🔍 Running linters...${RESET}\"\n\tdocker-compose run --rm media-vault-api golangci-lint run\n\nformat: ## Format code\n\t@echo \"${GREEN}🎨 Formatting code...${RESET}\"\n\tdocker-compose run --rm media-vault-api gofmt -w .\n\n## Monitoring\nmonitoring: ## Start monitoring stack\n\t@echo \"${GREEN}📊 Starting monitoring stack...${RESET}\"\n\tdocker-compose -f docker-compose.monitoring.yml up -d\n\nmonitoring-down: ## Stop monitoring stack\n\t@echo \"${YELLOW}🛑 Stopping monitoring stack...${RESET}\"\n\tdocker-compose -f docker-compose.monitoring.yml down\n\nmonitoring-restart: ## Restart monitoring stack\n\t@echo \"🔄 Restarting monitoring stack...\"\n\tdocker-compose -f docker-compose.monitoring.yml restart\n\nmonitoring-logs: ## Show monitoring logs\n\t@echo \"📜 Showing monitoring logs...\"\n\tdocker-compose -f docker-compose.monitoring.yml logs -f\n\nmonitoring-status: ## Show monitoring status\n\t@echo \"📊 Monitoring Status:\"\n\t@echo \"====================\"\n\tdocker-compose -f docker-compose.monitoring.yml ps\n\ngrafana: ## Open Grafana dashboard\n\t@echo \"🌐 Opening Grafana...\"\n\t@echo \"URL: http://localhost:3333\"\n\t@echo \"Login: admin / grafana123\"\n\nprometheus: ## Open Prometheus dashboard\n\t@echo \"🌐 Opening Prometheus...\"\n\t@echo \"URL: http://localhost:9090\"\n\nalerts: ## Open AlertManager\n\t@echo \"🌐 Opening AlertManager...\"\n\t@echo \"URL: http://localhost:9093\"\n\n## Keycloak Management\nsetup-keycloak: ## Set up Keycloak with initial configuration\n\t@echo \"${GREEN}🔐 Setting up Keycloak...${RESET}\"\n\t./keycloak/setup-keycloak.sh\n\nkeycloak-clean: ## Reset Keycloak configuration\n\t@echo \"${YELLOW}🧹 Cleaning Keycloak configuration...${RESET}\"\n\t./setup-keycloak.sh --clean\n\nkeycloak-export: ## Export Keycloak configuration\n\t@echo \"${GREEN}💾 Exporting Keycloak configuration...${RESET}\"\n\t./setup-keycloak.sh --export-only\n\nrestart-keycloak: ## Restart Keycloak service\n\t@echo \"🔄 Restarting Keycloak...\"\n\tdocker-compose restart keycloak\n\n## Deployment\ndeploy: ## Deploy to production\n\t@echo \"${GREEN}🚀 Deploying to production...${RESET}\"\n\tdocker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --build\n\n## Cleanup\nclean: ## Remove all containers and volumes\n\t@echo \"${YELLOW}🧹 Cleaning up...${RESET}\"\n\tdocker-compose down -v\n\nclean-all: ## Remove all containers, volumes, and images\n\t@echo \"${YELLOW}🧹 Deep cleaning (containers, volumes, and images)...${RESET}\"\n\tdocker-compose down -v --rmi all --remove-orphans\n\ndev-clean: clean ## Clean development environment\n\t@echo \"${YELLOW}🧹 Cleaning development environment...${RESET}\"\n\trm -rf node_modules\n\n## Documentation\ndocs: ## Generate documentation\n\t@echo \"${GREEN}📚 Generating documentation...${RESET}\"\n\t# TODO: Add documentation generation command\n\n## Complete Setup\nfull-stack: setup-keycloak up monitoring ## Start complete stack with monitoring\n\t@echo \"${GREEN}🎉 Media Vault is ready!${RESET}\"\n\t@echo \"\"\n\t@echo \"${YELLOW}📊 Service URLs:${RESET}\"\n\t@echo \"  🌐 Main App: http://localhost\"\n\t@echo \"  📊 Grafana: http://localhost:3333 (admin/grafana123)\"\n\t@echo \"  📈 Prometheus: http://localhost:9090\"\n\t@echo \"  🔐 Keycloak: http://localhost:8080/admin (admin/admin123)\"\n\t@echo \"  ⚠️  AlertManager: http://localhost:9093\"\n\n## Service Management\n# Keycloak Services\nkeycloak: ## Start Keycloak identity service\n\t@echo \"${GREEN}🚀 Starting Keycloak service...${RESET}\"\n\tdocker-compose rm -fsv keycloak 2>/dev/null || true\n\tdocker-compose up -d --remove-orphans keycloak\n\t@echo \"✅ Keycloak service started\"\n\t@echo \"🌐 Access at: http://localhost:8080/admin (admin/admin123)\"\n\nkeycloak-db: ## Start Keycloak database\n\t@echo \"${GREEN}🚀 Starting Keycloak database...${RESET}\"\n\tdocker-compose rm -fsv keycloak-db 2>/dev/null || true\n\tdocker-compose up -d --remove-orphans keycloak-db\n\t@echo \"✅ Keycloak database started\"\n\n# Media Vault Services\nmedia-vault-api: ## Start Media Vault API\n\t@echo \"${GREEN}🚀 Starting Media Vault API...${RESET}\"\n\tdocker-compose rm -fsv media-vault-api 2>/dev/null || true\n\tdocker-compose up -d --remove-orphans media-vault-api\n\t@echo \"✅ Media Vault API started\"\n\nmedia-vault-analyzer: ## Start Media Vault Analyzer (AI Processing)\n\t@echo \"${GREEN}🚀 Starting Media Vault Analyzer...${RESET}\"\n\tdocker-compose rm -fsv media-vault-analyzer 2>/dev/null || true\n\tdocker-compose up -d --remove-orphans media-vault-analyzer\n\t@echo \"✅ Media Vault Analyzer started\"\n\nnsfw-analyzer: ## Start NSFW Analyzer Service\n\t@echo \"${GREEN}🚀 Starting NSFW Analyzer...${RESET}\"\n\tdocker-compose rm -fsv nsfw-analyzer 2>/dev/null || true\n\tdocker-compose up -d --remove-orphans nsfw-analyzer\n\t@echo \"✅ NSFW Analyzer started\"\n\n# Frontend Services\nflutter-web: ## Start Flutter Web Frontend\n\t@echo \"${GREEN}🚀 Starting Flutter Web Frontend...${RESET}\"\n\tdocker-compose rm -fsv flutter-web 2>/dev/null || true\n\tdocker-compose up -d --remove-orphans flutter-web\n\t@echo \"✅ Flutter Web Frontend started\"\n\t@echo \"🌐 Access at: http://localhost:3000\"\n\nmedia-vault-admin: ## Start Media Vault Admin Panel\n\t@echo \"${GREEN}🚀 Starting Media Vault Admin Panel...${RESET}\"\n\tdocker-compose rm -fsv media-vault-admin 2>/dev/null || true\n\tdocker-compose up -d --remove-orphans media-vault-admin\n\t@echo \"✅ Media Vault Admin Panel started\"\n\t@echo \"🌐 Access at: http://localhost:3001\"\n\n# Infrastructure Services\ncaddy: ## Start Caddy Reverse Proxy\n\t@echo \"${GREEN}🚀 Starting Caddy Reverse Proxy...${RESET}\"\n\tdocker-compose rm -fsv caddy 2>/dev/null || true\n\tdocker-compose up -d --remove-orphans caddy\n\t@echo \"✅ Caddy Reverse Proxy started\"\n\nredis: ## Start Redis Cache\n\t@echo \"${GREEN}🚀 Starting Redis...${RESET}\"\n\tdocker-compose rm -fsv redis 2>/dev/null || true\n\tdocker-compose up -d --remove-orphans redis\n\t@echo \"✅ Redis started\"\n\n## Development\ndev-start: clean up ## Quick start for development\n\t@echo \"🚀 Development environment ready!\"\n\n## Production\nprod-setup: ## Production setup instructions\n\t@echo \"🏭 Production setup...\"\n\t@echo \"⚠️  Remember to:\"\n\t@echo \"   1. Change default passwords\"\n\t@echo \"   2. Configure SSL\"\n\t@echo \"   3. Set up backup strategy\"\n\t@echo \"   4. Configure monitoring\"\n\n## Backup\nbackup: ## Create database backup\n\t@echo \"💾 Creating backup...\"\n\t@mkdir -p backups\n\tdocker-compose exec media-vault-api sqlite3 /data/media.db \".backup /data/backup_$$(date +%Y%m%d_%H%M%S).db\"\n\t./setup-keycloak.sh --export-only\n\ttar -czf backups/media-vault-backup-$$(date +%Y%m%d).tar.gz data/ uploads/ media-vault-realm-export.json 2>/dev/null || true\n\t@echo \"✅ Backup created: backups/media-vault-backup-$$(date +%Y%m%d).tar.gz\"\n\n## Infrastructure\ninfrastructure: ## Start infrastructure services\n\t@echo \"${GREEN}🏗️  Starting infrastructure stack...${RESET}\"\n\tdocker-compose -f docker-compose.infrastructure.yml up -d\n\nmonitoring: ## Start monitoring stack\n\t@echo \"${GREEN}📊 Starting monitoring stack...${RESET}\"\n\tdocker-compose -f docker-compose.monitoring.yml up -d\n\t@echo \"✅ Monitoring started\"\n\t@echo \"📊 Grafana: http://localhost:3333\"\n\t@echo \"📈 Prometheus: http://localhost:9090\"\n\nmonitoring-down:\n\t@echo \"📊 Stopping monitoring stack...\"\n\tdocker-compose -f docker-compose.monitoring.yml down\n\n# Quick monitoring access\ngrafana:\n\t@echo \"🌐 Opening Grafana...\"\n\t@echo \"URL: http://localhost:3333\"\n\t@echo \"Login: admin / grafana123\"\n\nprometheus:\n\t@echo \"🌐 Opening Prometheus...\"\n\t@echo \"URL: http://localhost:9090\"\n\nalerts:\n\t@echo \"🌐 Opening AlertManager...\"\n\t@echo \"URL: http://localhost:9093\"\n\n# Monitoring management\nmonitoring-restart:\n\tdocker-compose -f docker-compose.monitoring.yml restart\n\nmonitoring-logs:\n\tdocker-compose -f docker-compose.monitoring.yml logs -f\n\nmonitoring-status:\n\t@echo \"📊 Monitoring Status:\"\n\t@echo \"====================\"\n\t@docker-compose -f docker-compose.monitoring.yml ps\n\n# Dashboard management\ndashboard-import:\n\t@echo \"📊 Importing custom dashboards...\"\n\t# Custom script to import dashboards via Grafana API\n\ndashboard-backup:\n\t@echo \"💾 Backing up Grafana dashboards...\"\n\t# Custom script to export dashboards\n\n# Alerting management\ntest-alerts:\n\t@echo \"🚨 Testing alert system...\"\n\tcurl -XPOST http://localhost:9093/api/v1/alerts \\\n\t\t-H \"Content-Type: application/json\" \\\n\t\t-d '[{\"labels\":{\"alertname\":\"TestAlert\",\"severity\":\"warning\",\"instance\":\"test\"},\"annotations\":{\"summary\":\"Test alert\"}}]'\n\nsilence-alerts:\n\t@echo \"🔇 Creating alert silence...\"\n\t# Script to create alert silence via AlertManager API\n\n# Performance testing with monitoring\nload-test-monitored:\n\t@echo \"⚡ Running monitored load test...\"\n\tdocker run --rm -i --network media-vault-network \\\n\t\tgrafana/k6 run - <<EOF\n\t\timport http from 'k6/http';\n\t\timport { check } from 'k6';\n\t\texport let options = {\n\t\t\tstages: [\n\t\t\t\t{ duration: '2m', target: 50 },\n\t\t\t\t{ duration: '5m', target: 50 },\n\t\t\t\t{ duration: '2m', target: 100 },\n\t\t\t\t{ duration: '5m', target: 100 },\n\t\t\t\t{ duration: '2m', target: 0 },\n\t\t\t],\n\t\t\tthresholds: {\n\t\t\t\thttp_req_duration: ['p(95)<500'],\n\t\t\t\thttp_req_failed: ['rate<0.1'],\n\t\t\t},\n\t\t};\n\t\texport default function() {\n\t\t\tlet response = http.get('http://media-vault-api:8080/health');\n\t\t\tcheck(response, {\n\t\t\t\t'status is 200': (r) => r.status === 200,\n\t\t\t\t'response time < 500ms': (r) => r.timings.duration < 500,\n\t\t\t});\n\t\t}\n\tEOF\n\n# System health check\nhealth-check-full:\n\t@echo \"🏥 Comprehensive Health Check:\"\n\t@echo \"==============================\"\n\t@echo \"📊 Checking main services...\"\n\t@curl -s http://localhost:8080/health | jq '.' || echo \"❌ API: DOWN\"\n\t@curl -s http://localhost:8443/health/ready | jq '.' || echo \"❌ Keycloak: DOWN\"\n\t@echo \"\"\n\t@echo \"📊 Checking monitoring...\"\n\t@curl -s http://localhost:9090/-/healthy || echo \"❌ Prometheus: DOWN\"\n\t@curl -s http://localhost:3333/api/health || echo \"❌ Grafana: DOWN\"\n\t@curl -s http://localhost:9093/-/healthy || echo \"❌ AlertManager: DOWN\"\n\t@echo \"\"\n\t@echo \"📊 Checking containers...\"\n\t@docker-compose ps\n\t@echo \"\"\n\t@echo \"📊 Resource usage:\"\n\t@docker stats --no-stream --format \"table {{.Name}}\\t{{.CPUPerc}}\\t{{.MemUsage}}\"\n\n# Backup monitoring data\nbackup-monitoring:\n\t@echo \"💾 Backing up monitoring data...\"\n\tdocker run --rm -v grafana_data:/source -v $(PWD)/backups:/backup alpine tar czf /backup/grafana-backup-$(shell date +%Y%m%d).tar.gz -C /source .\n\tdocker run --rm -v prometheus_data:/source -v $(PWD)/backups:/backup alpine tar czf /backup/prometheus-backup-$(shell date +%Y%m%d).tar.gz -C /source .\n\n# Podstawowe komendy\nbuild:\n\tdocker-compose build\n\nup:\n\tdocker-compose up -d\n\nup-full:\n\tdocker-compose --profile full up -d\n\ndown:\n\tdocker-compose down\n\nlogs:\n\tdocker-compose logs -f\n\nclean:\n\tdocker-compose down -v\n\tdocker system prune -f\n\n# Keycloak setup\nsetup-keycloak:\n\t@echo \"🔐 Konfigurowanie Keycloak...\"\n\tdocker-compose up -d keycloak keycloak-db\n\tsleep 30\n\tchmod +x keycloak/setup-keycloak.sh\n\t./keycloak/setup-keycloak.sh\n\t./update-env.sh\n\n# Keycloak management\nkeycloak-clean:\n\t./setup-keycloak.sh --clean\n\nkeycloak-export:\n\t./setup-keycloak.sh --export-only\n\n# Media Vault with Keycloak\nup-with-auth: setup-keycloak\n\tdocker-compose up -d\n\t@echo \"\"\n\t@echo \"🎉 Media Vault z Keycloak uruchomiony!\"\n\t@echo \"🌐 Aplikacja: http://localhost\"\n\t@echo \"🔐 Keycloak Admin: http://localhost:8443/admin\"\n\t@echo \"👤 Test login: vaultadmin / admin123\"\n\n# Restart specific services\nrestart-api:\n\tdocker-compose restart media-vault-api\n\nrestart-keycloak:\n\tdocker-compose restart keycloak\n\n# Status and debugging\nstatus:\n\tdocker-compose ps\n\nshell-api:\n\tdocker-compose exec media-vault-api sh\n\nshell-keycloak:\n\tdocker-compose exec keycloak bash\n\n# Quick start dla development\ndev-start: clean up-with-auth\n\t@echo \"🚀 Development environment ready!\"\n\n## Production Setup\nprod-setup: ## Configure production settings\n\t@echo \"${YELLOW}⚠️  Production Setup${RESET}\"\n\t@echo \"Please ensure you have configured:\"\n\t@echo \"  1. Strong passwords in production\"\n\t@echo \"  2. SSL/TLS configuration\"\n\t@echo \"  3. Backup strategy\"\n\t@echo \"  4. Monitoring and alerting\"\n\n## Backup\nbackup: ## Create database backup\n\t@echo \"${GREEN}💾 Creating backup...${RESET}\n\t@mkdir -p backups\n\tdocker-compose exec media-vault-api sqlite3 /data/media.db \".backup /data/backup_$(shell date +%Y%m%d_%H%M%S).db\"\n\t./setup-keycloak.sh --export-only\n\ttar -czf backups/media-vault-backup-$(shell date +%Y%m%d_%H%M%S).tar.gz data/ uploads/ media-vault-realm-export.json\n\t@echo \"✅ Backup created in backups/ directory\"\n\n## Health Check\nhealth-check: ## Run comprehensive health check\n\t@echo \"🏥 Running health checks...\"\n\t@echo \"📊 Checking main services...\"\n\t@curl -s http://localhost:8080/health | jq '.' || echo \"❌ API: DOWN\"\n\t@echo \"✅ Health check completed\"\n"
    },
    {
      "name": "md-viewer.html",
      "type": "file",
      "path": "md-viewer.html",
      "size": 11472,
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Markdown Viewer</title>\n    <!-- Marked.js for Markdown rendering -->\n    <script src=\"https://cdn.jsdelivr.net/npm/marked/marked.min.js\"></script>\n    <!-- Highlight.js for syntax highlighting -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/github.min.css\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n    <style>\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\n            line-height: 1.6;\n            color: #333;\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 20px;\n            display: flex;\n            min-height: 100vh;\n        }\n        \n        #sidebar {\n            width: 300px;\n            padding: 20px;\n            border-right: 1px solid #e1e4e8;\n            overflow-y: auto;\n            max-height: 100vh;\n            position: sticky;\n            top: 0;\n        }\n        \n        #content {\n            flex: 1;\n            padding: 0 30px;\n            max-width: 800px;\n            margin: 0 auto;\n        }\n        \n        .file-item {\n            padding: 5px 0;\n            cursor: pointer;\n            white-space: nowrap;\n            overflow: hidden;\n            text-overflow: ellipsis;\n        }\n        \n        .file-item:hover {\n            color: #0366d6;\n            text-decoration: underline;\n        }\n        \n        .directory {\n            margin-top: 10px;\n        }\n        \n        .directory-name {\n            font-weight: bold;\n            margin: 15px 0 5px 0;\n            cursor: pointer;\n        }\n        \n        .directory-contents {\n            margin-left: 15px;\n            display: none;\n        }\n        \n        .directory.expanded .directory-contents {\n            display: block;\n        }\n        \n        /* Markdown styling */\n        #markdown-content {\n            line-height: 1.8;\n        }\n        \n        #markdown-content h1, \n        #markdown-content h2, \n        #markdown-content h3, \n        #markdown-content h4, \n        #markdown-content h5, \n        #markdown-content h6 {\n            margin-top: 24px;\n            margin-bottom: 16px;\n            font-weight: 600;\n            line-height: 1.25;\n        }\n        \n        #markdown-content h1 { font-size: 2em; border-bottom: 1px solid #eaecef; padding-bottom: 0.3em; }\n        #markdown-content h2 { font-size: 1.5em; border-bottom: 1px solid #eaecef; padding-bottom: 0.3em; }\n        #markdown-content h3 { font-size: 1.25em; }\n        #markdown-content h4 { font-size: 1em; }\n        #markdown-content h5 { font-size: 0.875em; }\n        #markdown-content h6 { font-size: 0.85em; color: #6a737d; }\n        \n        #markdown-content p { margin-top: 0; margin-bottom: 16px; }\n        #markdown-content ul, #markdown-content ol { padding-left: 2em; margin-top: 0; margin-bottom: 16px; }\n        #markdown-content li { margin-bottom: 0.25em; }\n        #markdown-content code { \n            background-color: rgba(27, 31, 35, 0.05);\n            border-radius: 3px; \n            padding: 0.2em 0.4em;\n            font-family: \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, monospace;\n            font-size: 85%;\n        }\n        #markdown-content pre {\n            background-color: #f6f8fa;\n            border-radius: 6px;\n            padding: 16px;\n            overflow: auto;\n            line-height: 1.45;\n            margin-bottom: 16px;\n        }\n        #markdown-content pre code {\n            background-color: transparent;\n            padding: 0;\n            border-radius: 0;\n        }\n        #markdown-content blockquote {\n            border-left: 0.25em solid #dfe2e5;\n            color: #6a737d;\n            padding: 0 1em;\n            margin: 0 0 16px 0;\n        }\n        #markdown-content table {\n            border-collapse: collapse;\n            width: 100%;\n            margin-bottom: 16px;\n            display: block;\n            overflow: auto;\n        }\n        #markdown-content table th, \n        #markdown-content table td {\n            border: 1px solid #dfe2e5;\n            padding: 6px 13px;\n        }\n        #markdown-content table tr {\n            background-color: #fff;\n            border-top: 1px solid #c6cbd1;\n        }\n        #markdown-content table tr:nth-child(2n) {\n            background-color: #f6f8fa;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"sidebar\">\n        <h2>Markdown Files</h2>\n        <div id=\"file-tree\">Loading files...</div>\n    </div>\n    \n    <div id=\"content\">\n        <div id=\"markdown-content\">\n            <h1>Markdown Viewer</h1>\n            <p>Select a Markdown file from the sidebar to view its contents.</p>\n        </div>\n    </div>\n\n    <script>\n        // Configuration\n        const API_URL = 'data/file-system.json';\n        \n        // DOM Elements\n        const fileTree = document.getElementById('file-tree');\n        const markdownContent = document.getElementById('markdown-content');\n        \n        // Load and process file system\n        async function loadFileSystem() {\n            try {\n                const response = await fetch(API_URL);\n                const fileSystem = await response.json();\n                renderFileTree(fileSystem);\n            } catch (error) {\n                console.error('Error loading file system:', error);\n                fileTree.innerHTML = 'Error loading file system. Make sure to run generate_structure.py first.';\n            }\n        }\n        \n        // Render file tree\n        function renderFileTree(node, depth = 0) {\n            if (!node) return '';\n            \n            let html = '';\n            \n            // Only process directories and markdown files\n            if (node.type === 'directory') {\n                const hasMarkdownFiles = node.children && node.children.some(child => \n                    child.type === 'file' && child.name.endsWith('.md')\n                );\n                \n                if (!hasMarkdownFiles) return '';\n                \n                const isRoot = depth === 0;\n                const isExpanded = isRoot;\n                \n                if (!isRoot) {\n                    html += `<div class=\"directory${isExpanded ? ' expanded' : ''}\">\n                        <div class=\"directory-name\" onclick=\"this.parentElement.classList.toggle('expanded')\">\n                            ${node.name}/\n                        </div>\n                        <div class=\"directory-contents\">`;\n                }\n                \n                // Process children\n                if (node.children) {\n                    node.children.forEach(child => {\n                        html += renderFileTree(child, depth + 1);\n                    });\n                }\n                \n                if (!isRoot) {\n                    html += `</div></div>`;\n                }\n            } else if (node.type === 'file' && node.name.endsWith('.md')) {\n                html += `<div class=\"file-item\" data-path=\"${node.path}\">${node.name}</div>`;\n            }\n            \n            if (depth === 0) {\n                fileTree.innerHTML = html || 'No Markdown files found.';\n                \n                // Add click handlers to file items\n                document.querySelectorAll('.file-item').forEach(item => {\n                    item.addEventListener('click', () => loadMarkdownFile(item.getAttribute('data-path')));\n                });\n            }\n            \n            return html;\n        }\n        \n        // Load and render markdown file\n        async function loadMarkdownFile(filePath) {\n            try {\n                const response = await fetch(`/data/file-system.json`);\n                const fileSystem = await response.json();\n                \n                // Find the file in the file system\n                const pathSegments = filePath.split('/');\n                let currentNode = fileSystem;\n                \n                for (const segment of pathSegments) {\n                    if (!currentNode.children) break;\n                    const found = currentNode.children.find(child => child.name === segment);\n                    if (!found) break;\n                    currentNode = found;\n                }\n                \n                if (currentNode.type === 'file' && currentNode.content) {\n                    // Render markdown\n                    markdownContent.innerHTML = `\n                        <div style=\"margin-bottom: 20px; color: #586069; font-size: 0.9em;\">\n                            ${filePath}\n                        </div>\n                        <div id=\"markdown-rendered\">\n                            ${marked.parse(currentNode.content)}\n                        </div>\n                    `;\n                    \n                    // Apply syntax highlighting\n                    document.querySelectorAll('pre code').forEach((block) => {\n                        hljs.highlightElement(block);\n                    });\n                    \n                    // Update URL\n                    window.history.pushState({}, '', `?file=${encodeURIComponent(filePath)}`);\n                }\n            } catch (error) {\n                console.error('Error loading markdown file:', error);\n                markdownContent.innerHTML = `\n                    <div class=\"error\">\n                        <h2>Error</h2>\n                        <p>Could not load the selected file: ${error.message}</p>\n                    </div>\n                `;\n            }\n        }\n        \n        // Handle back/forward navigation\n        window.addEventListener('popstate', () => {\n            const urlParams = new URLSearchParams(window.location.search);\n            const file = urlParams.get('file');\n            if (file) {\n                loadMarkdownFile(file);\n            } else {\n                markdownContent.innerHTML = `\n                    <h1>Markdown Viewer</h1>\n                    <p>Select a Markdown file from the sidebar to view its contents.</p>\n                `;\n            }\n        });\n        \n        // Load initial file if specified in URL\n        document.addEventListener('DOMContentLoaded', () => {\n            const urlParams = new URLSearchParams(window.location.search);\n            const file = urlParams.get('file');\n            \n            loadFileSystem().then(() => {\n                if (file) {\n                    // Find and click the file in the tree\n                    const fileItem = document.querySelector(`.file-item[data-path=\"${file}\"]`);\n                    if (fileItem) {\n                        // Expand parent directories\n                        let parent = fileItem.parentElement;\n                        while (parent && parent.classList.contains('directory-contents')) {\n                            const dir = parent.previousElementSibling;\n                            if (dir && dir.classList.contains('directory-name')) {\n                                dir.click(); // Toggle to expand\n                            }\n                            parent = parent.parentElement;\n                        }\n                        fileItem.click();\n                    }\n                }\n            });\n        });\n    </script>\n</body>\n</html>\n"
    },
    {
      "name": "media-vault-admin.png",
      "type": "file",
      "path": "media-vault-admin.png",
      "size": 67062,
      "content": "[Binary file: media-vault-admin.png]"
    },
    {
      "name": "package-lock.json",
      "type": "file",
      "path": "package-lock.json",
      "size": 46805,
      "content": "{\n  \"name\": \"media-vault-explorer\",\n  \"version\": \"1.0.0\",\n  \"lockfileVersion\": 3,\n  \"requires\": true,\n  \"packages\": {\n    \"\": {\n      \"name\": \"media-vault-explorer\",\n      \"version\": \"1.0.0\",\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"cors\": \"^2.8.5\",\n        \"express\": \"^4.21.2\",\n        \"morgan\": \"^1.10.0\",\n        \"path\": \"^0.12.7\"\n      },\n      \"devDependencies\": {\n        \"nodemon\": \"^2.0.22\"\n      }\n    },\n    \"node_modules/accepts\": {\n      \"version\": \"1.3.8\",\n      \"resolved\": \"https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz\",\n      \"integrity\": \"sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"mime-types\": \"~2.1.34\",\n        \"negotiator\": \"0.6.3\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/anymatch\": {\n      \"version\": \"3.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz\",\n      \"integrity\": \"sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"normalize-path\": \"^3.0.0\",\n        \"picomatch\": \"^2.0.4\"\n      },\n      \"engines\": {\n        \"node\": \">= 8\"\n      }\n    },\n    \"node_modules/array-flatten\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz\",\n      \"integrity\": \"sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==\",\n      \"license\": \"MIT\"\n    },\n    \"node_modules/balanced-match\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz\",\n      \"integrity\": \"sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/basic-auth\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/basic-auth/-/basic-auth-2.0.1.tgz\",\n      \"integrity\": \"sha512-NF+epuEdnUYVlGuhaxbbq+dvJttwLnGY+YixlXlME5KpQ5W3CnXA5cVTneY3SPbPDRkcjMbifrwmFYcClgOZeg==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"safe-buffer\": \"5.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/basic-auth/node_modules/safe-buffer\": {\n      \"version\": \"5.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz\",\n      \"integrity\": \"sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==\",\n      \"license\": \"MIT\"\n    },\n    \"node_modules/binary-extensions\": {\n      \"version\": \"2.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz\",\n      \"integrity\": \"sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=8\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/body-parser\": {\n      \"version\": \"1.20.3\",\n      \"resolved\": \"https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz\",\n      \"integrity\": \"sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"bytes\": \"3.1.2\",\n        \"content-type\": \"~1.0.5\",\n        \"debug\": \"2.6.9\",\n        \"depd\": \"2.0.0\",\n        \"destroy\": \"1.2.0\",\n        \"http-errors\": \"2.0.0\",\n        \"iconv-lite\": \"0.4.24\",\n        \"on-finished\": \"2.4.1\",\n        \"qs\": \"6.13.0\",\n        \"raw-body\": \"2.5.2\",\n        \"type-is\": \"~1.6.18\",\n        \"unpipe\": \"1.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8\",\n        \"npm\": \"1.2.8000 || >= 1.4.16\"\n      }\n    },\n    \"node_modules/brace-expansion\": {\n      \"version\": \"1.1.11\",\n      \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz\",\n      \"integrity\": \"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"balanced-match\": \"^1.0.0\",\n        \"concat-map\": \"0.0.1\"\n      }\n    },\n    \"node_modules/braces\": {\n      \"version\": \"3.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/braces/-/braces-3.0.3.tgz\",\n      \"integrity\": \"sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"fill-range\": \"^7.1.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/bytes\": {\n      \"version\": \"3.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz\",\n      \"integrity\": \"sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/call-bind-apply-helpers\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz\",\n      \"integrity\": \"sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"es-errors\": \"^1.3.0\",\n        \"function-bind\": \"^1.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      }\n    },\n    \"node_modules/call-bound\": {\n      \"version\": \"1.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz\",\n      \"integrity\": \"sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"call-bind-apply-helpers\": \"^1.0.2\",\n        \"get-intrinsic\": \"^1.3.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/chokidar\": {\n      \"version\": \"3.6.0\",\n      \"resolved\": \"https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz\",\n      \"integrity\": \"sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"anymatch\": \"~3.1.2\",\n        \"braces\": \"~3.0.2\",\n        \"glob-parent\": \"~5.1.2\",\n        \"is-binary-path\": \"~2.1.0\",\n        \"is-glob\": \"~4.0.1\",\n        \"normalize-path\": \"~3.0.0\",\n        \"readdirp\": \"~3.6.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 8.10.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://paulmillr.com/funding/\"\n      },\n      \"optionalDependencies\": {\n        \"fsevents\": \"~2.3.2\"\n      }\n    },\n    \"node_modules/concat-map\": {\n      \"version\": \"0.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz\",\n      \"integrity\": \"sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/content-disposition\": {\n      \"version\": \"0.5.4\",\n      \"resolved\": \"https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz\",\n      \"integrity\": \"sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"safe-buffer\": \"5.2.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/content-type\": {\n      \"version\": \"1.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz\",\n      \"integrity\": \"sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/cookie\": {\n      \"version\": \"0.7.1\",\n      \"resolved\": \"https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz\",\n      \"integrity\": \"sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/cookie-signature\": {\n      \"version\": \"1.0.6\",\n      \"resolved\": \"https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz\",\n      \"integrity\": \"sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==\",\n      \"license\": \"MIT\"\n    },\n    \"node_modules/cors\": {\n      \"version\": \"2.8.5\",\n      \"resolved\": \"https://registry.npmjs.org/cors/-/cors-2.8.5.tgz\",\n      \"integrity\": \"sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"object-assign\": \"^4\",\n        \"vary\": \"^1\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.10\"\n      }\n    },\n    \"node_modules/debug\": {\n      \"version\": \"2.6.9\",\n      \"resolved\": \"https://registry.npmjs.org/debug/-/debug-2.6.9.tgz\",\n      \"integrity\": \"sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ms\": \"2.0.0\"\n      }\n    },\n    \"node_modules/depd\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/depd/-/depd-2.0.0.tgz\",\n      \"integrity\": \"sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/destroy\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz\",\n      \"integrity\": \"sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.8\",\n        \"npm\": \"1.2.8000 || >= 1.4.16\"\n      }\n    },\n    \"node_modules/dunder-proto\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz\",\n      \"integrity\": \"sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"call-bind-apply-helpers\": \"^1.0.1\",\n        \"es-errors\": \"^1.3.0\",\n        \"gopd\": \"^1.2.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      }\n    },\n    \"node_modules/ee-first\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz\",\n      \"integrity\": \"sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==\",\n      \"license\": \"MIT\"\n    },\n    \"node_modules/encodeurl\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz\",\n      \"integrity\": \"sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/es-define-property\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz\",\n      \"integrity\": \"sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      }\n    },\n    \"node_modules/es-errors\": {\n      \"version\": \"1.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz\",\n      \"integrity\": \"sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      }\n    },\n    \"node_modules/es-object-atoms\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz\",\n      \"integrity\": \"sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"es-errors\": \"^1.3.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      }\n    },\n    \"node_modules/escape-html\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz\",\n      \"integrity\": \"sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==\",\n      \"license\": \"MIT\"\n    },\n    \"node_modules/etag\": {\n      \"version\": \"1.8.1\",\n      \"resolved\": \"https://registry.npmjs.org/etag/-/etag-1.8.1.tgz\",\n      \"integrity\": \"sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/express\": {\n      \"version\": \"4.21.2\",\n      \"resolved\": \"https://registry.npmjs.org/express/-/express-4.21.2.tgz\",\n      \"integrity\": \"sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"accepts\": \"~1.3.8\",\n        \"array-flatten\": \"1.1.1\",\n        \"body-parser\": \"1.20.3\",\n        \"content-disposition\": \"0.5.4\",\n        \"content-type\": \"~1.0.4\",\n        \"cookie\": \"0.7.1\",\n        \"cookie-signature\": \"1.0.6\",\n        \"debug\": \"2.6.9\",\n        \"depd\": \"2.0.0\",\n        \"encodeurl\": \"~2.0.0\",\n        \"escape-html\": \"~1.0.3\",\n        \"etag\": \"~1.8.1\",\n        \"finalhandler\": \"1.3.1\",\n        \"fresh\": \"0.5.2\",\n        \"http-errors\": \"2.0.0\",\n        \"merge-descriptors\": \"1.0.3\",\n        \"methods\": \"~1.1.2\",\n        \"on-finished\": \"2.4.1\",\n        \"parseurl\": \"~1.3.3\",\n        \"path-to-regexp\": \"0.1.12\",\n        \"proxy-addr\": \"~2.0.7\",\n        \"qs\": \"6.13.0\",\n        \"range-parser\": \"~1.2.1\",\n        \"safe-buffer\": \"5.2.1\",\n        \"send\": \"0.19.0\",\n        \"serve-static\": \"1.16.2\",\n        \"setprototypeof\": \"1.2.0\",\n        \"statuses\": \"2.0.1\",\n        \"type-is\": \"~1.6.18\",\n        \"utils-merge\": \"1.0.1\",\n        \"vary\": \"~1.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.10.0\"\n      },\n      \"funding\": {\n        \"type\": \"opencollective\",\n        \"url\": \"https://opencollective.com/express\"\n      }\n    },\n    \"node_modules/fill-range\": {\n      \"version\": \"7.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz\",\n      \"integrity\": \"sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"to-regex-range\": \"^5.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/finalhandler\": {\n      \"version\": \"1.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz\",\n      \"integrity\": \"sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"debug\": \"2.6.9\",\n        \"encodeurl\": \"~2.0.0\",\n        \"escape-html\": \"~1.0.3\",\n        \"on-finished\": \"2.4.1\",\n        \"parseurl\": \"~1.3.3\",\n        \"statuses\": \"2.0.1\",\n        \"unpipe\": \"~1.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/forwarded\": {\n      \"version\": \"0.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz\",\n      \"integrity\": \"sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/fresh\": {\n      \"version\": \"0.5.2\",\n      \"resolved\": \"https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz\",\n      \"integrity\": \"sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/fsevents\": {\n      \"version\": \"2.3.3\",\n      \"resolved\": \"https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz\",\n      \"integrity\": \"sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==\",\n      \"dev\": true,\n      \"hasInstallScript\": true,\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"darwin\"\n      ],\n      \"engines\": {\n        \"node\": \"^8.16.0 || ^10.6.0 || >=11.0.0\"\n      }\n    },\n    \"node_modules/function-bind\": {\n      \"version\": \"1.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz\",\n      \"integrity\": \"sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==\",\n      \"license\": \"MIT\",\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/get-intrinsic\": {\n      \"version\": \"1.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz\",\n      \"integrity\": \"sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"call-bind-apply-helpers\": \"^1.0.2\",\n        \"es-define-property\": \"^1.0.1\",\n        \"es-errors\": \"^1.3.0\",\n        \"es-object-atoms\": \"^1.1.1\",\n        \"function-bind\": \"^1.1.2\",\n        \"get-proto\": \"^1.0.1\",\n        \"gopd\": \"^1.2.0\",\n        \"has-symbols\": \"^1.1.0\",\n        \"hasown\": \"^2.0.2\",\n        \"math-intrinsics\": \"^1.1.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/get-proto\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz\",\n      \"integrity\": \"sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"dunder-proto\": \"^1.0.1\",\n        \"es-object-atoms\": \"^1.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      }\n    },\n    \"node_modules/glob-parent\": {\n      \"version\": \"5.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz\",\n      \"integrity\": \"sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"is-glob\": \"^4.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 6\"\n      }\n    },\n    \"node_modules/gopd\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz\",\n      \"integrity\": \"sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/has-flag\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz\",\n      \"integrity\": \"sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/has-symbols\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz\",\n      \"integrity\": \"sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/hasown\": {\n      \"version\": \"2.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz\",\n      \"integrity\": \"sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"function-bind\": \"^1.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      }\n    },\n    \"node_modules/http-errors\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz\",\n      \"integrity\": \"sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"depd\": \"2.0.0\",\n        \"inherits\": \"2.0.4\",\n        \"setprototypeof\": \"1.2.0\",\n        \"statuses\": \"2.0.1\",\n        \"toidentifier\": \"1.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/iconv-lite\": {\n      \"version\": \"0.4.24\",\n      \"resolved\": \"https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz\",\n      \"integrity\": \"sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"safer-buffer\": \">= 2.1.2 < 3\"\n      },\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/ignore-by-default\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz\",\n      \"integrity\": \"sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==\",\n      \"dev\": true,\n      \"license\": \"ISC\"\n    },\n    \"node_modules/inherits\": {\n      \"version\": \"2.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz\",\n      \"integrity\": \"sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==\",\n      \"license\": \"ISC\"\n    },\n    \"node_modules/ipaddr.js\": {\n      \"version\": \"1.9.1\",\n      \"resolved\": \"https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz\",\n      \"integrity\": \"sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.10\"\n      }\n    },\n    \"node_modules/is-binary-path\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz\",\n      \"integrity\": \"sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"binary-extensions\": \"^2.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/is-extglob\": {\n      \"version\": \"2.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz\",\n      \"integrity\": \"sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/is-glob\": {\n      \"version\": \"4.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz\",\n      \"integrity\": \"sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"is-extglob\": \"^2.1.1\"\n      },\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/is-number\": {\n      \"version\": \"7.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz\",\n      \"integrity\": \"sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=0.12.0\"\n      }\n    },\n    \"node_modules/math-intrinsics\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz\",\n      \"integrity\": \"sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      }\n    },\n    \"node_modules/media-typer\": {\n      \"version\": \"0.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz\",\n      \"integrity\": \"sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/merge-descriptors\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz\",\n      \"integrity\": \"sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==\",\n      \"license\": \"MIT\",\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/methods\": {\n      \"version\": \"1.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/methods/-/methods-1.1.2.tgz\",\n      \"integrity\": \"sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/mime\": {\n      \"version\": \"1.6.0\",\n      \"resolved\": \"https://registry.npmjs.org/mime/-/mime-1.6.0.tgz\",\n      \"integrity\": \"sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==\",\n      \"license\": \"MIT\",\n      \"bin\": {\n        \"mime\": \"cli.js\"\n      },\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/mime-db\": {\n      \"version\": \"1.52.0\",\n      \"resolved\": \"https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz\",\n      \"integrity\": \"sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/mime-types\": {\n      \"version\": \"2.1.35\",\n      \"resolved\": \"https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz\",\n      \"integrity\": \"sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"mime-db\": \"1.52.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/minimatch\": {\n      \"version\": \"3.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz\",\n      \"integrity\": \"sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"brace-expansion\": \"^1.1.7\"\n      },\n      \"engines\": {\n        \"node\": \"*\"\n      }\n    },\n    \"node_modules/morgan\": {\n      \"version\": \"1.10.0\",\n      \"resolved\": \"https://registry.npmjs.org/morgan/-/morgan-1.10.0.tgz\",\n      \"integrity\": \"sha512-AbegBVI4sh6El+1gNwvD5YIck7nSA36weD7xvIxG4in80j/UoK8AEGaWnnz8v1GxonMCltmlNs5ZKbGvl9b1XQ==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"basic-auth\": \"~2.0.1\",\n        \"debug\": \"2.6.9\",\n        \"depd\": \"~2.0.0\",\n        \"on-finished\": \"~2.3.0\",\n        \"on-headers\": \"~1.0.2\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8.0\"\n      }\n    },\n    \"node_modules/morgan/node_modules/on-finished\": {\n      \"version\": \"2.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz\",\n      \"integrity\": \"sha512-ikqdkGAAyf/X/gPhXGvfgAytDZtDbr+bkNUJ0N9h5MI/dmdgCs3l6hoHrcUv41sRKew3jIwrp4qQDXiK99Utww==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ee-first\": \"1.1.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/ms\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.0.0.tgz\",\n      \"integrity\": \"sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==\",\n      \"license\": \"MIT\"\n    },\n    \"node_modules/negotiator\": {\n      \"version\": \"0.6.3\",\n      \"resolved\": \"https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz\",\n      \"integrity\": \"sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/nodemon\": {\n      \"version\": \"2.0.22\",\n      \"resolved\": \"https://registry.npmjs.org/nodemon/-/nodemon-2.0.22.tgz\",\n      \"integrity\": \"sha512-B8YqaKMmyuCO7BowF1Z1/mkPqLk6cs/l63Ojtd6otKjMx47Dq1utxfRxcavH1I7VSaL8n5BUaoutadnsX3AAVQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"chokidar\": \"^3.5.2\",\n        \"debug\": \"^3.2.7\",\n        \"ignore-by-default\": \"^1.0.1\",\n        \"minimatch\": \"^3.1.2\",\n        \"pstree.remy\": \"^1.1.8\",\n        \"semver\": \"^5.7.1\",\n        \"simple-update-notifier\": \"^1.0.7\",\n        \"supports-color\": \"^5.5.0\",\n        \"touch\": \"^3.1.0\",\n        \"undefsafe\": \"^2.0.5\"\n      },\n      \"bin\": {\n        \"nodemon\": \"bin/nodemon.js\"\n      },\n      \"engines\": {\n        \"node\": \">=8.10.0\"\n      },\n      \"funding\": {\n        \"type\": \"opencollective\",\n        \"url\": \"https://opencollective.com/nodemon\"\n      }\n    },\n    \"node_modules/nodemon/node_modules/debug\": {\n      \"version\": \"3.2.7\",\n      \"resolved\": \"https://registry.npmjs.org/debug/-/debug-3.2.7.tgz\",\n      \"integrity\": \"sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ms\": \"^2.1.1\"\n      }\n    },\n    \"node_modules/nodemon/node_modules/ms\": {\n      \"version\": \"2.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.1.3.tgz\",\n      \"integrity\": \"sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/normalize-path\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz\",\n      \"integrity\": \"sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/object-assign\": {\n      \"version\": \"4.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz\",\n      \"integrity\": \"sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/object-inspect\": {\n      \"version\": \"1.13.4\",\n      \"resolved\": \"https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz\",\n      \"integrity\": \"sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/on-finished\": {\n      \"version\": \"2.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz\",\n      \"integrity\": \"sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ee-first\": \"1.1.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/on-headers\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/on-headers/-/on-headers-1.0.2.tgz\",\n      \"integrity\": \"sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/parseurl\": {\n      \"version\": \"1.3.3\",\n      \"resolved\": \"https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz\",\n      \"integrity\": \"sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/path\": {\n      \"version\": \"0.12.7\",\n      \"resolved\": \"https://registry.npmjs.org/path/-/path-0.12.7.tgz\",\n      \"integrity\": \"sha512-aXXC6s+1w7otVF9UletFkFcDsJeO7lSZBPUQhtb5O0xJe8LtYhj/GxldoL09bBj9+ZmE2hNoHqQSFMN5fikh4Q==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"process\": \"^0.11.1\",\n        \"util\": \"^0.10.3\"\n      }\n    },\n    \"node_modules/path-to-regexp\": {\n      \"version\": \"0.1.12\",\n      \"resolved\": \"https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz\",\n      \"integrity\": \"sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==\",\n      \"license\": \"MIT\"\n    },\n    \"node_modules/picomatch\": {\n      \"version\": \"2.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz\",\n      \"integrity\": \"sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=8.6\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/jonschlinkert\"\n      }\n    },\n    \"node_modules/process\": {\n      \"version\": \"0.11.10\",\n      \"resolved\": \"https://registry.npmjs.org/process/-/process-0.11.10.tgz\",\n      \"integrity\": \"sha512-cdGef/drWFoydD1JsMzuFf8100nZl+GT+yacc2bEced5f9Rjk4z+WtFUTBu9PhOi9j/jfmBPu0mMEY4wIdAF8A==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.6.0\"\n      }\n    },\n    \"node_modules/proxy-addr\": {\n      \"version\": \"2.0.7\",\n      \"resolved\": \"https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz\",\n      \"integrity\": \"sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"forwarded\": \"0.2.0\",\n        \"ipaddr.js\": \"1.9.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.10\"\n      }\n    },\n    \"node_modules/pstree.remy\": {\n      \"version\": \"1.1.8\",\n      \"resolved\": \"https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz\",\n      \"integrity\": \"sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/qs\": {\n      \"version\": \"6.13.0\",\n      \"resolved\": \"https://registry.npmjs.org/qs/-/qs-6.13.0.tgz\",\n      \"integrity\": \"sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==\",\n      \"license\": \"BSD-3-Clause\",\n      \"dependencies\": {\n        \"side-channel\": \"^1.0.6\"\n      },\n      \"engines\": {\n        \"node\": \">=0.6\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/range-parser\": {\n      \"version\": \"1.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz\",\n      \"integrity\": \"sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/raw-body\": {\n      \"version\": \"2.5.2\",\n      \"resolved\": \"https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz\",\n      \"integrity\": \"sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"bytes\": \"3.1.2\",\n        \"http-errors\": \"2.0.0\",\n        \"iconv-lite\": \"0.4.24\",\n        \"unpipe\": \"1.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/readdirp\": {\n      \"version\": \"3.6.0\",\n      \"resolved\": \"https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz\",\n      \"integrity\": \"sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"picomatch\": \"^2.2.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8.10.0\"\n      }\n    },\n    \"node_modules/safe-buffer\": {\n      \"version\": \"5.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz\",\n      \"integrity\": \"sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==\",\n      \"funding\": [\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/feross\"\n        },\n        {\n          \"type\": \"patreon\",\n          \"url\": \"https://www.patreon.com/feross\"\n        },\n        {\n          \"type\": \"consulting\",\n          \"url\": \"https://feross.org/support\"\n        }\n      ],\n      \"license\": \"MIT\"\n    },\n    \"node_modules/safer-buffer\": {\n      \"version\": \"2.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz\",\n      \"integrity\": \"sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==\",\n      \"license\": \"MIT\"\n    },\n    \"node_modules/semver\": {\n      \"version\": \"5.7.2\",\n      \"resolved\": \"https://registry.npmjs.org/semver/-/semver-5.7.2.tgz\",\n      \"integrity\": \"sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"bin\": {\n        \"semver\": \"bin/semver\"\n      }\n    },\n    \"node_modules/send\": {\n      \"version\": \"0.19.0\",\n      \"resolved\": \"https://registry.npmjs.org/send/-/send-0.19.0.tgz\",\n      \"integrity\": \"sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"debug\": \"2.6.9\",\n        \"depd\": \"2.0.0\",\n        \"destroy\": \"1.2.0\",\n        \"encodeurl\": \"~1.0.2\",\n        \"escape-html\": \"~1.0.3\",\n        \"etag\": \"~1.8.1\",\n        \"fresh\": \"0.5.2\",\n        \"http-errors\": \"2.0.0\",\n        \"mime\": \"1.6.0\",\n        \"ms\": \"2.1.3\",\n        \"on-finished\": \"2.4.1\",\n        \"range-parser\": \"~1.2.1\",\n        \"statuses\": \"2.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8.0\"\n      }\n    },\n    \"node_modules/send/node_modules/encodeurl\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz\",\n      \"integrity\": \"sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/send/node_modules/ms\": {\n      \"version\": \"2.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.1.3.tgz\",\n      \"integrity\": \"sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==\",\n      \"license\": \"MIT\"\n    },\n    \"node_modules/serve-static\": {\n      \"version\": \"1.16.2\",\n      \"resolved\": \"https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz\",\n      \"integrity\": \"sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"encodeurl\": \"~2.0.0\",\n        \"escape-html\": \"~1.0.3\",\n        \"parseurl\": \"~1.3.3\",\n        \"send\": \"0.19.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8.0\"\n      }\n    },\n    \"node_modules/setprototypeof\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz\",\n      \"integrity\": \"sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==\",\n      \"license\": \"ISC\"\n    },\n    \"node_modules/side-channel\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz\",\n      \"integrity\": \"sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"es-errors\": \"^1.3.0\",\n        \"object-inspect\": \"^1.13.3\",\n        \"side-channel-list\": \"^1.0.0\",\n        \"side-channel-map\": \"^1.0.1\",\n        \"side-channel-weakmap\": \"^1.0.2\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/side-channel-list\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz\",\n      \"integrity\": \"sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"es-errors\": \"^1.3.0\",\n        \"object-inspect\": \"^1.13.3\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/side-channel-map\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz\",\n      \"integrity\": \"sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"call-bound\": \"^1.0.2\",\n        \"es-errors\": \"^1.3.0\",\n        \"get-intrinsic\": \"^1.2.5\",\n        \"object-inspect\": \"^1.13.3\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/side-channel-weakmap\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz\",\n      \"integrity\": \"sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"call-bound\": \"^1.0.2\",\n        \"es-errors\": \"^1.3.0\",\n        \"get-intrinsic\": \"^1.2.5\",\n        \"object-inspect\": \"^1.13.3\",\n        \"side-channel-map\": \"^1.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/simple-update-notifier\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-1.1.0.tgz\",\n      \"integrity\": \"sha512-VpsrsJSUcJEseSbMHkrsrAVSdvVS5I96Qo1QAQ4FxQ9wXFcB+pjj7FB7/us9+GcgfW4ziHtYMc1J0PLczb55mg==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"semver\": \"~7.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=8.10.0\"\n      }\n    },\n    \"node_modules/simple-update-notifier/node_modules/semver\": {\n      \"version\": \"7.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/semver/-/semver-7.0.0.tgz\",\n      \"integrity\": \"sha512-+GB6zVA9LWh6zovYQLALHwv5rb2PHGlJi3lfiqIHxR0uuwCgefcOJc59v9fv1w8GbStwxuuqqAjI9NMAOOgq1A==\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"bin\": {\n        \"semver\": \"bin/semver.js\"\n      }\n    },\n    \"node_modules/statuses\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz\",\n      \"integrity\": \"sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/supports-color\": {\n      \"version\": \"5.5.0\",\n      \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz\",\n      \"integrity\": \"sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"has-flag\": \"^3.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/to-regex-range\": {\n      \"version\": \"5.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz\",\n      \"integrity\": \"sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"is-number\": \"^7.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=8.0\"\n      }\n    },\n    \"node_modules/toidentifier\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz\",\n      \"integrity\": \"sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=0.6\"\n      }\n    },\n    \"node_modules/touch\": {\n      \"version\": \"3.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/touch/-/touch-3.1.1.tgz\",\n      \"integrity\": \"sha512-r0eojU4bI8MnHr8c5bNo7lJDdI2qXlWWJk6a9EAFG7vbhTjElYhBVS3/miuE0uOuoLdb8Mc/rVfsmm6eo5o9GA==\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"bin\": {\n        \"nodetouch\": \"bin/nodetouch.js\"\n      }\n    },\n    \"node_modules/type-is\": {\n      \"version\": \"1.6.18\",\n      \"resolved\": \"https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz\",\n      \"integrity\": \"sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"media-typer\": \"0.3.0\",\n        \"mime-types\": \"~2.1.24\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/undefsafe\": {\n      \"version\": \"2.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz\",\n      \"integrity\": \"sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/unpipe\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz\",\n      \"integrity\": \"sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/util\": {\n      \"version\": \"0.10.4\",\n      \"resolved\": \"https://registry.npmjs.org/util/-/util-0.10.4.tgz\",\n      \"integrity\": \"sha512-0Pm9hTQ3se5ll1XihRic3FDIku70C+iHUdT/W926rSgHV5QgXsYbKZN8MSC3tJtSkhuROzvsQjAaFENRXr+19A==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"inherits\": \"2.0.3\"\n      }\n    },\n    \"node_modules/util/node_modules/inherits\": {\n      \"version\": \"2.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz\",\n      \"integrity\": \"sha512-x00IRNXNy63jwGkJmzPigoySHbaqpNuzKbBOmzK+g2OdZpQ9w+sxCN+VSB3ja7IAge2OP2qpfxTjeNcyjmW1uw==\",\n      \"license\": \"ISC\"\n    },\n    \"node_modules/utils-merge\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz\",\n      \"integrity\": \"sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.4.0\"\n      }\n    },\n    \"node_modules/vary\": {\n      \"version\": \"1.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/vary/-/vary-1.1.2.tgz\",\n      \"integrity\": \"sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    }\n  }\n}\n"
    },
    {
      "name": "package.json",
      "type": "file",
      "path": "package.json",
      "size": 753,
      "content": "{\n  \"name\": \"media-vault-explorer\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Media Vault Project Explorer\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"start\": \"node server.js\",\n    \"dev\": \"nodemon server.js\"\n  },\n  \"dependencies\": {\n    \"cors\": \"^2.8.5\",\n    \"express\": \"^4.21.2\",\n    \"morgan\": \"^1.10.0\",\n    \"path\": \"^0.12.7\"\n  },\n  \"devDependencies\": {\n    \"nodemon\": \"^2.0.22\"\n  },\n  \"directories\": {\n    \"doc\": \"docs\",\n    \"test\": \"tests\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/wronai/docker-platform.git\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/wronai/docker-platform/issues\"\n  },\n  \"homepage\": \"https://github.com/wronai/docker-platform#readme\"\n}\n"
    },
    {
      "name": "README-EXPLORER.md",
      "type": "file",
      "path": "README-EXPLORER.md",
      "size": 1125,
      "content": "# Media Vault Project Explorer\n\nA web-based file explorer for the Media Vault project that renders markdown files and displays project structure.\n\n## Features\n\n- Browse project files and directories\n- View and render markdown files in real-time\n- Syntax highlighting for code blocks\n- Responsive design that works on desktop and mobile\n- File size and modification date information\n\n## Getting Started\n\n1. Make sure you have Node.js installed (v14 or later)\n2. Install the dependencies:\n\n```bash\nnpm install\n```\n\n3. Start the development server:\n\n```bash\nnpm start\n```\n\n4. Open your browser and navigate to:\n\n```\nhttp://localhost:3000\n```\n\n## Development\n\nFor development with auto-reload:\n\n```bash\nnpm run dev\n```\n\n## Security Notes\n\n- The server is configured to only serve files within the project directory\n- File size is limited to 1MB for display\n- Hidden files and node_modules are excluded from the file listing\n\n## Dependencies\n\n- Express.js - Web server framework\n- Marked - Markdown parser\n- Highlight.js - Syntax highlighting\n- Bootstrap 5 - Styling\n\n## License\n\nThis project is part of the Media Vault platform.\n"
    },
    {
      "name": "README.md",
      "type": "file",
      "path": "README.md",
      "size": 19220,
      "content": "# 🔐 Media Vault - Complete Solution\n\n**Enterprise-grade secure media storage with AI analysis, role-based access, and comprehensive monitoring.**\n\n[![Version](https://img.shields.io/badge/version-1.0.0-blue.svg)](https://github.com/wronai/docker-platform)\n[![License](https://img.shields.io/badge/license-Apache%202.0-green.svg)](LICENSE)\n[![Docker](https://img.shields.io/badge/docker-ready-brightgreen.svg)](docker-compose.yml)\n[![Documentation](https://img.shields.io/badge/docs-📘-blueviolet)](docs/README.md)\n[![Project Status](https://img.shields.io/badge/status-active%20development-yellowgreen)](#project-status)\n[![Contributing](https://img.shields.io/badge/contributions-welcome-brightgreen.svg)](CONTRIBUTING.md)\n[![Go Report Card](https://goreportcard.com/badge/github.com/wronai/media-vault-backend)](https://goreportcard.com/report/github.com/wronai/media-vault-backend)\n[![GitHub Issues](https://img.shields.io/github/issues/wronai/docker-platform)](https://github.com/wronai/docker-platform/issues)\n[![GitHub Pull Requests](https://img.shields.io/github/issues-pr/wronai/docker-platform)](https://github.com/wronai/docker-platform/pulls)\n\n## 🚀 Quick Start\n\n### Prerequisites\n- Docker 20.10+ and Docker Compose\n- 4GB RAM minimum (8GB recommended)\n- Ports 80, 443, 8080, 3000 available\n\n### Local Development Setup\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/wronai/docker-platform.git\n   cd docker-platform\n   ```\n\n2. Copy the example environment file and update as needed:\n   ```bash\n   cp .env.example .env\n   ```\n\n3. Start the services:\n   ```bash\n   make up\n   ```\n\n### Accessing Services\n- **Web UI**: https://localhost\n- **Admin Panel**: https://admin.localhost\n- **Keycloak**: https://auth.localhost\n- **Grafana**: http://localhost:3000\n- **API Documentation**: http://localhost:8080/api/docs\n\n## 🛠 Service Management\n\n### Individual Service Control\nYou can start, stop, and manage individual services using the following commands:\n\n#### Keycloak Services\n```bash\nmake keycloak       # Start Keycloak identity service (http://localhost:8080/admin)\nmake keycloak-db    # Start Keycloak database\n```\n\n#### Media Vault Services\n```bash\nmake media-vault-api         # Start Media Vault API\nmake media-vault-analyzer    # Start AI Processing service\nmake nsfw-analyzer          # Start NSFW content detection\n```\n\n#### Frontend Services\n```bash\nmake flutter-web          # Start Flutter Web Frontend (http://localhost:3000)\nmake media-vault-admin    # Start Admin Panel (http://localhost:3001)\n```\n\n#### Infrastructure Services\n```bash\nmake caddy    # Start Caddy Reverse Proxy\nmake redis    # Start Redis Cache\n```\n\n### Common Operations\n\n#### Start All Services\n```bash\nmake up\n```\n\n#### Stop All Services\n```bash\nmake down\n```\n\n#### View Logs\n```bash\nmake logs\n```\n\n#### Rebuild and Restart a Service\n```bash\ndocker-compose up -d --build <service-name>\n```\n\n## ✨ Key Features\n\n### Core Features\n- **Secure File Storage**: End-to-end encrypted media storage with AES-256 encryption\n- **AI-Powered Analysis**: Automatic media tagging, face recognition, and content description\n- **Role-Based Access Control**: Fine-grained permissions with support for custom roles\n- **Real-time Collaboration**: Share and collaborate on media assets in real-time\n- **Version Control**: Track changes and revert to previous versions of media files\n\n### Technical Highlights\n- **Containerized Architecture**: Docker-based microservices for easy deployment\n- **High Availability**: Built with scalability and fault tolerance in mind\n- **Comprehensive API**: RESTful API with OpenAPI 3.0 documentation\n- **Event-Driven**: Built on event sourcing for reliable operations\n- **Multi-tenant**: Support for multiple organizations with data isolation\n\n### Monitoring & Analytics\n- **Real-time Metrics**: Monitor system health and performance\n- **Audit Logs**: Detailed logs of all system activities\n- **Usage Analytics**: Track storage usage and user activity\n- **Alerting**: Configure alerts for important system events\n\n## 🏗️ Architecture Overview\n\nMedia Vault is built on a modern microservices architecture:\n\n- **Frontend**: Flutter-based responsive web interface\n- **Backend**: High-performance Go services\n- **Authentication**: Keycloak for identity management\n- **Database**: PostgreSQL for data persistence\n- **Monitoring**: Prometheus, Grafana, and more\n\n## 👥 User Roles\n\n### End User\n- Upload and manage personal media\n- Generate AI descriptions\n- Share media with others\n- View personal analytics\n\n### Partner User\n- All End User capabilities\n- Access to shared partner content\n- Team collaboration features\n- Advanced analytics\n\n### Administrator\n- System configuration\n- User and role management\n- System health monitoring\n- Backup and recovery\n\n```bash\nmake media-vault-admin\n```\nor\n```bash\ndocker-compose up -d --remove-orphans media-vault-admin\n```\n\n![media-vault-admin.png](media-vault-admin.png)\n\n## 📂 Project Structure\n\n```\ndocker-platform/\n├── ansible/               # Infrastructure as Code\n├── caddy/                 # Reverse proxy configuration\n├── data/                  # Persistent data\n├── deployment/            # Deployment configurations\n├── docs/                  # Documentation\n├── keycloak/             # Authentication service\n│   ├── themes/           # Custom UI themes\n│   └── import/           # Initial data import\n└── scripts/              # Utility scripts\n```\n\n## 🛠️ Configuration\n\n### Environment Variables\nCopy the example environment file and update as needed:\n```bash\ncp .env.example .env\n```\n\n### Docker Compose Files\n- `docker-compose.yml` - Main services\n- `docker-compose.monitoring.yml` - Monitoring stack\n- `docker-compose.infrastructure.yml` - Infrastructure services\n- `docker-compose.automation.yml` - Automation tools\n\n## 🔧 Development\n\n### Prerequisites\n- Go 1.21+\n- Node.js 18+\n- Flutter 3.10+\n- Docker & Docker Compose\n\n### Development Workflow\n\n1. **Start the development environment**\n   ```bash\n   make dev-up\n   ```\n\n2. **Run tests**\n   ```bash\n   make test              # Unit tests\n   make test-integration  # Integration tests\n   make test-e2e          # End-to-end tests\n   ```\n\n3. **View logs**\n   ```bash\n   make logs\n   ```\n\n## 📚 Documentation\n\nComprehensive documentation is available in the `docs/` directory:\n\n- [📘 User Guide](docs/USER_GUIDE.md) - End-user documentation\n- [🔧 Deployment Guide](docs/DEPLOYMENT.md) - Setup and configuration\n- [🏗️ Architecture](docs/ARCHITECTURE.md) - System design and components\n- [🔐 Security](docs/SECURITY.md) - Security best practices\n- [📊 Monitoring](docs/MONITORING.md) - Observability and alerting\n- [📝 API Reference](docs/API.md) - API documentation\n\n## 🤝 Contributing\n\nWe welcome contributions! Please see our [Contributing Guidelines](CONTRIBUTING.md) for details on how to contribute to this project.\n\n## 📄 License\n\nThis project is licensed under the Apache 2.0 License - see the [LICENSE](LICENSE) file for details.\n\n## 🙏 Acknowledgments\n\n- [Docker](https://www.docker.com/)\n- [Keycloak](https://www.keycloak.org/)\n- [Prometheus](https://prometheus.io/)\n- [Grafana](https://grafana.com/)\n- [Flutter](https://flutter.dev/)\n\n## 🏗️ Architecture Overview\n\nMedia Vault is built using a microservices architecture with the following components:\n\n### Core Services\n- **Frontend**: Flutter-based web interface\n- **API Gateway**: Request routing and authentication\n- **Media Service**: File processing and storage\n- **Metadata Service**: Media metadata management\n- **AI Service**: Media analysis and description\n- **Auth Service**: User authentication and authorization\n\n### Data Storage\n- **PostgreSQL**: Relational data\n- **Object Storage**: Media files\n- **Redis**: Caching and sessions\n\n### Infrastructure\n- **Docker & Docker Compose**: Containerization\n- **Caddy**: Reverse proxy with automatic HTTPS\n- **Keycloak**: Identity and access management\n- **Monitoring**: Prometheus, Grafana, Loki\n\n## 🔧 Development\n\n### Prerequisites\n- Go 1.21+\n- Node.js 18+\n- Docker & Docker Compose\n\n### Setup Development Environment\n\n1. **Start dependencies**\n   ```bash\n   make dev-deps\n   ```\n\n2. **Run database migrations**\n   ```bash\n   make migrate\n   ```\n\n3. **Start development servers**\n   ```bash\n   make dev\n   ```\n\n## 🧪 Testing\n\nRun unit tests:\n```bash\nmake test\n```\n\nRun integration tests:\n```bash\nmake test-integration\n```\n\n## 📚 Documentation\n\n- [Architecture](./docs/ARCHITECTURE.md): System design and components\n- [API Reference](./docs/API.md): Detailed API documentation\n- [Deployment Guide](./docs/DEPLOYMENT.md): Production deployment instructions\n- [User Guide](./docs/USER_GUIDE.md): End-user documentation\n- [Security](./docs/SECURITY.md): Security best practices\n\n## 🤝 Contributing\n\nWe welcome contributions! Please see our [Contributing Guidelines](CONTRIBUTING.md) for details.\n\n## 📄 License\n\nThis project is licensed under the Apache 2.0 License - see the [LICENSE](LICENSE) file for details.\n\n## 🔑 Key Files\n\n### Backend Services\n\n#### Core Components\n- [Main Backend Service](/media-vault-backend/) - Core API and business logic\n  - [Dockerfile](/media-vault-backend/Dockerfile) - Backend service container definition\n  - [go.mod](/media-vault-backend/go.mod) - Go module and dependencies\n  - [main.go](/media-vault-backend/cmd/main.go) - Application entry point\n\n#### Internal Packages\n- [internal/auth/](/media-vault-backend/internal/auth/) - Authentication and authorization\n  - [roles.go](/media-vault-backend/internal/auth/roles.go) - Role definitions and permissions\n  - [middleware.go](/media-vault-backend/internal/auth/middleware.go) - Authentication middleware\n\n- [internal/handlers/](/media-vault-backend/internal/handlers/) - HTTP request handlers\n  - [vault.go](/media-vault-backend/internal/handlers/vault.go) - Media vault operations\n  - [photos.go](/media-vault-backend/internal/handlers/photos.go) - Photo management\n  - [upload.go](/media-vault-backend/internal/handlers/upload.go) - File upload handling\n\n- [internal/models/](/media-vault-backend/internal/models/) - Data models\n  - [media.go](/media-vault-backend/internal/models/media.go) - Media file model\n  - [description.go](/media-vault-backend/internal/models/description.go) - AI-generated descriptions\n  - [photo.go](/media-vault-backend/internal/models/photo.go) - Photo metadata\n\n- [internal/services/](/media-vault-backend/internal/services/) - Business logic\n  - [vault_service.go](/media-vault-backend/internal/services/vault_service.go) - Media vault operations\n  - [photo_service.go](/media-vault-backend/internal/services/photo_service.go) - Photo processing\n  - [sharing_service.go](/media-vault-backend/internal/services/sharing_service.go) - Media sharing logic\n\n### Configuration\n- [docker-compose.yml](/docker-compose.yml) - Main Docker Compose configuration\n- [.env.example](/.env.example) - Example environment configuration\n- [Makefile](/Makefile) - Common development commands\n- [scripts/](/scripts/) - Utility scripts for development and deployment\n\n### Development Workflow\n\n#### Prerequisites\n- Docker and Docker Compose\n- Go 1.21+\n- Node.js 18+ (for frontend development)\n\n#### Common Tasks\n\n**Starting the development environment:**\n```bash\nmake dev-up\n```\n\n**Running tests:**\n```bash\nmake test\n```\n\n**Building the application:**\n```bash\nmake build\n```\n\n**Viewing logs:**\n```bash\nmake logs\n```\n\n#### Scripts\n- [scripts/dev.sh](/scripts/dev.sh) - Development environment setup\n- [scripts/test.sh](/scripts/test.sh) - Test runner\n- [scripts/deploy.sh](/scripts/deploy.sh) - Deployment script\n- [scripts/backup.sh](/scripts/backup.sh) - Database backup\n\n### Documentation\n- [docs/](/docs/) - Comprehensive documentation\n  - [API.md](/docs/API.md) - API reference\n  - [ARCHITECTURE.md](/docs/ARCHITECTURE.md) - System architecture\n  - [DEPLOYMENT.md](/docs/DEPLOYMENT.md) - Deployment guide\n  - [SECURITY.md](/docs/SECURITY.md) - Security best practices\n\n## 🏗️ Architecture Overview\n\nMedia Vault is built on a modern microservices architecture:\n\n- **Frontend**: Flutter-based responsive web interface\n- **Backend**: High-performance Go services\n- **Authentication**: Keycloak for identity management\n- **Database**: PostgreSQL for data persistence\n- **Monitoring**: Prometheus, Grafana, and more\n\nFor a complete architecture deep dive, see the [Architecture Documentation](docs/ARCHITECTURE.md).\n\n## 📚 Documentation\n\nComprehensive documentation is available in the `docs/` directory:\n\n- [📘 User Guide](docs/USER_GUIDE.md) - End-user documentation\n- [🔧 Deployment Guide](docs/DEPLOYMENT.md) - Setup and configuration\n- [🏗️ Architecture](docs/ARCHITECTURE.md) - System design and components\n- [🔐 Security](docs/SECURITY.md) - Security best practices\n- [📊 Monitoring](docs/MONITORING.md) - Observability and alerting\n- [📝 API Reference](docs/API.md) - API documentation\n\n## 🛠️ Configuration Files\n\n### Docker Compose Files\n- [docker-compose.yml](docker-compose.yml) - Main services configuration\n- [docker-compose.monitoring.yml](docker-compose.monitoring.yml) - Monitoring stack\n- [docker-compose.infrastructure.yml](docker-compose.infrastructure.yml) - Infrastructure services\n- [docker-compose.automation.yml](docker-compose.automation.yml) - Automation and CI/CD tools\n\n### Environment Configuration\n- [.env.example](.env.example) - Example environment variables\n- [.env](.env) - Your local environment configuration (create from .env.example)\n\n## 📂 Project Structure\n\n```\ndocker-platform/\n├── ansible/               # Infrastructure as Code\n│   └── README.md\n├── caddy/                 # Reverse proxy configuration\n├── data/                  # Persistent data\n├── deployment/            # Deployment configurations\n├── docs/                  # Documentation\n│   ├── API.md\n│   ├── ARCHITECTURE.md\n│   ├── DEPLOYMENT.md\n│   ├── MONITORING.md\n│   ├── README.md\n│   ├── SECURITY.md\n│   └── USER_GUIDE.md\n├── keycloak/             # Authentication service\n│   ├── themes/           # Custom UI themes\n│   └── import/           # Initial data import\n└── scripts/              # Utility scripts\n```\n\n## 🔄 Development Workflow\n\n1. **Clone the repository**\n   ```bash\n   git clone https://github.com/wronai/docker-platform.git\n   cd docker-platform\n   ```\n\n2. **Set up environment**\n   ```bash\n   cp .env.example .env\n   # Edit .env with your configuration\n   ```\n\n3. **Start services**\n   ```bash\n   make up\n   ```\n\n4. **Access applications**\n   - Web UI: http://localhost:3000\n   - API: http://localhost:8080\n   - Monitoring: http://localhost:9090\n   - Documentation: http://localhost:8080/docs\n\n## 🧪 Testing\n\n### Run Tests\n```bash\n# Run all tests\nmake test\n\n# Run backend tests\nmake test-backend\n\n# Run frontend tests\nmake test-frontend\n\n# Run linters\nmake lint\n\n# Check code coverage\nmake coverage\n```\n\n## 🤝 Contributing\n\nWe welcome contributions from the community! Here's how you can help:\n\n1. **Report Bugs**: File an issue on our [issue tracker](https://github.com/wronai/docker-platform/issues).\n2. **Submit Fixes**: Fork the repository and submit a pull request.\n3. **Improve Docs**: Help us enhance our documentation.\n\nPlease read our [Contributing Guide](CONTRIBUTING.md) for development setup and contribution guidelines.\n\n## 📄 License\n\nThis project is licensed under the Apache 2.0 License - see the [LICENSE](LICENSE) file for details.\n\n## 🙏 Acknowledgments\n\n- [Keycloak](https://www.keycloak.org/) for authentication\n- [Docker](https://www.docker.com/) for containerization\n- [Prometheus](https://prometheus.io/) and [Grafana](https://grafana.com/) for monitoring\n- All our amazing contributors and users!\n\n---\n\n# Run linters\nmake lint\n\n# Format code\nmake format\n\n# Update dependencies\nmake deps\n```\n\n## 🧪 Testing\n\n### Running Tests\n\n```bash\n# Run unit tests\nmake test-unit\n\n# Run integration tests\nmake test-integration\n\n# Run end-to-end tests\nmake test-e2e\n```\n\n### Test Coverage\n\n```bash\n# Generate coverage report\nmake coverage\n\n# View HTML coverage report\nmake coverage-html\n```\n\n## 📊 Monitoring\n\n### Access Monitoring Tools\n\n- **Grafana**: http://localhost:3000 (admin/admin)\n- **Prometheus**: http://localhost:9090\n- **Alertmanager**: http://localhost:9093\n\n### Key Metrics\n\n- API response times\n- Error rates\n- Resource usage\n- User activity\n- Storage utilization\n\n## 🔐 Authentication\n\n### Keycloak Setup\n\n1. Access Keycloak admin console: https://auth.localhost/admin\n2. Log in with admin credentials\n3. Import realm configuration from `keycloak/import/realm-export.json`\n4. Configure identity providers and clients as needed\n\n![keycloak.png](keycloak.png)\n```bash\nadmin\nadmin123\n```\n\n### User Management\n\n- Create users in Keycloak admin console\n- Assign roles and permissions\n- Set up password policies\n- Configure multi-factor authentication\n\n## 📚 Documentation\n\n### API Documentation\n\nAccess the interactive API documentation at:\n- Swagger UI: https://localhost/api/docs\n- OpenAPI Spec: https://localhost/api/docs.json\n\n### Additional Resources\n\n- [Developer Guide](docs/DEVELOPER_GUIDE.md)\n- [API Reference](docs/API_REFERENCE.md)\n- [Deployment Guide](docs/DEPLOYMENT.md)\n- [Troubleshooting](docs/TROUBLESHOOTING.md)\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/AmazingFeature`)\n3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)\n4. Push to the branch (`git push origin feature/AmazingFeature`)\n5. Open a Pull Request\n\n## 📄 License\n\nThis project is licensed under the Apache License 2.0 - see the [LICENSE](LICENSE) file for details.\n\n## 🙏 Acknowledgments\n\n- [Keycloak](https://www.keycloak.org/) for authentication\n- [Fiber](https://gofiber.io/) for the Go web framework\n- [Flutter](https://flutter.dev/) for the frontend\n- [Prometheus](https://prometheus.io/) and [Grafana](https://grafana.com/) for monitoring\n\n## Author\n\n**Tom Sapletta** — DevOps Engineer & Systems Architect\n\n- 💻 15+ years in DevOps, Software Development, and Systems Architecture\n- 🏢 Founder & CEO at Telemonit (Portigen - edge computing power solutions)\n- 🌍 Based in Germany | Open to remote collaboration\n- 📚 Passionate about edge computing, hypermodularization, and automated SDLC\n\n[![GitHub](https://img.shields.io/badge/GitHub-181717?logo=github&logoColor=white)](https://github.com/tom-sapletta-com)\n[![LinkedIn](https://img.shields.io/badge/LinkedIn-0077B5?logo=linkedin&logoColor=white)](https://linkedin.com/in/tom-sapletta-com)\n[![ORCID](https://img.shields.io/badge/ORCID-A6CE39?logo=orcid&logoColor=white)](https://orcid.org/0009-0000-6327-2810)\n[![Portfolio](https://img.shields.io/badge/Portfolio-000000?style=flat&logo=about.me&logoColor=white)](https://www.digitname.com/)\n\n## Support This Project\n\nIf you find this project useful, please consider supporting it:\n\n- [GitHub Sponsors](https://github.com/sponsors/tom-sapletta-com)\n- [Open Collective](https://opencollective.com/tom-sapletta-com)\n- [PayPal](https://www.paypal.me/softreck/10.00)\n"
    },
    {
      "name": "setup-keycloak.sh",
      "type": "file",
      "path": "setup-keycloak.sh",
      "size": 4950,
      "content": "#!/bin/bash\n\n# Exit on error\nset -e\n\n# Configuration\nKEYCLOAK_URL=\"http://localhost:8082\"\nADMIN_USER=\"admin\"\nADMIN_PASSWORD=\"admin123\"\nREALM=\"photovault\"\nCLIENT_ID=\"photovault-client\"\nCLIENT_SECRET=\"your-client-secret-here\"  # Change this in production\nREDIRECT_URI=\"http://localhost:8000/*\"\n\n# Wait for Keycloak to be ready\necho \"Waiting for Keycloak to be ready...\"\nuntil $(curl --output /dev/null --silent --head --fail ${KEYCLOAK_URL}/auth/realms/master); do\n    printf '.'\n    sleep 5\ndone\necho \"\\nKeycloak is ready!\"\n\n# Get admin token\nfunction get_admin_token {\n    curl -s \\\n        -d \"client_id=admin-cli\" \\\n        -d \"username=${ADMIN_USER}\" \\\n        -d \"password=${ADMIN_PASSWORD}\" \\\n        -d \"grant_type=password\" \\\n        \"${KEYCLOAK_URL}/realms/master/protocol/openid-connect/token\" | jq -r '.access_token'\n}\n\n# Create realm\nfunction create_realm {\n    local token=$1\n    \n    echo \"Creating realm ${REALM}...\"\n    curl -s -X POST \\\n        -H \"Content-Type: application/json\" \\\n        -H \"Authorization: Bearer ${token}\" \\\n        -d \"{\n            \\\"realm\\\": \\\"${REALM}\\\",\n            \\\"enabled\\\": true,\n            \\\"registrationAllowed\\\": true,\n            \\\"registrationEmailAsUsername\\\": true,\n            \\\"verifyEmail\\\": true,\n            \\\"resetPasswordAllowed\\\": true,\n            \\\"editUsernameAllowed\\\": false,\n            \\\"loginWithEmailAllowed\\\": true,\n            \\\"duplicateEmailsAllowed\\\": false,\n            \\\"bruteForceProtected\\\": true\n        }\" \\\n        \"${KEYCLOAK_URL}/admin/realms\"\n}\n\n# Create client\nfunction create_client {\n    local token=$1\n    \n    echo \"Creating client ${CLIENT_ID}...\"\n    curl -s -X POST \\\n        -H \"Content-Type: application/json\" \\\n        -H \"Authorization: Bearer ${token}\" \\\n        -d \"{\n            \\\"clientId\\\": \\\"${CLIENT_ID}\\\",\n            \\\"enabled\\\": true,\n            \\\"publicClient\\\": false,\n            \\\"redirectUris\\\": [\\\"${REDIRECT_URI}\\\"],\n            \\\"webOrigins\\\": [\\\"*\\\"],\n            \\\"standardFlowEnabled\\\": true,\n            \\\"implicitFlowEnabled\\\": false,\n            \\\"directAccessGrantsEnabled\\\": true,\n            \\\"serviceAccountsEnabled\\\": true,\n            \\\"authorizationServicesEnabled\\\": true,\n            \\\"secret\\\": \\\"${CLIENT_SECRET}\\\",\n            \\\"bearerOnly\\\": false,\n            \\\"consentRequired\\\": false,\n            \\\"fullScopeAllowed\\\": true\n        }\" \\\n        \"${KEYCLOAK_URL}/admin/realms/${REALM}/clients\"\n}\n\n# Create roles\nfunction create_roles {\n    local token=$1\n    \n    local roles=(\"admin\" \"partner\" \"user\")\n    \n    for role in \"${roles[@]}\"; do\n        echo \"Creating role ${role}...\"\n        curl -s -X POST \\\n            -H \"Content-Type: application/json\" \\\n            -H \"Authorization: Bearer ${token}\" \\\n            -d \"{\\\"name\\\": \\\"${role}\\\"}\" \\\n            \"${KEYCLOAK_URL}/admin/realms/${REALM}/roles\"\n    done\n}\n\n# Create admin user\nfunction create_admin_user {\n    local token=$1\n    local username=$2\n    local password=$3\n    \n    echo \"Creating admin user ${username}...\"\n    \n    # Create user\n    local user_id=$(curl -s -X POST \\\n        -H \"Content-Type: application/json\" \\\n        -H \"Authorization: Bearer ${token}\" \\\n        -d \"{\n            \\\"username\\\": \\\"${username}\\\",\n            \\\"email\\\": \\\"${username}@example.com\\\",\n            \\\"enabled\\\": true,\n            \\\"emailVerified\\\": true,\n            \\\"credentials\\\": [{\n                \\\"type\\\": \\\"password\\\",\n                \\\"value\\\": \\\"${password}\\\",\n                \\\"temporary\\\": false\n            }]\n        }\" \\\n        \"${KEYCLOAK_URL}/admin/realms/${REALM}/users\" \\\n        -w \"%{http_code}\" -o /dev/null)\n    \n    # Get user ID\n    local user_id=$(curl -s \\\n        -H \"Authorization: Bearer ${token}\" \\\n        \"${KEYCLOAK_URL}/admin/realms/${REALM}/users?username=${username}\" | jq -r '.[0].id')\n    \n    if [ \"$user_id\" == \"null\" ] || [ -z \"$user_id\" ]; then\n        echo \"Failed to get user ID for ${username}\"\n        return 1\n    fi\n    \n    # Assign admin role\n    curl -s -X POST \\\n        -H \"Content-Type: application/json\" \\\n        -H \"Authorization: Bearer ${token}\" \\\n        -d '[{\"id\":\"admin\",\"name\":\"admin\"}]' \\\n        \"${KEYCLOAK_URL}/admin/realms/${REALM}/users/${user_id}/role-mappings/realm\"\n    \n    echo \"Admin user created with ID: ${user_id}\"\n}\n\n# Main execution\necho \"Starting Keycloak setup...\"\n\n# Get admin token\necho \"Getting admin token...\"\nTOKEN=$(get_admin_token)\n\nif [ -z \"$TOKEN\" ] || [ \"$TOKEN\" == \"null\" ]; then\n    echo \"Failed to get admin token. Check Keycloak credentials and URL.\"\n    exit 1\nfi\n\n# Create realm\ncreate_realm \"$TOKEN\"\n\n# Create client\ncreate_client \"$TOKEN\"\n\n# Create roles\ncreate_roles \"$TOKEN\"\n\n# Create admin user\ncreate_admin_user \"$TOKEN\" \"admin@photovault.com\" \"admin123\"\n\necho \"Keycloak setup completed successfully!\"\necho \"Keycloak Admin URL: ${KEYCLOAK_URL}/admin\"\necho \"Realm: ${REALM}\"\necho \"Client ID: ${CLIENT_ID}\"\necho \"Client Secret: ${CLIENT_SECRET}\"\n"
    },
    {
      "name": "src.txt",
      "type": "file",
      "path": "src.txt",
      "size": 8780,
      "content": "media-vault/\n├── docker-compose.yml\n├── docker-compose.monitoring.yml\n├── docker-compose.infrastructure.yml\n├── .env\n├── Makefile\n├── README.md\n│\n├── keycloak/\n│   ├── keycloak-setup.json\n│   ├── setup-keycloak.sh\n│   └── update-env.sh\n│\n├── caddy/\n│   ├── Caddyfile\n│   └── Caddyfile.prod\n│\n├── monitoring/\n│   ├── prometheus/\n│   │   ├── prometheus.yml\n│   │   └── rules/\n│   │       ├── media-vault.yml\n│   │       └── advanced-alerts.yml\n│   ├── grafana/\n│   │   ├── provisioning/\n│   │   │   ├── dashboards/\n│   │   │   │   └── dashboard.yml\n│   │   │   └── datasources/\n│   │   │       └── prometheus.yml\n│   │   └── dashboards/\n│   │       ├── infrastructure.json\n│   │       ├── application.json\n│   │       ├── security.json\n│   │       └── business.json\n│   ├── alertmanager/\n│   │   └── alertmanager.yml\n│   ├── loki/\n│   │   └── loki.yml\n│   └── promtail/\n│       └── promtail.yml\n│\n├── media-vault-backend/\n│   ├── Dockerfile\n│   ├── go.mod\n│   ├── go.sum\n│   ├── cmd/\n│   │   └── main.go\n│   ├── internal/\n│   │   ├── auth/\n│   │   │   ├── keycloak.go\n│   │   │   ├── middleware.go\n│   │   │   └── roles.go\n│   │   ├── handlers/\n│   │   │   ├── vault.go\n│   │   │   ├── admin.go\n│   │   │   ├── partner.go\n│   │   │   ├── upload.go\n│   │   │   └── photos.go\n│   │   ├── models/\n│   │   │   ├── vault_file.go\n│   │   │   ├── user.go\n│   │   │   ├── photo.go\n│   │   │   └── description.go\n│   │   ├── services/\n│   │   │   ├── vault_service.go\n│   │   │   ├── photo_service.go\n│   │   │   ├── description_service.go\n│   │   │   └── sharing_service.go\n│   │   ├── database/\n│   │   │   ├── sqlite.go\n│   │   │   └── migrations.go\n│   │   └── utils/\n│   │       ├── image_processing.go\n│   │       ├── thumbnails.go\n│   │       └── metadata.go\n│   └── migrations/\n│       ├── 001_initial.sql\n│       ├── 002_photos.sql\n│       └── 003_descriptions.sql\n│\n├── media-vault-analyzer/\n│   ├── Dockerfile\n│   ├── requirements.txt\n│   ├── analyzer.py\n│   ├── processors/\n│   │   ├── image_analyzer.py\n│   │   ├── description_generator.py\n│   │   ├── nsfw_detector.py\n│   │   └── metadata_extractor.py\n│   └── models/\n│       └── nsfw_model.h5\n│\n├── flutter_frontend/\n│   ├── Dockerfile.web\n│   ├── pubspec.yaml\n│   ├── analysis_options.yaml\n│   ├── web/\n│   │   ├── index.html\n│   │   ├── manifest.json\n│   │   ├── favicon.png\n│   │   └── icons/\n│   │       ├── Icon-192.png\n│   │       └── Icon-512.png\n│   ├── lib/\n│   │   ├── main.dart\n│   │   ├── services/\n│   │   │   ├── auth_service.dart\n│   │   │   ├── media_vault_service.dart\n│   │   │   ├── photo_service.dart\n│   │   │   └── description_service.dart\n│   │   ├── providers/\n│   │   │   ├── vault_provider.dart\n│   │   │   ├── photo_provider.dart\n│   │   │   └── user_provider.dart\n│   │   ├── models/\n│   │   │   ├── vault_file.dart\n│   │   │   ├── photo.dart\n│   │   │   ├── user.dart\n│   │   │   └── description.dart\n│   │   ├── screens/\n│   │   │   ├── login_screen.dart\n│   │   │   ├── vault_home_screen.dart\n│   │   │   ├── user/\n│   │   │   │   ├── user_dashboard.dart\n│   │   │   │   ├── photo_upload.dart\n│   │   │   │   ├── photo_gallery.dart\n│   │   │   │   ├── photo_detail.dart\n│   │   │   │   └── description_editor.dart\n│   │   │   ├── admin/\n│   │   │   │   ├── admin_dashboard.dart\n│   │   │   │   ├── user_management.dart\n│   │   │   │   ├── system_stats.dart\n│   │   │   │   ├── content_moderation.dart\n│   │   │   │   └── security_logs.dart\n│   │   │   └── partner/\n│   │   │       ├── partner_dashboard.dart\n│   │   │       ├── bulk_upload.dart\n│   │   │       ├── photo_management.dart\n│   │   │       ├── batch_editor.dart\n│   │   │       ├── sharing_management.dart\n│   │   │       └── analytics.dart\n│   │   ├── widgets/\n│   │   │   ├── photo_card.dart\n│   │   │   ├── upload_zone.dart\n│   │   │   ├── description_panel.dart\n│   │   │   ├── sharing_dialog.dart\n│   │   │   ├── bulk_operations.dart\n│   │   │   └── role_guard.dart\n│   │   └── utils/\n│   │       ├── constants.dart\n│   │       ├── theme.dart\n│   │       ├── validators.dart\n│   │       └── permissions.dart\n│   └── assets/\n│       ├── images/\n│       │   ├── logo.png\n│       │   └── placeholder.png\n│       └── icons/\n│           └── app_icon.png\n│\n├── media-vault-admin/\n│   ├── Dockerfile\n│   ├── nginx.conf\n│   ├── src/\n│   │   ├── index.html\n│   │   ├── users.html\n│   │   ├── system.html\n│   │   ├── security.html\n│   │   ├── js/\n│   │   │   ├── vault-admin.js\n│   │   │   ├── keycloak-admin.js\n│   │   │   ├── user-management.js\n│   │   │   ├── system-monitoring.js\n│   │   │   └── charts.js\n│   │   └── css/\n│   │       ├── admin.css\n│   │       └── dashboard.css\n│   └── config/\n│       └── admin-config.js\n│\n├── nsfw-analyzer/\n│   ├── Dockerfile\n│   ├── requirements.txt\n│   ├── analyzer.py\n│   ├── model_loader.py\n│   └── models/\n│       └── nsfw_mobilenet.h5\n│\n├── scripts/\n│   ├── infrastructure-setup.sh\n│   ├── infrastructure-health.sh\n│   ├── performance-report.sh\n│   ├── automation/\n│   │   ├── incident-handler.sh\n│   │   └── auto-scaling.sh\n│   ├── capacity/\n│   │   └── capacity_planner.py\n│   ├── optimization/\n│   │   └── optimize.sh\n│   ├── backup/\n│   │   ├── backup.sh\n│   │   └── restore.sh\n│   └── security/\n│       ├── security-scan.sh\n│       └── audit.sh\n│\n├── data/\n│   ├── media.db\n│   ├── backups/\n│   └── logs/\n│\n├── uploads/\n│   ├── originals/\n│   ├── thumbnails/\n│   └── processed/\n│\n├── processing/\n│   ├── incoming/\n│   └── temp/\n│\n├── docs/\n│   ├── API.md\n│   ├── DEPLOYMENT.md\n│   ├── ARCHITECTURE.md\n│   ├── MONITORING.md\n│   ├── SECURITY.md\n│   └── USER_GUIDE.md\n│\n├── tests/\n│   ├── backend/\n│   │   ├── auth_test.go\n│   │   ├── handlers_test.go\n│   │   └── services_test.go\n│   ├── frontend/\n│   │   └── test/\n│   │       ├── widget_test.dart\n│   │       └── integration_test.dart\n│   └── e2e/\n│       ├── user_flow_test.js\n│       └── admin_flow_test.js\n│\n├── deployment/\n│   ├── kubernetes/\n│   │   ├── namespace.yaml\n│   │   ├── configmap.yaml\n│   │   ├── secrets.yaml\n│   │   ├── deployments.yaml\n│   │   ├── services.yaml\n│   │   ├── ingress.yaml\n│   │   └── monitoring.yaml\n│   ├── helm/\n│   │   ├── Chart.yaml\n│   │   ├── values.yaml\n│   │   ├── values-prod.yaml\n│   │   └── templates/\n│   └── terraform/\n│       ├── main.tf\n│       ├── variables.tf\n│       └── outputs.tf\n│\n└── tools/\n    ├── format.sh\n    ├── lint.sh\n    ├── test.sh\n    ├── build.sh\n    └── deploy.sh"
    },
    {
      "name": "TODO.md",
      "type": "file",
      "path": "TODO.md",
      "size": 2165,
      "content": "# Media Vault - Project Status & TODO List\n\n## Current Status (2025-05-30)\n\n### ✅ Working Components\n- Basic Docker Compose setup\n- Keycloak database (PostgreSQL) is running\n- Monitoring stack (Prometheus, Grafana, Alertmanager)\n- Basic backend structure\n\n### ⚠️ Known Issues\n1. Keycloak database connection issue - PostgreSQL driver not properly configured\n2. Some monitoring services are restarting (cAdvisor, Alertmanager, Grafana)\n3. Backend services not fully implemented\n\n## High Priority\n- [ ] Fix Keycloak PostgreSQL configuration\n  - [ ] Add PostgreSQL JDBC driver to Keycloak\n  - [ ] Verify database connection settings\n  - [ ] Test authentication flow\n- [ ] Complete Keycloak authentication implementation\n- [ ] Implement database migrations\n- [ ] Set up proper logging and monitoring\n- [ ] Complete API documentation\n- [ ] Implement proper error handling and validation\n\n## Backend\n- [ ] Complete authentication middleware\n- [ ] Implement file storage service\n- [ ] Add image processing capabilities\n- [ ] Implement NSFW content detection\n- [ ] Add API rate limiting\n\n## Frontend\n- [ ] Set up Flutter web interface\n- [ ] Create admin dashboard\n- [ ] Implement file upload functionality\n- [ ] Add user management interface\n\n## Infrastructure\n- [ ] Fix monitoring stack issues\n  - [ ] Resolve cAdvisor restart issues\n  - [ ] Configure Grafana dashboards\n  - [ ] Set up alerts in Alertmanager\n- [ ] Set up CI/CD pipeline\n- [ ] Configure production environment\n- [ ] Implement backup strategy\n\n## Testing\n- [ ] Write unit tests\n- [ ] Implement integration tests\n- [ ] Set up E2E testing\n- [ ] Performance testing\n\n## Documentation\n- [ ] Document Keycloak setup and configuration\n- [ ] Complete API documentation\n- [ ] Write deployment guide\n- [ ] Create user manual\n- [ ] Document security measures\n\n## Immediate Next Steps\n1. Fix Keycloak PostgreSQL configuration\n2. Resolve monitoring stack issues\n3. Implement basic authentication flow\n4. Set up initial database schema\n\n## Blockers\n- Keycloak database connection needs to be resolved before proceeding with authentication\n- Monitoring stack stability needs to be addressed for reliable operations\n"
    }
  ]
}